
DRV_HELL_Pos_offset.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013800  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08013ad0  08013ad0  00023ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013c6c  08013c6c  00023c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013c70  08013c70  00023c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  24000000  08013c74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000024d4  240001f0  08013e64  000301f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240026c4  08013e64  000326c4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00044f06  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006380  00000000  00000000  00075124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002460  00000000  00000000  0007b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002238  00000000  00000000  0007d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000091fd  00000000  00000000  0007fb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002ca0c  00000000  00000000  00088d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017953b  00000000  00000000  000b5749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0022ec84  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000a630  00000000  00000000  0022ecd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f0 	.word	0x240001f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013ab8 	.word	0x08013ab8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f4 	.word	0x240001f4
 800030c:	08013ab8 	.word	0x08013ab8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <write_to_reg>:
 *  Created on: Oct 1, 2021
 *      Author: LoganRosenmayer
 */
#include "drv8350s.h"

void write_to_reg(SPI_HandleTypeDef* spi_handler, uint16_t reg, uint16_t data){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	807b      	strh	r3, [r7, #2]
 80003cc:	4613      	mov	r3, r2
 80003ce:	803b      	strh	r3, [r7, #0]
	uint16_t message = (reg&0x000f)<<11;
 80003d0:	887b      	ldrh	r3, [r7, #2]
 80003d2:	02db      	lsls	r3, r3, #11
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 80003da:	b29b      	uxth	r3, r3
 80003dc:	81fb      	strh	r3, [r7, #14]
	message|= data&0x07ff;
 80003de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80003e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80003e6:	b21a      	sxth	r2, r3
 80003e8:	89fb      	ldrh	r3, [r7, #14]
 80003ea:	b21b      	sxth	r3, r3
 80003ec:	4313      	orrs	r3, r2
 80003ee:	b21b      	sxth	r3, r3
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_Transmit(spi_handler, (uint8_t*) &message, 1, 100);
 80003f4:	f107 010e 	add.w	r1, r7, #14
 80003f8:	2364      	movs	r3, #100	; 0x64
 80003fa:	2201      	movs	r2, #1
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f00c fc51 	bl	800cca4 <HAL_SPI_Transmit>
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <read_reg>:

uint16_t read_reg(SPI_HandleTypeDef* spi_handler, uint16_t reg){
 800040a:	b580      	push	{r7, lr}
 800040c:	b086      	sub	sp, #24
 800040e:	af02      	add	r7, sp, #8
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	460b      	mov	r3, r1
 8000414:	807b      	strh	r3, [r7, #2]
	uint16_t reg_val;
	uint16_t message = ((reg&0x000f)<<11)+0x8000;
 8000416:	887b      	ldrh	r3, [r7, #2]
 8000418:	02db      	lsls	r3, r3, #11
 800041a:	b29b      	uxth	r3, r3
 800041c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8000420:	b29b      	uxth	r3, r3
 8000422:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000426:	b29b      	uxth	r3, r3
 8000428:	81bb      	strh	r3, [r7, #12]
	HAL_SPI_TransmitReceive(spi_handler, &message, (uint8_t*) &reg_val, 1, 100);
 800042a:	f107 020e 	add.w	r2, r7, #14
 800042e:	f107 010c 	add.w	r1, r7, #12
 8000432:	2364      	movs	r3, #100	; 0x64
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	2301      	movs	r3, #1
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f00c fe25 	bl	800d088 <HAL_SPI_TransmitReceive>
	return(reg_val);
 800043e:	89fb      	ldrh	r3, [r7, #14]
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <read_fault_reg>:

uint16_t read_fault_reg(SPI_HandleTypeDef* spi_handler){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,FAULT_STATUS) & 0xfff);
 8000450:	2100      	movs	r1, #0
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff ffd9 	bl	800040a <read_reg>
 8000458:	4603      	mov	r3, r0
 800045a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800045e:	b29b      	uxth	r3, r3
}
 8000460:	4618      	mov	r0, r3
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <read_vgs_reg>:

uint16_t read_vgs_reg(SPI_HandleTypeDef* spi_handler){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,VGS_STATUS) & 0xfff);
 8000470:	2101      	movs	r1, #1
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f7ff ffc9 	bl	800040a <read_reg>
 8000478:	4603      	mov	r3, r0
 800047a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	4618      	mov	r0, r3
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <set_driver_ctrl_reg>:

void set_driver_ctrl_reg(SPI_HandleTypeDef* spi_handler, uint_fast16_t ocp_act, uint_fast16_t dis_gduv, uint_fast16_t dis_gdf, uint_fast16_t otw_rep,	uint_fast16_t pwm_mode,
		uint_fast16_t pwm1_mode, uint_fast16_t pwm1_dir, uint_fast16_t coast, uint_fast16_t brake){
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
 8000494:	603b      	str	r3, [r7, #0]
	uint16_t data = (ocp_act<<10) | (dis_gduv<<9) | (otw_rep<<8) | (otw_rep<<7) | (pwm_mode<<5) | (pwm1_mode<<4) |
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	b29b      	uxth	r3, r3
 800049a:	029b      	lsls	r3, r3, #10
 800049c:	b29a      	uxth	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	025b      	lsls	r3, r3, #9
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	4313      	orrs	r3, r2
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	6a3b      	ldr	r3, [r7, #32]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	021b      	lsls	r3, r3, #8
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	4313      	orrs	r3, r2
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	6a3b      	ldr	r3, [r7, #32]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	01db      	lsls	r3, r3, #7
 80004bc:	b29b      	uxth	r3, r3
 80004be:	4313      	orrs	r3, r2
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	015b      	lsls	r3, r3, #5
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	4313      	orrs	r3, r2
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	4313      	orrs	r3, r2
 80004d8:	b29a      	uxth	r2, r3
			(pwm1_dir<<3) | (coast<<2) | (brake<<1);
 80004da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004dc:	b29b      	uxth	r3, r3
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	b29b      	uxth	r3, r3
	uint16_t data = (ocp_act<<10) | (dis_gduv<<9) | (otw_rep<<8) | (otw_rep<<7) | (pwm_mode<<5) | (pwm1_mode<<4) |
 80004e2:	4313      	orrs	r3, r2
 80004e4:	b29a      	uxth	r2, r3
			(pwm1_dir<<3) | (coast<<2) | (brake<<1);
 80004e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	b29b      	uxth	r3, r3
	uint16_t data = (ocp_act<<10) | (dis_gduv<<9) | (otw_rep<<8) | (otw_rep<<7) | (pwm_mode<<5) | (pwm1_mode<<4) |
 80004fa:	4313      	orrs	r3, r2
 80004fc:	82fb      	strh	r3, [r7, #22]
	write_to_reg(spi_handler, DRIVER_CTRL, data);
 80004fe:	8afb      	ldrh	r3, [r7, #22]
 8000500:	461a      	mov	r2, r3
 8000502:	2102      	movs	r1, #2
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	f7ff ff5b 	bl	80003c0 <write_to_reg>
}
 800050a:	bf00      	nop
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <read_driver_ctrl_reg>:

uint16_t read_driver_ctrl_reg(SPI_HandleTypeDef* spi_handler){
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,DRIVER_CTRL) & 0xfff);
 800051a:	2102      	movs	r1, #2
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ff74 	bl	800040a <read_reg>
 8000522:	4603      	mov	r3, r0
 8000524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000528:	b29b      	uxth	r3, r3
}
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <set_hs_driver_reg>:

void set_hs_driver_reg(SPI_HandleTypeDef* spi_handler, uint_fast16_t lock, uint_fast16_t idrvp_hs, uint_fast16_t idrvn_hs){
 8000532:	b580      	push	{r7, lr}
 8000534:	b086      	sub	sp, #24
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
 800053e:	603b      	str	r3, [r7, #0]
	uint16_t data = (lock<<8) | (idrvp_hs<<4) | idrvn_hs;
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	b29b      	uxth	r3, r3
 8000544:	021b      	lsls	r3, r3, #8
 8000546:	b29a      	uxth	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	b29b      	uxth	r3, r3
 800054c:	011b      	lsls	r3, r3, #4
 800054e:	b29b      	uxth	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b29a      	uxth	r2, r3
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	b29b      	uxth	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	82fb      	strh	r3, [r7, #22]
	write_to_reg(spi_handler, HS_GATE_DRV, data);
 800055c:	8afb      	ldrh	r3, [r7, #22]
 800055e:	461a      	mov	r2, r3
 8000560:	2103      	movs	r1, #3
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f7ff ff2c 	bl	80003c0 <write_to_reg>
}
 8000568:	bf00      	nop
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <read_hs_driver_reg>:

uint16_t read_hs_driver_reg(SPI_HandleTypeDef* spi_handler){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,HS_GATE_DRV));
 8000578:	2103      	movs	r1, #3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff ff45 	bl	800040a <read_reg>
 8000580:	4603      	mov	r3, r0
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <set_ls_driver_ctrl_reg>:

void set_ls_driver_ctrl_reg(SPI_HandleTypeDef* spi_handler, uint_fast16_t cbc, uint_fast16_t tdrive, uint_fast16_t idrvp_ls, uint_fast16_t idrvn_ls){
 800058a:	b580      	push	{r7, lr}
 800058c:	b086      	sub	sp, #24
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
 8000596:	603b      	str	r3, [r7, #0]
	uint16_t data = (cbc<<10)| (tdrive<<8) | (idrvp_ls<<4) | idrvn_ls;
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	b29b      	uxth	r3, r3
 800059c:	029b      	lsls	r3, r3, #10
 800059e:	b29a      	uxth	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	021b      	lsls	r3, r3, #8
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	6a3b      	ldr	r3, [r7, #32]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	82fb      	strh	r3, [r7, #22]
	write_to_reg(spi_handler, LS_GATE_DRV, data);
 80005c0:	8afb      	ldrh	r3, [r7, #22]
 80005c2:	461a      	mov	r2, r3
 80005c4:	2104      	movs	r1, #4
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	f7ff fefa 	bl	80003c0 <write_to_reg>
}
 80005cc:	bf00      	nop
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <read_ls_driver_reg>:

uint16_t read_ls_driver_reg(SPI_HandleTypeDef* spi_handler){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,LS_GATE_DRV));
 80005dc:	2104      	movs	r1, #4
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ff13 	bl	800040a <read_reg>
 80005e4:	4603      	mov	r3, r0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <set_ocp_ctrl_reg>:

void set_ocp_ctrl_reg(SPI_HandleTypeDef* spi_handler, uint_fast16_t retry_time, uint_fast16_t dead_time, uint_fast16_t mode, uint_fast16_t deglitch, uint_fast16_t vds_lvl){
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	603b      	str	r3, [r7, #0]
	uint16_t data = (retry_time<<10) | (dead_time<<8) | (mode<<6) | (deglitch<<4) | vds_lvl;
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	029b      	lsls	r3, r3, #10
 8000602:	b29a      	uxth	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	b29b      	uxth	r3, r3
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b29b      	uxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b29a      	uxth	r2, r3
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	b29b      	uxth	r3, r3
 8000614:	019b      	lsls	r3, r3, #6
 8000616:	b29b      	uxth	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b29a      	uxth	r2, r3
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	b29b      	uxth	r3, r3
 8000620:	011b      	lsls	r3, r3, #4
 8000622:	b29b      	uxth	r3, r3
 8000624:	4313      	orrs	r3, r2
 8000626:	b29a      	uxth	r2, r3
 8000628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062a:	b29b      	uxth	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	82fb      	strh	r3, [r7, #22]
	write_to_reg(spi_handler, OCP_CTRL, data);
 8000630:	8afb      	ldrh	r3, [r7, #22]
 8000632:	461a      	mov	r2, r3
 8000634:	2105      	movs	r1, #5
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f7ff fec2 	bl	80003c0 <write_to_reg>
}
 800063c:	bf00      	nop
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <read_ocp_reg>:

uint16_t read_ocp_reg(SPI_HandleTypeDef* spi_handler){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,OCP_CTRL));
 800064c:	2105      	movs	r1, #5
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff fedb 	bl	800040a <read_reg>
 8000654:	4603      	mov	r3, r0
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <read_all_regs>:

void read_all_regs(SPI_HandleTypeDef* spi_handler,uint16_t * reg_data){
 800065e:	b590      	push	{r4, r7, lr}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
	reg_data[0] = read_fault_reg(spi_handler);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff feed 	bl	8000448 <read_fault_reg>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	801a      	strh	r2, [r3, #0]
	reg_data[1] = read_vgs_reg(spi_handler);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	1c9c      	adds	r4, r3, #2
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff fef4 	bl	8000468 <read_vgs_reg>
 8000680:	4603      	mov	r3, r0
 8000682:	8023      	strh	r3, [r4, #0]
	reg_data[2] = read_driver_ctrl_reg(spi_handler);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	1d1c      	adds	r4, r3, #4
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff42 	bl	8000512 <read_driver_ctrl_reg>
 800068e:	4603      	mov	r3, r0
 8000690:	8023      	strh	r3, [r4, #0]
	reg_data[3] = read_hs_driver_reg(spi_handler);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	1d9c      	adds	r4, r3, #6
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff6a 	bl	8000570 <read_hs_driver_reg>
 800069c:	4603      	mov	r3, r0
 800069e:	8023      	strh	r3, [r4, #0]
	reg_data[4] = read_ls_driver_reg(spi_handler);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	f103 0408 	add.w	r4, r3, #8
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ff94 	bl	80005d4 <read_ls_driver_reg>
 80006ac:	4603      	mov	r3, r0
 80006ae:	8023      	strh	r3, [r4, #0]
	reg_data[5] = read_ocp_reg(spi_handler);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	f103 040a 	add.w	r4, r3, #10
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ffc4 	bl	8000644 <read_ocp_reg>
 80006bc:	4603      	mov	r3, r0
 80006be:	8023      	strh	r3, [r4, #0]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd90      	pop	{r4, r7, pc}

080006c8 <clear_flt>:

void clear_flt(SPI_HandleTypeDef* spi_handler){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	uint_fast16_t temp = read_driver_ctrl_reg(spi_handler)|0x01;
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff1e 	bl	8000512 <read_driver_ctrl_reg>
 80006d6:	4603      	mov	r3, r0
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	b29b      	uxth	r3, r3
 80006de:	60fb      	str	r3, [r7, #12]
	write_to_reg(spi_handler, DRIVER_CTRL, temp);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	2102      	movs	r1, #2
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff fe69 	bl	80003c0 <write_to_reg>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b09a      	sub	sp, #104	; 0x68
 80006fc:	af06      	add	r7, sp, #24
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <main+0x4c>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d11e      	bne.n	8000748 <main+0x50>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800070a:	f3bf 8f4f 	dsb	sy
}
 800070e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000710:	f3bf 8f6f 	isb	sy
}
 8000714:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <main+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800071e:	f3bf 8f4f 	dsb	sy
}
 8000722:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000724:	f3bf 8f6f 	isb	sy
}
 8000728:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <main+0x4c>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <main+0x4c>)
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000736:	f3bf 8f4f 	dsb	sy
}
 800073a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800073c:	f3bf 8f6f 	isb	sy
}
 8000740:	e003      	b.n	800074a <main+0x52>
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000748:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074a:	f002 fbc5 	bl	8002ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074e:	f000 fa07 	bl	8000b60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000752:	f000 fa79 	bl	8000c48 <PeriphCommonClock_Config>
//  volatile uint32_t adc1;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f001 fa45 	bl	8001be4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800075a:	f000 fa91 	bl	8000c80 <MX_ADC1_Init>
  MX_ADC2_Init();
 800075e:	f000 fb37 	bl	8000dd0 <MX_ADC2_Init>
  MX_CORDIC_Init();
 8000762:	f000 fc3b 	bl	8000fdc <MX_CORDIC_Init>
  MX_DFSDM1_Init();
 8000766:	f000 fc4d 	bl	8001004 <MX_DFSDM1_Init>
  MX_FDCAN1_Init();
 800076a:	f000 fdd9 	bl	8001320 <MX_FDCAN1_Init>
  MX_FMAC_Init();
 800076e:	f000 fe3b 	bl	80013e8 <MX_FMAC_Init>
  MX_SPI2_Init();
 8000772:	f000 fe4d 	bl	8001410 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000776:	f000 fea3 	bl	80014c0 <MX_SPI3_Init>
  MX_SPI4_Init();
 800077a:	f000 fef9 	bl	8001570 <MX_SPI4_Init>
  MX_SPI6_Init();
 800077e:	f000 ff51 	bl	8001624 <MX_SPI6_Init>
  MX_TIM1_Init();
 8000782:	f000 ffa7 	bl	80016d4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000786:	f001 f92f 	bl	80019e8 <MX_TIM8_Init>
  MX_ADC3_Init();
 800078a:	f000 fba7 	bl	8000edc <MX_ADC3_Init>
  MX_DMA_Init();
 800078e:	f001 f9f9 	bl	8001b84 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000792:	f011 fcaf 	bl	80120f4 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000796:	f001 f8af 	bl	80018f8 <MX_TIM4_Init>
  MX_TIM2_Init();
 800079a:	f001 f85f 	bl	800185c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2102      	movs	r1, #2
 80007a2:	48be      	ldr	r0, [pc, #760]	; (8000a9c <main+0x3a4>)
 80007a4:	f007 ffbc 	bl	8008720 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRD_EN_GPIO_Port, BRD_EN_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2104      	movs	r1, #4
 80007ac:	48bb      	ldr	r0, [pc, #748]	; (8000a9c <main+0x3a4>)
 80007ae:	f007 ffb7 	bl	8008720 <HAL_GPIO_WritePin>
  HAL_Delay (100);
 80007b2:	2064      	movs	r0, #100	; 0x64
 80007b4:	f002 fc22 	bl	8002ffc <HAL_Delay>
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0) != HAL_OK){
 80007b8:	48b9      	ldr	r0, [pc, #740]	; (8000aa0 <main+0x3a8>)
 80007ba:	f005 f84b 	bl	8005854 <HAL_DFSDM_FilterRegularStart>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <main+0xd0>
	  Error_Handler();
 80007c4:	f001 faca 	bl	8001d5c <Error_Handler>
  }
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1) != HAL_OK){
 80007c8:	48b6      	ldr	r0, [pc, #728]	; (8000aa4 <main+0x3ac>)
 80007ca:	f005 f843 	bl	8005854 <HAL_DFSDM_FilterRegularStart>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <main+0xe0>
	  Error_Handler();
 80007d4:	f001 fac2 	bl	8001d5c <Error_Handler>
  }
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter2) != HAL_OK){
 80007d8:	48b3      	ldr	r0, [pc, #716]	; (8000aa8 <main+0x3b0>)
 80007da:	f005 f83b 	bl	8005854 <HAL_DFSDM_FilterRegularStart>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <main+0xf0>
	  Error_Handler();
 80007e4:	f001 faba 	bl	8001d5c <Error_Handler>
  }
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter3) != HAL_OK){
 80007e8:	48b0      	ldr	r0, [pc, #704]	; (8000aac <main+0x3b4>)
 80007ea:	f005 f833 	bl	8005854 <HAL_DFSDM_FilterRegularStart>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <main+0x100>
	  Error_Handler();
 80007f4:	f001 fab2 	bl	8001d5c <Error_Handler>
  }
  HAL_TIM_Base_Start_IT(&htim1);
 80007f8:	48ad      	ldr	r0, [pc, #692]	; (8000ab0 <main+0x3b8>)
 80007fa:	f00d f8ef 	bl	800d9dc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007fe:	2100      	movs	r1, #0
 8000800:	48ab      	ldr	r0, [pc, #684]	; (8000ab0 <main+0x3b8>)
 8000802:	f00d fa33 	bl	800dc6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000806:	2104      	movs	r1, #4
 8000808:	48a9      	ldr	r0, [pc, #676]	; (8000ab0 <main+0x3b8>)
 800080a:	f00d fa2f 	bl	800dc6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800080e:	2108      	movs	r1, #8
 8000810:	48a7      	ldr	r0, [pc, #668]	; (8000ab0 <main+0x3b8>)
 8000812:	f00d fa2b 	bl	800dc6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000816:	210c      	movs	r1, #12
 8000818:	48a5      	ldr	r0, [pc, #660]	; (8000ab0 <main+0x3b8>)
 800081a:	f00d fa27 	bl	800dc6c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800081e:	48a5      	ldr	r0, [pc, #660]	; (8000ab4 <main+0x3bc>)
 8000820:	f00d f8dc 	bl	800d9dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 8000824:	48a4      	ldr	r0, [pc, #656]	; (8000ab8 <main+0x3c0>)
 8000826:	f00d f85b 	bl	800d8e0 <HAL_TIM_Base_Start>
//  HAL_TIM_Base_Start_IT(&htim8);
  TIM4->CCER = 0b0000010101010101;
 800082a:	4ba4      	ldr	r3, [pc, #656]	; (8000abc <main+0x3c4>)
 800082c:	f240 5255 	movw	r2, #1365	; 0x555
 8000830:	621a      	str	r2, [r3, #32]
  TIM4->CCR1 = 10000;
 8000832:	4ba2      	ldr	r3, [pc, #648]	; (8000abc <main+0x3c4>)
 8000834:	f242 7210 	movw	r2, #10000	; 0x2710
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCER = 0b0000010101010101;
 800083a:	4ba1      	ldr	r3, [pc, #644]	; (8000ac0 <main+0x3c8>)
 800083c:	f240 5255 	movw	r2, #1365	; 0x555
 8000840:	621a      	str	r2, [r3, #32]
  TIM1->CCR1 = 0;
 8000842:	4b9f      	ldr	r3, [pc, #636]	; (8000ac0 <main+0x3c8>)
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8000848:	4b9d      	ldr	r3, [pc, #628]	; (8000ac0 <main+0x3c8>)
 800084a:	2200      	movs	r2, #0
 800084c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 800084e:	4b9c      	ldr	r3, [pc, #624]	; (8000ac0 <main+0x3c8>)
 8000850:	2200      	movs	r2, #0
 8000852:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 8000854:	4b9a      	ldr	r3, [pc, #616]	; (8000ac0 <main+0x3c8>)
 8000856:	2200      	movs	r2, #0
 8000858:	641a      	str	r2, [r3, #64]	; 0x40
  uint8_t *data = "Hello World from USB CDC123\n";
 800085a:	4b9a      	ldr	r3, [pc, #616]	; (8000ac4 <main+0x3cc>)
 800085c:	643b      	str	r3, [r7, #64]	; 0x40
  int bad_ret=0;
 800085e:	2300      	movs	r3, #0
 8000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  float current_C1 = 0,current_A1 = 0,current_C2 = 0,current_A2 = 0;
 8000862:	f04f 0300 	mov.w	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
 800086e:	f04f 0300 	mov.w	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  float prev_angle,angle_sum;
  uint8_t result=0;
 800087a:	2300      	movs	r3, #0
 800087c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t channel1 = 0,channel2 = 0,channel4 = 0,channel5 = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  uint16_t length=strlen(data);
 8000890:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000892:	f7ff fd3d 	bl	8000310 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t regs_data[6]={0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
  HAL_ADC_Start_DMA(&hadc1, adc1, 4);
 80008a4:	2204      	movs	r2, #4
 80008a6:	4988      	ldr	r1, [pc, #544]	; (8000ac8 <main+0x3d0>)
 80008a8:	4888      	ldr	r0, [pc, #544]	; (8000acc <main+0x3d4>)
 80008aa:	f003 f8f9 	bl	8003aa0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adc2, 3);
 80008ae:	2203      	movs	r2, #3
 80008b0:	4987      	ldr	r1, [pc, #540]	; (8000ad0 <main+0x3d8>)
 80008b2:	4888      	ldr	r0, [pc, #544]	; (8000ad4 <main+0x3dc>)
 80008b4:	f003 f8f4 	bl	8003aa0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, adc3, 2);
 80008b8:	2202      	movs	r2, #2
 80008ba:	4987      	ldr	r1, [pc, #540]	; (8000ad8 <main+0x3e0>)
 80008bc:	4887      	ldr	r0, [pc, #540]	; (8000adc <main+0x3e4>)
 80008be:	f003 f8ef 	bl	8003aa0 <HAL_ADC_Start_DMA>

  // Setup DRV
  HAL_GPIO_WritePin(DRV1_EN_GPIO_Port, DRV1_EN_Pin, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c8:	4885      	ldr	r0, [pc, #532]	; (8000ae0 <main+0x3e8>)
 80008ca:	f007 ff29 	bl	8008720 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV2_EN_GPIO_Port, DRV2_EN_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2108      	movs	r1, #8
 80008d2:	4883      	ldr	r0, [pc, #524]	; (8000ae0 <main+0x3e8>)
 80008d4:	f007 ff24 	bl	8008720 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, FAULT_LED_Pin|BRD_EN_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2106      	movs	r1, #6
 80008dc:	486f      	ldr	r0, [pc, #444]	; (8000a9c <main+0x3a4>)
 80008de:	f007 ff1f 	bl	8008720 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(INV1_EN_GPIO_Port, INV1_EN_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	487e      	ldr	r0, [pc, #504]	; (8000ae4 <main+0x3ec>)
 80008ea:	f007 ff19 	bl	8008720 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi6, &request_pos, (uint8_t*) &position, 1, 100);
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	4a7c      	ldr	r2, [pc, #496]	; (8000ae8 <main+0x3f0>)
 80008f6:	497d      	ldr	r1, [pc, #500]	; (8000aec <main+0x3f4>)
 80008f8:	487d      	ldr	r0, [pc, #500]	; (8000af0 <main+0x3f8>)
 80008fa:	f00c fbc5 	bl	800d088 <HAL_SPI_TransmitReceive>

  //spi setup
  set_driver_ctrl_reg(&hspi2, SHUTDOWN_ALL_BRIDGES, UVLO_EN, GATE_DRV_FAULT_EN, OTW_REPORT_EN, PWM_3X, SYNC_RECT, CW, COAST_DIS, NO_TPS);
 80008fe:	2300      	movs	r3, #0
 8000900:	9305      	str	r3, [sp, #20]
 8000902:	2300      	movs	r3, #0
 8000904:	9304      	str	r3, [sp, #16]
 8000906:	2300      	movs	r3, #0
 8000908:	9303      	str	r3, [sp, #12]
 800090a:	2300      	movs	r3, #0
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	2300      	movs	r3, #0
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2300      	movs	r3, #0
 8000918:	2200      	movs	r2, #0
 800091a:	2101      	movs	r1, #1
 800091c:	4875      	ldr	r0, [pc, #468]	; (8000af4 <main+0x3fc>)
 800091e:	f7ff fdb3 	bl	8000488 <set_driver_ctrl_reg>
  set_hs_driver_reg(&hspi2, UNLOCK_REGS, IDRIVEP_1000MA, IDRIVEN_1200MA);
 8000922:	2309      	movs	r3, #9
 8000924:	220f      	movs	r2, #15
 8000926:	2103      	movs	r1, #3
 8000928:	4872      	ldr	r0, [pc, #456]	; (8000af4 <main+0x3fc>)
 800092a:	f7ff fe02 	bl	8000532 <set_hs_driver_reg>
  set_ls_driver_ctrl_reg(&hspi2, RETRY_ONLY, PK_CUR_2000NS, IDRIVEP_1000MA, IDRIVEN_1200MA);
 800092e:	2309      	movs	r3, #9
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	230f      	movs	r3, #15
 8000934:	2202      	movs	r2, #2
 8000936:	2100      	movs	r1, #0
 8000938:	486e      	ldr	r0, [pc, #440]	; (8000af4 <main+0x3fc>)
 800093a:	f7ff fe26 	bl	800058a <set_ls_driver_ctrl_reg>
  set_ocp_ctrl_reg(&hspi2, RETRY_8MS, DEAD_TIME_200NS, OC_LATCHED, OCP_DEG_8US, VDS_LVL_1_0V);
 800093e:	230d      	movs	r3, #13
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	2303      	movs	r3, #3
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2300      	movs	r3, #0
 8000948:	2202      	movs	r2, #2
 800094a:	2100      	movs	r1, #0
 800094c:	4869      	ldr	r0, [pc, #420]	; (8000af4 <main+0x3fc>)
 800094e:	f7ff fe4e 	bl	80005ee <set_ocp_ctrl_reg>
  HAL_Delay (10);
 8000952:	200a      	movs	r0, #10
 8000954:	f002 fb52 	bl	8002ffc <HAL_Delay>
  clear_flt(&hspi2);
 8000958:	4866      	ldr	r0, [pc, #408]	; (8000af4 <main+0x3fc>)
 800095a:	f7ff feb5 	bl	80006c8 <clear_flt>
  HAL_Delay (10);
 800095e:	200a      	movs	r0, #10
 8000960:	f002 fb4c 	bl	8002ffc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_all_regs(&hspi2,regs_data);
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	4862      	ldr	r0, [pc, #392]	; (8000af4 <main+0x3fc>)
 800096a:	f7ff fe78 	bl	800065e <read_all_regs>
	  //	  CDC_Transmit_HS(data,length);
	  //	  uint32_t debug_A1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1, &channel2);
	  //	  uint32_t debug_C1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &channel1);
	  current_C1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &channel1)*CURRENT_A_SCALER;
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	4619      	mov	r1, r3
 8000974:	484a      	ldr	r0, [pc, #296]	; (8000aa0 <main+0x3a8>)
 8000976:	f004 ff88 	bl	800588a <HAL_DFSDM_FilterGetRegularValue>
 800097a:	ee07 0a90 	vmov	s15, r0
 800097e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000982:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000af8 <main+0x400>
 8000986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  current_A1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1, &channel2)*CURRENT_A_SCALER;
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4843      	ldr	r0, [pc, #268]	; (8000aa4 <main+0x3ac>)
 8000996:	f004 ff78 	bl	800588a <HAL_DFSDM_FilterGetRegularValue>
 800099a:	ee07 0a90 	vmov	s15, r0
 800099e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000af8 <main+0x400>
 80009a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009aa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  current_C2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter2, &channel4)*CURRENT_A_SCALER;
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	483c      	ldr	r0, [pc, #240]	; (8000aa8 <main+0x3b0>)
 80009b6:	f004 ff68 	bl	800588a <HAL_DFSDM_FilterGetRegularValue>
 80009ba:	ee07 0a90 	vmov	s15, r0
 80009be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000af8 <main+0x400>
 80009c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  current_A2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter3, &channel5)*CURRENT_A_SCALER;
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	4835      	ldr	r0, [pc, #212]	; (8000aac <main+0x3b4>)
 80009d6:	f004 ff58 	bl	800588a <HAL_DFSDM_FilterGetRegularValue>
 80009da:	ee07 0a90 	vmov	s15, r0
 80009de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8000af8 <main+0x400>
 80009e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  //	int debug1 = adc1[0];
	  //	int debug2 = adc2[0];
	  //	int debug3 = adc3[0];

	  HAL_StatusTypeDef spi_rsp_2 = HAL_SPI_TransmitReceive(&hspi6, &request_pos, (uint8_t*) &position_2, 1, 100);
 80009ee:	2364      	movs	r3, #100	; 0x64
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2301      	movs	r3, #1
 80009f4:	4a41      	ldr	r2, [pc, #260]	; (8000afc <main+0x404>)
 80009f6:	493d      	ldr	r1, [pc, #244]	; (8000aec <main+0x3f4>)
 80009f8:	483d      	ldr	r0, [pc, #244]	; (8000af0 <main+0x3f8>)
 80009fa:	f00c fb45 	bl	800d088 <HAL_SPI_TransmitReceive>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  HAL_StatusTypeDef spi_rsp = HAL_SPI_TransmitReceive(&hspi4, &request_pos, (uint8_t*) &position, 1, 100);
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	4a37      	ldr	r2, [pc, #220]	; (8000ae8 <main+0x3f0>)
 8000a0c:	4937      	ldr	r1, [pc, #220]	; (8000aec <main+0x3f4>)
 8000a0e:	483c      	ldr	r0, [pc, #240]	; (8000b00 <main+0x408>)
 8000a10:	f00c fb3a 	bl	800d088 <HAL_SPI_TransmitReceive>
 8000a14:	4603      	mov	r3, r0
 8000a16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  float position_temp = position >> 4;
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <main+0x3f0>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	111b      	asrs	r3, r3, #4
 8000a20:	ee07 3a90 	vmov	s15, r3
 8000a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a28:	edc7 7a08 	vstr	s15, [r7, #32]
	  float position_temp_2 = position_2 >> 4;
 8000a2c:	4b33      	ldr	r3, [pc, #204]	; (8000afc <main+0x404>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	111b      	asrs	r3, r3, #4
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3a:	edc7 7a07 	vstr	s15, [r7, #28]
	  angle = data2angle * position_temp;
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <main+0x40c>)
 8000a40:	ed93 7a00 	vldr	s14, [r3]
 8000a44:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <main+0x410>)
 8000a4e:	edc3 7a00 	vstr	s15, [r3]
	  angle_2 = data2angle * position_temp_2;
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <main+0x40c>)
 8000a54:	ed93 7a00 	vldr	s14, [r3]
 8000a58:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <main+0x414>)
 8000a62:	edc3 7a00 	vstr	s15, [r3]
	  //speed cal
	  float diff_angle=angle-prev_angle;
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <main+0x410>)
 8000a68:	ed93 7a00 	vldr	s14, [r3]
 8000a6c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a74:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  if(diff_angle>180){
 8000a78:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a7c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000b10 <main+0x418>
 8000a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a88:	dd48      	ble.n	8000b1c <main+0x424>
		  diff_angle-=360;
 8000a8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a8e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000b18 <main+0x420>
 8000a92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a96:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8000a9a:	e050      	b.n	8000b3e <main+0x446>
 8000a9c:	58020000 	.word	0x58020000
 8000aa0:	240006a0 	.word	0x240006a0
 8000aa4:	24000a04 	.word	0x24000a04
 8000aa8:	240008ec 	.word	0x240008ec
 8000aac:	240009b0 	.word	0x240009b0
 8000ab0:	24000c90 	.word	0x24000c90
 8000ab4:	24000cdc 	.word	0x24000cdc
 8000ab8:	240005ac 	.word	0x240005ac
 8000abc:	40000800 	.word	0x40000800
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	08013ad0 	.word	0x08013ad0
 8000ac8:	2400020c 	.word	0x2400020c
 8000acc:	2400087c 	.word	0x2400087c
 8000ad0:	2400021c 	.word	0x2400021c
 8000ad4:	240005f8 	.word	0x240005f8
 8000ad8:	24000228 	.word	0x24000228
 8000adc:	24000940 	.word	0x24000940
 8000ae0:	58020c00 	.word	0x58020c00
 8000ae4:	58020800 	.word	0x58020800
 8000ae8:	24000230 	.word	0x24000230
 8000aec:	24000000 	.word	0x24000000
 8000af0:	240006f4 	.word	0x240006f4
 8000af4:	240004d8 	.word	0x240004d8
 8000af8:	3c610000 	.word	0x3c610000
 8000afc:	24000234 	.word	0x24000234
 8000b00:	24000a90 	.word	0x24000a90
 8000b04:	24000004 	.word	0x24000004
 8000b08:	24000238 	.word	0x24000238
 8000b0c:	2400023c 	.word	0x2400023c
 8000b10:	43340000 	.word	0x43340000
 8000b14:	c3340000 	.word	0xc3340000
 8000b18:	43b40000 	.word	0x43b40000
	  }
	  else if(diff_angle<-180){
 8000b1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b20:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8000b14 <main+0x41c>
 8000b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2c:	d507      	bpl.n	8000b3e <main+0x446>
		diff_angle+=360;
 8000b2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b32:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8000b18 <main+0x420>
 8000b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b3a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  }
	  angle_sum+=diff_angle;
 8000b3e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000b42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b4a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	  prev_angle=angle;
 8000b4e:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <main+0x464>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //	  uint32_t *adc1_add = adc1;
	  HAL_Delay (1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f002 fa51 	bl	8002ffc <HAL_Delay>
  {
 8000b5a:	e703      	b.n	8000964 <main+0x26c>
 8000b5c:	24000238 	.word	0x24000238

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b09c      	sub	sp, #112	; 0x70
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	224c      	movs	r2, #76	; 0x4c
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f011 ffe6 	bl	8012b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2220      	movs	r2, #32
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f011 ffe0 	bl	8012b40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b80:	2002      	movs	r0, #2
 8000b82:	f008 ffc1 	bl	8009b08 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <SystemClock_Config+0xe4>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <SystemClock_Config+0xe4>)
 8000b90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <SystemClock_Config+0xe4>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba2:	bf00      	nop
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <SystemClock_Config+0xe4>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb0:	d1f8      	bne.n	8000ba4 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI
 8000bb2:	2331      	movs	r3, #49	; 0x31
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 73;
 8000bd4:	2349      	movs	r3, #73	; 0x49
 8000bd6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000bdc:	230a      	movs	r3, #10
 8000bde:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 10;
 8000be0:	230a      	movs	r3, #10
 8000be2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000be4:	2308      	movs	r3, #8
 8000be6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6126;
 8000bec:	f241 73ee 	movw	r3, #6126	; 0x17ee
 8000bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f008 ffd0 	bl	8009b9c <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c02:	f001 f8ab 	bl	8001d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	233f      	movs	r3, #63	; 0x3f
 8000c08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c12:	2308      	movs	r3, #8
 8000c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c16:	2340      	movs	r3, #64	; 0x40
 8000c18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c1a:	2340      	movs	r3, #64	; 0x40
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f009 fb45 	bl	800a2bc <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000c38:	f001 f890 	bl	8001d5c <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3770      	adds	r7, #112	; 0x70
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	58024800 	.word	0x58024800

08000c48 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0ae      	sub	sp, #184	; 0xb8
 8000c4c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	22b4      	movs	r2, #180	; 0xb4
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f011 ff73 	bl	8012b40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000c5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c5e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_CSI;
 8000c60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f009 fe87 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000c74:	f001 f872 	bl	8001d5c <Error_Handler>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	37b8      	adds	r7, #184	; 0xb8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2224      	movs	r2, #36	; 0x24
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f011 ff51 	bl	8012b40 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c9e:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000ca0:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <MX_ADC1_Init+0x13c>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000ca4:	4b44      	ldr	r3, [pc, #272]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000ca6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000caa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000cac:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cb2:	4b41      	ldr	r3, [pc, #260]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb8:	4b3f      	ldr	r3, [pc, #252]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cbe:	4b3e      	ldr	r3, [pc, #248]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cc4:	4b3c      	ldr	r3, [pc, #240]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000cca:	4b3b      	ldr	r3, [pc, #236]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000ccc:	2204      	movs	r2, #4
 8000cce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd0:	4b39      	ldr	r3, [pc, #228]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd8:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cde:	4b36      	ldr	r3, [pc, #216]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ce4:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cea:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cf0:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf6:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cfe:	482e      	ldr	r0, [pc, #184]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000d00:	f002 fcc6 	bl	8003690 <HAL_ADC_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d0a:	f001 f827 	bl	8001d5c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4827      	ldr	r0, [pc, #156]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000d1a:	f004 f98d 	bl	8005038 <HAL_ADCEx_MultiModeConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000d24:	f001 f81a 	bl	8001d5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d28:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <MX_ADC1_Init+0x140>)
 8000d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d2c:	2306      	movs	r3, #6
 8000d2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000d30:	2305      	movs	r3, #5
 8000d32:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d34:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d38:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481a      	ldr	r0, [pc, #104]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000d4e:	f003 f9e5 	bl	800411c <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000d58:	f001 f800 	bl	8001d5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_ADC1_Init+0x144>)
 8000d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d60:	230c      	movs	r3, #12
 8000d62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	4813      	ldr	r0, [pc, #76]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000d6a:	f003 f9d7 	bl	800411c <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000d74:	f000 fff2 	bl	8001d5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000d86:	f003 f9c9 	bl	800411c <HAL_ADC_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000d90:	f000 ffe4 	bl	8001d5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <MX_ADC1_Init+0x14c>)
 8000d96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d98:	2318      	movs	r3, #24
 8000d9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_ADC1_Init+0x138>)
 8000da2:	f003 f9bb 	bl	800411c <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000dac:	f000 ffd6 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3730      	adds	r7, #48	; 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2400087c 	.word	0x2400087c
 8000dbc:	40022000 	.word	0x40022000
 8000dc0:	10c00010 	.word	0x10c00010
 8000dc4:	21800100 	.word	0x21800100
 8000dc8:	25b00200 	.word	0x25b00200
 8000dcc:	43210000 	.word	0x43210000

08000dd0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2224      	movs	r2, #36	; 0x24
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f011 feaf 	bl	8012b40 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000de2:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000de4:	4a39      	ldr	r2, [pc, #228]	; (8000ecc <MX_ADC2_Init+0xfc>)
 8000de6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000de8:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000dea:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000dee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000df0:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dfc:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000dfe:	2208      	movs	r2, #8
 8000e00:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e02:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e08:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e10:	2203      	movs	r2, #3
 8000e12:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e22:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e44:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e46:	f002 fc23 	bl	8003690 <HAL_ADC_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000e50:	f000 ff84 	bl	8001d5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_ADC2_Init+0x100>)
 8000e56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e58:	2306      	movs	r3, #6
 8000e5a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e60:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e66:	2304      	movs	r3, #4
 8000e68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e7a:	f003 f94f 	bl	800411c <HAL_ADC_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000e84:	f000 ff6a 	bl	8001d5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_ADC2_Init+0x104>)
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000e96:	f003 f941 	bl	800411c <HAL_ADC_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000ea0:	f000 ff5c 	bl	8001d5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_ADC2_Init+0x108>)
 8000ea6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_ADC2_Init+0xf8>)
 8000eb2:	f003 f933 	bl	800411c <HAL_ADC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8000ebc:	f000 ff4e 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	240005f8 	.word	0x240005f8
 8000ecc:	40022100 	.word	0x40022100
 8000ed0:	2a000400 	.word	0x2a000400
 8000ed4:	2e300800 	.word	0x2e300800
 8000ed8:	3ef08000 	.word	0x3ef08000

08000edc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2224      	movs	r2, #36	; 0x24
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f011 fe29 	bl	8012b40 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000ef0:	4a38      	ldr	r2, [pc, #224]	; (8000fd4 <MX_ADC3_Init+0xf8>)
 8000ef2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000ef4:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000ef6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000efa:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000efc:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f02:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f08:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000f14:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 2;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000f42:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f44:	2203      	movs	r2, #3
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f5c:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f5e:	f002 fb97 	bl	8003690 <HAL_ADC_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000f68:	f000 fef8 	bl	8001d5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f70:	2306      	movs	r3, #6
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8000f74:	2302      	movs	r3, #2
 8000f76:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f78:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f7c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000f9c:	f003 f8be 	bl	800411c <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000fa6:	f000 fed9 	bl	8001d5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_ADC3_Init+0xfc>)
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fae:	230c      	movs	r3, #12
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_ADC3_Init+0xf4>)
 8000fb8:	f003 f8b0 	bl	800411c <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8000fc2:	f000 fecb 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000940 	.word	0x24000940
 8000fd4:	58026000 	.word	0x58026000
 8000fd8:	04300002 	.word	0x04300002

08000fdc <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_CORDIC_Init+0x20>)
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <MX_CORDIC_Init+0x24>)
 8000fe4:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_CORDIC_Init+0x20>)
 8000fe8:	f004 f908 	bl	80051fc <HAL_CORDIC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000ff2:	f000 feb3 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	24000b90 	.word	0x24000b90
 8001000:	48024400 	.word	0x48024400

08001004 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001008:	4ba4      	ldr	r3, [pc, #656]	; (800129c <MX_DFSDM1_Init+0x298>)
 800100a:	4aa5      	ldr	r2, [pc, #660]	; (80012a0 <MX_DFSDM1_Init+0x29c>)
 800100c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800100e:	4ba3      	ldr	r3, [pc, #652]	; (800129c <MX_DFSDM1_Init+0x298>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8001014:	4ba1      	ldr	r3, [pc, #644]	; (800129c <MX_DFSDM1_Init+0x298>)
 8001016:	2200      	movs	r2, #0
 8001018:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 800101a:	4ba0      	ldr	r3, [pc, #640]	; (800129c <MX_DFSDM1_Init+0x298>)
 800101c:	2200      	movs	r2, #0
 800101e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001020:	4b9e      	ldr	r3, [pc, #632]	; (800129c <MX_DFSDM1_Init+0x298>)
 8001022:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001026:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 8001028:	4b9c      	ldr	r3, [pc, #624]	; (800129c <MX_DFSDM1_Init+0x298>)
 800102a:	2220      	movs	r2, #32
 800102c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800102e:	4b9b      	ldr	r3, [pc, #620]	; (800129c <MX_DFSDM1_Init+0x298>)
 8001030:	2201      	movs	r2, #1
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001034:	4899      	ldr	r0, [pc, #612]	; (800129c <MX_DFSDM1_Init+0x298>)
 8001036:	f004 faeb 	bl	8005610 <HAL_DFSDM_FilterInit>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8001040:	f000 fe8c 	bl	8001d5c <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8001044:	4b97      	ldr	r3, [pc, #604]	; (80012a4 <MX_DFSDM1_Init+0x2a0>)
 8001046:	4a98      	ldr	r2, [pc, #608]	; (80012a8 <MX_DFSDM1_Init+0x2a4>)
 8001048:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800104a:	4b96      	ldr	r3, [pc, #600]	; (80012a4 <MX_DFSDM1_Init+0x2a0>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = DISABLE;
 8001050:	4b94      	ldr	r3, [pc, #592]	; (80012a4 <MX_DFSDM1_Init+0x2a0>)
 8001052:	2200      	movs	r2, #0
 8001054:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 8001056:	4b93      	ldr	r3, [pc, #588]	; (80012a4 <MX_DFSDM1_Init+0x2a0>)
 8001058:	2200      	movs	r2, #0
 800105a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800105c:	4b91      	ldr	r3, [pc, #580]	; (80012a4 <MX_DFSDM1_Init+0x2a0>)
 800105e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001062:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 32;
 8001064:	4b8f      	ldr	r3, [pc, #572]	; (80012a4 <MX_DFSDM1_Init+0x2a0>)
 8001066:	2220      	movs	r2, #32
 8001068:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 800106a:	4b8e      	ldr	r3, [pc, #568]	; (80012a4 <MX_DFSDM1_Init+0x2a0>)
 800106c:	2201      	movs	r2, #1
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8001070:	488c      	ldr	r0, [pc, #560]	; (80012a4 <MX_DFSDM1_Init+0x2a0>)
 8001072:	f004 facd 	bl	8005610 <HAL_DFSDM_FilterInit>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_DFSDM1_Init+0x7c>
  {
    Error_Handler();
 800107c:	f000 fe6e 	bl	8001d5c <Error_Handler>
  }
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 8001080:	4b8a      	ldr	r3, [pc, #552]	; (80012ac <MX_DFSDM1_Init+0x2a8>)
 8001082:	4a8b      	ldr	r2, [pc, #556]	; (80012b0 <MX_DFSDM1_Init+0x2ac>)
 8001084:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001086:	4b89      	ldr	r3, [pc, #548]	; (80012ac <MX_DFSDM1_Init+0x2a8>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter2.Init.RegularParam.FastMode = DISABLE;
 800108c:	4b87      	ldr	r3, [pc, #540]	; (80012ac <MX_DFSDM1_Init+0x2a8>)
 800108e:	2200      	movs	r2, #0
 8001090:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter2.Init.RegularParam.DmaMode = DISABLE;
 8001092:	4b86      	ldr	r3, [pc, #536]	; (80012ac <MX_DFSDM1_Init+0x2a8>)
 8001094:	2200      	movs	r2, #0
 8001096:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001098:	4b84      	ldr	r3, [pc, #528]	; (80012ac <MX_DFSDM1_Init+0x2a8>)
 800109a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800109e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 32;
 80010a0:	4b82      	ldr	r3, [pc, #520]	; (80012ac <MX_DFSDM1_Init+0x2a8>)
 80010a2:	2220      	movs	r2, #32
 80010a4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
 80010a6:	4b81      	ldr	r3, [pc, #516]	; (80012ac <MX_DFSDM1_Init+0x2a8>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 80010ac:	487f      	ldr	r0, [pc, #508]	; (80012ac <MX_DFSDM1_Init+0x2a8>)
 80010ae:	f004 faaf 	bl	8005610 <HAL_DFSDM_FilterInit>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_DFSDM1_Init+0xb8>
  {
    Error_Handler();
 80010b8:	f000 fe50 	bl	8001d5c <Error_Handler>
  }
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
 80010bc:	4b7d      	ldr	r3, [pc, #500]	; (80012b4 <MX_DFSDM1_Init+0x2b0>)
 80010be:	4a7e      	ldr	r2, [pc, #504]	; (80012b8 <MX_DFSDM1_Init+0x2b4>)
 80010c0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter3.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80010c2:	4b7c      	ldr	r3, [pc, #496]	; (80012b4 <MX_DFSDM1_Init+0x2b0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter3.Init.RegularParam.FastMode = DISABLE;
 80010c8:	4b7a      	ldr	r3, [pc, #488]	; (80012b4 <MX_DFSDM1_Init+0x2b0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter3.Init.RegularParam.DmaMode = DISABLE;
 80010ce:	4b79      	ldr	r3, [pc, #484]	; (80012b4 <MX_DFSDM1_Init+0x2b0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter3.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80010d4:	4b77      	ldr	r3, [pc, #476]	; (80012b4 <MX_DFSDM1_Init+0x2b0>)
 80010d6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80010da:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter3.Init.FilterParam.Oversampling = 32;
 80010dc:	4b75      	ldr	r3, [pc, #468]	; (80012b4 <MX_DFSDM1_Init+0x2b0>)
 80010de:	2220      	movs	r2, #32
 80010e0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter3.Init.FilterParam.IntOversampling = 1;
 80010e2:	4b74      	ldr	r3, [pc, #464]	; (80012b4 <MX_DFSDM1_Init+0x2b0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter3) != HAL_OK)
 80010e8:	4872      	ldr	r0, [pc, #456]	; (80012b4 <MX_DFSDM1_Init+0x2b0>)
 80010ea:	f004 fa91 	bl	8005610 <HAL_DFSDM_FilterInit>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_DFSDM1_Init+0xf4>
  {
    Error_Handler();
 80010f4:	f000 fe32 	bl	8001d5c <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80010f8:	4b70      	ldr	r3, [pc, #448]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 80010fa:	4a71      	ldr	r2, [pc, #452]	; (80012c0 <MX_DFSDM1_Init+0x2bc>)
 80010fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = DISABLE;
 80010fe:	4b6f      	ldr	r3, [pc, #444]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 8001100:	2200      	movs	r2, #0
 8001102:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001104:	4b6d      	ldr	r3, [pc, #436]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800110a:	4b6c      	ldr	r3, [pc, #432]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 800110c:	2202      	movs	r2, #2
 800110e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001110:	4b6a      	ldr	r3, [pc, #424]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001116:	4b69      	ldr	r3, [pc, #420]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800111c:	4b67      	ldr	r3, [pc, #412]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001122:	4b66      	ldr	r3, [pc, #408]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001128:	4b64      	ldr	r3, [pc, #400]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 8001136:	2201      	movs	r2, #1
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800113a:	4b60      	ldr	r3, [pc, #384]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 800113c:	2200      	movs	r2, #0
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001140:	4b5e      	ldr	r3, [pc, #376]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 8001142:	2200      	movs	r2, #0
 8001144:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001146:	485d      	ldr	r0, [pc, #372]	; (80012bc <MX_DFSDM1_Init+0x2b8>)
 8001148:	f004 f99a 	bl	8005480 <HAL_DFSDM_ChannelInit>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_DFSDM1_Init+0x152>
  {
    Error_Handler();
 8001152:	f000 fe03 	bl	8001d5c <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001156:	4b5b      	ldr	r3, [pc, #364]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 8001158:	4a5b      	ldr	r2, [pc, #364]	; (80012c8 <MX_DFSDM1_Init+0x2c4>)
 800115a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = DISABLE;
 800115c:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 800115e:	2200      	movs	r2, #0
 8001160:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001162:	4b58      	ldr	r3, [pc, #352]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001168:	4b56      	ldr	r3, [pc, #344]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 800116a:	2202      	movs	r2, #2
 800116c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800116e:	4b55      	ldr	r3, [pc, #340]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001174:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800117a:	4b52      	ldr	r3, [pc, #328]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001186:	4b4f      	ldr	r3, [pc, #316]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800118c:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001192:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 8001194:	2201      	movs	r2, #1
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 800119a:	2200      	movs	r2, #0
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80011a4:	4847      	ldr	r0, [pc, #284]	; (80012c4 <MX_DFSDM1_Init+0x2c0>)
 80011a6:	f004 f96b 	bl	8005480 <HAL_DFSDM_ChannelInit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_DFSDM1_Init+0x1b0>
  {
    Error_Handler();
 80011b0:	f000 fdd4 	bl	8001d5c <Error_Handler>
  }
  hdfsdm1_channel4.Instance = DFSDM1_Channel4;
 80011b4:	4b45      	ldr	r3, [pc, #276]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011b6:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <MX_DFSDM1_Init+0x2cc>)
 80011b8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel4.Init.OutputClock.Activation = DISABLE;
 80011ba:	4b44      	ldr	r3, [pc, #272]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel4.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011c0:	4b42      	ldr	r3, [pc, #264]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel4.Init.OutputClock.Divider = 2;
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel4.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011cc:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel4.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011d2:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel4.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel4.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel4.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80011e4:	4b39      	ldr	r3, [pc, #228]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel4.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011ea:	4b38      	ldr	r3, [pc, #224]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel4.Init.Awd.Oversampling = 1;
 80011f0:	4b36      	ldr	r3, [pc, #216]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel4.Init.Offset = 0;
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel4.Init.RightBitShift = 0x00;
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel4) != HAL_OK)
 8001202:	4832      	ldr	r0, [pc, #200]	; (80012cc <MX_DFSDM1_Init+0x2c8>)
 8001204:	f004 f93c 	bl	8005480 <HAL_DFSDM_ChannelInit>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_DFSDM1_Init+0x20e>
  {
    Error_Handler();
 800120e:	f000 fda5 	bl	8001d5c <Error_Handler>
  }
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 8001214:	4a30      	ldr	r2, [pc, #192]	; (80012d8 <MX_DFSDM1_Init+0x2d4>)
 8001216:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = DISABLE;
 8001218:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 800121a:	2200      	movs	r2, #0
 800121c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 2;
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 8001226:	2202      	movs	r2, #2
 8001228:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 8001250:	2201      	movs	r2, #1
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 8001256:	2200      	movs	r2, #0
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 800125c:	2200      	movs	r2, #0
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 8001260:	481c      	ldr	r0, [pc, #112]	; (80012d4 <MX_DFSDM1_Init+0x2d0>)
 8001262:	f004 f90d 	bl	8005480 <HAL_DFSDM_ChannelInit>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_DFSDM1_Init+0x26c>
  {
    Error_Handler();
 800126c:	f000 fd76 	bl	8001d5c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001270:	2201      	movs	r2, #1
 8001272:	491a      	ldr	r1, [pc, #104]	; (80012dc <MX_DFSDM1_Init+0x2d8>)
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <MX_DFSDM1_Init+0x298>)
 8001276:	f004 faa7 	bl	80057c8 <HAL_DFSDM_FilterConfigRegChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_DFSDM1_Init+0x280>
  {
    Error_Handler();
 8001280:	f000 fd6c 	bl	8001d5c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001284:	2201      	movs	r2, #1
 8001286:	4916      	ldr	r1, [pc, #88]	; (80012e0 <MX_DFSDM1_Init+0x2dc>)
 8001288:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_DFSDM1_Init+0x2a0>)
 800128a:	f004 fa9d 	bl	80057c8 <HAL_DFSDM_FilterConfigRegChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d027      	beq.n	80012e4 <MX_DFSDM1_Init+0x2e0>
  {
    Error_Handler();
 8001294:	f000 fd62 	bl	8001d5c <Error_Handler>
 8001298:	e024      	b.n	80012e4 <MX_DFSDM1_Init+0x2e0>
 800129a:	bf00      	nop
 800129c:	240006a0 	.word	0x240006a0
 80012a0:	40017900 	.word	0x40017900
 80012a4:	24000a04 	.word	0x24000a04
 80012a8:	40017980 	.word	0x40017980
 80012ac:	240008ec 	.word	0x240008ec
 80012b0:	40017a00 	.word	0x40017a00
 80012b4:	240009b0 	.word	0x240009b0
 80012b8:	40017a80 	.word	0x40017a80
 80012bc:	240004a0 	.word	0x240004a0
 80012c0:	40017820 	.word	0x40017820
 80012c4:	24000da0 	.word	0x24000da0
 80012c8:	40017840 	.word	0x40017840
 80012cc:	24000668 	.word	0x24000668
 80012d0:	40017880 	.word	0x40017880
 80012d4:	24000a58 	.word	0x24000a58
 80012d8:	400178a0 	.word	0x400178a0
 80012dc:	00010002 	.word	0x00010002
 80012e0:	00020004 	.word	0x00020004
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_4, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80012e4:	2201      	movs	r2, #1
 80012e6:	490a      	ldr	r1, [pc, #40]	; (8001310 <MX_DFSDM1_Init+0x30c>)
 80012e8:	480a      	ldr	r0, [pc, #40]	; (8001314 <MX_DFSDM1_Init+0x310>)
 80012ea:	f004 fa6d 	bl	80057c8 <HAL_DFSDM_FilterConfigRegChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_DFSDM1_Init+0x2f4>
  {
    Error_Handler();
 80012f4:	f000 fd32 	bl	8001d5c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter3, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80012f8:	2201      	movs	r2, #1
 80012fa:	4907      	ldr	r1, [pc, #28]	; (8001318 <MX_DFSDM1_Init+0x314>)
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_DFSDM1_Init+0x318>)
 80012fe:	f004 fa63 	bl	80057c8 <HAL_DFSDM_FilterConfigRegChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_DFSDM1_Init+0x308>
  {
    Error_Handler();
 8001308:	f000 fd28 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	00040010 	.word	0x00040010
 8001314:	240008ec 	.word	0x240008ec
 8001318:	00050020 	.word	0x00050020
 800131c:	240009b0 	.word	0x240009b0

08001320 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001326:	4a2f      	ldr	r2, [pc, #188]	; (80013e4 <MX_FDCAN1_Init+0xc4>)
 8001328:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001338:	2200      	movs	r2, #0
 800133a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 800133e:	2200      	movs	r2, #0
 8001340:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001344:	2200      	movs	r2, #0
 8001346:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 800134a:	2201      	movs	r2, #1
 800134c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001350:	2201      	movs	r2, #1
 8001352:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001356:	2202      	movs	r2, #2
 8001358:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 800135c:	2202      	movs	r2, #2
 800135e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001362:	2201      	movs	r2, #1
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001368:	2201      	movs	r2, #1
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 800136e:	2201      	movs	r2, #1
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001374:	2201      	movs	r2, #1
 8001376:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 800137a:	2200      	movs	r2, #0
 800137c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001380:	2200      	movs	r2, #0
 8001382:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001386:	2200      	movs	r2, #0
 8001388:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 800138c:	2200      	movs	r2, #0
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001392:	2204      	movs	r2, #4
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 8001398:	2200      	movs	r2, #0
 800139a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 800139e:	2204      	movs	r2, #4
 80013a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 80013c8:	2204      	movs	r2, #4
 80013ca:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_FDCAN1_Init+0xc0>)
 80013ce:	f006 fbf3 	bl	8007bb8 <HAL_FDCAN_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80013d8:	f000 fcc0 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	24000bf0 	.word	0x24000bf0
 80013e4:	4000a000 	.word	0x4000a000

080013e8 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_FMAC_Init+0x20>)
 80013ee:	4a07      	ldr	r2, [pc, #28]	; (800140c <MX_FMAC_Init+0x24>)
 80013f0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_FMAC_Init+0x20>)
 80013f4:	f006 ff48 	bl	8008288 <HAL_FMAC_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80013fe:	f000 fcad 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	24000bb8 	.word	0x24000bb8
 800140c:	48024000 	.word	0x48024000

08001410 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <MX_SPI2_Init+0xac>)
 8001418:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <MX_SPI2_Init+0xa8>)
 800141c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001420:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MX_SPI2_Init+0xa8>)
 800142a:	220f      	movs	r2, #15
 800142c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800143a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_SPI2_Init+0xa8>)
 800143e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001442:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001446:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800144a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_SPI2_Init+0xa8>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_SPI2_Init+0xa8>)
 800145a:	2200      	movs	r2, #0
 800145c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001460:	2200      	movs	r2, #0
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_SPI2_Init+0xa8>)
 800146c:	2200      	movs	r2, #0
 800146e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001472:	2200      	movs	r2, #0
 8001474:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001478:	2200      	movs	r2, #0
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_SPI2_Init+0xa8>)
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001484:	2200      	movs	r2, #0
 8001486:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_SPI2_Init+0xa8>)
 800148a:	2200      	movs	r2, #0
 800148c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001490:	2200      	movs	r2, #0
 8001492:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_SPI2_Init+0xa8>)
 8001496:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800149a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_SPI2_Init+0xa8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_SPI2_Init+0xa8>)
 80014a4:	f00b fafc 	bl	800caa0 <HAL_SPI_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80014ae:	f000 fc55 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	240004d8 	.word	0x240004d8
 80014bc:	40003800 	.word	0x40003800

080014c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <MX_SPI3_Init+0xa8>)
 80014c6:	4a29      	ldr	r2, [pc, #164]	; (800156c <MX_SPI3_Init+0xac>)
 80014c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <MX_SPI3_Init+0xa8>)
 80014cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <MX_SPI3_Init+0xa8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <MX_SPI3_Init+0xa8>)
 80014da:	220f      	movs	r2, #15
 80014dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <MX_SPI3_Init+0xa8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <MX_SPI3_Init+0xa8>)
 80014e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_SPI3_Init+0xa8>)
 80014ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_SPI3_Init+0xa8>)
 80014f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_SPI3_Init+0xa8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_SPI3_Init+0xa8>)
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_SPI3_Init+0xa8>)
 800150a:	2200      	movs	r2, #0
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_SPI3_Init+0xa8>)
 8001510:	2200      	movs	r2, #0
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_SPI3_Init+0xa8>)
 8001516:	2200      	movs	r2, #0
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_SPI3_Init+0xa8>)
 800151c:	2200      	movs	r2, #0
 800151e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_SPI3_Init+0xa8>)
 8001522:	2200      	movs	r2, #0
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_SPI3_Init+0xa8>)
 8001528:	2200      	movs	r2, #0
 800152a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_SPI3_Init+0xa8>)
 800152e:	2200      	movs	r2, #0
 8001530:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <MX_SPI3_Init+0xa8>)
 8001534:	2200      	movs	r2, #0
 8001536:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_SPI3_Init+0xa8>)
 800153a:	2200      	movs	r2, #0
 800153c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_SPI3_Init+0xa8>)
 8001540:	2200      	movs	r2, #0
 8001542:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_SPI3_Init+0xa8>)
 8001546:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_SPI3_Init+0xa8>)
 800154e:	2200      	movs	r2, #0
 8001550:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_SPI3_Init+0xa8>)
 8001554:	f00b faa4 	bl	800caa0 <HAL_SPI_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800155e:	f000 fbfd 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	240007f4 	.word	0x240007f4
 800156c:	40003c00 	.word	0x40003c00

08001570 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <MX_SPI4_Init+0xac>)
 8001576:	4a2a      	ldr	r2, [pc, #168]	; (8001620 <MX_SPI4_Init+0xb0>)
 8001578:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <MX_SPI4_Init+0xac>)
 800157c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001580:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <MX_SPI4_Init+0xac>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <MX_SPI4_Init+0xac>)
 800158a:	220f      	movs	r2, #15
 800158c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <MX_SPI4_Init+0xac>)
 8001590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001594:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <MX_SPI4_Init+0xac>)
 8001598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800159c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_SPI4_Init+0xac>)
 80015a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015a4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_SPI4_Init+0xac>)
 80015a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ac:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_SPI4_Init+0xac>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_SPI4_Init+0xac>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_SPI4_Init+0xac>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_SPI4_Init+0xac>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_SPI4_Init+0xac>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <MX_SPI4_Init+0xac>)
 80015ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_SPI4_Init+0xac>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_SPI4_Init+0xac>)
 80015dc:	2200      	movs	r2, #0
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_SPI4_Init+0xac>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <MX_SPI4_Init+0xac>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_SPI4_Init+0xac>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_SPI4_Init+0xac>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_SPI4_Init+0xac>)
 80015fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_SPI4_Init+0xac>)
 8001602:	2200      	movs	r2, #0
 8001604:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_SPI4_Init+0xac>)
 8001608:	f00b fa4a 	bl	800caa0 <HAL_SPI_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_SPI4_Init+0xa6>
  {
    Error_Handler();
 8001612:	f000 fba3 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	24000a90 	.word	0x24000a90
 8001620:	40013400 	.word	0x40013400

08001624 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <MX_SPI6_Init+0xa8>)
 800162a:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <MX_SPI6_Init+0xac>)
 800162c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800162e:	4b27      	ldr	r3, [pc, #156]	; (80016cc <MX_SPI6_Init+0xa8>)
 8001630:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001634:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <MX_SPI6_Init+0xa8>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <MX_SPI6_Init+0xa8>)
 800163e:	220f      	movs	r2, #15
 8001640:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <MX_SPI6_Init+0xa8>)
 8001644:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001648:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <MX_SPI6_Init+0xa8>)
 800164c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001650:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <MX_SPI6_Init+0xa8>)
 8001654:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001658:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_SPI6_Init+0xa8>)
 800165c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001660:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_SPI6_Init+0xa8>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_SPI6_Init+0xa8>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_SPI6_Init+0xa8>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_SPI6_Init+0xa8>)
 8001676:	2200      	movs	r2, #0
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_SPI6_Init+0xa8>)
 800167c:	2200      	movs	r2, #0
 800167e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_SPI6_Init+0xa8>)
 8001682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_SPI6_Init+0xa8>)
 800168a:	2200      	movs	r2, #0
 800168c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_SPI6_Init+0xa8>)
 8001690:	2200      	movs	r2, #0
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <MX_SPI6_Init+0xa8>)
 8001696:	2200      	movs	r2, #0
 8001698:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_SPI6_Init+0xa8>)
 800169c:	2200      	movs	r2, #0
 800169e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <MX_SPI6_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_SPI6_Init+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <MX_SPI6_Init+0xa8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_SPI6_Init+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_SPI6_Init+0xa8>)
 80016ba:	f00b f9f1 	bl	800caa0 <HAL_SPI_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_SPI6_Init+0xa4>
  {
    Error_Handler();
 80016c4:	f000 fb4a 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	240006f4 	.word	0x240006f4
 80016d0:	58001400 	.word	0x58001400

080016d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b09a      	sub	sp, #104	; 0x68
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
 8001704:	615a      	str	r2, [r3, #20]
 8001706:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	222c      	movs	r2, #44	; 0x2c
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f011 fa16 	bl	8012b40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001714:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <MX_TIM1_Init+0x180>)
 8001716:	4a50      	ldr	r2, [pc, #320]	; (8001858 <MX_TIM1_Init+0x184>)
 8001718:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800171a:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <MX_TIM1_Init+0x180>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <MX_TIM1_Init+0x180>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001726:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <MX_TIM1_Init+0x180>)
 8001728:	f242 7210 	movw	r2, #10000	; 0x2710
 800172c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b49      	ldr	r3, [pc, #292]	; (8001854 <MX_TIM1_Init+0x180>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001734:	4b47      	ldr	r3, [pc, #284]	; (8001854 <MX_TIM1_Init+0x180>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b46      	ldr	r3, [pc, #280]	; (8001854 <MX_TIM1_Init+0x180>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001740:	4844      	ldr	r0, [pc, #272]	; (8001854 <MX_TIM1_Init+0x180>)
 8001742:	f00c f876 	bl	800d832 <HAL_TIM_Base_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800174c:	f000 fb06 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001754:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800175a:	4619      	mov	r1, r3
 800175c:	483d      	ldr	r0, [pc, #244]	; (8001854 <MX_TIM1_Init+0x180>)
 800175e:	f00c fe47 	bl	800e3f0 <HAL_TIM_ConfigClockSource>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001768:	f000 faf8 	bl	8001d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800176c:	4839      	ldr	r0, [pc, #228]	; (8001854 <MX_TIM1_Init+0x180>)
 800176e:	f00c fa1c 	bl	800dbaa <HAL_TIM_PWM_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001778:	f000 faf0 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001788:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800178c:	4619      	mov	r1, r3
 800178e:	4831      	ldr	r0, [pc, #196]	; (8001854 <MX_TIM1_Init+0x180>)
 8001790:	f00d fb8c 	bl	800eeac <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800179a:	f000 fadf 	bl	8001d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179e:	2360      	movs	r3, #96	; 0x60
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a6:	2300      	movs	r3, #0
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	4824      	ldr	r0, [pc, #144]	; (8001854 <MX_TIM1_Init+0x180>)
 80017c4:	f00c fd04 	bl	800e1d0 <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80017ce:	f000 fac5 	bl	8001d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d6:	2204      	movs	r2, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	481e      	ldr	r0, [pc, #120]	; (8001854 <MX_TIM1_Init+0x180>)
 80017dc:	f00c fcf8 	bl	800e1d0 <HAL_TIM_PWM_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80017e6:	f000 fab9 	bl	8001d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ee:	2208      	movs	r2, #8
 80017f0:	4619      	mov	r1, r3
 80017f2:	4818      	ldr	r0, [pc, #96]	; (8001854 <MX_TIM1_Init+0x180>)
 80017f4:	f00c fcec 	bl	800e1d0 <HAL_TIM_PWM_ConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80017fe:	f000 faad 	bl	8001d5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001824:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4807      	ldr	r0, [pc, #28]	; (8001854 <MX_TIM1_Init+0x180>)
 8001838:	f00d fbd4 	bl	800efe4 <HAL_TIMEx_ConfigBreakDeadTime>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001842:	f000 fa8b 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001846:	4803      	ldr	r0, [pc, #12]	; (8001854 <MX_TIM1_Init+0x180>)
 8001848:	f001 f8f8 	bl	8002a3c <HAL_TIM_MspPostInit>

}
 800184c:	bf00      	nop
 800184e:	3768      	adds	r7, #104	; 0x68
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	24000c90 	.word	0x24000c90
 8001858:	40010000 	.word	0x40010000

0800185c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_TIM2_Init+0x94>)
 800187c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001880:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_TIM2_Init+0x94>)
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_TIM2_Init+0x94>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 655350;
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <MX_TIM2_Init+0x94>)
 8001890:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <MX_TIM2_Init+0x98>)
 8001892:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_TIM2_Init+0x94>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_TIM2_Init+0x94>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a0:	4813      	ldr	r0, [pc, #76]	; (80018f0 <MX_TIM2_Init+0x94>)
 80018a2:	f00b ffc6 	bl	800d832 <HAL_TIM_Base_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018ac:	f000 fa56 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	4619      	mov	r1, r3
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <MX_TIM2_Init+0x94>)
 80018be:	f00c fd97 	bl	800e3f0 <HAL_TIM_ConfigClockSource>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018c8:	f000 fa48 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_TIM2_Init+0x94>)
 80018da:	f00d fae7 	bl	800eeac <HAL_TIMEx_MasterConfigSynchronization>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018e4:	f000 fa3a 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	24000cdc 	.word	0x24000cdc
 80018f4:	0009fff6 	.word	0x0009fff6

080018f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]
 8001926:	615a      	str	r2, [r3, #20]
 8001928:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800192a:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <MX_TIM4_Init+0xe8>)
 800192c:	4a2d      	ldr	r2, [pc, #180]	; (80019e4 <MX_TIM4_Init+0xec>)
 800192e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 27500;
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <MX_TIM4_Init+0xe8>)
 8001932:	f646 326c 	movw	r2, #27500	; 0x6b6c
 8001936:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <MX_TIM4_Init+0xe8>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <MX_TIM4_Init+0xe8>)
 8001940:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001944:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <MX_TIM4_Init+0xe8>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <MX_TIM4_Init+0xe8>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001952:	4823      	ldr	r0, [pc, #140]	; (80019e0 <MX_TIM4_Init+0xe8>)
 8001954:	f00b ff6d 	bl	800d832 <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800195e:	f000 f9fd 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196c:	4619      	mov	r1, r3
 800196e:	481c      	ldr	r0, [pc, #112]	; (80019e0 <MX_TIM4_Init+0xe8>)
 8001970:	f00c fd3e 	bl	800e3f0 <HAL_TIM_ConfigClockSource>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800197a:	f000 f9ef 	bl	8001d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800197e:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_TIM4_Init+0xe8>)
 8001980:	f00c f913 	bl	800dbaa <HAL_TIM_PWM_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800198a:	f000 f9e7 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	4810      	ldr	r0, [pc, #64]	; (80019e0 <MX_TIM4_Init+0xe8>)
 800199e:	f00d fa85 	bl	800eeac <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80019a8:	f000 f9d8 	bl	8001d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	2360      	movs	r3, #96	; 0x60
 80019ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM4_Init+0xe8>)
 80019c4:	f00c fc04 	bl	800e1d0 <HAL_TIM_PWM_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80019ce:	f000 f9c5 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM4_Init+0xe8>)
 80019d4:	f001 f832 	bl	8002a3c <HAL_TIM_MspPostInit>

}
 80019d8:	bf00      	nop
 80019da:	3738      	adds	r7, #56	; 0x38
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	240005ac 	.word	0x240005ac
 80019e4:	40000800 	.word	0x40000800

080019e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b09a      	sub	sp, #104	; 0x68
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
 8001a18:	615a      	str	r2, [r3, #20]
 8001a1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	222c      	movs	r2, #44	; 0x2c
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f011 f88c 	bl	8012b40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a28:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a2a:	4a55      	ldr	r2, [pc, #340]	; (8001b80 <MX_TIM8_Init+0x198>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a2e:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b51      	ldr	r3, [pc, #324]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a3a:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a40:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a48:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a54:	4849      	ldr	r0, [pc, #292]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a56:	f00b feec 	bl	800d832 <HAL_TIM_Base_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001a60:	f000 f97c 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a68:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4842      	ldr	r0, [pc, #264]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a72:	f00c fcbd 	bl	800e3f0 <HAL_TIM_ConfigClockSource>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001a7c:	f000 f96e 	bl	8001d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a80:	483e      	ldr	r0, [pc, #248]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a82:	f00c f892 	bl	800dbaa <HAL_TIM_PWM_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001a8c:	f000 f966 	bl	8001d5c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001a90:	483a      	ldr	r0, [pc, #232]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001a92:	f00c f829 	bl	800dae8 <HAL_TIM_OC_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001a9c:	f000 f95e 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001aac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4832      	ldr	r0, [pc, #200]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001ab4:	f00d f9fa 	bl	800eeac <HAL_TIMEx_MasterConfigSynchronization>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8001abe:	f000 f94d 	bl	8001d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac2:	2360      	movs	r3, #96	; 0x60
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aca:	2300      	movs	r3, #0
 8001acc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4825      	ldr	r0, [pc, #148]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001ae8:	f00c fb72 	bl	800e1d0 <HAL_TIM_PWM_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001af2:	f000 f933 	bl	8001d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001afa:	2204      	movs	r2, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	481f      	ldr	r0, [pc, #124]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001b00:	f00c fb66 	bl	800e1d0 <HAL_TIM_PWM_ConfigChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001b0a:	f000 f927 	bl	8001d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b16:	2208      	movs	r2, #8
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4818      	ldr	r0, [pc, #96]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001b1c:	f00c fae2 	bl	800e0e4 <HAL_TIM_OC_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001b26:	f000 f919 	bl	8001d5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4807      	ldr	r0, [pc, #28]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001b60:	f00d fa40 	bl	800efe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8001b6a:	f000 f8f7 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b6e:	4803      	ldr	r0, [pc, #12]	; (8001b7c <MX_TIM8_Init+0x194>)
 8001b70:	f000 ff64 	bl	8002a3c <HAL_TIM_MspPostInit>

}
 8001b74:	bf00      	nop
 8001b76:	3768      	adds	r7, #104	; 0x68
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	24000560 	.word	0x24000560
 8001b80:	40010400 	.word	0x40010400

08001b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_DMA_Init+0x5c>)
 8001b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b90:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <MX_DMA_Init+0x5c>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_DMA_Init+0x5c>)
 8001b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	200b      	movs	r0, #11
 8001bae:	f003 fc32 	bl	8005416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bb2:	200b      	movs	r0, #11
 8001bb4:	f003 fc49 	bl	800544a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	200c      	movs	r0, #12
 8001bbe:	f003 fc2a 	bl	8005416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bc2:	200c      	movs	r0, #12
 8001bc4:	f003 fc41 	bl	800544a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	200d      	movs	r0, #13
 8001bce:	f003 fc22 	bl	8005416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001bd2:	200d      	movs	r0, #13
 8001bd4:	f003 fc39 	bl	800544a <HAL_NVIC_EnableIRQ>

}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	58024400 	.word	0x58024400

08001be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bfa:	4b54      	ldr	r3, [pc, #336]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0a:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c18:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c28:	4b48      	ldr	r3, [pc, #288]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	4a43      	ldr	r2, [pc, #268]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	4a3c      	ldr	r2, [pc, #240]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c64:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	4a34      	ldr	r2, [pc, #208]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c82:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c90:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	4a2d      	ldr	r2, [pc, #180]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <MX_GPIO_Init+0x168>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FAULT_LED_Pin|BRD_EN_Pin, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2106      	movs	r1, #6
 8001cb2:	4827      	ldr	r0, [pc, #156]	; (8001d50 <MX_GPIO_Init+0x16c>)
 8001cb4:	f006 fd34 	bl	8008720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DRV1_EN_Pin|INV2_EN_Pin|DRV2_EN_Pin, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f248 2108 	movw	r1, #33288	; 0x8208
 8001cbe:	4825      	ldr	r0, [pc, #148]	; (8001d54 <MX_GPIO_Init+0x170>)
 8001cc0:	f006 fd2e 	bl	8008720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INV1_EN_GPIO_Port, INV1_EN_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cca:	4823      	ldr	r0, [pc, #140]	; (8001d58 <MX_GPIO_Init+0x174>)
 8001ccc:	f006 fd28 	bl	8008720 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FAULT_LED_Pin BRD_EN_Pin */
  GPIO_InitStruct.Pin = FAULT_LED_Pin|BRD_EN_Pin;
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481a      	ldr	r0, [pc, #104]	; (8001d50 <MX_GPIO_Init+0x16c>)
 8001ce8:	f006 fb72 	bl	80083d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAULT1_Pin nFault2_Pin */
  GPIO_InitStruct.Pin = FAULT1_Pin|nFault2_Pin;
 8001cec:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4814      	ldr	r0, [pc, #80]	; (8001d54 <MX_GPIO_Init+0x170>)
 8001d02:	f006 fb65 	bl	80083d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV1_EN_Pin INV2_EN_Pin DRV2_EN_Pin */
  GPIO_InitStruct.Pin = DRV1_EN_Pin|INV2_EN_Pin|DRV2_EN_Pin;
 8001d06:	f248 2308 	movw	r3, #33288	; 0x8208
 8001d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480d      	ldr	r0, [pc, #52]	; (8001d54 <MX_GPIO_Init+0x170>)
 8001d20:	f006 fb56 	bl	80083d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INV1_EN_Pin */
  GPIO_InitStruct.Pin = INV1_EN_Pin;
 8001d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(INV1_EN_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_GPIO_Init+0x174>)
 8001d3e:	f006 fb47 	bl	80083d0 <HAL_GPIO_Init>

}
 8001d42:	bf00      	nop
 8001d44:	3730      	adds	r7, #48	; 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58020000 	.word	0x58020000
 8001d54:	58020c00 	.word	0x58020c00
 8001d58:	58020800 	.word	0x58020800

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
}
 8001d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2102      	movs	r1, #2
 8001d68:	4801      	ldr	r0, [pc, #4]	; (8001d70 <Error_Handler+0x14>)
 8001d6a:	f006 fcd9 	bl	8008720 <HAL_GPIO_WritePin>
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <Error_Handler+0x12>
 8001d70:	58020000 	.word	0x58020000

08001d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_MspInit+0x54>)
 8001d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_MspInit+0x54>)
 8001d82:	f043 0302 	orr.w	r3, r3, #2
 8001d86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_MspInit+0x54>)
 8001d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_MspInit+0x54>)
 8001d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_MspInit+0x54>)
 8001da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_MspInit+0x54>)
 8001daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001db6:	f001 f959 	bl	800306c <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f001 f942 	bl	8003044 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	58024400 	.word	0x58024400

08001dcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0be      	sub	sp, #248	; 0xf8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001de8:	22b4      	movs	r2, #180	; 0xb4
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f010 fea7 	bl	8012b40 <memset>
  if(hadc->Instance==ADC1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4ab3      	ldr	r2, [pc, #716]	; (80020c4 <HAL_ADC_MspInit+0x2f8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	f040 80bd 	bne.w	8001f78 <HAL_ADC_MspInit+0x1ac>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001dfe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 fdb3 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001e1c:	f7ff ff9e 	bl	8001d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e20:	4ba9      	ldr	r3, [pc, #676]	; (80020c8 <HAL_ADC_MspInit+0x2fc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	4aa8      	ldr	r2, [pc, #672]	; (80020c8 <HAL_ADC_MspInit+0x2fc>)
 8001e28:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e2a:	4ba7      	ldr	r3, [pc, #668]	; (80020c8 <HAL_ADC_MspInit+0x2fc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10e      	bne.n	8001e50 <HAL_ADC_MspInit+0x84>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e32:	4ba6      	ldr	r3, [pc, #664]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e38:	4aa4      	ldr	r2, [pc, #656]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e3a:	f043 0320 	orr.w	r3, r3, #32
 8001e3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e42:	4ba2      	ldr	r3, [pc, #648]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	4b9e      	ldr	r3, [pc, #632]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e56:	4a9d      	ldr	r2, [pc, #628]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e60:	4b9a      	ldr	r3, [pc, #616]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	4b97      	ldr	r3, [pc, #604]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	4a95      	ldr	r2, [pc, #596]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e7e:	4b93      	ldr	r3, [pc, #588]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8c:	4b8f      	ldr	r3, [pc, #572]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	4a8e      	ldr	r2, [pc, #568]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9c:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
    PA0     ------> ADC1_INP16
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4883      	ldr	r0, [pc, #524]	; (80020d0 <HAL_ADC_MspInit+0x304>)
 8001ec4:	f006 fa84 	bl	80083d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ec8:	2330      	movs	r3, #48	; 0x30
 8001eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eda:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	487c      	ldr	r0, [pc, #496]	; (80020d4 <HAL_ADC_MspInit+0x308>)
 8001ee2:	f006 fa75 	bl	80083d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eec:	2303      	movs	r3, #3
 8001eee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4876      	ldr	r0, [pc, #472]	; (80020d8 <HAL_ADC_MspInit+0x30c>)
 8001f00:	f006 fa66 	bl	80083d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001f04:	4b75      	ldr	r3, [pc, #468]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f06:	4a76      	ldr	r2, [pc, #472]	; (80020e0 <HAL_ADC_MspInit+0x314>)
 8001f08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f0a:	4b74      	ldr	r3, [pc, #464]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f0c:	2209      	movs	r2, #9
 8001f0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f10:	4b72      	ldr	r3, [pc, #456]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f16:	4b71      	ldr	r3, [pc, #452]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f1c:	4b6f      	ldr	r3, [pc, #444]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f24:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f34:	4b69      	ldr	r3, [pc, #420]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f3c:	4b67      	ldr	r3, [pc, #412]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f42:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f44:	4b65      	ldr	r3, [pc, #404]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f4a:	4864      	ldr	r0, [pc, #400]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f4c:	f003 fd5e 	bl	8005a0c <HAL_DMA_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_ADC_MspInit+0x18e>
    {
      Error_Handler();
 8001f56:	f7ff ff01 	bl	8001d5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a5f      	ldr	r2, [pc, #380]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f5e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f60:	4a5e      	ldr	r2, [pc, #376]	; (80020dc <HAL_ADC_MspInit+0x310>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2012      	movs	r0, #18
 8001f6c:	f003 fa53 	bl	8005416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f70:	2012      	movs	r0, #18
 8001f72:	f003 fa6a 	bl	800544a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f76:	e13d      	b.n	80021f4 <HAL_ADC_MspInit+0x428>
  else if(hadc->Instance==ADC2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a59      	ldr	r2, [pc, #356]	; (80020e4 <HAL_ADC_MspInit+0x318>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f040 80b6 	bne.w	80020f0 <HAL_ADC_MspInit+0x324>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 fcf0 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_ADC_MspInit+0x1da>
      Error_Handler();
 8001fa2:	f7ff fedb 	bl	8001d5c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001fa6:	4b48      	ldr	r3, [pc, #288]	; (80020c8 <HAL_ADC_MspInit+0x2fc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	4a46      	ldr	r2, [pc, #280]	; (80020c8 <HAL_ADC_MspInit+0x2fc>)
 8001fae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fb0:	4b45      	ldr	r3, [pc, #276]	; (80020c8 <HAL_ADC_MspInit+0x2fc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d10e      	bne.n	8001fd6 <HAL_ADC_MspInit+0x20a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fb8:	4b44      	ldr	r3, [pc, #272]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001fba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fbe:	4a43      	ldr	r2, [pc, #268]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fc8:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001fca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fdc:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe6:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b35      	ldr	r3, [pc, #212]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffa:	4a34      	ldr	r2, [pc, #208]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002004:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_ADC_MspInit+0x300>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002012:	2303      	movs	r3, #3
 8002014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002018:	2303      	movs	r3, #3
 800201a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002024:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002028:	4619      	mov	r1, r3
 800202a:	482a      	ldr	r0, [pc, #168]	; (80020d4 <HAL_ADC_MspInit+0x308>)
 800202c:	f006 f9d0 	bl	80083d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002030:	2308      	movs	r3, #8
 8002032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002036:	2303      	movs	r3, #3
 8002038:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002046:	4619      	mov	r1, r3
 8002048:	4821      	ldr	r0, [pc, #132]	; (80020d0 <HAL_ADC_MspInit+0x304>)
 800204a:	f006 f9c1 	bl	80083d0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 8002050:	4a26      	ldr	r2, [pc, #152]	; (80020ec <HAL_ADC_MspInit+0x320>)
 8002052:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 8002056:	220a      	movs	r2, #10
 8002058:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205a:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002060:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 8002068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 8002070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002074:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 8002078:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800207c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 8002080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002084:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 8002088:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800208c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 8002090:	2200      	movs	r2, #0
 8002092:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002094:	4814      	ldr	r0, [pc, #80]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 8002096:	f003 fcb9 	bl	8005a0c <HAL_DMA_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_ADC_MspInit+0x2d8>
      Error_Handler();
 80020a0:	f7ff fe5c 	bl	8001d5c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 80020a8:	659a      	str	r2, [r3, #88]	; 0x58
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <HAL_ADC_MspInit+0x31c>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	2012      	movs	r0, #18
 80020b6:	f003 f9ae 	bl	8005416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020ba:	2012      	movs	r0, #18
 80020bc:	f003 f9c5 	bl	800544a <HAL_NVIC_EnableIRQ>
}
 80020c0:	e098      	b.n	80021f4 <HAL_ADC_MspInit+0x428>
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000
 80020c8:	24000240 	.word	0x24000240
 80020cc:	58024400 	.word	0x58024400
 80020d0:	58020000 	.word	0x58020000
 80020d4:	58020800 	.word	0x58020800
 80020d8:	58020400 	.word	0x58020400
 80020dc:	24000b18 	.word	0x24000b18
 80020e0:	40020010 	.word	0x40020010
 80020e4:	40022100 	.word	0x40022100
 80020e8:	24000d28 	.word	0x24000d28
 80020ec:	40020028 	.word	0x40020028
  else if(hadc->Instance==ADC3)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a41      	ldr	r2, [pc, #260]	; (80021fc <HAL_ADC_MspInit+0x430>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d17c      	bne.n	80021f4 <HAL_ADC_MspInit+0x428>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002104:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002108:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800210c:	4618      	mov	r0, r3
 800210e:	f008 fc35 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_ADC_MspInit+0x350>
      Error_Handler();
 8002118:	f7ff fe20 	bl	8001d5c <Error_Handler>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800211c:	4b38      	ldr	r3, [pc, #224]	; (8002200 <HAL_ADC_MspInit+0x434>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002122:	4a37      	ldr	r2, [pc, #220]	; (8002200 <HAL_ADC_MspInit+0x434>)
 8002124:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212c:	4b34      	ldr	r3, [pc, #208]	; (8002200 <HAL_ADC_MspInit+0x434>)
 800212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_ADC_MspInit+0x434>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002140:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <HAL_ADC_MspInit+0x434>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_ADC_MspInit+0x434>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002158:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800215c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002160:	f000 ff94 	bl	800308c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002164:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002168:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800216c:	f000 ff8e 	bl	800308c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_ADC_MspInit+0x438>)
 8002172:	4a25      	ldr	r2, [pc, #148]	; (8002208 <HAL_ADC_MspInit+0x43c>)
 8002174:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_ADC_MspInit+0x438>)
 8002178:	2273      	movs	r2, #115	; 0x73
 800217a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_ADC_MspInit+0x438>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_ADC_MspInit+0x438>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002188:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_ADC_MspInit+0x438>)
 800218a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800218e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_ADC_MspInit+0x438>)
 8002192:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002196:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_ADC_MspInit+0x438>)
 800219a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800219e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_ADC_MspInit+0x438>)
 80021a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_ADC_MspInit+0x438>)
 80021aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021ae:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_ADC_MspInit+0x438>)
 80021b2:	2204      	movs	r2, #4
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <HAL_ADC_MspInit+0x438>)
 80021b8:	2203      	movs	r2, #3
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_ADC_MspInit+0x438>)
 80021be:	2200      	movs	r2, #0
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_ADC_MspInit+0x438>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80021c8:	480e      	ldr	r0, [pc, #56]	; (8002204 <HAL_ADC_MspInit+0x438>)
 80021ca:	f003 fc1f 	bl	8005a0c <HAL_DMA_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_ADC_MspInit+0x40c>
      Error_Handler();
 80021d4:	f7ff fdc2 	bl	8001d5c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_ADC_MspInit+0x438>)
 80021dc:	659a      	str	r2, [r3, #88]	; 0x58
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_ADC_MspInit+0x438>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2100      	movs	r1, #0
 80021e8:	207f      	movs	r0, #127	; 0x7f
 80021ea:	f003 f914 	bl	8005416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80021ee:	207f      	movs	r0, #127	; 0x7f
 80021f0:	f003 f92b 	bl	800544a <HAL_NVIC_EnableIRQ>
}
 80021f4:	bf00      	nop
 80021f6:	37f8      	adds	r7, #248	; 0xf8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	58026000 	.word	0x58026000
 8002200:	58024400 	.word	0x58024400
 8002204:	2400077c 	.word	0x2400077c
 8002208:	40020040 	.word	0x40020040

0800220c <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <HAL_CORDIC_MspInit+0x3c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10e      	bne.n	800223c <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_CORDIC_MspInit+0x40>)
 8002220:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002224:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_CORDIC_MspInit+0x40>)
 8002226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_CORDIC_MspInit+0x40>)
 8002230:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	48024400 	.word	0x48024400
 800224c:	58024400 	.word	0x58024400

08002250 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0b8      	sub	sp, #224	; 0xe0
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002268:	f107 0318 	add.w	r3, r7, #24
 800226c:	22b4      	movs	r2, #180	; 0xb4
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f010 fc65 	bl	8012b40 <memset>
  if(DFSDM1_Init == 0)
 8002276:	4b49      	ldr	r3, [pc, #292]	; (800239c <HAL_DFSDM_FilterMspInit+0x14c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 808a 	bne.w	8002394 <HAL_DFSDM_FilterMspInit+0x144>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002280:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002284:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8002286:	2300      	movs	r3, #0
 8002288:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228a:	f107 0318 	add.w	r3, r7, #24
 800228e:	4618      	mov	r0, r3
 8002290:	f008 fb74 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800229a:	f7ff fd5f 	bl	8001d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800229e:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <HAL_DFSDM_FilterMspInit+0x150>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a3e      	ldr	r2, [pc, #248]	; (80023a0 <HAL_DFSDM_FilterMspInit+0x150>)
 80022a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80022a8:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <HAL_DFSDM_FilterMspInit+0x150>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d10e      	bne.n	80022ce <HAL_DFSDM_FilterMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80022b0:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_DFSDM_FilterMspInit+0x154>)
 80022b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022b6:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <HAL_DFSDM_FilterMspInit+0x154>)
 80022b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022c0:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_DFSDM_FilterMspInit+0x154>)
 80022c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <HAL_DFSDM_FilterMspInit+0x154>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d4:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <HAL_DFSDM_FilterMspInit+0x154>)
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_DFSDM_FilterMspInit+0x154>)
 80022e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ec:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <HAL_DFSDM_FilterMspInit+0x154>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <HAL_DFSDM_FilterMspInit+0x154>)
 80022f4:	f043 0310 	orr.w	r3, r3, #16
 80022f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_DFSDM_FilterMspInit+0x154>)
 80022fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    PE10     ------> DFSDM1_DATIN4
    PE11     ------> DFSDM1_CKIN4
    PE12     ------> DFSDM1_DATIN5
    PE13     ------> DFSDM1_CKIN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800230a:	2302      	movs	r3, #2
 800230c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002322:	2306      	movs	r3, #6
 8002324:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800232c:	4619      	mov	r1, r3
 800232e:	481e      	ldr	r0, [pc, #120]	; (80023a8 <HAL_DFSDM_FilterMspInit+0x158>)
 8002330:	f006 f84e 	bl	80083d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002334:	2304      	movs	r3, #4
 8002336:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 800234c:	2304      	movs	r3, #4
 800234e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002352:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002356:	4619      	mov	r1, r3
 8002358:	4813      	ldr	r0, [pc, #76]	; (80023a8 <HAL_DFSDM_FilterMspInit+0x158>)
 800235a:	f006 f839 	bl	80083d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 800235e:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 8002362:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8002378:	2303      	movs	r3, #3
 800237a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800237e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002382:	4619      	mov	r1, r3
 8002384:	4809      	ldr	r0, [pc, #36]	; (80023ac <HAL_DFSDM_FilterMspInit+0x15c>)
 8002386:	f006 f823 	bl	80083d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_DFSDM_FilterMspInit+0x14c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	4a02      	ldr	r2, [pc, #8]	; (800239c <HAL_DFSDM_FilterMspInit+0x14c>)
 8002392:	6013      	str	r3, [r2, #0]
  }

}
 8002394:	bf00      	nop
 8002396:	37e0      	adds	r7, #224	; 0xe0
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	24000248 	.word	0x24000248
 80023a0:	24000244 	.word	0x24000244
 80023a4:	58024400 	.word	0x58024400
 80023a8:	58020400 	.word	0x58020400
 80023ac:	58021000 	.word	0x58021000

080023b0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0b8      	sub	sp, #224	; 0xe0
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c8:	f107 0318 	add.w	r3, r7, #24
 80023cc:	22b4      	movs	r2, #180	; 0xb4
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f010 fbb5 	bl	8012b40 <memset>
  if(DFSDM1_Init == 0)
 80023d6:	4b49      	ldr	r3, [pc, #292]	; (80024fc <HAL_DFSDM_ChannelMspInit+0x14c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 808a 	bne.w	80024f4 <HAL_DFSDM_ChannelMspInit+0x144>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80023e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ea:	f107 0318 	add.w	r3, r7, #24
 80023ee:	4618      	mov	r0, r3
 80023f0:	f008 fac4 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80023fa:	f7ff fcaf 	bl	8001d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80023fe:	4b40      	ldr	r3, [pc, #256]	; (8002500 <HAL_DFSDM_ChannelMspInit+0x150>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	4a3e      	ldr	r2, [pc, #248]	; (8002500 <HAL_DFSDM_ChannelMspInit+0x150>)
 8002406:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8002408:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_DFSDM_ChannelMspInit+0x150>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d10e      	bne.n	800242e <HAL_DFSDM_ChannelMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002410:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002416:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800241c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002420:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002426:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	4b35      	ldr	r3, [pc, #212]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002434:	4a33      	ldr	r2, [pc, #204]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x154>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	4a2c      	ldr	r2, [pc, #176]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_DFSDM_ChannelMspInit+0x154>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    PE10     ------> DFSDM1_DATIN4
    PE11     ------> DFSDM1_CKIN4
    PE12     ------> DFSDM1_DATIN5
    PE13     ------> DFSDM1_CKIN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800246a:	2302      	movs	r3, #2
 800246c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002482:	2306      	movs	r3, #6
 8002484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800248c:	4619      	mov	r1, r3
 800248e:	481e      	ldr	r0, [pc, #120]	; (8002508 <HAL_DFSDM_ChannelMspInit+0x158>)
 8002490:	f005 ff9e 	bl	80083d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002494:	2304      	movs	r3, #4
 8002496:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 80024ac:	2304      	movs	r3, #4
 80024ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024b6:	4619      	mov	r1, r3
 80024b8:	4813      	ldr	r0, [pc, #76]	; (8002508 <HAL_DFSDM_ChannelMspInit+0x158>)
 80024ba:	f005 ff89 	bl	80083d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 80024be:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 80024c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80024d8:	2303      	movs	r3, #3
 80024da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024e2:	4619      	mov	r1, r3
 80024e4:	4809      	ldr	r0, [pc, #36]	; (800250c <HAL_DFSDM_ChannelMspInit+0x15c>)
 80024e6:	f005 ff73 	bl	80083d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <HAL_DFSDM_ChannelMspInit+0x14c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <HAL_DFSDM_ChannelMspInit+0x14c>)
 80024f2:	6013      	str	r3, [r2, #0]
  }

}
 80024f4:	bf00      	nop
 80024f6:	37e0      	adds	r7, #224	; 0xe0
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	24000248 	.word	0x24000248
 8002500:	24000244 	.word	0x24000244
 8002504:	58024400 	.word	0x58024400
 8002508:	58020400 	.word	0x58020400
 800250c:	58021000 	.word	0x58021000

08002510 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0b6      	sub	sp, #216	; 0xd8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	22b4      	movs	r2, #180	; 0xb4
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f010 fb05 	bl	8012b40 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a24      	ldr	r2, [pc, #144]	; (80025cc <HAL_FDCAN_MspInit+0xbc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d141      	bne.n	80025c4 <HAL_FDCAN_MspInit+0xb4>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002544:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002546:	2300      	movs	r3, #0
 8002548:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	4618      	mov	r0, r3
 8002550:	f008 fa14 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 800255a:	f7ff fbff 	bl	8001d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <HAL_FDCAN_MspInit+0xc0>)
 8002560:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002564:	4a1a      	ldr	r2, [pc, #104]	; (80025d0 <HAL_FDCAN_MspInit+0xc0>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_FDCAN_MspInit+0xc0>)
 8002570:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_FDCAN_MspInit+0xc0>)
 800257e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002582:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <HAL_FDCAN_MspInit+0xc0>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_FDCAN_MspInit+0xc0>)
 800258e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800259a:	2303      	movs	r3, #3
 800259c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80025b2:	2309      	movs	r3, #9
 80025b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025bc:	4619      	mov	r1, r3
 80025be:	4805      	ldr	r0, [pc, #20]	; (80025d4 <HAL_FDCAN_MspInit+0xc4>)
 80025c0:	f005 ff06 	bl	80083d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80025c4:	bf00      	nop
 80025c6:	37d8      	adds	r7, #216	; 0xd8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	4000a000 	.word	0x4000a000
 80025d0:	58024400 	.word	0x58024400
 80025d4:	58020c00 	.word	0x58020c00

080025d8 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <HAL_FMAC_MspInit+0x3c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10e      	bne.n	8002608 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_FMAC_MspInit+0x40>)
 80025ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80025f0:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_FMAC_MspInit+0x40>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_FMAC_MspInit+0x40>)
 80025fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	48024000 	.word	0x48024000
 8002618:	58024400 	.word	0x58024400

0800261c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0be      	sub	sp, #248	; 0xf8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002638:	22b4      	movs	r2, #180	; 0xb4
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f010 fa7f 	bl	8012b40 <memset>
  if(hspi->Instance==SPI2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4abe      	ldr	r2, [pc, #760]	; (8002940 <HAL_SPI_MspInit+0x324>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d15b      	bne.n	8002704 <HAL_SPI_MspInit+0xe8>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800264c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800265a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800265e:	4618      	mov	r0, r3
 8002660:	f008 f98c 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
 800266a:	f7ff fb77 	bl	8001d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800266e:	4bb5      	ldr	r3, [pc, #724]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002674:	4ab3      	ldr	r2, [pc, #716]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800267e:	4bb1      	ldr	r3, [pc, #708]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268c:	4bad      	ldr	r3, [pc, #692]	; (8002944 <HAL_SPI_MspInit+0x328>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002692:	4aac      	ldr	r2, [pc, #688]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269c:	4ba9      	ldr	r3, [pc, #676]	; (8002944 <HAL_SPI_MspInit+0x328>)
 800269e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80026aa:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80026ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026c4:	2305      	movs	r3, #5
 80026c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026ce:	4619      	mov	r1, r3
 80026d0:	489d      	ldr	r0, [pc, #628]	; (8002948 <HAL_SPI_MspInit+0x32c>)
 80026d2:	f005 fe7d 	bl	80083d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80026d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026f0:	2305      	movs	r3, #5
 80026f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026fa:	4619      	mov	r1, r3
 80026fc:	4892      	ldr	r0, [pc, #584]	; (8002948 <HAL_SPI_MspInit+0x32c>)
 80026fe:	f005 fe67 	bl	80083d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8002702:	e119      	b.n	8002938 <HAL_SPI_MspInit+0x31c>
  else if(hspi->Instance==SPI3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a90      	ldr	r2, [pc, #576]	; (800294c <HAL_SPI_MspInit+0x330>)
 800270a:	4293      	cmp	r3, r2
 800270c:	f040 8081 	bne.w	8002812 <HAL_SPI_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800271a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800271e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002722:	4618      	mov	r0, r3
 8002724:	f008 f92a 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_SPI_MspInit+0x116>
      Error_Handler();
 800272e:	f7ff fb15 	bl	8001d5c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002732:	4b84      	ldr	r3, [pc, #528]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002738:	4a82      	ldr	r2, [pc, #520]	; (8002944 <HAL_SPI_MspInit+0x328>)
 800273a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002742:	4b80      	ldr	r3, [pc, #512]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002750:	4b7c      	ldr	r3, [pc, #496]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002756:	4a7b      	ldr	r2, [pc, #492]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002760:	4b78      	ldr	r3, [pc, #480]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	623b      	str	r3, [r7, #32]
 800276c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800276e:	4b75      	ldr	r3, [pc, #468]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002774:	4a73      	ldr	r2, [pc, #460]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800277e:	4b71      	ldr	r3, [pc, #452]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800278c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027a6:	2306      	movs	r3, #6
 80027a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4867      	ldr	r0, [pc, #412]	; (8002950 <HAL_SPI_MspInit+0x334>)
 80027b4:	f005 fe0c 	bl	80083d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80027b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027d2:	2306      	movs	r3, #6
 80027d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027dc:	4619      	mov	r1, r3
 80027de:	485d      	ldr	r0, [pc, #372]	; (8002954 <HAL_SPI_MspInit+0x338>)
 80027e0:	f005 fdf6 	bl	80083d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027fe:	2306      	movs	r3, #6
 8002800:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002804:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002808:	4619      	mov	r1, r3
 800280a:	4852      	ldr	r0, [pc, #328]	; (8002954 <HAL_SPI_MspInit+0x338>)
 800280c:	f005 fde0 	bl	80083d0 <HAL_GPIO_Init>
}
 8002810:	e092      	b.n	8002938 <HAL_SPI_MspInit+0x31c>
  else if(hspi->Instance==SPI4)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a50      	ldr	r2, [pc, #320]	; (8002958 <HAL_SPI_MspInit+0x33c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d144      	bne.n	80028a6 <HAL_SPI_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800281c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_CSI;
 8002822:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800282a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800282e:	4618      	mov	r0, r3
 8002830:	f008 f8a4 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800283a:	f7ff fa8f 	bl	8001d5c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002844:	4a3f      	ldr	r2, [pc, #252]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002846:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800284a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800285c:	4b39      	ldr	r3, [pc, #228]	; (8002944 <HAL_SPI_MspInit+0x328>)
 800285e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002862:	4a38      	ldr	r2, [pc, #224]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002864:	f043 0310 	orr.w	r3, r3, #16
 8002868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800286c:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_SPI_MspInit+0x328>)
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800287a:	2374      	movs	r3, #116	; 0x74
 800287c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002892:	2305      	movs	r3, #5
 8002894:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002898:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800289c:	4619      	mov	r1, r3
 800289e:	482f      	ldr	r0, [pc, #188]	; (800295c <HAL_SPI_MspInit+0x340>)
 80028a0:	f005 fd96 	bl	80083d0 <HAL_GPIO_Init>
}
 80028a4:	e048      	b.n	8002938 <HAL_SPI_MspInit+0x31c>
  else if(hspi->Instance==SPI6)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a2d      	ldr	r2, [pc, #180]	; (8002960 <HAL_SPI_MspInit+0x344>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d143      	bne.n	8002938 <HAL_SPI_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80028b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_CSI;
 80028b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028c2:	4618      	mov	r0, r3
 80028c4:	f008 f85a 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_SPI_MspInit+0x2b6>
      Error_Handler();
 80028ce:	f7ff fa45 	bl	8001d5c <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_SPI_MspInit+0x328>)
 80028d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_SPI_MspInit+0x328>)
 80028da:	f043 0320 	orr.w	r3, r3, #32
 80028de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_SPI_MspInit+0x328>)
 80028e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_SPI_MspInit+0x328>)
 80028f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f6:	4a13      	ldr	r2, [pc, #76]	; (8002944 <HAL_SPI_MspInit+0x328>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_SPI_MspInit+0x328>)
 8002902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800290e:	23f0      	movs	r3, #240	; 0xf0
 8002910:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002926:	2308      	movs	r3, #8
 8002928:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002930:	4619      	mov	r1, r3
 8002932:	4807      	ldr	r0, [pc, #28]	; (8002950 <HAL_SPI_MspInit+0x334>)
 8002934:	f005 fd4c 	bl	80083d0 <HAL_GPIO_Init>
}
 8002938:	bf00      	nop
 800293a:	37f8      	adds	r7, #248	; 0xf8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40003800 	.word	0x40003800
 8002944:	58024400 	.word	0x58024400
 8002948:	58020400 	.word	0x58020400
 800294c:	40003c00 	.word	0x40003c00
 8002950:	58020000 	.word	0x58020000
 8002954:	58020800 	.word	0x58020800
 8002958:	40013400 	.word	0x40013400
 800295c:	58021000 	.word	0x58021000
 8002960:	58001400 	.word	0x58001400

08002964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a2e      	ldr	r2, [pc, #184]	; (8002a2c <HAL_TIM_Base_MspInit+0xc8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10f      	bne.n	8002996 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002976:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 8002978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800297c:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002986:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 8002988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002994:	e045      	b.n	8002a22 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299e:	d117      	bne.n	80029d0 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 80029a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029a6:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 80029b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	201c      	movs	r0, #28
 80029c4:	f002 fd27 	bl	8005416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029c8:	201c      	movs	r0, #28
 80029ca:	f002 fd3e 	bl	800544a <HAL_NVIC_EnableIRQ>
}
 80029ce:	e028      	b.n	8002a22 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM4)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_TIM_Base_MspInit+0xd0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10f      	bne.n	80029fa <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 80029dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029e0:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 80029ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
}
 80029f8:	e013      	b.n	8002a22 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM8)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <HAL_TIM_Base_MspInit+0xd4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d10e      	bne.n	8002a22 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 8002a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_TIM_Base_MspInit+0xcc>)
 8002a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	58024400 	.word	0x58024400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40010400 	.word	0x40010400

08002a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a39      	ldr	r2, [pc, #228]	; (8002b40 <HAL_TIM_MspPostInit+0x104>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d120      	bne.n	8002aa0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <HAL_TIM_MspPostInit+0x108>)
 8002a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a64:	4a37      	ldr	r2, [pc, #220]	; (8002b44 <HAL_TIM_MspPostInit+0x108>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6e:	4b35      	ldr	r3, [pc, #212]	; (8002b44 <HAL_TIM_MspPostInit+0x108>)
 8002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002a7c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4619      	mov	r1, r3
 8002a98:	482b      	ldr	r0, [pc, #172]	; (8002b48 <HAL_TIM_MspPostInit+0x10c>)
 8002a9a:	f005 fc99 	bl	80083d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002a9e:	e04a      	b.n	8002b36 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <HAL_TIM_MspPostInit+0x110>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d120      	bne.n	8002aec <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_TIM_MspPostInit+0x108>)
 8002aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab0:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <HAL_TIM_MspPostInit+0x108>)
 8002ab2:	f043 0308 	orr.w	r3, r3, #8
 8002ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_TIM_MspPostInit+0x108>)
 8002abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ada:	2302      	movs	r3, #2
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	481a      	ldr	r0, [pc, #104]	; (8002b50 <HAL_TIM_MspPostInit+0x114>)
 8002ae6:	f005 fc73 	bl	80083d0 <HAL_GPIO_Init>
}
 8002aea:	e024      	b.n	8002b36 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM8)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_TIM_MspPostInit+0x118>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d11f      	bne.n	8002b36 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_TIM_MspPostInit+0x108>)
 8002af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afc:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <HAL_TIM_MspPostInit+0x108>)
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <HAL_TIM_MspPostInit+0x108>)
 8002b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002b14:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b26:	2303      	movs	r3, #3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <HAL_TIM_MspPostInit+0x11c>)
 8002b32:	f005 fc4d 	bl	80083d0 <HAL_GPIO_Init>
}
 8002b36:	bf00      	nop
 8002b38:	3728      	adds	r7, #40	; 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	58024400 	.word	0x58024400
 8002b48:	58020000 	.word	0x58020000
 8002b4c:	40000800 	.word	0x40000800
 8002b50:	58020c00 	.word	0x58020c00
 8002b54:	40010400 	.word	0x40010400
 8002b58:	58020800 	.word	0x58020800

08002b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <NMI_Handler+0x4>

08002b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//SCB->CFSR
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <MemManage_Handler+0x4>

08002b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b72:	e7fe      	b.n	8002b72 <BusFault_Handler+0x4>

08002b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <UsageFault_Handler+0x4>

08002b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba8:	f000 fa08 	bl	8002fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <DMA1_Stream0_IRQHandler+0x10>)
 8002bb6:	f003 fced 	bl	8006594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	24000b18 	.word	0x24000b18

08002bc4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <DMA1_Stream1_IRQHandler+0x10>)
 8002bca:	f003 fce3 	bl	8006594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	24000d28 	.word	0x24000d28

08002bd8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <DMA1_Stream2_IRQHandler+0x10>)
 8002bde:	f003 fcd9 	bl	8006594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2400077c 	.word	0x2400077c

08002bec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002bf0:	4803      	ldr	r0, [pc, #12]	; (8002c00 <ADC_IRQHandler+0x14>)
 8002bf2:	f001 f831 	bl	8003c58 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002bf6:	4803      	ldr	r0, [pc, #12]	; (8002c04 <ADC_IRQHandler+0x18>)
 8002bf8:	f001 f82e 	bl	8003c58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	2400087c 	.word	0x2400087c
 8002c04:	240005f8 	.word	0x240005f8

08002c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <TIM2_IRQHandler+0x10>)
 8002c0e:	f00b f949 	bl	800dea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	24000cdc 	.word	0x24000cdc

08002c1c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <OTG_HS_IRQHandler+0x10>)
 8002c22:	f005 feed 	bl	8008a00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	240022ac 	.word	0x240022ac

08002c30 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <ADC3_IRQHandler+0x10>)
 8002c36:	f001 f80f 	bl	8003c58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	24000940 	.word	0x24000940

08002c44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e00a      	b.n	8002c6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c56:	f3af 8000 	nop.w
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	60ba      	str	r2, [r7, #8]
 8002c62:	b2ca      	uxtb	r2, r1
 8002c64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	dbf0      	blt.n	8002c56 <_read+0x12>
	}

return len;
 8002c74:	687b      	ldr	r3, [r7, #4]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e009      	b.n	8002ca4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	60ba      	str	r2, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	dbf1      	blt.n	8002c90 <_write+0x12>
	}
	return len;
 8002cac:	687b      	ldr	r3, [r7, #4]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <_close>:

int _close(int file)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
	return -1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cde:	605a      	str	r2, [r3, #4]
	return 0;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <_isatty>:

int _isatty(int file)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
	return 1;
 8002cf6:	2301      	movs	r3, #1
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
	return 0;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <_sbrk+0x5c>)
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <_sbrk+0x60>)
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <_sbrk+0x64>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <_sbrk+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d207      	bcs.n	8002d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d50:	f00f febe 	bl	8012ad0 <__errno>
 8002d54:	4603      	mov	r3, r0
 8002d56:	220c      	movs	r2, #12
 8002d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5e:	e009      	b.n	8002d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <_sbrk+0x64>)
 8002d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	24050000 	.word	0x24050000
 8002d80:	00000400 	.word	0x00000400
 8002d84:	2400024c 	.word	0x2400024c
 8002d88:	240026c8 	.word	0x240026c8

08002d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d90:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <SystemInit+0xd8>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	4a33      	ldr	r2, [pc, #204]	; (8002e64 <SystemInit+0xd8>)
 8002d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002da0:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <SystemInit+0xdc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d807      	bhi.n	8002dbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dac:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <SystemInit+0xdc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 030f 	bic.w	r3, r3, #15
 8002db4:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <SystemInit+0xdc>)
 8002db6:	f043 0307 	orr.w	r3, r3, #7
 8002dba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <SystemInit+0xe0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <SystemInit+0xe0>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002dc8:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <SystemInit+0xe0>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002dce:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <SystemInit+0xe0>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4926      	ldr	r1, [pc, #152]	; (8002e6c <SystemInit+0xe0>)
 8002dd4:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <SystemInit+0xe4>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dda:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <SystemInit+0xdc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <SystemInit+0xdc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 030f 	bic.w	r3, r3, #15
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <SystemInit+0xdc>)
 8002df0:	f043 0307 	orr.w	r3, r3, #7
 8002df4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <SystemInit+0xe0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <SystemInit+0xe0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <SystemInit+0xe0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <SystemInit+0xe0>)
 8002e0a:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <SystemInit+0xe8>)
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <SystemInit+0xe0>)
 8002e10:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <SystemInit+0xec>)
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <SystemInit+0xe0>)
 8002e16:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <SystemInit+0xf0>)
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <SystemInit+0xe0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <SystemInit+0xe0>)
 8002e22:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <SystemInit+0xf0>)
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <SystemInit+0xe0>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <SystemInit+0xe0>)
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <SystemInit+0xf0>)
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <SystemInit+0xe0>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <SystemInit+0xe0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <SystemInit+0xe0>)
 8002e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <SystemInit+0xe0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <SystemInit+0xf4>)
 8002e4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <SystemInit+0xd8>)
 8002e54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00
 8002e68:	52002000 	.word	0x52002000
 8002e6c:	58024400 	.word	0x58024400
 8002e70:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e74:	02020200 	.word	0x02020200
 8002e78:	01ff0000 	.word	0x01ff0000
 8002e7c:	01010280 	.word	0x01010280
 8002e80:	52004000 	.word	0x52004000

08002e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ebc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e88:	f7ff ff80 	bl	8002d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e8c:	480c      	ldr	r0, [pc, #48]	; (8002ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e8e:	490d      	ldr	r1, [pc, #52]	; (8002ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e90:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e94:	e002      	b.n	8002e9c <LoopCopyDataInit>

08002e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9a:	3304      	adds	r3, #4

08002e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea0:	d3f9      	bcc.n	8002e96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ea4:	4c0a      	ldr	r4, [pc, #40]	; (8002ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea8:	e001      	b.n	8002eae <LoopFillZerobss>

08002eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eac:	3204      	adds	r2, #4

08002eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb0:	d3fb      	bcc.n	8002eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eb2:	f00f fe13 	bl	8012adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eb6:	f7fd fc1f 	bl	80006f8 <main>
  bx  lr
 8002eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ebc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002ec0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ec4:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8002ec8:	08013c74 	.word	0x08013c74
  ldr r2, =_sbss
 8002ecc:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8002ed0:	240026c4 	.word	0x240026c4

08002ed4 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed4:	e7fe      	b.n	8002ed4 <BDMA_Channel0_IRQHandler>
	...

08002ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ede:	2003      	movs	r0, #3
 8002ee0:	f002 fa8e 	bl	8005400 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ee4:	f007 fba0 	bl	800a628 <HAL_RCC_GetSysClockFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_Init+0x68>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	4913      	ldr	r1, [pc, #76]	; (8002f44 <HAL_Init+0x6c>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_Init+0x68>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <HAL_Init+0x6c>)
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
 8002f18:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <HAL_Init+0x70>)
 8002f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f1c:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <HAL_Init+0x74>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f22:	200f      	movs	r0, #15
 8002f24:	f000 f814 	bl	8002f50 <HAL_InitTick>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e002      	b.n	8002f38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f32:	f7fe ff1f 	bl	8001d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	58024400 	.word	0x58024400
 8002f44:	08013bbc 	.word	0x08013bbc
 8002f48:	2400000c 	.word	0x2400000c
 8002f4c:	24000008 	.word	0x24000008

08002f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_InitTick+0x60>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e021      	b.n	8002fa8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_InitTick+0x64>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_InitTick+0x60>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 fa73 	bl	8005466 <HAL_SYSTICK_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00e      	b.n	8002fa8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0f      	cmp	r3, #15
 8002f8e:	d80a      	bhi.n	8002fa6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f90:	2200      	movs	r2, #0
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f002 fa3d 	bl	8005416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f9c:	4a06      	ldr	r2, [pc, #24]	; (8002fb8 <HAL_InitTick+0x68>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	24000014 	.word	0x24000014
 8002fb4:	24000008 	.word	0x24000008
 8002fb8:	24000010 	.word	0x24000010

08002fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_IncTick+0x20>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_IncTick+0x24>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <HAL_IncTick+0x24>)
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	24000014 	.word	0x24000014
 8002fe0:	24000dd8 	.word	0x24000dd8

08002fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_GetTick+0x14>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	24000dd8 	.word	0x24000dd8

08002ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003004:	f7ff ffee 	bl	8002fe4 <HAL_GetTick>
 8003008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d005      	beq.n	8003022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_Delay+0x44>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003022:	bf00      	nop
 8003024:	f7ff ffde 	bl	8002fe4 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	429a      	cmp	r2, r3
 8003032:	d8f7      	bhi.n	8003024 <HAL_Delay+0x28>
  {
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	24000014 	.word	0x24000014

08003044 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 0202 	bic.w	r2, r3, #2
 8003054:	4904      	ldr	r1, [pc, #16]	; (8003068 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	58003c00 	.word	0x58003c00

0800306c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	6013      	str	r3, [r2, #0]
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	58003c00 	.word	0x58003c00

0800308c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	43db      	mvns	r3, r3
 800309e:	401a      	ands	r2, r3
 80030a0:	4904      	ldr	r1, [pc, #16]	; (80030b4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	58000400 	.word	0x58000400

080030b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	609a      	str	r2, [r3, #8]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	609a      	str	r2, [r3, #8]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3360      	adds	r3, #96	; 0x60
 8003132:	461a      	mov	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a10      	ldr	r2, [pc, #64]	; (8003180 <LL_ADC_SetOffset+0x60>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d10b      	bne.n	800315c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	4313      	orrs	r3, r2
 8003152:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800315a:	e00b      	b.n	8003174 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	430b      	orrs	r3, r1
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	601a      	str	r2, [r3, #0]
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	58026000 	.word	0x58026000

08003184 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3360      	adds	r3, #96	; 0x60
 8003192:	461a      	mov	r2, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	fa01 f303 	lsl.w	r3, r1, r3
 80031d0:	431a      	orrs	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	611a      	str	r2, [r3, #16]
}
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3360      	adds	r3, #96	; 0x60
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	431a      	orrs	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	601a      	str	r2, [r3, #0]
  }
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	58026000 	.word	0x58026000

08003228 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a0c      	ldr	r2, [pc, #48]	; (8003268 <LL_ADC_SetOffsetSaturation+0x40>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d10e      	bne.n	800325a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3360      	adds	r3, #96	; 0x60
 8003240:	461a      	mov	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	431a      	orrs	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	58026000 	.word	0x58026000

0800326c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <LL_ADC_SetOffsetSign+0x40>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d10e      	bne.n	800329e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3360      	adds	r3, #96	; 0x60
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	431a      	orrs	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	58026000 	.word	0x58026000

080032b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3360      	adds	r3, #96	; 0x60
 80032c0:	461a      	mov	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <LL_ADC_SetOffsetState+0x50>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	431a      	orrs	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80032e2:	e007      	b.n	80032f4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	601a      	str	r2, [r3, #0]
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	58026000 	.word	0x58026000

08003304 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800332a:	b480      	push	{r7}
 800332c:	b087      	sub	sp, #28
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3330      	adds	r3, #48	; 0x30
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	4413      	add	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	211f      	movs	r1, #31
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	401a      	ands	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0e9b      	lsrs	r3, r3, #26
 8003362:	f003 011f 	and.w	r1, r3, #31
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	431a      	orrs	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f023 0203 	bic.w	r2, r3, #3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	60da      	str	r2, [r3, #12]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	60da      	str	r2, [r3, #12]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d107      	bne.n	80033ea <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	60da      	str	r2, [r3, #12]
  }
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	58026000 	.word	0x58026000

080033fc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003408:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003422:	b480      	push	{r7}
 8003424:	b087      	sub	sp, #28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3314      	adds	r3, #20
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	0e5b      	lsrs	r3, r3, #25
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	4413      	add	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	0d1b      	lsrs	r3, r3, #20
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2107      	movs	r1, #7
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	401a      	ands	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	0d1b      	lsrs	r3, r3, #20
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	431a      	orrs	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4a1a      	ldr	r2, [pc, #104]	; (80034f0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d115      	bne.n	80034b8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003498:	43db      	mvns	r3, r3
 800349a:	401a      	ands	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0318 	and.w	r3, r3, #24
 80034a2:	4914      	ldr	r1, [pc, #80]	; (80034f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80034a4:	40d9      	lsrs	r1, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	400b      	ands	r3, r1
 80034aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80034b6:	e014      	b.n	80034e2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c4:	43db      	mvns	r3, r3
 80034c6:	401a      	ands	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f003 0318 	and.w	r3, r3, #24
 80034ce:	4909      	ldr	r1, [pc, #36]	; (80034f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80034d0:	40d9      	lsrs	r1, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	400b      	ands	r3, r1
 80034d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034da:	431a      	orrs	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	58026000 	.word	0x58026000
 80034f4:	000fffff 	.word	0x000fffff

080034f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 031f 	and.w	r3, r3, #31
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <LL_ADC_DisableDeepPowerDown+0x20>)
 800353e:	4013      	ands	r3, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6093      	str	r3, [r2, #8]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	5fffffc0 	.word	0x5fffffc0

08003554 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003568:	d101      	bne.n	800356e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800358a:	4013      	ands	r3, r2
 800358c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	6fffffc0 	.word	0x6fffffc0

080035a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b8:	d101      	bne.n	80035be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <LL_ADC_Enable+0x24>)
 80035da:	4013      	ands	r3, r2
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	7fffffc0 	.word	0x7fffffc0

080035f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <LL_ADC_IsEnabled+0x18>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <LL_ADC_IsEnabled+0x1a>
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <LL_ADC_REG_StartConversion+0x24>)
 800362a:	4013      	ands	r3, r2
 800362c:	f043 0204 	orr.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	7fffffc0 	.word	0x7fffffc0

08003644 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d101      	bne.n	800365c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b08      	cmp	r3, #8
 800367c:	d101      	bne.n	8003682 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b089      	sub	sp, #36	; 0x24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800369c:	2300      	movs	r3, #0
 800369e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e1ee      	b.n	8003a88 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fe fb87 	bl	8001dcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff3f 	bl	8003554 <LL_ADC_IsDeepPowerDownEnabled>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff25 	bl	8003530 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff ff5a 	bl	80035a4 <LL_ADC_IsInternalRegulatorEnabled>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d114      	bne.n	8003720 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff ff3e 	bl	800357c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003700:	4b8e      	ldr	r3, [pc, #568]	; (800393c <HAL_ADC_Init+0x2ac>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	4a8e      	ldr	r2, [pc, #568]	; (8003940 <HAL_ADC_Init+0x2b0>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	099b      	lsrs	r3, r3, #6
 800370e:	3301      	adds	r3, #1
 8003710:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003712:	e002      	b.n	800371a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	3b01      	subs	r3, #1
 8003718:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f9      	bne.n	8003714 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff3d 	bl	80035a4 <LL_ADC_IsInternalRegulatorEnabled>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10d      	bne.n	800374c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003734:	f043 0210 	orr.w	r2, r3, #16
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003740:	f043 0201 	orr.w	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff77 	bl	8003644 <LL_ADC_REG_IsConversionOngoing>
 8003756:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	f040 8188 	bne.w	8003a76 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f040 8184 	bne.w	8003a76 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003772:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003776:	f043 0202 	orr.w	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff36 	bl	80035f4 <LL_ADC_IsEnabled>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d136      	bne.n	80037fc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6c      	ldr	r2, [pc, #432]	; (8003944 <HAL_ADC_Init+0x2b4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_ADC_Init+0x112>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a6a      	ldr	r2, [pc, #424]	; (8003948 <HAL_ADC_Init+0x2b8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10e      	bne.n	80037c0 <HAL_ADC_Init+0x130>
 80037a2:	4868      	ldr	r0, [pc, #416]	; (8003944 <HAL_ADC_Init+0x2b4>)
 80037a4:	f7ff ff26 	bl	80035f4 <LL_ADC_IsEnabled>
 80037a8:	4604      	mov	r4, r0
 80037aa:	4867      	ldr	r0, [pc, #412]	; (8003948 <HAL_ADC_Init+0x2b8>)
 80037ac:	f7ff ff22 	bl	80035f4 <LL_ADC_IsEnabled>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4323      	orrs	r3, r4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e008      	b.n	80037d2 <HAL_ADC_Init+0x142>
 80037c0:	4862      	ldr	r0, [pc, #392]	; (800394c <HAL_ADC_Init+0x2bc>)
 80037c2:	f7ff ff17 	bl	80035f4 <LL_ADC_IsEnabled>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d012      	beq.n	80037fc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a5a      	ldr	r2, [pc, #360]	; (8003944 <HAL_ADC_Init+0x2b4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_ADC_Init+0x15a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a58      	ldr	r2, [pc, #352]	; (8003948 <HAL_ADC_Init+0x2b8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_ADC_Init+0x15e>
 80037ea:	4a59      	ldr	r2, [pc, #356]	; (8003950 <HAL_ADC_Init+0x2c0>)
 80037ec:	e000      	b.n	80037f0 <HAL_ADC_Init+0x160>
 80037ee:	4a59      	ldr	r2, [pc, #356]	; (8003954 <HAL_ADC_Init+0x2c4>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4619      	mov	r1, r3
 80037f6:	4610      	mov	r0, r2
 80037f8:	f7ff fc5e 	bl	80030b8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_ADC_Init+0x2bc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d129      	bne.n	800385a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7e5b      	ldrb	r3, [r3, #25]
 800380a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003810:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003816:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d013      	beq.n	8003848 <HAL_ADC_Init+0x1b8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d00d      	beq.n	8003844 <HAL_ADC_Init+0x1b4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b1c      	cmp	r3, #28
 800382e:	d007      	beq.n	8003840 <HAL_ADC_Init+0x1b0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b18      	cmp	r3, #24
 8003836:	d101      	bne.n	800383c <HAL_ADC_Init+0x1ac>
 8003838:	2318      	movs	r3, #24
 800383a:	e006      	b.n	800384a <HAL_ADC_Init+0x1ba>
 800383c:	2300      	movs	r3, #0
 800383e:	e004      	b.n	800384a <HAL_ADC_Init+0x1ba>
 8003840:	2310      	movs	r3, #16
 8003842:	e002      	b.n	800384a <HAL_ADC_Init+0x1ba>
 8003844:	2308      	movs	r3, #8
 8003846:	e000      	b.n	800384a <HAL_ADC_Init+0x1ba>
 8003848:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800384a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003852:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	e00e      	b.n	8003878 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	7e5b      	ldrb	r3, [r3, #25]
 800385e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003864:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800386a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003872:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d106      	bne.n	8003890 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	3b01      	subs	r3, #1
 8003888:	045b      	lsls	r3, r3, #17
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a26      	ldr	r2, [pc, #152]	; (800394c <HAL_ADC_Init+0x2bc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d115      	bne.n	80038e2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	4b26      	ldr	r3, [pc, #152]	; (8003958 <HAL_ADC_Init+0x2c8>)
 80038be:	4013      	ands	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	69b9      	ldr	r1, [r7, #24]
 80038c6:	430b      	orrs	r3, r1
 80038c8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	611a      	str	r2, [r3, #16]
 80038e0:	e009      	b.n	80038f6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	4b1c      	ldr	r3, [pc, #112]	; (800395c <HAL_ADC_Init+0x2cc>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	430b      	orrs	r3, r1
 80038f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fea2 	bl	8003644 <LL_ADC_REG_IsConversionOngoing>
 8003900:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff feaf 	bl	800366a <LL_ADC_INJ_IsConversionOngoing>
 800390c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	f040 808e 	bne.w	8003a32 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f040 808a 	bne.w	8003a32 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <HAL_ADC_Init+0x2bc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d11b      	bne.n	8003960 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7e1b      	ldrb	r3, [r3, #24]
 800392c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003934:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	e018      	b.n	800396e <HAL_ADC_Init+0x2de>
 800393c:	24000008 	.word	0x24000008
 8003940:	053e2d63 	.word	0x053e2d63
 8003944:	40022000 	.word	0x40022000
 8003948:	40022100 	.word	0x40022100
 800394c:	58026000 	.word	0x58026000
 8003950:	40022300 	.word	0x40022300
 8003954:	58026300 	.word	0x58026300
 8003958:	fff04007 	.word	0xfff04007
 800395c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7e1b      	ldrb	r3, [r3, #24]
 8003964:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <HAL_ADC_Init+0x400>)
 8003976:	4013      	ands	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	69b9      	ldr	r1, [r7, #24]
 800397e:	430b      	orrs	r3, r1
 8003980:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003988:	2b01      	cmp	r3, #1
 800398a:	d137      	bne.n	80039fc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a3f      	ldr	r2, [pc, #252]	; (8003a94 <HAL_ADC_Init+0x404>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d116      	bne.n	80039ca <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <HAL_ADC_Init+0x408>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039b4:	4311      	orrs	r1, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039ba:	430a      	orrs	r2, r1
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	611a      	str	r2, [r3, #16]
 80039c8:	e020      	b.n	8003a0c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <HAL_ADC_Init+0x40c>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039d8:	3a01      	subs	r2, #1
 80039da:	0411      	lsls	r1, r2, #16
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039e0:	4311      	orrs	r1, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039e6:	4311      	orrs	r1, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039ec:	430a      	orrs	r2, r1
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0201 	orr.w	r2, r2, #1
 80039f8:	611a      	str	r2, [r3, #16]
 80039fa:	e007      	b.n	8003a0c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_ADC_Init+0x404>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d002      	beq.n	8003a32 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f001 f9bf 	bl	8004db0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d10c      	bne.n	8003a54 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	f023 010f 	bic.w	r1, r3, #15
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	1e5a      	subs	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
 8003a52:	e007      	b.n	8003a64 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 020f 	bic.w	r2, r2, #15
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a68:	f023 0303 	bic.w	r3, r3, #3
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60
 8003a74:	e007      	b.n	8003a86 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7a:	f043 0210 	orr.w	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a86:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3724      	adds	r7, #36	; 0x24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd90      	pop	{r4, r7, pc}
 8003a90:	ffffbffc 	.word	0xffffbffc
 8003a94:	58026000 	.word	0x58026000
 8003a98:	fc00f81f 	.word	0xfc00f81f
 8003a9c:	fc00f81e 	.word	0xfc00f81e

08003aa0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a60      	ldr	r2, [pc, #384]	; (8003c34 <HAL_ADC_Start_DMA+0x194>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_ADC_Start_DMA+0x20>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a5f      	ldr	r2, [pc, #380]	; (8003c38 <HAL_ADC_Start_DMA+0x198>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_ADC_Start_DMA+0x24>
 8003ac0:	4b5e      	ldr	r3, [pc, #376]	; (8003c3c <HAL_ADC_Start_DMA+0x19c>)
 8003ac2:	e000      	b.n	8003ac6 <HAL_ADC_Start_DMA+0x26>
 8003ac4:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <HAL_ADC_Start_DMA+0x1a0>)
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fd16 	bl	80034f8 <LL_ADC_GetMultimode>
 8003acc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fdb6 	bl	8003644 <LL_ADC_REG_IsConversionOngoing>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 80a2 	bne.w	8003c24 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_Start_DMA+0x4e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e09d      	b.n	8003c2a <HAL_ADC_Start_DMA+0x18a>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d003      	beq.n	8003b0a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b09      	cmp	r3, #9
 8003b06:	f040 8086 	bne.w	8003c16 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f001 f832 	bl	8004b74 <ADC_Enable>
 8003b10:	4603      	mov	r3, r0
 8003b12:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d178      	bne.n	8003c0c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b1e:	4b49      	ldr	r3, [pc, #292]	; (8003c44 <HAL_ADC_Start_DMA+0x1a4>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a42      	ldr	r2, [pc, #264]	; (8003c38 <HAL_ADC_Start_DMA+0x198>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d002      	beq.n	8003b3a <HAL_ADC_Start_DMA+0x9a>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	e000      	b.n	8003b3c <HAL_ADC_Start_DMA+0x9c>
 8003b3a:	4b3e      	ldr	r3, [pc, #248]	; (8003c34 <HAL_ADC_Start_DMA+0x194>)
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d002      	beq.n	8003b4a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d105      	bne.n	8003b56 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d006      	beq.n	8003b70 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b66:	f023 0206 	bic.w	r2, r3, #6
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	665a      	str	r2, [r3, #100]	; 0x64
 8003b6e:	e002      	b.n	8003b76 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	4a33      	ldr	r2, [pc, #204]	; (8003c48 <HAL_ADC_Start_DMA+0x1a8>)
 8003b7c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	4a32      	ldr	r2, [pc, #200]	; (8003c4c <HAL_ADC_Start_DMA+0x1ac>)
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	4a31      	ldr	r2, [pc, #196]	; (8003c50 <HAL_ADC_Start_DMA+0x1b0>)
 8003b8c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	221c      	movs	r2, #28
 8003b94:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0210 	orr.w	r2, r2, #16
 8003bac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a28      	ldr	r2, [pc, #160]	; (8003c54 <HAL_ADC_Start_DMA+0x1b4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d10f      	bne.n	8003bd8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7ff fbfe 	bl	80033c8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fbe9 	bl	80033a8 <LL_ADC_EnableDMAReq>
 8003bd6:	e007      	b.n	8003be8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f7ff fbcd 	bl	8003382 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3340      	adds	r3, #64	; 0x40
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f002 fa62 	bl	80060c0 <HAL_DMA_Start_IT>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fd09 	bl	800361c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c0a:	e00d      	b.n	8003c28 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8003c14:	e008      	b.n	8003c28 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003c22:	e001      	b.n	8003c28 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
 8003c26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40022100 	.word	0x40022100
 8003c3c:	40022300 	.word	0x40022300
 8003c40:	58026300 	.word	0x58026300
 8003c44:	fffff0fe 	.word	0xfffff0fe
 8003c48:	08004c89 	.word	0x08004c89
 8003c4c:	08004d61 	.word	0x08004d61
 8003c50:	08004d7d 	.word	0x08004d7d
 8003c54:	58026000 	.word	0x58026000

08003c58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a87      	ldr	r2, [pc, #540]	; (8003e98 <HAL_ADC_IRQHandler+0x240>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d004      	beq.n	8003c88 <HAL_ADC_IRQHandler+0x30>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a86      	ldr	r2, [pc, #536]	; (8003e9c <HAL_ADC_IRQHandler+0x244>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d101      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x34>
 8003c88:	4b85      	ldr	r3, [pc, #532]	; (8003ea0 <HAL_ADC_IRQHandler+0x248>)
 8003c8a:	e000      	b.n	8003c8e <HAL_ADC_IRQHandler+0x36>
 8003c8c:	4b85      	ldr	r3, [pc, #532]	; (8003ea4 <HAL_ADC_IRQHandler+0x24c>)
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fc32 	bl	80034f8 <LL_ADC_GetMultimode>
 8003c94:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d017      	beq.n	8003cd0 <HAL_ADC_IRQHandler+0x78>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d012      	beq.n	8003cd0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d105      	bne.n	8003cc2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f001 f9ae 	bl	8005024 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <HAL_ADC_IRQHandler+0x8c>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8083 	beq.w	8003df6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d07d      	beq.n	8003df6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d105      	bne.n	8003d12 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff faf4 	bl	8003304 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d062      	beq.n	8003de8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a5d      	ldr	r2, [pc, #372]	; (8003e9c <HAL_ADC_IRQHandler+0x244>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d002      	beq.n	8003d32 <HAL_ADC_IRQHandler+0xda>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	e000      	b.n	8003d34 <HAL_ADC_IRQHandler+0xdc>
 8003d32:	4b59      	ldr	r3, [pc, #356]	; (8003e98 <HAL_ADC_IRQHandler+0x240>)
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d008      	beq.n	8003d4e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b05      	cmp	r3, #5
 8003d46:	d002      	beq.n	8003d4e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b09      	cmp	r3, #9
 8003d4c:	d104      	bne.n	8003d58 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	623b      	str	r3, [r7, #32]
 8003d56:	e00c      	b.n	8003d72 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a4f      	ldr	r2, [pc, #316]	; (8003e9c <HAL_ADC_IRQHandler+0x244>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d002      	beq.n	8003d68 <HAL_ADC_IRQHandler+0x110>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	e000      	b.n	8003d6a <HAL_ADC_IRQHandler+0x112>
 8003d68:	4b4b      	ldr	r3, [pc, #300]	; (8003e98 <HAL_ADC_IRQHandler+0x240>)
 8003d6a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d135      	bne.n	8003de8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d12e      	bne.n	8003de8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fc58 	bl	8003644 <LL_ADC_REG_IsConversionOngoing>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11a      	bne.n	8003dd0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 020c 	bic.w	r2, r2, #12
 8003da8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d112      	bne.n	8003de8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc6:	f043 0201 	orr.w	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	661a      	str	r2, [r3, #96]	; 0x60
 8003dce:	e00b      	b.n	8003de8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd4:	f043 0210 	orr.w	r2, r3, #16
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f96f 	bl	80040cc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	220c      	movs	r2, #12
 8003df4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_ADC_IRQHandler+0x1b2>
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80a0 	beq.w	8003f56 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 809a 	beq.w	8003f56 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d105      	bne.n	8003e3a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fadc 	bl	80033fc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003e44:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fa5a 	bl	8003304 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e50:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <HAL_ADC_IRQHandler+0x244>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d002      	beq.n	8003e62 <HAL_ADC_IRQHandler+0x20a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	e000      	b.n	8003e64 <HAL_ADC_IRQHandler+0x20c>
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <HAL_ADC_IRQHandler+0x240>)
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d008      	beq.n	8003e7e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b06      	cmp	r3, #6
 8003e76:	d002      	beq.n	8003e7e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b07      	cmp	r3, #7
 8003e7c:	d104      	bne.n	8003e88 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	623b      	str	r3, [r7, #32]
 8003e86:	e014      	b.n	8003eb2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a03      	ldr	r2, [pc, #12]	; (8003e9c <HAL_ADC_IRQHandler+0x244>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00a      	beq.n	8003ea8 <HAL_ADC_IRQHandler+0x250>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	e008      	b.n	8003eaa <HAL_ADC_IRQHandler+0x252>
 8003e98:	40022000 	.word	0x40022000
 8003e9c:	40022100 	.word	0x40022100
 8003ea0:	40022300 	.word	0x40022300
 8003ea4:	58026300 	.word	0x58026300
 8003ea8:	4b84      	ldr	r3, [pc, #528]	; (80040bc <HAL_ADC_IRQHandler+0x464>)
 8003eaa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d142      	bne.n	8003f48 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d03f      	beq.n	8003f48 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d13a      	bne.n	8003f48 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d133      	bne.n	8003f48 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d12e      	bne.n	8003f48 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fbbb 	bl	800366a <LL_ADC_INJ_IsConversionOngoing>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d11a      	bne.n	8003f30 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f08:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d112      	bne.n	8003f48 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	661a      	str	r2, [r3, #96]	; 0x60
 8003f2e:	e00b      	b.n	8003f48 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f34:	f043 0210 	orr.w	r2, r3, #16
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f40:	f043 0201 	orr.w	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f001 f843 	bl	8004fd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2260      	movs	r2, #96	; 0x60
 8003f54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d011      	beq.n	8003f84 <HAL_ADC_IRQHandler+0x32c>
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00c      	beq.n	8003f84 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8bc 	bl	80040f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d012      	beq.n	8003fb4 <HAL_ADC_IRQHandler+0x35c>
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f001 f829 	bl	8004ffc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d012      	beq.n	8003fe4 <HAL_ADC_IRQHandler+0x38c>
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f001 f81b 	bl	8005010 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d043      	beq.n	8004076 <HAL_ADC_IRQHandler+0x41e>
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d03e      	beq.n	8004076 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004000:	2301      	movs	r3, #1
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
 8004004:	e021      	b.n	800404a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2a      	ldr	r2, [pc, #168]	; (80040bc <HAL_ADC_IRQHandler+0x464>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <HAL_ADC_IRQHandler+0x3c8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <HAL_ADC_IRQHandler+0x468>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <HAL_ADC_IRQHandler+0x3cc>
 8004020:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <HAL_ADC_IRQHandler+0x46c>)
 8004022:	e000      	b.n	8004026 <HAL_ADC_IRQHandler+0x3ce>
 8004024:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_ADC_IRQHandler+0x470>)
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fa74 	bl	8003514 <LL_ADC_GetMultiDMATransfer>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004032:	2301      	movs	r3, #1
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
 8004036:	e008      	b.n	800404a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004046:	2301      	movs	r3, #1
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	2b01      	cmp	r3, #1
 800404e:	d10e      	bne.n	800406e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004054:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004060:	f043 0202 	orr.w	r2, r3, #2
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f84d 	bl	8004108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2210      	movs	r2, #16
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d018      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x45a>
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004086:	2b00      	cmp	r3, #0
 8004088:	d013      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409a:	f043 0208 	orr.w	r2, r3, #8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040aa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 ff9b 	bl	8004fe8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80040b2:	bf00      	nop
 80040b4:	3728      	adds	r7, #40	; 0x28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40022000 	.word	0x40022000
 80040c0:	40022100 	.word	0x40022100
 80040c4:	40022300 	.word	0x40022300
 80040c8:	58026300 	.word	0x58026300

080040cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b0b9      	sub	sp, #228	; 0xe4
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004136:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4ab3      	ldr	r2, [pc, #716]	; (800440c <HAL_ADC_ConfigChannel+0x2f0>)
 800413e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x34>
 800414a:	2302      	movs	r3, #2
 800414c:	f000 bcfa 	b.w	8004b44 <HAL_ADC_ConfigChannel+0xa28>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fa71 	bl	8003644 <LL_ADC_REG_IsConversionOngoing>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	f040 84de 	bne.w	8004b26 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4aa8      	ldr	r2, [pc, #672]	; (8004410 <HAL_ADC_ConfigChannel+0x2f4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d033      	beq.n	80041dc <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800417c:	2b00      	cmp	r3, #0
 800417e:	d108      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x76>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	0e9b      	lsrs	r3, r3, #26
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	2201      	movs	r2, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	e01d      	b.n	80041ce <HAL_ADC_ConfigChannel+0xb2>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e004      	b.n	80041c4 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80041ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	2201      	movs	r2, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	69d1      	ldr	r1, [r2, #28]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	430b      	orrs	r3, r1
 80041da:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f7ff f89e 	bl	800332a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fa26 	bl	8003644 <LL_ADC_REG_IsConversionOngoing>
 80041f8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fa32 	bl	800366a <LL_ADC_INJ_IsConversionOngoing>
 8004206:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800420a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 8270 	bne.w	80046f4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004214:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004218:	2b00      	cmp	r3, #0
 800421a:	f040 826b 	bne.w	80046f4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6819      	ldr	r1, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	461a      	mov	r2, r3
 800422c:	f7ff f8f9 	bl	8003422 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a76      	ldr	r2, [pc, #472]	; (8004410 <HAL_ADC_ConfigChannel+0x2f4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	08db      	lsrs	r3, r3, #3
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004254:	e032      	b.n	80042bc <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004256:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <HAL_ADC_ConfigChannel+0x2f8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800425e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004262:	d10b      	bne.n	800427c <HAL_ADC_ConfigChannel+0x160>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	e01d      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x19c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x186>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	e00a      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x19c>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d048      	beq.n	8004356 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6919      	ldr	r1, [r3, #16]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042d4:	f7fe ff24 	bl	8003120 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a4c      	ldr	r2, [pc, #304]	; (8004410 <HAL_ADC_ConfigChannel+0x2f4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d119      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6919      	ldr	r1, [r3, #16]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	461a      	mov	r2, r3
 80042f0:	f7fe ffbc 	bl	800326c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6919      	ldr	r1, [r3, #16]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d102      	bne.n	800430c <HAL_ADC_ConfigChannel+0x1f0>
 8004306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800430a:	e000      	b.n	800430e <HAL_ADC_ConfigChannel+0x1f2>
 800430c:	2300      	movs	r3, #0
 800430e:	461a      	mov	r2, r3
 8004310:	f7fe ff8a 	bl	8003228 <LL_ADC_SetOffsetSaturation>
 8004314:	e1ee      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6919      	ldr	r1, [r3, #16]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004324:	2b01      	cmp	r3, #1
 8004326:	d102      	bne.n	800432e <HAL_ADC_ConfigChannel+0x212>
 8004328:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800432c:	e000      	b.n	8004330 <HAL_ADC_ConfigChannel+0x214>
 800432e:	2300      	movs	r3, #0
 8004330:	461a      	mov	r2, r3
 8004332:	f7fe ff57 	bl	80031e4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6919      	ldr	r1, [r3, #16]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	7e1b      	ldrb	r3, [r3, #24]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d102      	bne.n	800434c <HAL_ADC_ConfigChannel+0x230>
 8004346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800434a:	e000      	b.n	800434e <HAL_ADC_ConfigChannel+0x232>
 800434c:	2300      	movs	r3, #0
 800434e:	461a      	mov	r2, r3
 8004350:	f7fe ff2e 	bl	80031b0 <LL_ADC_SetDataRightShift>
 8004354:	e1ce      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <HAL_ADC_ConfigChannel+0x2f4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	f040 8181 	bne.w	8004664 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe ff0b 	bl	8003184 <LL_ADC_GetOffsetChannel>
 800436e:	4603      	mov	r3, r0
 8004370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <HAL_ADC_ConfigChannel+0x272>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2100      	movs	r1, #0
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe ff00 	bl	8003184 <LL_ADC_GetOffsetChannel>
 8004384:	4603      	mov	r3, r0
 8004386:	0e9b      	lsrs	r3, r3, #26
 8004388:	f003 021f 	and.w	r2, r3, #31
 800438c:	e01e      	b.n	80043cc <HAL_ADC_ConfigChannel+0x2b0>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f7fe fef5 	bl	8003184 <LL_ADC_GetOffsetChannel>
 800439a:	4603      	mov	r3, r0
 800439c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80043ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80043b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80043bc:	2320      	movs	r3, #32
 80043be:	e004      	b.n	80043ca <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80043c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043c4:	fab3 f383 	clz	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x2c8>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	0e9b      	lsrs	r3, r3, #26
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	e01e      	b.n	8004422 <HAL_ADC_ConfigChannel+0x306>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80043f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004400:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d107      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004408:	2320      	movs	r3, #32
 800440a:	e00a      	b.n	8004422 <HAL_ADC_ConfigChannel+0x306>
 800440c:	47ff0000 	.word	0x47ff0000
 8004410:	58026000 	.word	0x58026000
 8004414:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8004418:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800441c:	fab3 f383 	clz	r3, r3
 8004420:	b2db      	uxtb	r3, r3
 8004422:	429a      	cmp	r2, r3
 8004424:	d106      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe ff3e 	bl	80032b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2101      	movs	r1, #1
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe fea2 	bl	8003184 <LL_ADC_GetOffsetChannel>
 8004440:	4603      	mov	r3, r0
 8004442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x344>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2101      	movs	r1, #1
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe fe97 	bl	8003184 <LL_ADC_GetOffsetChannel>
 8004456:	4603      	mov	r3, r0
 8004458:	0e9b      	lsrs	r3, r3, #26
 800445a:	f003 021f 	and.w	r2, r3, #31
 800445e:	e01e      	b.n	800449e <HAL_ADC_ConfigChannel+0x382>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2101      	movs	r1, #1
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fe8c 	bl	8003184 <LL_ADC_GetOffsetChannel>
 800446c:	4603      	mov	r3, r0
 800446e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800447e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800448e:	2320      	movs	r3, #32
 8004490:	e004      	b.n	800449c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004496:	fab3 f383 	clz	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x39a>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	0e9b      	lsrs	r3, r3, #26
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	e018      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x3cc>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044c2:	fa93 f3a3 	rbit	r3, r3
 80044c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80044ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80044d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80044da:	2320      	movs	r3, #32
 80044dc:	e004      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80044de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d106      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2101      	movs	r1, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe fedb 	bl	80032b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2102      	movs	r1, #2
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fe3f 	bl	8003184 <LL_ADC_GetOffsetChannel>
 8004506:	4603      	mov	r3, r0
 8004508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x40a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2102      	movs	r1, #2
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fe34 	bl	8003184 <LL_ADC_GetOffsetChannel>
 800451c:	4603      	mov	r3, r0
 800451e:	0e9b      	lsrs	r3, r3, #26
 8004520:	f003 021f 	and.w	r2, r3, #31
 8004524:	e01e      	b.n	8004564 <HAL_ADC_ConfigChannel+0x448>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2102      	movs	r1, #2
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fe29 	bl	8003184 <LL_ADC_GetOffsetChannel>
 8004532:	4603      	mov	r3, r0
 8004534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004548:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800454c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004554:	2320      	movs	r3, #32
 8004556:	e004      	b.n	8004562 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800456c:	2b00      	cmp	r3, #0
 800456e:	d105      	bne.n	800457c <HAL_ADC_ConfigChannel+0x460>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	0e9b      	lsrs	r3, r3, #26
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	e014      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x48a>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004584:	fa93 f3a3 	rbit	r3, r3
 8004588:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800458a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800458c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004598:	2320      	movs	r3, #32
 800459a:	e004      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800459c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045a0:	fab3 f383 	clz	r3, r3
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d106      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	2102      	movs	r1, #2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fe7c 	bl	80032b0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2103      	movs	r1, #3
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe fde0 	bl	8003184 <LL_ADC_GetOffsetChannel>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x4c8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2103      	movs	r1, #3
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe fdd5 	bl	8003184 <LL_ADC_GetOffsetChannel>
 80045da:	4603      	mov	r3, r0
 80045dc:	0e9b      	lsrs	r3, r3, #26
 80045de:	f003 021f 	and.w	r2, r3, #31
 80045e2:	e017      	b.n	8004614 <HAL_ADC_ConfigChannel+0x4f8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2103      	movs	r1, #3
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fdca 	bl	8003184 <LL_ADC_GetOffsetChannel>
 80045f0:	4603      	mov	r3, r0
 80045f2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fe:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004606:	2320      	movs	r3, #32
 8004608:	e003      	b.n	8004612 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800460a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800460c:	fab3 f383 	clz	r3, r3
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800461c:	2b00      	cmp	r3, #0
 800461e:	d105      	bne.n	800462c <HAL_ADC_ConfigChannel+0x510>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	0e9b      	lsrs	r3, r3, #26
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	e011      	b.n	8004650 <HAL_ADC_ConfigChannel+0x534>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800463a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800463c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800463e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004644:	2320      	movs	r3, #32
 8004646:	e003      	b.n	8004650 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	429a      	cmp	r2, r3
 8004652:	d14f      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	2103      	movs	r1, #3
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe fe27 	bl	80032b0 <LL_ADC_SetOffsetState>
 8004662:	e047      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	069b      	lsls	r3, r3, #26
 8004674:	429a      	cmp	r2, r3
 8004676:	d107      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004686:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	069b      	lsls	r3, r3, #26
 8004698:	429a      	cmp	r2, r3
 800469a:	d107      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046aa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	069b      	lsls	r3, r3, #26
 80046bc:	429a      	cmp	r2, r3
 80046be:	d107      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046ce:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	069b      	lsls	r3, r3, #26
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d107      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe ff7b 	bl	80035f4 <LL_ADC_IsEnabled>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 8219 	bne.w	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6819      	ldr	r1, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	461a      	mov	r2, r3
 8004714:	f7fe feb0 	bl	8003478 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4aa1      	ldr	r2, [pc, #644]	; (80049a4 <HAL_ADC_ConfigChannel+0x888>)
 800471e:	4293      	cmp	r3, r2
 8004720:	f040 812e 	bne.w	8004980 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <HAL_ADC_ConfigChannel+0x630>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	0e9b      	lsrs	r3, r3, #26
 800473a:	3301      	adds	r3, #1
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	2b09      	cmp	r3, #9
 8004742:	bf94      	ite	ls
 8004744:	2301      	movls	r3, #1
 8004746:	2300      	movhi	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e019      	b.n	8004780 <HAL_ADC_ConfigChannel+0x664>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800475a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800475e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e003      	b.n	8004770 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2b09      	cmp	r3, #9
 8004778:	bf94      	ite	ls
 800477a:	2301      	movls	r3, #1
 800477c:	2300      	movhi	r3, #0
 800477e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004780:	2b00      	cmp	r3, #0
 8004782:	d079      	beq.n	8004878 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x684>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	0e9b      	lsrs	r3, r3, #26
 8004796:	3301      	adds	r3, #1
 8004798:	069b      	lsls	r3, r3, #26
 800479a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800479e:	e015      	b.n	80047cc <HAL_ADC_ConfigChannel+0x6b0>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80047ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80047b8:	2320      	movs	r3, #32
 80047ba:	e003      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80047bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	3301      	adds	r3, #1
 80047c6:	069b      	lsls	r3, r3, #26
 80047c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x6d0>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0e9b      	lsrs	r3, r3, #26
 80047de:	3301      	adds	r3, #1
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	2101      	movs	r1, #1
 80047e6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ea:	e017      	b.n	800481c <HAL_ADC_ConfigChannel+0x700>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80047fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80047fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004804:	2320      	movs	r3, #32
 8004806:	e003      	b.n	8004810 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480a:	fab3 f383 	clz	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3301      	adds	r3, #1
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2101      	movs	r1, #1
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	ea42 0103 	orr.w	r1, r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x726>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	0e9b      	lsrs	r3, r3, #26
 8004832:	3301      	adds	r3, #1
 8004834:	f003 021f 	and.w	r2, r3, #31
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	051b      	lsls	r3, r3, #20
 8004840:	e018      	b.n	8004874 <HAL_ADC_ConfigChannel+0x758>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484a:	fa93 f3a3 	rbit	r3, r3
 800484e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800485a:	2320      	movs	r3, #32
 800485c:	e003      	b.n	8004866 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	fab3 f383 	clz	r3, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	3301      	adds	r3, #1
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4613      	mov	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004874:	430b      	orrs	r3, r1
 8004876:	e07e      	b.n	8004976 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x778>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	0e9b      	lsrs	r3, r3, #26
 800488a:	3301      	adds	r3, #1
 800488c:	069b      	lsls	r3, r3, #26
 800488e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004892:	e015      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x7a4>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	fa93 f3a3 	rbit	r3, r3
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80048ac:	2320      	movs	r3, #32
 80048ae:	e003      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	3301      	adds	r3, #1
 80048ba:	069b      	lsls	r3, r3, #26
 80048bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x7c4>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	0e9b      	lsrs	r3, r3, #26
 80048d2:	3301      	adds	r3, #1
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	e017      	b.n	8004910 <HAL_ADC_ConfigChannel+0x7f4>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	61bb      	str	r3, [r7, #24]
  return result;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80048f8:	2320      	movs	r3, #32
 80048fa:	e003      	b.n	8004904 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	3301      	adds	r3, #1
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	2101      	movs	r1, #1
 800490c:	fa01 f303 	lsl.w	r3, r1, r3
 8004910:	ea42 0103 	orr.w	r1, r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10d      	bne.n	800493c <HAL_ADC_ConfigChannel+0x820>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0e9b      	lsrs	r3, r3, #26
 8004926:	3301      	adds	r3, #1
 8004928:	f003 021f 	and.w	r2, r3, #31
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	3b1e      	subs	r3, #30
 8004934:	051b      	lsls	r3, r3, #20
 8004936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800493a:	e01b      	b.n	8004974 <HAL_ADC_ConfigChannel+0x858>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	60fb      	str	r3, [r7, #12]
  return result;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004954:	2320      	movs	r3, #32
 8004956:	e003      	b.n	8004960 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	3301      	adds	r3, #1
 8004962:	f003 021f 	and.w	r2, r3, #31
 8004966:	4613      	mov	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4413      	add	r3, r2
 800496c:	3b1e      	subs	r3, #30
 800496e:	051b      	lsls	r3, r3, #20
 8004970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004974:	430b      	orrs	r3, r1
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	6892      	ldr	r2, [r2, #8]
 800497a:	4619      	mov	r1, r3
 800497c:	f7fe fd51 	bl	8003422 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f280 80d7 	bge.w	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a06      	ldr	r2, [pc, #24]	; (80049a8 <HAL_ADC_ConfigChannel+0x88c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_ADC_ConfigChannel+0x882>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a04      	ldr	r2, [pc, #16]	; (80049ac <HAL_ADC_ConfigChannel+0x890>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d10a      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x898>
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <HAL_ADC_ConfigChannel+0x894>)
 80049a0:	e009      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x89a>
 80049a2:	bf00      	nop
 80049a4:	47ff0000 	.word	0x47ff0000
 80049a8:	40022000 	.word	0x40022000
 80049ac:	40022100 	.word	0x40022100
 80049b0:	40022300 	.word	0x40022300
 80049b4:	4b65      	ldr	r3, [pc, #404]	; (8004b4c <HAL_ADC_ConfigChannel+0xa30>)
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe fba4 	bl	8003104 <LL_ADC_GetCommonPathInternalCh>
 80049bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a62      	ldr	r2, [pc, #392]	; (8004b50 <HAL_ADC_ConfigChannel+0xa34>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d004      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x8b8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a61      	ldr	r2, [pc, #388]	; (8004b54 <HAL_ADC_ConfigChannel+0xa38>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d10e      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x8d6>
 80049d4:	485e      	ldr	r0, [pc, #376]	; (8004b50 <HAL_ADC_ConfigChannel+0xa34>)
 80049d6:	f7fe fe0d 	bl	80035f4 <LL_ADC_IsEnabled>
 80049da:	4604      	mov	r4, r0
 80049dc:	485d      	ldr	r0, [pc, #372]	; (8004b54 <HAL_ADC_ConfigChannel+0xa38>)
 80049de:	f7fe fe09 	bl	80035f4 <LL_ADC_IsEnabled>
 80049e2:	4603      	mov	r3, r0
 80049e4:	4323      	orrs	r3, r4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	e008      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x8e8>
 80049f2:	4859      	ldr	r0, [pc, #356]	; (8004b58 <HAL_ADC_ConfigChannel+0xa3c>)
 80049f4:	f7fe fdfe 	bl	80035f4 <LL_ADC_IsEnabled>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8084 	beq.w	8004b12 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a53      	ldr	r2, [pc, #332]	; (8004b5c <HAL_ADC_ConfigChannel+0xa40>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d132      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x95e>
 8004a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d12c      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a4c      	ldr	r2, [pc, #304]	; (8004b58 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	f040 8086 	bne.w	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a47      	ldr	r2, [pc, #284]	; (8004b50 <HAL_ADC_ConfigChannel+0xa34>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_ADC_ConfigChannel+0x924>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a46      	ldr	r2, [pc, #280]	; (8004b54 <HAL_ADC_ConfigChannel+0xa38>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d101      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x928>
 8004a40:	4a47      	ldr	r2, [pc, #284]	; (8004b60 <HAL_ADC_ConfigChannel+0xa44>)
 8004a42:	e000      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x92a>
 8004a44:	4a41      	ldr	r2, [pc, #260]	; (8004b4c <HAL_ADC_ConfigChannel+0xa30>)
 8004a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fe fb44 	bl	80030de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a56:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <HAL_ADC_ConfigChannel+0xa48>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	099b      	lsrs	r3, r3, #6
 8004a5c:	4a42      	ldr	r2, [pc, #264]	; (8004b68 <HAL_ADC_ConfigChannel+0xa4c>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	3301      	adds	r3, #1
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a6a:	e002      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f9      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a78:	e05e      	b.n	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3b      	ldr	r2, [pc, #236]	; (8004b6c <HAL_ADC_ConfigChannel+0xa50>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d120      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x9aa>
 8004a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11a      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a30      	ldr	r2, [pc, #192]	; (8004b58 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d14e      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <HAL_ADC_ConfigChannel+0xa34>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_ADC_ConfigChannel+0x992>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2a      	ldr	r2, [pc, #168]	; (8004b54 <HAL_ADC_ConfigChannel+0xa38>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x996>
 8004aae:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <HAL_ADC_ConfigChannel+0xa44>)
 8004ab0:	e000      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x998>
 8004ab2:	4a26      	ldr	r2, [pc, #152]	; (8004b4c <HAL_ADC_ConfigChannel+0xa30>)
 8004ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fe fb0d 	bl	80030de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ac4:	e038      	b.n	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a29      	ldr	r2, [pc, #164]	; (8004b70 <HAL_ADC_ConfigChannel+0xa54>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d133      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
 8004ad0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d12d      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <HAL_ADC_ConfigChannel+0xa3c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d128      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <HAL_ADC_ConfigChannel+0xa34>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d004      	beq.n	8004afa <HAL_ADC_ConfigChannel+0x9de>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <HAL_ADC_ConfigChannel+0xa38>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d101      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x9e2>
 8004afa:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <HAL_ADC_ConfigChannel+0xa44>)
 8004afc:	e000      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x9e4>
 8004afe:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <HAL_ADC_ConfigChannel+0xa30>)
 8004b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f7fe fae7 	bl	80030de <LL_ADC_SetCommonPathInternalCh>
 8004b10:	e012      	b.n	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b16:	f043 0220 	orr.w	r2, r3, #32
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004b24:	e008      	b.n	8004b38 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2a:	f043 0220 	orr.w	r2, r3, #32
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b40:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	37e4      	adds	r7, #228	; 0xe4
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd90      	pop	{r4, r7, pc}
 8004b4c:	58026300 	.word	0x58026300
 8004b50:	40022000 	.word	0x40022000
 8004b54:	40022100 	.word	0x40022100
 8004b58:	58026000 	.word	0x58026000
 8004b5c:	c7520000 	.word	0xc7520000
 8004b60:	40022300 	.word	0x40022300
 8004b64:	24000008 	.word	0x24000008
 8004b68:	053e2d63 	.word	0x053e2d63
 8004b6c:	c3210000 	.word	0xc3210000
 8004b70:	cb840000 	.word	0xcb840000

08004b74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe fd37 	bl	80035f4 <LL_ADC_IsEnabled>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d16e      	bne.n	8004c6a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	4b38      	ldr	r3, [pc, #224]	; (8004c74 <ADC_Enable+0x100>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9e:	f043 0210 	orr.w	r2, r3, #16
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004baa:	f043 0201 	orr.w	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e05a      	b.n	8004c6c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fd06 	bl	80035cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004bc0:	f7fe fa10 	bl	8002fe4 <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2b      	ldr	r2, [pc, #172]	; (8004c78 <ADC_Enable+0x104>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <ADC_Enable+0x66>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a29      	ldr	r2, [pc, #164]	; (8004c7c <ADC_Enable+0x108>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d101      	bne.n	8004bde <ADC_Enable+0x6a>
 8004bda:	4b29      	ldr	r3, [pc, #164]	; (8004c80 <ADC_Enable+0x10c>)
 8004bdc:	e000      	b.n	8004be0 <ADC_Enable+0x6c>
 8004bde:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <ADC_Enable+0x110>)
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe fc89 	bl	80034f8 <LL_ADC_GetMultimode>
 8004be6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a23      	ldr	r2, [pc, #140]	; (8004c7c <ADC_Enable+0x108>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d002      	beq.n	8004bf8 <ADC_Enable+0x84>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	e000      	b.n	8004bfa <ADC_Enable+0x86>
 8004bf8:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <ADC_Enable+0x104>)
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02c      	beq.n	8004c5c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d130      	bne.n	8004c6a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c08:	e028      	b.n	8004c5c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe fcf0 	bl	80035f4 <LL_ADC_IsEnabled>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fcd4 	bl	80035cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c24:	f7fe f9de 	bl	8002fe4 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d914      	bls.n	8004c5c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d00d      	beq.n	8004c5c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c44:	f043 0210 	orr.w	r2, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c50:	f043 0201 	orr.w	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e007      	b.n	8004c6c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d1cf      	bne.n	8004c0a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	8000003f 	.word	0x8000003f
 8004c78:	40022000 	.word	0x40022000
 8004c7c:	40022100 	.word	0x40022100
 8004c80:	40022300 	.word	0x40022300
 8004c84:	58026300 	.word	0x58026300

08004c88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d14b      	bne.n	8004d3a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d021      	beq.n	8004d00 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe fb1f 	bl	8003304 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d032      	beq.n	8004d32 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d12b      	bne.n	8004d32 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d11f      	bne.n	8004d32 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf6:	f043 0201 	orr.w	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	661a      	str	r2, [r3, #96]	; 0x60
 8004cfe:	e018      	b.n	8004d32 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d111      	bne.n	8004d32 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d105      	bne.n	8004d32 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2a:	f043 0201 	orr.w	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff f9ca 	bl	80040cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d38:	e00e      	b.n	8004d58 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7ff f9de 	bl	8004108 <HAL_ADC_ErrorCallback>
}
 8004d4c:	e004      	b.n	8004d58 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f7ff f9b6 	bl	80040e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d9a:	f043 0204 	orr.w	r2, r3, #4
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff f9b0 	bl	8004108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6b      	ldr	r2, [pc, #428]	; (8004f6c <ADC_ConfigureBoostMode+0x1bc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <ADC_ConfigureBoostMode+0x1c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6a      	ldr	r2, [pc, #424]	; (8004f70 <ADC_ConfigureBoostMode+0x1c0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d109      	bne.n	8004de0 <ADC_ConfigureBoostMode+0x30>
 8004dcc:	4b69      	ldr	r3, [pc, #420]	; (8004f74 <ADC_ConfigureBoostMode+0x1c4>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e008      	b.n	8004df2 <ADC_ConfigureBoostMode+0x42>
 8004de0:	4b65      	ldr	r3, [pc, #404]	; (8004f78 <ADC_ConfigureBoostMode+0x1c8>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01c      	beq.n	8004e30 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004df6:	f005 fd91 	bl	800a91c <HAL_RCC_GetHCLKFreq>
 8004dfa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e04:	d010      	beq.n	8004e28 <ADC_ConfigureBoostMode+0x78>
 8004e06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e0a:	d871      	bhi.n	8004ef0 <ADC_ConfigureBoostMode+0x140>
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e10:	d002      	beq.n	8004e18 <ADC_ConfigureBoostMode+0x68>
 8004e12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e16:	d16b      	bne.n	8004ef0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	60fb      	str	r3, [r7, #12]
        break;
 8004e26:	e066      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	089b      	lsrs	r3, r3, #2
 8004e2c:	60fb      	str	r3, [r7, #12]
        break;
 8004e2e:	e062      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e30:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e34:	f006 fc9c 	bl	800b770 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e38:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e42:	d051      	beq.n	8004ee8 <ADC_ConfigureBoostMode+0x138>
 8004e44:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e48:	d854      	bhi.n	8004ef4 <ADC_ConfigureBoostMode+0x144>
 8004e4a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e4e:	d047      	beq.n	8004ee0 <ADC_ConfigureBoostMode+0x130>
 8004e50:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e54:	d84e      	bhi.n	8004ef4 <ADC_ConfigureBoostMode+0x144>
 8004e56:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e5a:	d03d      	beq.n	8004ed8 <ADC_ConfigureBoostMode+0x128>
 8004e5c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e60:	d848      	bhi.n	8004ef4 <ADC_ConfigureBoostMode+0x144>
 8004e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e66:	d033      	beq.n	8004ed0 <ADC_ConfigureBoostMode+0x120>
 8004e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e6c:	d842      	bhi.n	8004ef4 <ADC_ConfigureBoostMode+0x144>
 8004e6e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e72:	d029      	beq.n	8004ec8 <ADC_ConfigureBoostMode+0x118>
 8004e74:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e78:	d83c      	bhi.n	8004ef4 <ADC_ConfigureBoostMode+0x144>
 8004e7a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e7e:	d01a      	beq.n	8004eb6 <ADC_ConfigureBoostMode+0x106>
 8004e80:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e84:	d836      	bhi.n	8004ef4 <ADC_ConfigureBoostMode+0x144>
 8004e86:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e8a:	d014      	beq.n	8004eb6 <ADC_ConfigureBoostMode+0x106>
 8004e8c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e90:	d830      	bhi.n	8004ef4 <ADC_ConfigureBoostMode+0x144>
 8004e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e96:	d00e      	beq.n	8004eb6 <ADC_ConfigureBoostMode+0x106>
 8004e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9c:	d82a      	bhi.n	8004ef4 <ADC_ConfigureBoostMode+0x144>
 8004e9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ea2:	d008      	beq.n	8004eb6 <ADC_ConfigureBoostMode+0x106>
 8004ea4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ea8:	d824      	bhi.n	8004ef4 <ADC_ConfigureBoostMode+0x144>
 8004eaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eae:	d002      	beq.n	8004eb6 <ADC_ConfigureBoostMode+0x106>
 8004eb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004eb4:	d11e      	bne.n	8004ef4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	0c9b      	lsrs	r3, r3, #18
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec4:	60fb      	str	r3, [r7, #12]
        break;
 8004ec6:	e016      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	60fb      	str	r3, [r7, #12]
        break;
 8004ece:	e012      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	60fb      	str	r3, [r7, #12]
        break;
 8004ed6:	e00e      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	099b      	lsrs	r3, r3, #6
 8004edc:	60fb      	str	r3, [r7, #12]
        break;
 8004ede:	e00a      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	09db      	lsrs	r3, r3, #7
 8004ee4:	60fb      	str	r3, [r7, #12]
        break;
 8004ee6:	e006      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	60fb      	str	r3, [r7, #12]
        break;
 8004eee:	e002      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x146>
        break;
 8004ef0:	bf00      	nop
 8004ef2:	e000      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004ef4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4a1f      	ldr	r2, [pc, #124]	; (8004f7c <ADC_ConfigureBoostMode+0x1cc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d808      	bhi.n	8004f16 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f12:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f14:	e025      	b.n	8004f62 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <ADC_ConfigureBoostMode+0x1d0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d80a      	bhi.n	8004f34 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f30:	609a      	str	r2, [r3, #8]
}
 8004f32:	e016      	b.n	8004f62 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <ADC_ConfigureBoostMode+0x1d4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d80a      	bhi.n	8004f52 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4e:	609a      	str	r2, [r3, #8]
}
 8004f50:	e007      	b.n	8004f62 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f60:	609a      	str	r2, [r3, #8]
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40022000 	.word	0x40022000
 8004f70:	40022100 	.word	0x40022100
 8004f74:	40022300 	.word	0x40022300
 8004f78:	58026300 	.word	0x58026300
 8004f7c:	005f5e10 	.word	0x005f5e10
 8004f80:	00bebc20 	.word	0x00bebc20
 8004f84:	017d7840 	.word	0x017d7840

08004f88 <LL_ADC_IsEnabled>:
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <LL_ADC_IsEnabled+0x18>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e000      	b.n	8004fa2 <LL_ADC_IsEnabled+0x1a>
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <LL_ADC_REG_IsConversionOngoing>:
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d101      	bne.n	8004fc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005038:	b590      	push	{r4, r7, lr}
 800503a:	b0a3      	sub	sp, #140	; 0x8c
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005052:	2302      	movs	r3, #2
 8005054:	e0c1      	b.n	80051da <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800505e:	2300      	movs	r3, #0
 8005060:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005062:	2300      	movs	r3, #0
 8005064:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a5e      	ldr	r2, [pc, #376]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d102      	bne.n	8005076 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005070:	4b5d      	ldr	r3, [pc, #372]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	e001      	b.n	800507a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0a0      	b.n	80051da <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ff87 	bl	8004fae <LL_ADC_REG_IsConversionOngoing>
 80050a0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff ff80 	bl	8004fae <LL_ADC_REG_IsConversionOngoing>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f040 8081 	bne.w	80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80050b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d17c      	bne.n	80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a48      	ldr	r2, [pc, #288]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a46      	ldr	r2, [pc, #280]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d101      	bne.n	80050d6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80050d2:	4b46      	ldr	r3, [pc, #280]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80050d4:	e000      	b.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80050d6:	4b46      	ldr	r3, [pc, #280]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80050d8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d039      	beq.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a3a      	ldr	r2, [pc, #232]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a39      	ldr	r2, [pc, #228]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d10e      	bne.n	8005126 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005108:	4836      	ldr	r0, [pc, #216]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800510a:	f7ff ff3d 	bl	8004f88 <LL_ADC_IsEnabled>
 800510e:	4604      	mov	r4, r0
 8005110:	4835      	ldr	r0, [pc, #212]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005112:	f7ff ff39 	bl	8004f88 <LL_ADC_IsEnabled>
 8005116:	4603      	mov	r3, r0
 8005118:	4323      	orrs	r3, r4
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e008      	b.n	8005138 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005126:	4833      	ldr	r0, [pc, #204]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005128:	f7ff ff2e 	bl	8004f88 <LL_ADC_IsEnabled>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d047      	beq.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800513c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005142:	4013      	ands	r3, r2
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	6811      	ldr	r1, [r2, #0]
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	6892      	ldr	r2, [r2, #8]
 800514c:	430a      	orrs	r2, r1
 800514e:	431a      	orrs	r2, r3
 8005150:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005152:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005154:	e03a      	b.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005156:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800515e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005160:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1d      	ldr	r2, [pc, #116]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d10e      	bne.n	8005194 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005176:	481b      	ldr	r0, [pc, #108]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005178:	f7ff ff06 	bl	8004f88 <LL_ADC_IsEnabled>
 800517c:	4604      	mov	r4, r0
 800517e:	481a      	ldr	r0, [pc, #104]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005180:	f7ff ff02 	bl	8004f88 <LL_ADC_IsEnabled>
 8005184:	4603      	mov	r3, r0
 8005186:	4323      	orrs	r3, r4
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e008      	b.n	80051a6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005194:	4817      	ldr	r0, [pc, #92]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005196:	f7ff fef7 	bl	8004f88 <LL_ADC_IsEnabled>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d010      	beq.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051b6:	e009      	b.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80051ca:	e000      	b.n	80051ce <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80051d6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80051da:	4618      	mov	r0, r3
 80051dc:	378c      	adds	r7, #140	; 0x8c
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd90      	pop	{r4, r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40022000 	.word	0x40022000
 80051e8:	40022100 	.word	0x40022100
 80051ec:	40022300 	.word	0x40022300
 80051f0:	58026300 	.word	0x58026300
 80051f4:	58026000 	.word	0x58026000
 80051f8:	fffff0e0 	.word	0xfffff0e0

080051fc <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e023      	b.n	8005256 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc fff2 	bl	800220c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <__NVIC_SetPriorityGrouping>:
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <__NVIC_SetPriorityGrouping+0x40>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800527c:	4013      	ands	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005288:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <__NVIC_SetPriorityGrouping+0x44>)
 800528a:	4313      	orrs	r3, r2
 800528c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800528e:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <__NVIC_SetPriorityGrouping+0x40>)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	60d3      	str	r3, [r2, #12]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	e000ed00 	.word	0xe000ed00
 80052a4:	05fa0000 	.word	0x05fa0000

080052a8 <__NVIC_GetPriorityGrouping>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052ac:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <__NVIC_GetPriorityGrouping+0x18>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	0a1b      	lsrs	r3, r3, #8
 80052b2:	f003 0307 	and.w	r3, r3, #7
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	e000ed00 	.word	0xe000ed00

080052c4 <__NVIC_EnableIRQ>:
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	db0b      	blt.n	80052ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	f003 021f 	and.w	r2, r3, #31
 80052dc:	4907      	ldr	r1, [pc, #28]	; (80052fc <__NVIC_EnableIRQ+0x38>)
 80052de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	2001      	movs	r0, #1
 80052e6:	fa00 f202 	lsl.w	r2, r0, r2
 80052ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	e000e100 	.word	0xe000e100

08005300 <__NVIC_SetPriority>:
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	4603      	mov	r3, r0
 8005308:	6039      	str	r1, [r7, #0]
 800530a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800530c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005310:	2b00      	cmp	r3, #0
 8005312:	db0a      	blt.n	800532a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	b2da      	uxtb	r2, r3
 8005318:	490c      	ldr	r1, [pc, #48]	; (800534c <__NVIC_SetPriority+0x4c>)
 800531a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800531e:	0112      	lsls	r2, r2, #4
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	440b      	add	r3, r1
 8005324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005328:	e00a      	b.n	8005340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	4908      	ldr	r1, [pc, #32]	; (8005350 <__NVIC_SetPriority+0x50>)
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	3b04      	subs	r3, #4
 8005338:	0112      	lsls	r2, r2, #4
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	440b      	add	r3, r1
 800533e:	761a      	strb	r2, [r3, #24]
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	e000e100 	.word	0xe000e100
 8005350:	e000ed00 	.word	0xe000ed00

08005354 <NVIC_EncodePriority>:
{
 8005354:	b480      	push	{r7}
 8005356:	b089      	sub	sp, #36	; 0x24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f1c3 0307 	rsb	r3, r3, #7
 800536e:	2b04      	cmp	r3, #4
 8005370:	bf28      	it	cs
 8005372:	2304      	movcs	r3, #4
 8005374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	3304      	adds	r3, #4
 800537a:	2b06      	cmp	r3, #6
 800537c:	d902      	bls.n	8005384 <NVIC_EncodePriority+0x30>
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	3b03      	subs	r3, #3
 8005382:	e000      	b.n	8005386 <NVIC_EncodePriority+0x32>
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005388:	f04f 32ff 	mov.w	r2, #4294967295
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43da      	mvns	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	401a      	ands	r2, r3
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800539c:	f04f 31ff 	mov.w	r1, #4294967295
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	fa01 f303 	lsl.w	r3, r1, r3
 80053a6:	43d9      	mvns	r1, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053ac:	4313      	orrs	r3, r2
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3724      	adds	r7, #36	; 0x24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053cc:	d301      	bcc.n	80053d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053ce:	2301      	movs	r3, #1
 80053d0:	e00f      	b.n	80053f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053d2:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <SysTick_Config+0x40>)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053da:	210f      	movs	r1, #15
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	f7ff ff8e 	bl	8005300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <SysTick_Config+0x40>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ea:	4b04      	ldr	r3, [pc, #16]	; (80053fc <SysTick_Config+0x40>)
 80053ec:	2207      	movs	r2, #7
 80053ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	e000e010 	.word	0xe000e010

08005400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ff29 	bl	8005260 <__NVIC_SetPriorityGrouping>
}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b086      	sub	sp, #24
 800541a:	af00      	add	r7, sp, #0
 800541c:	4603      	mov	r3, r0
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
 8005422:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005424:	f7ff ff40 	bl	80052a8 <__NVIC_GetPriorityGrouping>
 8005428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	6978      	ldr	r0, [r7, #20]
 8005430:	f7ff ff90 	bl	8005354 <NVIC_EncodePriority>
 8005434:	4602      	mov	r2, r0
 8005436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800543a:	4611      	mov	r1, r2
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff ff5f 	bl	8005300 <__NVIC_SetPriority>
}
 8005442:	bf00      	nop
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	4603      	mov	r3, r0
 8005452:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff ff33 	bl	80052c4 <__NVIC_EnableIRQ>
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff ffa4 	bl	80053bc <SysTick_Config>
 8005474:	4603      	mov	r3, r0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0b4      	b.n	80055fc <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8005492:	4b5c      	ldr	r3, [pc, #368]	; (8005604 <HAL_DFSDM_ChannelInit+0x184>)
 8005494:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8005496:	4b5c      	ldr	r3, [pc, #368]	; (8005608 <HAL_DFSDM_ChannelInit+0x188>)
 8005498:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 800549a:	4b5c      	ldr	r3, [pc, #368]	; (800560c <HAL_DFSDM_ChannelInit+0x18c>)
 800549c:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fa10 	bl	80058c8 <DFSDM_GetChannelFromInstance>
 80054a8:	4603      	mov	r3, r0
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4413      	add	r3, r2
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0a0      	b.n	80055fc <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fc ff78 	bl	80023b0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d125      	bne.n	800551e <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	791b      	ldrb	r3, [r3, #4]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d108      	bne.n	8005512 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	3b01      	subs	r3, #1
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800552c:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6819      	ldr	r1, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800553c:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005542:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 020f 	bic.w	r2, r2, #15
 800555a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6819      	ldr	r1, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8005582:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6899      	ldr	r1, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	3b01      	subs	r3, #1
 8005594:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f002 0207 	and.w	r2, r2, #7
 80055ae:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055da:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 f96d 	bl	80058c8 <DFSDM_GetChannelFromInstance>
 80055ee:	4603      	mov	r3, r0
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4413      	add	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	24000250 	.word	0x24000250
 8005608:	24000254 	.word	0x24000254
 800560c:	40017800 	.word	0x40017800

08005610 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e0c8      	b.n	80057b4 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 8005622:	4b66      	ldr	r3, [pc, #408]	; (80057bc <HAL_DFSDM_FilterInit+0x1ac>)
 8005624:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	429a      	cmp	r2, r3
 800562e:	d109      	bne.n	8005644 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8005634:	2b01      	cmp	r3, #1
 8005636:	d003      	beq.n	8005640 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0b7      	b.n	80057b4 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7fc fdf7 	bl	8002250 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005670:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	7a1b      	ldrb	r3, [r3, #8]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d108      	bne.n	800568c <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	e007      	b.n	800569c <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800569a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	7a5b      	ldrb	r3, [r3, #9]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d108      	bne.n	80056b6 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e007      	b.n	80056c6 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80056c4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6819      	ldr	r1, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	4b3b      	ldr	r3, [pc, #236]	; (80057c0 <HAL_DFSDM_FilterInit+0x1b0>)
 80056d2:	400b      	ands	r3, r1
 80056d4:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d108      	bne.n	80056f0 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6819      	ldr	r1, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	695a      	ldr	r2, [r3, #20]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7c1b      	ldrb	r3, [r3, #16]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d108      	bne.n	800570a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0210 	orr.w	r2, r2, #16
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	e007      	b.n	800571a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0210 	bic.w	r2, r2, #16
 8005718:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	7c5b      	ldrb	r3, [r3, #17]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d108      	bne.n	8005734 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0220 	orr.w	r2, r2, #32
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e007      	b.n	8005744 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0220 	bic.w	r2, r2, #32
 8005742:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6959      	ldr	r1, [r3, #20]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <HAL_DFSDM_FilterInit+0x1b4>)
 8005750:	400b      	ands	r3, r1
 8005752:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6959      	ldr	r1, [r3, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	3b01      	subs	r3, #1
 8005764:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005766:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800576e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	7c1a      	ldrb	r2, [r3, #16]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0201 	orr.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40017900 	.word	0x40017900
 80057c0:	ffff80f7 	.word	0xffff80f7
 80057c4:	1c00ff00 	.word	0x1c00ff00

080057c8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d02c      	beq.n	800583c <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80057e8:	2bff      	cmp	r3, #255	; 0xff
 80057ea:	d027      	beq.n	800583c <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6819      	ldr	r1, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4b16      	ldr	r3, [pc, #88]	; (8005850 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80057f8:	400b      	ands	r3, r1
 80057fa:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d10d      	bne.n	800581e <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	e00a      	b.n	8005834 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6819      	ldr	r1, [r3, #0]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
 800583a:	e001      	b.n	8005840 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
}
 8005842:	4618      	mov	r0, r3
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	f8fbffff 	.word	0xf8fbffff

08005854 <HAL_DFSDM_FilterRegularStart>:
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d004      	beq.n	8005874 <HAL_DFSDM_FilterRegularStart+0x20>
      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8005870:	2b03      	cmp	r3, #3
 8005872:	d103      	bne.n	800587c <HAL_DFSDM_FilterRegularStart+0x28>
  {
    /* Start regular conversion */
    DFSDM_RegConvStart(hdfsdm_filter);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f873 	bl	8005960 <DFSDM_RegConvStart>
 800587a:	e001      	b.n	8005880 <HAL_DFSDM_FilterRegularStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0207 	and.w	r2, r3, #7
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058ac:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da00      	bge.n	80058b6 <HAL_DFSDM_FilterGetRegularValue+0x2c>
 80058b4:	33ff      	adds	r3, #255	; 0xff
 80058b6:	121b      	asrs	r3, r3, #8
 80058b8:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 80058ba:	68bb      	ldr	r3, [r7, #8]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <DFSDM_GetChannelFromInstance+0x7c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d102      	bne.n	80058de <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e02b      	b.n	8005936 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a19      	ldr	r2, [pc, #100]	; (8005948 <DFSDM_GetChannelFromInstance+0x80>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d102      	bne.n	80058ec <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80058e6:	2301      	movs	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e024      	b.n	8005936 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <DFSDM_GetChannelFromInstance+0x84>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d102      	bne.n	80058fa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80058f4:	2302      	movs	r3, #2
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e01d      	b.n	8005936 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <DFSDM_GetChannelFromInstance+0x88>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d102      	bne.n	8005908 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8005902:	2303      	movs	r3, #3
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	e016      	b.n	8005936 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a12      	ldr	r2, [pc, #72]	; (8005954 <DFSDM_GetChannelFromInstance+0x8c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d102      	bne.n	8005916 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8005910:	2304      	movs	r3, #4
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	e00f      	b.n	8005936 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a0f      	ldr	r2, [pc, #60]	; (8005958 <DFSDM_GetChannelFromInstance+0x90>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d102      	bne.n	8005924 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800591e:	2305      	movs	r3, #5
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	e008      	b.n	8005936 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a0d      	ldr	r2, [pc, #52]	; (800595c <DFSDM_GetChannelFromInstance+0x94>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d102      	bne.n	8005932 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 800592c:	2306      	movs	r3, #6
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	e001      	b.n	8005936 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8005932:	2307      	movs	r3, #7
 8005934:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005936:	68fb      	ldr	r3, [r7, #12]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40017800 	.word	0x40017800
 8005948:	40017820 	.word	0x40017820
 800594c:	40017840 	.word	0x40017840
 8005950:	40017860 	.word	0x40017860
 8005954:	40017880 	.word	0x40017880
 8005958:	400178a0 	.word	0x400178a0
 800595c:	400178c0 	.word	0x400178c0

08005960 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596c:	2b00      	cmp	r3, #0
 800596e:	d108      	bne.n	8005982 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e033      	b.n	80059ea <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80059a0:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d116      	bne.n	80059ea <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d107      	bne.n	80059d4 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0202 	orr.w	r2, r2, #2
 80059d2:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d102      	bne.n	80059e4 <DFSDM_RegConvStart+0x84>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	e000      	b.n	80059e6 <DFSDM_RegConvStart+0x86>
 80059e4:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <DFSDM_RegConvStart+0x98>
 80059f4:	2202      	movs	r2, #2
 80059f6:	e000      	b.n	80059fa <DFSDM_RegConvStart+0x9a>
 80059f8:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005a14:	f7fd fae6 	bl	8002fe4 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e314      	b.n	800604e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a66      	ldr	r2, [pc, #408]	; (8005bc4 <HAL_DMA_Init+0x1b8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d04a      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a65      	ldr	r2, [pc, #404]	; (8005bc8 <HAL_DMA_Init+0x1bc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d045      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a63      	ldr	r2, [pc, #396]	; (8005bcc <HAL_DMA_Init+0x1c0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d040      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a62      	ldr	r2, [pc, #392]	; (8005bd0 <HAL_DMA_Init+0x1c4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d03b      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a60      	ldr	r2, [pc, #384]	; (8005bd4 <HAL_DMA_Init+0x1c8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d036      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a5f      	ldr	r2, [pc, #380]	; (8005bd8 <HAL_DMA_Init+0x1cc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d031      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a5d      	ldr	r2, [pc, #372]	; (8005bdc <HAL_DMA_Init+0x1d0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d02c      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a5c      	ldr	r2, [pc, #368]	; (8005be0 <HAL_DMA_Init+0x1d4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d027      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a5a      	ldr	r2, [pc, #360]	; (8005be4 <HAL_DMA_Init+0x1d8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d022      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a59      	ldr	r2, [pc, #356]	; (8005be8 <HAL_DMA_Init+0x1dc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d01d      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a57      	ldr	r2, [pc, #348]	; (8005bec <HAL_DMA_Init+0x1e0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d018      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a56      	ldr	r2, [pc, #344]	; (8005bf0 <HAL_DMA_Init+0x1e4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d013      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a54      	ldr	r2, [pc, #336]	; (8005bf4 <HAL_DMA_Init+0x1e8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a53      	ldr	r2, [pc, #332]	; (8005bf8 <HAL_DMA_Init+0x1ec>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d009      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a51      	ldr	r2, [pc, #324]	; (8005bfc <HAL_DMA_Init+0x1f0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <HAL_DMA_Init+0xb8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a50      	ldr	r2, [pc, #320]	; (8005c00 <HAL_DMA_Init+0x1f4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d101      	bne.n	8005ac8 <HAL_DMA_Init+0xbc>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <HAL_DMA_Init+0xbe>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 813c 	beq.w	8005d48 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a37      	ldr	r2, [pc, #220]	; (8005bc4 <HAL_DMA_Init+0x1b8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d04a      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a36      	ldr	r2, [pc, #216]	; (8005bc8 <HAL_DMA_Init+0x1bc>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d045      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a34      	ldr	r2, [pc, #208]	; (8005bcc <HAL_DMA_Init+0x1c0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d040      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <HAL_DMA_Init+0x1c4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d03b      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a31      	ldr	r2, [pc, #196]	; (8005bd4 <HAL_DMA_Init+0x1c8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d036      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a30      	ldr	r2, [pc, #192]	; (8005bd8 <HAL_DMA_Init+0x1cc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d031      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a2e      	ldr	r2, [pc, #184]	; (8005bdc <HAL_DMA_Init+0x1d0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d02c      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a2d      	ldr	r2, [pc, #180]	; (8005be0 <HAL_DMA_Init+0x1d4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d027      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2b      	ldr	r2, [pc, #172]	; (8005be4 <HAL_DMA_Init+0x1d8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d022      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2a      	ldr	r2, [pc, #168]	; (8005be8 <HAL_DMA_Init+0x1dc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d01d      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a28      	ldr	r2, [pc, #160]	; (8005bec <HAL_DMA_Init+0x1e0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d018      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a27      	ldr	r2, [pc, #156]	; (8005bf0 <HAL_DMA_Init+0x1e4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a25      	ldr	r2, [pc, #148]	; (8005bf4 <HAL_DMA_Init+0x1e8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a24      	ldr	r2, [pc, #144]	; (8005bf8 <HAL_DMA_Init+0x1ec>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <HAL_DMA_Init+0x1f0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_DMA_Init+0x174>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a21      	ldr	r2, [pc, #132]	; (8005c00 <HAL_DMA_Init+0x1f4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d108      	bne.n	8005b92 <HAL_DMA_Init+0x186>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e007      	b.n	8005ba2 <HAL_DMA_Init+0x196>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ba2:	e02f      	b.n	8005c04 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ba4:	f7fd fa1e 	bl	8002fe4 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d928      	bls.n	8005c04 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e244      	b.n	800604e <HAL_DMA_Init+0x642>
 8005bc4:	40020010 	.word	0x40020010
 8005bc8:	40020028 	.word	0x40020028
 8005bcc:	40020040 	.word	0x40020040
 8005bd0:	40020058 	.word	0x40020058
 8005bd4:	40020070 	.word	0x40020070
 8005bd8:	40020088 	.word	0x40020088
 8005bdc:	400200a0 	.word	0x400200a0
 8005be0:	400200b8 	.word	0x400200b8
 8005be4:	40020410 	.word	0x40020410
 8005be8:	40020428 	.word	0x40020428
 8005bec:	40020440 	.word	0x40020440
 8005bf0:	40020458 	.word	0x40020458
 8005bf4:	40020470 	.word	0x40020470
 8005bf8:	40020488 	.word	0x40020488
 8005bfc:	400204a0 	.word	0x400204a0
 8005c00:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1c8      	bne.n	8005ba4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4b84      	ldr	r3, [pc, #528]	; (8005e30 <HAL_DMA_Init+0x424>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005c2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c36:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c42:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d107      	bne.n	8005c68 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	4313      	orrs	r3, r2
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b28      	cmp	r3, #40	; 0x28
 8005c6e:	d903      	bls.n	8005c78 <HAL_DMA_Init+0x26c>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b2e      	cmp	r3, #46	; 0x2e
 8005c76:	d91f      	bls.n	8005cb8 <HAL_DMA_Init+0x2ac>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c7e:	d903      	bls.n	8005c88 <HAL_DMA_Init+0x27c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b42      	cmp	r3, #66	; 0x42
 8005c86:	d917      	bls.n	8005cb8 <HAL_DMA_Init+0x2ac>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b46      	cmp	r3, #70	; 0x46
 8005c8e:	d903      	bls.n	8005c98 <HAL_DMA_Init+0x28c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b48      	cmp	r3, #72	; 0x48
 8005c96:	d90f      	bls.n	8005cb8 <HAL_DMA_Init+0x2ac>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b4e      	cmp	r3, #78	; 0x4e
 8005c9e:	d903      	bls.n	8005ca8 <HAL_DMA_Init+0x29c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b52      	cmp	r3, #82	; 0x52
 8005ca6:	d907      	bls.n	8005cb8 <HAL_DMA_Init+0x2ac>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b73      	cmp	r3, #115	; 0x73
 8005cae:	d905      	bls.n	8005cbc <HAL_DMA_Init+0x2b0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b77      	cmp	r3, #119	; 0x77
 8005cb6:	d801      	bhi.n	8005cbc <HAL_DMA_Init+0x2b0>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <HAL_DMA_Init+0x2b2>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cc8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f023 0307 	bic.w	r3, r3, #7
 8005ce0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d117      	bne.n	8005d24 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00e      	beq.n	8005d24 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 fdcc 	bl	80078a4 <DMA_CheckFifoParam>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2240      	movs	r2, #64	; 0x40
 8005d16:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e194      	b.n	800604e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f001 fd07 	bl	8007740 <DMA_CalcBaseAndBitshift>
 8005d32:	4603      	mov	r3, r0
 8005d34:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	223f      	movs	r2, #63	; 0x3f
 8005d40:	409a      	lsls	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	609a      	str	r2, [r3, #8]
 8005d46:	e0ca      	b.n	8005ede <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a39      	ldr	r2, [pc, #228]	; (8005e34 <HAL_DMA_Init+0x428>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d022      	beq.n	8005d98 <HAL_DMA_Init+0x38c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a38      	ldr	r2, [pc, #224]	; (8005e38 <HAL_DMA_Init+0x42c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d01d      	beq.n	8005d98 <HAL_DMA_Init+0x38c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a36      	ldr	r2, [pc, #216]	; (8005e3c <HAL_DMA_Init+0x430>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d018      	beq.n	8005d98 <HAL_DMA_Init+0x38c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a35      	ldr	r2, [pc, #212]	; (8005e40 <HAL_DMA_Init+0x434>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d013      	beq.n	8005d98 <HAL_DMA_Init+0x38c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a33      	ldr	r2, [pc, #204]	; (8005e44 <HAL_DMA_Init+0x438>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00e      	beq.n	8005d98 <HAL_DMA_Init+0x38c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a32      	ldr	r2, [pc, #200]	; (8005e48 <HAL_DMA_Init+0x43c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d009      	beq.n	8005d98 <HAL_DMA_Init+0x38c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a30      	ldr	r2, [pc, #192]	; (8005e4c <HAL_DMA_Init+0x440>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <HAL_DMA_Init+0x38c>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a2f      	ldr	r2, [pc, #188]	; (8005e50 <HAL_DMA_Init+0x444>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d101      	bne.n	8005d9c <HAL_DMA_Init+0x390>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <HAL_DMA_Init+0x392>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8094 	beq.w	8005ecc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a22      	ldr	r2, [pc, #136]	; (8005e34 <HAL_DMA_Init+0x428>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d021      	beq.n	8005df2 <HAL_DMA_Init+0x3e6>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a21      	ldr	r2, [pc, #132]	; (8005e38 <HAL_DMA_Init+0x42c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d01c      	beq.n	8005df2 <HAL_DMA_Init+0x3e6>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a1f      	ldr	r2, [pc, #124]	; (8005e3c <HAL_DMA_Init+0x430>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d017      	beq.n	8005df2 <HAL_DMA_Init+0x3e6>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <HAL_DMA_Init+0x434>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d012      	beq.n	8005df2 <HAL_DMA_Init+0x3e6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <HAL_DMA_Init+0x438>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00d      	beq.n	8005df2 <HAL_DMA_Init+0x3e6>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <HAL_DMA_Init+0x43c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d008      	beq.n	8005df2 <HAL_DMA_Init+0x3e6>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <HAL_DMA_Init+0x440>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <HAL_DMA_Init+0x3e6>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <HAL_DMA_Init+0x444>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <HAL_DMA_Init+0x448>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d01d      	beq.n	8005e58 <HAL_DMA_Init+0x44c>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b80      	cmp	r3, #128	; 0x80
 8005e22:	d102      	bne.n	8005e2a <HAL_DMA_Init+0x41e>
 8005e24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e28:	e017      	b.n	8005e5a <HAL_DMA_Init+0x44e>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e015      	b.n	8005e5a <HAL_DMA_Init+0x44e>
 8005e2e:	bf00      	nop
 8005e30:	fe10803f 	.word	0xfe10803f
 8005e34:	58025408 	.word	0x58025408
 8005e38:	5802541c 	.word	0x5802541c
 8005e3c:	58025430 	.word	0x58025430
 8005e40:	58025444 	.word	0x58025444
 8005e44:	58025458 	.word	0x58025458
 8005e48:	5802546c 	.word	0x5802546c
 8005e4c:	58025480 	.word	0x58025480
 8005e50:	58025494 	.word	0x58025494
 8005e54:	fffe000f 	.word	0xfffe000f
 8005e58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68d2      	ldr	r2, [r2, #12]
 8005e5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4b6e      	ldr	r3, [pc, #440]	; (8006058 <HAL_DMA_Init+0x64c>)
 8005ea0:	4413      	add	r3, r2
 8005ea2:	4a6e      	ldr	r2, [pc, #440]	; (800605c <HAL_DMA_Init+0x650>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	009a      	lsls	r2, r3, #2
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fc45 	bl	8007740 <DMA_CalcBaseAndBitshift>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebe:	f003 031f 	and.w	r3, r3, #31
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	409a      	lsls	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	e008      	b.n	8005ede <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2240      	movs	r2, #64	; 0x40
 8005ed0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e0b7      	b.n	800604e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a5f      	ldr	r2, [pc, #380]	; (8006060 <HAL_DMA_Init+0x654>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d072      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a5d      	ldr	r2, [pc, #372]	; (8006064 <HAL_DMA_Init+0x658>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d06d      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a5c      	ldr	r2, [pc, #368]	; (8006068 <HAL_DMA_Init+0x65c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d068      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a5a      	ldr	r2, [pc, #360]	; (800606c <HAL_DMA_Init+0x660>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d063      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a59      	ldr	r2, [pc, #356]	; (8006070 <HAL_DMA_Init+0x664>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d05e      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a57      	ldr	r2, [pc, #348]	; (8006074 <HAL_DMA_Init+0x668>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d059      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a56      	ldr	r2, [pc, #344]	; (8006078 <HAL_DMA_Init+0x66c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d054      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a54      	ldr	r2, [pc, #336]	; (800607c <HAL_DMA_Init+0x670>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04f      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a53      	ldr	r2, [pc, #332]	; (8006080 <HAL_DMA_Init+0x674>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d04a      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a51      	ldr	r2, [pc, #324]	; (8006084 <HAL_DMA_Init+0x678>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d045      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a50      	ldr	r2, [pc, #320]	; (8006088 <HAL_DMA_Init+0x67c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d040      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a4e      	ldr	r2, [pc, #312]	; (800608c <HAL_DMA_Init+0x680>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d03b      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a4d      	ldr	r2, [pc, #308]	; (8006090 <HAL_DMA_Init+0x684>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d036      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a4b      	ldr	r2, [pc, #300]	; (8006094 <HAL_DMA_Init+0x688>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d031      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a4a      	ldr	r2, [pc, #296]	; (8006098 <HAL_DMA_Init+0x68c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d02c      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a48      	ldr	r2, [pc, #288]	; (800609c <HAL_DMA_Init+0x690>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d027      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a47      	ldr	r2, [pc, #284]	; (80060a0 <HAL_DMA_Init+0x694>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d022      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a45      	ldr	r2, [pc, #276]	; (80060a4 <HAL_DMA_Init+0x698>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01d      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a44      	ldr	r2, [pc, #272]	; (80060a8 <HAL_DMA_Init+0x69c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d018      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a42      	ldr	r2, [pc, #264]	; (80060ac <HAL_DMA_Init+0x6a0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d013      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a41      	ldr	r2, [pc, #260]	; (80060b0 <HAL_DMA_Init+0x6a4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00e      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a3f      	ldr	r2, [pc, #252]	; (80060b4 <HAL_DMA_Init+0x6a8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d009      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a3e      	ldr	r2, [pc, #248]	; (80060b8 <HAL_DMA_Init+0x6ac>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <HAL_DMA_Init+0x5c2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a3c      	ldr	r2, [pc, #240]	; (80060bc <HAL_DMA_Init+0x6b0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d101      	bne.n	8005fd2 <HAL_DMA_Init+0x5c6>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <HAL_DMA_Init+0x5c8>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d032      	beq.n	800603e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 fcdf 	bl	800799c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	d102      	bne.n	8005fec <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006000:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d010      	beq.n	800602c <HAL_DMA_Init+0x620>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b08      	cmp	r3, #8
 8006010:	d80c      	bhi.n	800602c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 fd5c 	bl	8007ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	e008      	b.n	800603e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	a7fdabf8 	.word	0xa7fdabf8
 800605c:	cccccccd 	.word	0xcccccccd
 8006060:	40020010 	.word	0x40020010
 8006064:	40020028 	.word	0x40020028
 8006068:	40020040 	.word	0x40020040
 800606c:	40020058 	.word	0x40020058
 8006070:	40020070 	.word	0x40020070
 8006074:	40020088 	.word	0x40020088
 8006078:	400200a0 	.word	0x400200a0
 800607c:	400200b8 	.word	0x400200b8
 8006080:	40020410 	.word	0x40020410
 8006084:	40020428 	.word	0x40020428
 8006088:	40020440 	.word	0x40020440
 800608c:	40020458 	.word	0x40020458
 8006090:	40020470 	.word	0x40020470
 8006094:	40020488 	.word	0x40020488
 8006098:	400204a0 	.word	0x400204a0
 800609c:	400204b8 	.word	0x400204b8
 80060a0:	58025408 	.word	0x58025408
 80060a4:	5802541c 	.word	0x5802541c
 80060a8:	58025430 	.word	0x58025430
 80060ac:	58025444 	.word	0x58025444
 80060b0:	58025458 	.word	0x58025458
 80060b4:	5802546c 	.word	0x5802546c
 80060b8:	58025480 	.word	0x58025480
 80060bc:	58025494 	.word	0x58025494

080060c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e226      	b.n	800652a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_DMA_Start_IT+0x2a>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e21f      	b.n	800652a <HAL_DMA_Start_IT+0x46a>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	f040 820a 	bne.w	8006514 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a68      	ldr	r2, [pc, #416]	; (80062b4 <HAL_DMA_Start_IT+0x1f4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d04a      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a66      	ldr	r2, [pc, #408]	; (80062b8 <HAL_DMA_Start_IT+0x1f8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d045      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a65      	ldr	r2, [pc, #404]	; (80062bc <HAL_DMA_Start_IT+0x1fc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d040      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a63      	ldr	r2, [pc, #396]	; (80062c0 <HAL_DMA_Start_IT+0x200>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d03b      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a62      	ldr	r2, [pc, #392]	; (80062c4 <HAL_DMA_Start_IT+0x204>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d036      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a60      	ldr	r2, [pc, #384]	; (80062c8 <HAL_DMA_Start_IT+0x208>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d031      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a5f      	ldr	r2, [pc, #380]	; (80062cc <HAL_DMA_Start_IT+0x20c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d02c      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a5d      	ldr	r2, [pc, #372]	; (80062d0 <HAL_DMA_Start_IT+0x210>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d027      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a5c      	ldr	r2, [pc, #368]	; (80062d4 <HAL_DMA_Start_IT+0x214>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d022      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a5a      	ldr	r2, [pc, #360]	; (80062d8 <HAL_DMA_Start_IT+0x218>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a59      	ldr	r2, [pc, #356]	; (80062dc <HAL_DMA_Start_IT+0x21c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a57      	ldr	r2, [pc, #348]	; (80062e0 <HAL_DMA_Start_IT+0x220>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a56      	ldr	r2, [pc, #344]	; (80062e4 <HAL_DMA_Start_IT+0x224>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a54      	ldr	r2, [pc, #336]	; (80062e8 <HAL_DMA_Start_IT+0x228>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a53      	ldr	r2, [pc, #332]	; (80062ec <HAL_DMA_Start_IT+0x22c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_DMA_Start_IT+0xee>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a51      	ldr	r2, [pc, #324]	; (80062f0 <HAL_DMA_Start_IT+0x230>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d108      	bne.n	80061c0 <HAL_DMA_Start_IT+0x100>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0201 	bic.w	r2, r2, #1
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e007      	b.n	80061d0 <HAL_DMA_Start_IT+0x110>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f001 f906 	bl	80073e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a34      	ldr	r2, [pc, #208]	; (80062b4 <HAL_DMA_Start_IT+0x1f4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d04a      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a33      	ldr	r2, [pc, #204]	; (80062b8 <HAL_DMA_Start_IT+0x1f8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d045      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a31      	ldr	r2, [pc, #196]	; (80062bc <HAL_DMA_Start_IT+0x1fc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d040      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a30      	ldr	r2, [pc, #192]	; (80062c0 <HAL_DMA_Start_IT+0x200>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d03b      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a2e      	ldr	r2, [pc, #184]	; (80062c4 <HAL_DMA_Start_IT+0x204>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d036      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a2d      	ldr	r2, [pc, #180]	; (80062c8 <HAL_DMA_Start_IT+0x208>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d031      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <HAL_DMA_Start_IT+0x20c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02c      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2a      	ldr	r2, [pc, #168]	; (80062d0 <HAL_DMA_Start_IT+0x210>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d027      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a28      	ldr	r2, [pc, #160]	; (80062d4 <HAL_DMA_Start_IT+0x214>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d022      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <HAL_DMA_Start_IT+0x218>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d01d      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a25      	ldr	r2, [pc, #148]	; (80062dc <HAL_DMA_Start_IT+0x21c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d018      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a24      	ldr	r2, [pc, #144]	; (80062e0 <HAL_DMA_Start_IT+0x220>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d013      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a22      	ldr	r2, [pc, #136]	; (80062e4 <HAL_DMA_Start_IT+0x224>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00e      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a21      	ldr	r2, [pc, #132]	; (80062e8 <HAL_DMA_Start_IT+0x228>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d009      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1f      	ldr	r2, [pc, #124]	; (80062ec <HAL_DMA_Start_IT+0x22c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_DMA_Start_IT+0x1bc>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <HAL_DMA_Start_IT+0x230>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d101      	bne.n	8006280 <HAL_DMA_Start_IT+0x1c0>
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <HAL_DMA_Start_IT+0x1c2>
 8006280:	2300      	movs	r3, #0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d036      	beq.n	80062f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f023 021e 	bic.w	r2, r3, #30
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0216 	orr.w	r2, r2, #22
 8006298:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d03e      	beq.n	8006320 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0208 	orr.w	r2, r2, #8
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e035      	b.n	8006320 <HAL_DMA_Start_IT+0x260>
 80062b4:	40020010 	.word	0x40020010
 80062b8:	40020028 	.word	0x40020028
 80062bc:	40020040 	.word	0x40020040
 80062c0:	40020058 	.word	0x40020058
 80062c4:	40020070 	.word	0x40020070
 80062c8:	40020088 	.word	0x40020088
 80062cc:	400200a0 	.word	0x400200a0
 80062d0:	400200b8 	.word	0x400200b8
 80062d4:	40020410 	.word	0x40020410
 80062d8:	40020428 	.word	0x40020428
 80062dc:	40020440 	.word	0x40020440
 80062e0:	40020458 	.word	0x40020458
 80062e4:	40020470 	.word	0x40020470
 80062e8:	40020488 	.word	0x40020488
 80062ec:	400204a0 	.word	0x400204a0
 80062f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f023 020e 	bic.w	r2, r3, #14
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 020a 	orr.w	r2, r2, #10
 8006306:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0204 	orr.w	r2, r2, #4
 800631e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a83      	ldr	r2, [pc, #524]	; (8006534 <HAL_DMA_Start_IT+0x474>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d072      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a82      	ldr	r2, [pc, #520]	; (8006538 <HAL_DMA_Start_IT+0x478>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d06d      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a80      	ldr	r2, [pc, #512]	; (800653c <HAL_DMA_Start_IT+0x47c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d068      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a7f      	ldr	r2, [pc, #508]	; (8006540 <HAL_DMA_Start_IT+0x480>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d063      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a7d      	ldr	r2, [pc, #500]	; (8006544 <HAL_DMA_Start_IT+0x484>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d05e      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a7c      	ldr	r2, [pc, #496]	; (8006548 <HAL_DMA_Start_IT+0x488>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d059      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a7a      	ldr	r2, [pc, #488]	; (800654c <HAL_DMA_Start_IT+0x48c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d054      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a79      	ldr	r2, [pc, #484]	; (8006550 <HAL_DMA_Start_IT+0x490>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d04f      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a77      	ldr	r2, [pc, #476]	; (8006554 <HAL_DMA_Start_IT+0x494>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d04a      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a76      	ldr	r2, [pc, #472]	; (8006558 <HAL_DMA_Start_IT+0x498>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d045      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a74      	ldr	r2, [pc, #464]	; (800655c <HAL_DMA_Start_IT+0x49c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d040      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a73      	ldr	r2, [pc, #460]	; (8006560 <HAL_DMA_Start_IT+0x4a0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d03b      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a71      	ldr	r2, [pc, #452]	; (8006564 <HAL_DMA_Start_IT+0x4a4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d036      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a70      	ldr	r2, [pc, #448]	; (8006568 <HAL_DMA_Start_IT+0x4a8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d031      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a6e      	ldr	r2, [pc, #440]	; (800656c <HAL_DMA_Start_IT+0x4ac>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d02c      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a6d      	ldr	r2, [pc, #436]	; (8006570 <HAL_DMA_Start_IT+0x4b0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d027      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a6b      	ldr	r2, [pc, #428]	; (8006574 <HAL_DMA_Start_IT+0x4b4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d022      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a6a      	ldr	r2, [pc, #424]	; (8006578 <HAL_DMA_Start_IT+0x4b8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d01d      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a68      	ldr	r2, [pc, #416]	; (800657c <HAL_DMA_Start_IT+0x4bc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d018      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a67      	ldr	r2, [pc, #412]	; (8006580 <HAL_DMA_Start_IT+0x4c0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d013      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a65      	ldr	r2, [pc, #404]	; (8006584 <HAL_DMA_Start_IT+0x4c4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00e      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a64      	ldr	r2, [pc, #400]	; (8006588 <HAL_DMA_Start_IT+0x4c8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d009      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a62      	ldr	r2, [pc, #392]	; (800658c <HAL_DMA_Start_IT+0x4cc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d004      	beq.n	8006410 <HAL_DMA_Start_IT+0x350>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a61      	ldr	r2, [pc, #388]	; (8006590 <HAL_DMA_Start_IT+0x4d0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d101      	bne.n	8006414 <HAL_DMA_Start_IT+0x354>
 8006410:	2301      	movs	r3, #1
 8006412:	e000      	b.n	8006416 <HAL_DMA_Start_IT+0x356>
 8006414:	2300      	movs	r3, #0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01a      	beq.n	8006450 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006436:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800644e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a37      	ldr	r2, [pc, #220]	; (8006534 <HAL_DMA_Start_IT+0x474>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d04a      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a36      	ldr	r2, [pc, #216]	; (8006538 <HAL_DMA_Start_IT+0x478>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d045      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a34      	ldr	r2, [pc, #208]	; (800653c <HAL_DMA_Start_IT+0x47c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d040      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a33      	ldr	r2, [pc, #204]	; (8006540 <HAL_DMA_Start_IT+0x480>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d03b      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a31      	ldr	r2, [pc, #196]	; (8006544 <HAL_DMA_Start_IT+0x484>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d036      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a30      	ldr	r2, [pc, #192]	; (8006548 <HAL_DMA_Start_IT+0x488>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d031      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2e      	ldr	r2, [pc, #184]	; (800654c <HAL_DMA_Start_IT+0x48c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d02c      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2d      	ldr	r2, [pc, #180]	; (8006550 <HAL_DMA_Start_IT+0x490>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d027      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2b      	ldr	r2, [pc, #172]	; (8006554 <HAL_DMA_Start_IT+0x494>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d022      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2a      	ldr	r2, [pc, #168]	; (8006558 <HAL_DMA_Start_IT+0x498>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d01d      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a28      	ldr	r2, [pc, #160]	; (800655c <HAL_DMA_Start_IT+0x49c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d018      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a27      	ldr	r2, [pc, #156]	; (8006560 <HAL_DMA_Start_IT+0x4a0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d013      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a25      	ldr	r2, [pc, #148]	; (8006564 <HAL_DMA_Start_IT+0x4a4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00e      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a24      	ldr	r2, [pc, #144]	; (8006568 <HAL_DMA_Start_IT+0x4a8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a22      	ldr	r2, [pc, #136]	; (800656c <HAL_DMA_Start_IT+0x4ac>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_DMA_Start_IT+0x430>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a21      	ldr	r2, [pc, #132]	; (8006570 <HAL_DMA_Start_IT+0x4b0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d108      	bne.n	8006502 <HAL_DMA_Start_IT+0x442>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	e012      	b.n	8006528 <HAL_DMA_Start_IT+0x468>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e009      	b.n	8006528 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006522:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006528:	7dfb      	ldrb	r3, [r7, #23]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40020010 	.word	0x40020010
 8006538:	40020028 	.word	0x40020028
 800653c:	40020040 	.word	0x40020040
 8006540:	40020058 	.word	0x40020058
 8006544:	40020070 	.word	0x40020070
 8006548:	40020088 	.word	0x40020088
 800654c:	400200a0 	.word	0x400200a0
 8006550:	400200b8 	.word	0x400200b8
 8006554:	40020410 	.word	0x40020410
 8006558:	40020428 	.word	0x40020428
 800655c:	40020440 	.word	0x40020440
 8006560:	40020458 	.word	0x40020458
 8006564:	40020470 	.word	0x40020470
 8006568:	40020488 	.word	0x40020488
 800656c:	400204a0 	.word	0x400204a0
 8006570:	400204b8 	.word	0x400204b8
 8006574:	58025408 	.word	0x58025408
 8006578:	5802541c 	.word	0x5802541c
 800657c:	58025430 	.word	0x58025430
 8006580:	58025444 	.word	0x58025444
 8006584:	58025458 	.word	0x58025458
 8006588:	5802546c 	.word	0x5802546c
 800658c:	58025480 	.word	0x58025480
 8006590:	58025494 	.word	0x58025494

08006594 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80065a0:	4b67      	ldr	r3, [pc, #412]	; (8006740 <HAL_DMA_IRQHandler+0x1ac>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a67      	ldr	r2, [pc, #412]	; (8006744 <HAL_DMA_IRQHandler+0x1b0>)
 80065a6:	fba2 2303 	umull	r2, r3, r2, r3
 80065aa:	0a9b      	lsrs	r3, r3, #10
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a5f      	ldr	r2, [pc, #380]	; (8006748 <HAL_DMA_IRQHandler+0x1b4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d04a      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a5d      	ldr	r2, [pc, #372]	; (800674c <HAL_DMA_IRQHandler+0x1b8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d045      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a5c      	ldr	r2, [pc, #368]	; (8006750 <HAL_DMA_IRQHandler+0x1bc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d040      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a5a      	ldr	r2, [pc, #360]	; (8006754 <HAL_DMA_IRQHandler+0x1c0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d03b      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a59      	ldr	r2, [pc, #356]	; (8006758 <HAL_DMA_IRQHandler+0x1c4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d036      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a57      	ldr	r2, [pc, #348]	; (800675c <HAL_DMA_IRQHandler+0x1c8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d031      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a56      	ldr	r2, [pc, #344]	; (8006760 <HAL_DMA_IRQHandler+0x1cc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d02c      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a54      	ldr	r2, [pc, #336]	; (8006764 <HAL_DMA_IRQHandler+0x1d0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d027      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a53      	ldr	r2, [pc, #332]	; (8006768 <HAL_DMA_IRQHandler+0x1d4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d022      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a51      	ldr	r2, [pc, #324]	; (800676c <HAL_DMA_IRQHandler+0x1d8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01d      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a50      	ldr	r2, [pc, #320]	; (8006770 <HAL_DMA_IRQHandler+0x1dc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d018      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a4e      	ldr	r2, [pc, #312]	; (8006774 <HAL_DMA_IRQHandler+0x1e0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a4d      	ldr	r2, [pc, #308]	; (8006778 <HAL_DMA_IRQHandler+0x1e4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00e      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a4b      	ldr	r2, [pc, #300]	; (800677c <HAL_DMA_IRQHandler+0x1e8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d009      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a4a      	ldr	r2, [pc, #296]	; (8006780 <HAL_DMA_IRQHandler+0x1ec>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_DMA_IRQHandler+0xd2>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a48      	ldr	r2, [pc, #288]	; (8006784 <HAL_DMA_IRQHandler+0x1f0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d101      	bne.n	800666a <HAL_DMA_IRQHandler+0xd6>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <HAL_DMA_IRQHandler+0xd8>
 800666a:	2300      	movs	r3, #0
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 842b 	beq.w	8006ec8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	2208      	movs	r2, #8
 800667c:	409a      	lsls	r2, r3
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	4013      	ands	r3, r2
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80a2 	beq.w	80067cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a2e      	ldr	r2, [pc, #184]	; (8006748 <HAL_DMA_IRQHandler+0x1b4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d04a      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a2d      	ldr	r2, [pc, #180]	; (800674c <HAL_DMA_IRQHandler+0x1b8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d045      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a2b      	ldr	r2, [pc, #172]	; (8006750 <HAL_DMA_IRQHandler+0x1bc>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d040      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2a      	ldr	r2, [pc, #168]	; (8006754 <HAL_DMA_IRQHandler+0x1c0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d03b      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a28      	ldr	r2, [pc, #160]	; (8006758 <HAL_DMA_IRQHandler+0x1c4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d036      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a27      	ldr	r2, [pc, #156]	; (800675c <HAL_DMA_IRQHandler+0x1c8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d031      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a25      	ldr	r2, [pc, #148]	; (8006760 <HAL_DMA_IRQHandler+0x1cc>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d02c      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a24      	ldr	r2, [pc, #144]	; (8006764 <HAL_DMA_IRQHandler+0x1d0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d027      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a22      	ldr	r2, [pc, #136]	; (8006768 <HAL_DMA_IRQHandler+0x1d4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d022      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a21      	ldr	r2, [pc, #132]	; (800676c <HAL_DMA_IRQHandler+0x1d8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d01d      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1f      	ldr	r2, [pc, #124]	; (8006770 <HAL_DMA_IRQHandler+0x1dc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d018      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1e      	ldr	r2, [pc, #120]	; (8006774 <HAL_DMA_IRQHandler+0x1e0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1c      	ldr	r2, [pc, #112]	; (8006778 <HAL_DMA_IRQHandler+0x1e4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00e      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1b      	ldr	r2, [pc, #108]	; (800677c <HAL_DMA_IRQHandler+0x1e8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d009      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a19      	ldr	r2, [pc, #100]	; (8006780 <HAL_DMA_IRQHandler+0x1ec>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <HAL_DMA_IRQHandler+0x194>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a18      	ldr	r2, [pc, #96]	; (8006784 <HAL_DMA_IRQHandler+0x1f0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d12f      	bne.n	8006788 <HAL_DMA_IRQHandler+0x1f4>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0304 	and.w	r3, r3, #4
 8006732:	2b00      	cmp	r3, #0
 8006734:	bf14      	ite	ne
 8006736:	2301      	movne	r3, #1
 8006738:	2300      	moveq	r3, #0
 800673a:	b2db      	uxtb	r3, r3
 800673c:	e02e      	b.n	800679c <HAL_DMA_IRQHandler+0x208>
 800673e:	bf00      	nop
 8006740:	24000008 	.word	0x24000008
 8006744:	1b4e81b5 	.word	0x1b4e81b5
 8006748:	40020010 	.word	0x40020010
 800674c:	40020028 	.word	0x40020028
 8006750:	40020040 	.word	0x40020040
 8006754:	40020058 	.word	0x40020058
 8006758:	40020070 	.word	0x40020070
 800675c:	40020088 	.word	0x40020088
 8006760:	400200a0 	.word	0x400200a0
 8006764:	400200b8 	.word	0x400200b8
 8006768:	40020410 	.word	0x40020410
 800676c:	40020428 	.word	0x40020428
 8006770:	40020440 	.word	0x40020440
 8006774:	40020458 	.word	0x40020458
 8006778:	40020470 	.word	0x40020470
 800677c:	40020488 	.word	0x40020488
 8006780:	400204a0 	.word	0x400204a0
 8006784:	400204b8 	.word	0x400204b8
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf14      	ite	ne
 8006796:	2301      	movne	r3, #1
 8006798:	2300      	moveq	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d015      	beq.n	80067cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0204 	bic.w	r2, r2, #4
 80067ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b4:	f003 031f 	and.w	r3, r3, #31
 80067b8:	2208      	movs	r2, #8
 80067ba:	409a      	lsls	r2, r3
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c4:	f043 0201 	orr.w	r2, r3, #1
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	fa22 f303 	lsr.w	r3, r2, r3
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d06e      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a69      	ldr	r2, [pc, #420]	; (800698c <HAL_DMA_IRQHandler+0x3f8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d04a      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a67      	ldr	r2, [pc, #412]	; (8006990 <HAL_DMA_IRQHandler+0x3fc>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d045      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a66      	ldr	r2, [pc, #408]	; (8006994 <HAL_DMA_IRQHandler+0x400>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d040      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a64      	ldr	r2, [pc, #400]	; (8006998 <HAL_DMA_IRQHandler+0x404>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d03b      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a63      	ldr	r2, [pc, #396]	; (800699c <HAL_DMA_IRQHandler+0x408>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d036      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a61      	ldr	r2, [pc, #388]	; (80069a0 <HAL_DMA_IRQHandler+0x40c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d031      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a60      	ldr	r2, [pc, #384]	; (80069a4 <HAL_DMA_IRQHandler+0x410>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d02c      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5e      	ldr	r2, [pc, #376]	; (80069a8 <HAL_DMA_IRQHandler+0x414>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d027      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a5d      	ldr	r2, [pc, #372]	; (80069ac <HAL_DMA_IRQHandler+0x418>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d022      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a5b      	ldr	r2, [pc, #364]	; (80069b0 <HAL_DMA_IRQHandler+0x41c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d01d      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a5a      	ldr	r2, [pc, #360]	; (80069b4 <HAL_DMA_IRQHandler+0x420>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d018      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a58      	ldr	r2, [pc, #352]	; (80069b8 <HAL_DMA_IRQHandler+0x424>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d013      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a57      	ldr	r2, [pc, #348]	; (80069bc <HAL_DMA_IRQHandler+0x428>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00e      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a55      	ldr	r2, [pc, #340]	; (80069c0 <HAL_DMA_IRQHandler+0x42c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d009      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a54      	ldr	r2, [pc, #336]	; (80069c4 <HAL_DMA_IRQHandler+0x430>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d004      	beq.n	8006882 <HAL_DMA_IRQHandler+0x2ee>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a52      	ldr	r2, [pc, #328]	; (80069c8 <HAL_DMA_IRQHandler+0x434>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d10a      	bne.n	8006898 <HAL_DMA_IRQHandler+0x304>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688c:	2b00      	cmp	r3, #0
 800688e:	bf14      	ite	ne
 8006890:	2301      	movne	r3, #1
 8006892:	2300      	moveq	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	e003      	b.n	80068a0 <HAL_DMA_IRQHandler+0x30c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2300      	movs	r3, #0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	2201      	movs	r2, #1
 80068ae:	409a      	lsls	r2, r3
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	f043 0202 	orr.w	r2, r3, #2
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	2204      	movs	r2, #4
 80068ca:	409a      	lsls	r2, r3
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 808f 	beq.w	80069f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a2c      	ldr	r2, [pc, #176]	; (800698c <HAL_DMA_IRQHandler+0x3f8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d04a      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a2a      	ldr	r2, [pc, #168]	; (8006990 <HAL_DMA_IRQHandler+0x3fc>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d045      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a29      	ldr	r2, [pc, #164]	; (8006994 <HAL_DMA_IRQHandler+0x400>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d040      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a27      	ldr	r2, [pc, #156]	; (8006998 <HAL_DMA_IRQHandler+0x404>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d03b      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a26      	ldr	r2, [pc, #152]	; (800699c <HAL_DMA_IRQHandler+0x408>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d036      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a24      	ldr	r2, [pc, #144]	; (80069a0 <HAL_DMA_IRQHandler+0x40c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d031      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a23      	ldr	r2, [pc, #140]	; (80069a4 <HAL_DMA_IRQHandler+0x410>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d02c      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <HAL_DMA_IRQHandler+0x414>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d027      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a20      	ldr	r2, [pc, #128]	; (80069ac <HAL_DMA_IRQHandler+0x418>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d022      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1e      	ldr	r2, [pc, #120]	; (80069b0 <HAL_DMA_IRQHandler+0x41c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d01d      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <HAL_DMA_IRQHandler+0x420>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d018      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <HAL_DMA_IRQHandler+0x424>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1a      	ldr	r2, [pc, #104]	; (80069bc <HAL_DMA_IRQHandler+0x428>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00e      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a18      	ldr	r2, [pc, #96]	; (80069c0 <HAL_DMA_IRQHandler+0x42c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a17      	ldr	r2, [pc, #92]	; (80069c4 <HAL_DMA_IRQHandler+0x430>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_DMA_IRQHandler+0x3e2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a15      	ldr	r2, [pc, #84]	; (80069c8 <HAL_DMA_IRQHandler+0x434>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d12a      	bne.n	80069cc <HAL_DMA_IRQHandler+0x438>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e023      	b.n	80069d4 <HAL_DMA_IRQHandler+0x440>
 800698c:	40020010 	.word	0x40020010
 8006990:	40020028 	.word	0x40020028
 8006994:	40020040 	.word	0x40020040
 8006998:	40020058 	.word	0x40020058
 800699c:	40020070 	.word	0x40020070
 80069a0:	40020088 	.word	0x40020088
 80069a4:	400200a0 	.word	0x400200a0
 80069a8:	400200b8 	.word	0x400200b8
 80069ac:	40020410 	.word	0x40020410
 80069b0:	40020428 	.word	0x40020428
 80069b4:	40020440 	.word	0x40020440
 80069b8:	40020458 	.word	0x40020458
 80069bc:	40020470 	.word	0x40020470
 80069c0:	40020488 	.word	0x40020488
 80069c4:	400204a0 	.word	0x400204a0
 80069c8:	400204b8 	.word	0x400204b8
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00d      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069dc:	f003 031f 	and.w	r3, r3, #31
 80069e0:	2204      	movs	r2, #4
 80069e2:	409a      	lsls	r2, r3
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ec:	f043 0204 	orr.w	r2, r3, #4
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	2210      	movs	r2, #16
 80069fe:	409a      	lsls	r2, r3
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80a6 	beq.w	8006b56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a85      	ldr	r2, [pc, #532]	; (8006c24 <HAL_DMA_IRQHandler+0x690>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d04a      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a83      	ldr	r2, [pc, #524]	; (8006c28 <HAL_DMA_IRQHandler+0x694>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d045      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a82      	ldr	r2, [pc, #520]	; (8006c2c <HAL_DMA_IRQHandler+0x698>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d040      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a80      	ldr	r2, [pc, #512]	; (8006c30 <HAL_DMA_IRQHandler+0x69c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d03b      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a7f      	ldr	r2, [pc, #508]	; (8006c34 <HAL_DMA_IRQHandler+0x6a0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d036      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a7d      	ldr	r2, [pc, #500]	; (8006c38 <HAL_DMA_IRQHandler+0x6a4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d031      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a7c      	ldr	r2, [pc, #496]	; (8006c3c <HAL_DMA_IRQHandler+0x6a8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d02c      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a7a      	ldr	r2, [pc, #488]	; (8006c40 <HAL_DMA_IRQHandler+0x6ac>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d027      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a79      	ldr	r2, [pc, #484]	; (8006c44 <HAL_DMA_IRQHandler+0x6b0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d022      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a77      	ldr	r2, [pc, #476]	; (8006c48 <HAL_DMA_IRQHandler+0x6b4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d01d      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a76      	ldr	r2, [pc, #472]	; (8006c4c <HAL_DMA_IRQHandler+0x6b8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d018      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a74      	ldr	r2, [pc, #464]	; (8006c50 <HAL_DMA_IRQHandler+0x6bc>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d013      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a73      	ldr	r2, [pc, #460]	; (8006c54 <HAL_DMA_IRQHandler+0x6c0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00e      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a71      	ldr	r2, [pc, #452]	; (8006c58 <HAL_DMA_IRQHandler+0x6c4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a70      	ldr	r2, [pc, #448]	; (8006c5c <HAL_DMA_IRQHandler+0x6c8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d004      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x516>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a6e      	ldr	r2, [pc, #440]	; (8006c60 <HAL_DMA_IRQHandler+0x6cc>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d10a      	bne.n	8006ac0 <HAL_DMA_IRQHandler+0x52c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bf14      	ite	ne
 8006ab8:	2301      	movne	r3, #1
 8006aba:	2300      	moveq	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	e009      	b.n	8006ad4 <HAL_DMA_IRQHandler+0x540>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bf14      	ite	ne
 8006ace:	2301      	movne	r3, #1
 8006ad0:	2300      	moveq	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d03e      	beq.n	8006b56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	2210      	movs	r2, #16
 8006ae2:	409a      	lsls	r2, r3
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d018      	beq.n	8006b28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d108      	bne.n	8006b16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d024      	beq.n	8006b56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
 8006b14:	e01f      	b.n	8006b56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01b      	beq.n	8006b56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
 8006b26:	e016      	b.n	8006b56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d107      	bne.n	8006b46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0208 	bic.w	r2, r2, #8
 8006b44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5a:	f003 031f 	and.w	r3, r3, #31
 8006b5e:	2220      	movs	r2, #32
 8006b60:	409a      	lsls	r2, r3
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8110 	beq.w	8006d8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a2c      	ldr	r2, [pc, #176]	; (8006c24 <HAL_DMA_IRQHandler+0x690>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d04a      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a2b      	ldr	r2, [pc, #172]	; (8006c28 <HAL_DMA_IRQHandler+0x694>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d045      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a29      	ldr	r2, [pc, #164]	; (8006c2c <HAL_DMA_IRQHandler+0x698>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d040      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a28      	ldr	r2, [pc, #160]	; (8006c30 <HAL_DMA_IRQHandler+0x69c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d03b      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a26      	ldr	r2, [pc, #152]	; (8006c34 <HAL_DMA_IRQHandler+0x6a0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d036      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a25      	ldr	r2, [pc, #148]	; (8006c38 <HAL_DMA_IRQHandler+0x6a4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d031      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a23      	ldr	r2, [pc, #140]	; (8006c3c <HAL_DMA_IRQHandler+0x6a8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d02c      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a22      	ldr	r2, [pc, #136]	; (8006c40 <HAL_DMA_IRQHandler+0x6ac>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d027      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a20      	ldr	r2, [pc, #128]	; (8006c44 <HAL_DMA_IRQHandler+0x6b0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d022      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <HAL_DMA_IRQHandler+0x6b4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d01d      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1d      	ldr	r2, [pc, #116]	; (8006c4c <HAL_DMA_IRQHandler+0x6b8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d018      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a1c      	ldr	r2, [pc, #112]	; (8006c50 <HAL_DMA_IRQHandler+0x6bc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d013      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a1a      	ldr	r2, [pc, #104]	; (8006c54 <HAL_DMA_IRQHandler+0x6c0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00e      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a19      	ldr	r2, [pc, #100]	; (8006c58 <HAL_DMA_IRQHandler+0x6c4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d009      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a17      	ldr	r2, [pc, #92]	; (8006c5c <HAL_DMA_IRQHandler+0x6c8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d004      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x678>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a16      	ldr	r2, [pc, #88]	; (8006c60 <HAL_DMA_IRQHandler+0x6cc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d12b      	bne.n	8006c64 <HAL_DMA_IRQHandler+0x6d0>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bf14      	ite	ne
 8006c1a:	2301      	movne	r3, #1
 8006c1c:	2300      	moveq	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	e02a      	b.n	8006c78 <HAL_DMA_IRQHandler+0x6e4>
 8006c22:	bf00      	nop
 8006c24:	40020010 	.word	0x40020010
 8006c28:	40020028 	.word	0x40020028
 8006c2c:	40020040 	.word	0x40020040
 8006c30:	40020058 	.word	0x40020058
 8006c34:	40020070 	.word	0x40020070
 8006c38:	40020088 	.word	0x40020088
 8006c3c:	400200a0 	.word	0x400200a0
 8006c40:	400200b8 	.word	0x400200b8
 8006c44:	40020410 	.word	0x40020410
 8006c48:	40020428 	.word	0x40020428
 8006c4c:	40020440 	.word	0x40020440
 8006c50:	40020458 	.word	0x40020458
 8006c54:	40020470 	.word	0x40020470
 8006c58:	40020488 	.word	0x40020488
 8006c5c:	400204a0 	.word	0x400204a0
 8006c60:	400204b8 	.word	0x400204b8
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bf14      	ite	ne
 8006c72:	2301      	movne	r3, #1
 8006c74:	2300      	moveq	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8087 	beq.w	8006d8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	2220      	movs	r2, #32
 8006c88:	409a      	lsls	r2, r3
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d139      	bne.n	8006d0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0216 	bic.w	r2, r2, #22
 8006ca8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	695a      	ldr	r2, [r3, #20]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cb8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d103      	bne.n	8006cca <HAL_DMA_IRQHandler+0x736>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d007      	beq.n	8006cda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0208 	bic.w	r2, r2, #8
 8006cd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	223f      	movs	r2, #63	; 0x3f
 8006ce4:	409a      	lsls	r2, r3
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 834a 	beq.w	8007398 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	4798      	blx	r3
          }
          return;
 8006d0c:	e344      	b.n	8007398 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d018      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d108      	bne.n	8006d3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d02c      	beq.n	8006d8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
 8006d3a:	e027      	b.n	8006d8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d023      	beq.n	8006d8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
 8006d4c:	e01e      	b.n	8006d8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10f      	bne.n	8006d7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0210 	bic.w	r2, r2, #16
 8006d6a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8306 	beq.w	80073a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 8088 	beq.w	8006eb4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2204      	movs	r2, #4
 8006da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a7a      	ldr	r2, [pc, #488]	; (8006f9c <HAL_DMA_IRQHandler+0xa08>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d04a      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a79      	ldr	r2, [pc, #484]	; (8006fa0 <HAL_DMA_IRQHandler+0xa0c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d045      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a77      	ldr	r2, [pc, #476]	; (8006fa4 <HAL_DMA_IRQHandler+0xa10>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d040      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a76      	ldr	r2, [pc, #472]	; (8006fa8 <HAL_DMA_IRQHandler+0xa14>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d03b      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a74      	ldr	r2, [pc, #464]	; (8006fac <HAL_DMA_IRQHandler+0xa18>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d036      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a73      	ldr	r2, [pc, #460]	; (8006fb0 <HAL_DMA_IRQHandler+0xa1c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d031      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a71      	ldr	r2, [pc, #452]	; (8006fb4 <HAL_DMA_IRQHandler+0xa20>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d02c      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a70      	ldr	r2, [pc, #448]	; (8006fb8 <HAL_DMA_IRQHandler+0xa24>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d027      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a6e      	ldr	r2, [pc, #440]	; (8006fbc <HAL_DMA_IRQHandler+0xa28>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d022      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a6d      	ldr	r2, [pc, #436]	; (8006fc0 <HAL_DMA_IRQHandler+0xa2c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d01d      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a6b      	ldr	r2, [pc, #428]	; (8006fc4 <HAL_DMA_IRQHandler+0xa30>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d018      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a6a      	ldr	r2, [pc, #424]	; (8006fc8 <HAL_DMA_IRQHandler+0xa34>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d013      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a68      	ldr	r2, [pc, #416]	; (8006fcc <HAL_DMA_IRQHandler+0xa38>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00e      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a67      	ldr	r2, [pc, #412]	; (8006fd0 <HAL_DMA_IRQHandler+0xa3c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d009      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a65      	ldr	r2, [pc, #404]	; (8006fd4 <HAL_DMA_IRQHandler+0xa40>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d004      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x8b8>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a64      	ldr	r2, [pc, #400]	; (8006fd8 <HAL_DMA_IRQHandler+0xa44>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d108      	bne.n	8006e5e <HAL_DMA_IRQHandler+0x8ca>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0201 	bic.w	r2, r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e007      	b.n	8006e6e <HAL_DMA_IRQHandler+0x8da>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0201 	bic.w	r2, r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d307      	bcc.n	8006e8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1f2      	bne.n	8006e6e <HAL_DMA_IRQHandler+0x8da>
 8006e88:	e000      	b.n	8006e8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006e8a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2203      	movs	r2, #3
 8006ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006eaa:	e003      	b.n	8006eb4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 8272 	beq.w	80073a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
 8006ec6:	e26c      	b.n	80073a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a43      	ldr	r2, [pc, #268]	; (8006fdc <HAL_DMA_IRQHandler+0xa48>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d022      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x984>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a42      	ldr	r2, [pc, #264]	; (8006fe0 <HAL_DMA_IRQHandler+0xa4c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d01d      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x984>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a40      	ldr	r2, [pc, #256]	; (8006fe4 <HAL_DMA_IRQHandler+0xa50>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d018      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x984>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a3f      	ldr	r2, [pc, #252]	; (8006fe8 <HAL_DMA_IRQHandler+0xa54>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d013      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x984>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a3d      	ldr	r2, [pc, #244]	; (8006fec <HAL_DMA_IRQHandler+0xa58>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00e      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x984>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a3c      	ldr	r2, [pc, #240]	; (8006ff0 <HAL_DMA_IRQHandler+0xa5c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d009      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x984>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a3a      	ldr	r2, [pc, #232]	; (8006ff4 <HAL_DMA_IRQHandler+0xa60>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d004      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x984>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a39      	ldr	r2, [pc, #228]	; (8006ff8 <HAL_DMA_IRQHandler+0xa64>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d101      	bne.n	8006f1c <HAL_DMA_IRQHandler+0x988>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <HAL_DMA_IRQHandler+0x98a>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 823f 	beq.w	80073a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2204      	movs	r2, #4
 8006f36:	409a      	lsls	r2, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80cd 	beq.w	80070dc <HAL_DMA_IRQHandler+0xb48>
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80c7 	beq.w	80070dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	2204      	movs	r2, #4
 8006f58:	409a      	lsls	r2, r3
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d049      	beq.n	8006ffc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8210 	beq.w	800739c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f84:	e20a      	b.n	800739c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 8206 	beq.w	800739c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f98:	e200      	b.n	800739c <HAL_DMA_IRQHandler+0xe08>
 8006f9a:	bf00      	nop
 8006f9c:	40020010 	.word	0x40020010
 8006fa0:	40020028 	.word	0x40020028
 8006fa4:	40020040 	.word	0x40020040
 8006fa8:	40020058 	.word	0x40020058
 8006fac:	40020070 	.word	0x40020070
 8006fb0:	40020088 	.word	0x40020088
 8006fb4:	400200a0 	.word	0x400200a0
 8006fb8:	400200b8 	.word	0x400200b8
 8006fbc:	40020410 	.word	0x40020410
 8006fc0:	40020428 	.word	0x40020428
 8006fc4:	40020440 	.word	0x40020440
 8006fc8:	40020458 	.word	0x40020458
 8006fcc:	40020470 	.word	0x40020470
 8006fd0:	40020488 	.word	0x40020488
 8006fd4:	400204a0 	.word	0x400204a0
 8006fd8:	400204b8 	.word	0x400204b8
 8006fdc:	58025408 	.word	0x58025408
 8006fe0:	5802541c 	.word	0x5802541c
 8006fe4:	58025430 	.word	0x58025430
 8006fe8:	58025444 	.word	0x58025444
 8006fec:	58025458 	.word	0x58025458
 8006ff0:	5802546c 	.word	0x5802546c
 8006ff4:	58025480 	.word	0x58025480
 8006ff8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f003 0320 	and.w	r3, r3, #32
 8007002:	2b00      	cmp	r3, #0
 8007004:	d160      	bne.n	80070c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a8c      	ldr	r2, [pc, #560]	; (800723c <HAL_DMA_IRQHandler+0xca8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d04a      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a8a      	ldr	r2, [pc, #552]	; (8007240 <HAL_DMA_IRQHandler+0xcac>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d045      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a89      	ldr	r2, [pc, #548]	; (8007244 <HAL_DMA_IRQHandler+0xcb0>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d040      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a87      	ldr	r2, [pc, #540]	; (8007248 <HAL_DMA_IRQHandler+0xcb4>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d03b      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a86      	ldr	r2, [pc, #536]	; (800724c <HAL_DMA_IRQHandler+0xcb8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d036      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a84      	ldr	r2, [pc, #528]	; (8007250 <HAL_DMA_IRQHandler+0xcbc>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d031      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a83      	ldr	r2, [pc, #524]	; (8007254 <HAL_DMA_IRQHandler+0xcc0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d02c      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a81      	ldr	r2, [pc, #516]	; (8007258 <HAL_DMA_IRQHandler+0xcc4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d027      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a80      	ldr	r2, [pc, #512]	; (800725c <HAL_DMA_IRQHandler+0xcc8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d022      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a7e      	ldr	r2, [pc, #504]	; (8007260 <HAL_DMA_IRQHandler+0xccc>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01d      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a7d      	ldr	r2, [pc, #500]	; (8007264 <HAL_DMA_IRQHandler+0xcd0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d018      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a7b      	ldr	r2, [pc, #492]	; (8007268 <HAL_DMA_IRQHandler+0xcd4>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d013      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a7a      	ldr	r2, [pc, #488]	; (800726c <HAL_DMA_IRQHandler+0xcd8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00e      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a78      	ldr	r2, [pc, #480]	; (8007270 <HAL_DMA_IRQHandler+0xcdc>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d009      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a77      	ldr	r2, [pc, #476]	; (8007274 <HAL_DMA_IRQHandler+0xce0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d004      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xb12>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a75      	ldr	r2, [pc, #468]	; (8007278 <HAL_DMA_IRQHandler+0xce4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d108      	bne.n	80070b8 <HAL_DMA_IRQHandler+0xb24>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0208 	bic.w	r2, r2, #8
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	e007      	b.n	80070c8 <HAL_DMA_IRQHandler+0xb34>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0204 	bic.w	r2, r2, #4
 80070c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8165 	beq.w	800739c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070da:	e15f      	b.n	800739c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	2202      	movs	r2, #2
 80070e6:	409a      	lsls	r2, r3
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4013      	ands	r3, r2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 80c5 	beq.w	800727c <HAL_DMA_IRQHandler+0xce8>
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80bf 	beq.w	800727c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007102:	f003 031f 	and.w	r3, r3, #31
 8007106:	2202      	movs	r2, #2
 8007108:	409a      	lsls	r2, r3
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d018      	beq.n	800714a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 813a 	beq.w	80073a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007134:	e134      	b.n	80073a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 8130 	beq.w	80073a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007148:	e12a      	b.n	80073a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d168      	bne.n	8007226 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a38      	ldr	r2, [pc, #224]	; (800723c <HAL_DMA_IRQHandler+0xca8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d04a      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a37      	ldr	r2, [pc, #220]	; (8007240 <HAL_DMA_IRQHandler+0xcac>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d045      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a35      	ldr	r2, [pc, #212]	; (8007244 <HAL_DMA_IRQHandler+0xcb0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d040      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a34      	ldr	r2, [pc, #208]	; (8007248 <HAL_DMA_IRQHandler+0xcb4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d03b      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a32      	ldr	r2, [pc, #200]	; (800724c <HAL_DMA_IRQHandler+0xcb8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d036      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a31      	ldr	r2, [pc, #196]	; (8007250 <HAL_DMA_IRQHandler+0xcbc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d031      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a2f      	ldr	r2, [pc, #188]	; (8007254 <HAL_DMA_IRQHandler+0xcc0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d02c      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a2e      	ldr	r2, [pc, #184]	; (8007258 <HAL_DMA_IRQHandler+0xcc4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d027      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a2c      	ldr	r2, [pc, #176]	; (800725c <HAL_DMA_IRQHandler+0xcc8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d022      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a2b      	ldr	r2, [pc, #172]	; (8007260 <HAL_DMA_IRQHandler+0xccc>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d01d      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a29      	ldr	r2, [pc, #164]	; (8007264 <HAL_DMA_IRQHandler+0xcd0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d018      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a28      	ldr	r2, [pc, #160]	; (8007268 <HAL_DMA_IRQHandler+0xcd4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d013      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a26      	ldr	r2, [pc, #152]	; (800726c <HAL_DMA_IRQHandler+0xcd8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00e      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a25      	ldr	r2, [pc, #148]	; (8007270 <HAL_DMA_IRQHandler+0xcdc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d009      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a23      	ldr	r2, [pc, #140]	; (8007274 <HAL_DMA_IRQHandler+0xce0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d004      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xc60>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a22      	ldr	r2, [pc, #136]	; (8007278 <HAL_DMA_IRQHandler+0xce4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d108      	bne.n	8007206 <HAL_DMA_IRQHandler+0xc72>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0214 	bic.w	r2, r2, #20
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e007      	b.n	8007216 <HAL_DMA_IRQHandler+0xc82>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 020a 	bic.w	r2, r2, #10
 8007214:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 80b8 	beq.w	80073a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007238:	e0b2      	b.n	80073a0 <HAL_DMA_IRQHandler+0xe0c>
 800723a:	bf00      	nop
 800723c:	40020010 	.word	0x40020010
 8007240:	40020028 	.word	0x40020028
 8007244:	40020040 	.word	0x40020040
 8007248:	40020058 	.word	0x40020058
 800724c:	40020070 	.word	0x40020070
 8007250:	40020088 	.word	0x40020088
 8007254:	400200a0 	.word	0x400200a0
 8007258:	400200b8 	.word	0x400200b8
 800725c:	40020410 	.word	0x40020410
 8007260:	40020428 	.word	0x40020428
 8007264:	40020440 	.word	0x40020440
 8007268:	40020458 	.word	0x40020458
 800726c:	40020470 	.word	0x40020470
 8007270:	40020488 	.word	0x40020488
 8007274:	400204a0 	.word	0x400204a0
 8007278:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2208      	movs	r2, #8
 8007286:	409a      	lsls	r2, r3
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8088 	beq.w	80073a2 <HAL_DMA_IRQHandler+0xe0e>
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 8082 	beq.w	80073a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a41      	ldr	r2, [pc, #260]	; (80073a8 <HAL_DMA_IRQHandler+0xe14>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d04a      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a3f      	ldr	r2, [pc, #252]	; (80073ac <HAL_DMA_IRQHandler+0xe18>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d045      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a3e      	ldr	r2, [pc, #248]	; (80073b0 <HAL_DMA_IRQHandler+0xe1c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d040      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a3c      	ldr	r2, [pc, #240]	; (80073b4 <HAL_DMA_IRQHandler+0xe20>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d03b      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a3b      	ldr	r2, [pc, #236]	; (80073b8 <HAL_DMA_IRQHandler+0xe24>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d036      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a39      	ldr	r2, [pc, #228]	; (80073bc <HAL_DMA_IRQHandler+0xe28>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d031      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a38      	ldr	r2, [pc, #224]	; (80073c0 <HAL_DMA_IRQHandler+0xe2c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d02c      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a36      	ldr	r2, [pc, #216]	; (80073c4 <HAL_DMA_IRQHandler+0xe30>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d027      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a35      	ldr	r2, [pc, #212]	; (80073c8 <HAL_DMA_IRQHandler+0xe34>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d022      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a33      	ldr	r2, [pc, #204]	; (80073cc <HAL_DMA_IRQHandler+0xe38>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d01d      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a32      	ldr	r2, [pc, #200]	; (80073d0 <HAL_DMA_IRQHandler+0xe3c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d018      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a30      	ldr	r2, [pc, #192]	; (80073d4 <HAL_DMA_IRQHandler+0xe40>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d013      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <HAL_DMA_IRQHandler+0xe44>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00e      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a2d      	ldr	r2, [pc, #180]	; (80073dc <HAL_DMA_IRQHandler+0xe48>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d009      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a2c      	ldr	r2, [pc, #176]	; (80073e0 <HAL_DMA_IRQHandler+0xe4c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d004      	beq.n	800733e <HAL_DMA_IRQHandler+0xdaa>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a2a      	ldr	r2, [pc, #168]	; (80073e4 <HAL_DMA_IRQHandler+0xe50>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d108      	bne.n	8007350 <HAL_DMA_IRQHandler+0xdbc>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 021c 	bic.w	r2, r2, #28
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e007      	b.n	8007360 <HAL_DMA_IRQHandler+0xdcc>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 020e 	bic.w	r2, r2, #14
 800735e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007364:	f003 031f 	and.w	r3, r3, #31
 8007368:	2201      	movs	r2, #1
 800736a:	409a      	lsls	r2, r3
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3
 8007396:	e004      	b.n	80073a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007398:	bf00      	nop
 800739a:	e002      	b.n	80073a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800739c:	bf00      	nop
 800739e:	e000      	b.n	80073a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073a2:	3728      	adds	r7, #40	; 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40020010 	.word	0x40020010
 80073ac:	40020028 	.word	0x40020028
 80073b0:	40020040 	.word	0x40020040
 80073b4:	40020058 	.word	0x40020058
 80073b8:	40020070 	.word	0x40020070
 80073bc:	40020088 	.word	0x40020088
 80073c0:	400200a0 	.word	0x400200a0
 80073c4:	400200b8 	.word	0x400200b8
 80073c8:	40020410 	.word	0x40020410
 80073cc:	40020428 	.word	0x40020428
 80073d0:	40020440 	.word	0x40020440
 80073d4:	40020458 	.word	0x40020458
 80073d8:	40020470 	.word	0x40020470
 80073dc:	40020488 	.word	0x40020488
 80073e0:	400204a0 	.word	0x400204a0
 80073e4:	400204b8 	.word	0x400204b8

080073e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a84      	ldr	r2, [pc, #528]	; (8007618 <DMA_SetConfig+0x230>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d072      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a82      	ldr	r2, [pc, #520]	; (800761c <DMA_SetConfig+0x234>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d06d      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a81      	ldr	r2, [pc, #516]	; (8007620 <DMA_SetConfig+0x238>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d068      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a7f      	ldr	r2, [pc, #508]	; (8007624 <DMA_SetConfig+0x23c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d063      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a7e      	ldr	r2, [pc, #504]	; (8007628 <DMA_SetConfig+0x240>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d05e      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a7c      	ldr	r2, [pc, #496]	; (800762c <DMA_SetConfig+0x244>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d059      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a7b      	ldr	r2, [pc, #492]	; (8007630 <DMA_SetConfig+0x248>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d054      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a79      	ldr	r2, [pc, #484]	; (8007634 <DMA_SetConfig+0x24c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d04f      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a78      	ldr	r2, [pc, #480]	; (8007638 <DMA_SetConfig+0x250>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d04a      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a76      	ldr	r2, [pc, #472]	; (800763c <DMA_SetConfig+0x254>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d045      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a75      	ldr	r2, [pc, #468]	; (8007640 <DMA_SetConfig+0x258>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d040      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a73      	ldr	r2, [pc, #460]	; (8007644 <DMA_SetConfig+0x25c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d03b      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a72      	ldr	r2, [pc, #456]	; (8007648 <DMA_SetConfig+0x260>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d036      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a70      	ldr	r2, [pc, #448]	; (800764c <DMA_SetConfig+0x264>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d031      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a6f      	ldr	r2, [pc, #444]	; (8007650 <DMA_SetConfig+0x268>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d02c      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a6d      	ldr	r2, [pc, #436]	; (8007654 <DMA_SetConfig+0x26c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d027      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a6c      	ldr	r2, [pc, #432]	; (8007658 <DMA_SetConfig+0x270>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d022      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a6a      	ldr	r2, [pc, #424]	; (800765c <DMA_SetConfig+0x274>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d01d      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a69      	ldr	r2, [pc, #420]	; (8007660 <DMA_SetConfig+0x278>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d018      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a67      	ldr	r2, [pc, #412]	; (8007664 <DMA_SetConfig+0x27c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a66      	ldr	r2, [pc, #408]	; (8007668 <DMA_SetConfig+0x280>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00e      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a64      	ldr	r2, [pc, #400]	; (800766c <DMA_SetConfig+0x284>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a63      	ldr	r2, [pc, #396]	; (8007670 <DMA_SetConfig+0x288>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <DMA_SetConfig+0x10a>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a61      	ldr	r2, [pc, #388]	; (8007674 <DMA_SetConfig+0x28c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d101      	bne.n	80074f6 <DMA_SetConfig+0x10e>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <DMA_SetConfig+0x110>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00d      	beq.n	8007518 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007504:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007516:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a3e      	ldr	r2, [pc, #248]	; (8007618 <DMA_SetConfig+0x230>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d04a      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a3d      	ldr	r2, [pc, #244]	; (800761c <DMA_SetConfig+0x234>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d045      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a3b      	ldr	r2, [pc, #236]	; (8007620 <DMA_SetConfig+0x238>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d040      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a3a      	ldr	r2, [pc, #232]	; (8007624 <DMA_SetConfig+0x23c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d03b      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a38      	ldr	r2, [pc, #224]	; (8007628 <DMA_SetConfig+0x240>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d036      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a37      	ldr	r2, [pc, #220]	; (800762c <DMA_SetConfig+0x244>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d031      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a35      	ldr	r2, [pc, #212]	; (8007630 <DMA_SetConfig+0x248>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d02c      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a34      	ldr	r2, [pc, #208]	; (8007634 <DMA_SetConfig+0x24c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d027      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a32      	ldr	r2, [pc, #200]	; (8007638 <DMA_SetConfig+0x250>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d022      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a31      	ldr	r2, [pc, #196]	; (800763c <DMA_SetConfig+0x254>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d01d      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2f      	ldr	r2, [pc, #188]	; (8007640 <DMA_SetConfig+0x258>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d018      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a2e      	ldr	r2, [pc, #184]	; (8007644 <DMA_SetConfig+0x25c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a2c      	ldr	r2, [pc, #176]	; (8007648 <DMA_SetConfig+0x260>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00e      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a2b      	ldr	r2, [pc, #172]	; (800764c <DMA_SetConfig+0x264>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d009      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a29      	ldr	r2, [pc, #164]	; (8007650 <DMA_SetConfig+0x268>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d004      	beq.n	80075b8 <DMA_SetConfig+0x1d0>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a28      	ldr	r2, [pc, #160]	; (8007654 <DMA_SetConfig+0x26c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d101      	bne.n	80075bc <DMA_SetConfig+0x1d4>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <DMA_SetConfig+0x1d6>
 80075bc:	2300      	movs	r3, #0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d05a      	beq.n	8007678 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	223f      	movs	r2, #63	; 0x3f
 80075cc:	409a      	lsls	r2, r3
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	2b40      	cmp	r3, #64	; 0x40
 80075f0:	d108      	bne.n	8007604 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007602:	e087      	b.n	8007714 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	60da      	str	r2, [r3, #12]
}
 8007614:	e07e      	b.n	8007714 <DMA_SetConfig+0x32c>
 8007616:	bf00      	nop
 8007618:	40020010 	.word	0x40020010
 800761c:	40020028 	.word	0x40020028
 8007620:	40020040 	.word	0x40020040
 8007624:	40020058 	.word	0x40020058
 8007628:	40020070 	.word	0x40020070
 800762c:	40020088 	.word	0x40020088
 8007630:	400200a0 	.word	0x400200a0
 8007634:	400200b8 	.word	0x400200b8
 8007638:	40020410 	.word	0x40020410
 800763c:	40020428 	.word	0x40020428
 8007640:	40020440 	.word	0x40020440
 8007644:	40020458 	.word	0x40020458
 8007648:	40020470 	.word	0x40020470
 800764c:	40020488 	.word	0x40020488
 8007650:	400204a0 	.word	0x400204a0
 8007654:	400204b8 	.word	0x400204b8
 8007658:	58025408 	.word	0x58025408
 800765c:	5802541c 	.word	0x5802541c
 8007660:	58025430 	.word	0x58025430
 8007664:	58025444 	.word	0x58025444
 8007668:	58025458 	.word	0x58025458
 800766c:	5802546c 	.word	0x5802546c
 8007670:	58025480 	.word	0x58025480
 8007674:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a28      	ldr	r2, [pc, #160]	; (8007720 <DMA_SetConfig+0x338>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d022      	beq.n	80076c8 <DMA_SetConfig+0x2e0>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a27      	ldr	r2, [pc, #156]	; (8007724 <DMA_SetConfig+0x33c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d01d      	beq.n	80076c8 <DMA_SetConfig+0x2e0>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a25      	ldr	r2, [pc, #148]	; (8007728 <DMA_SetConfig+0x340>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d018      	beq.n	80076c8 <DMA_SetConfig+0x2e0>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a24      	ldr	r2, [pc, #144]	; (800772c <DMA_SetConfig+0x344>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d013      	beq.n	80076c8 <DMA_SetConfig+0x2e0>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a22      	ldr	r2, [pc, #136]	; (8007730 <DMA_SetConfig+0x348>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00e      	beq.n	80076c8 <DMA_SetConfig+0x2e0>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a21      	ldr	r2, [pc, #132]	; (8007734 <DMA_SetConfig+0x34c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d009      	beq.n	80076c8 <DMA_SetConfig+0x2e0>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <DMA_SetConfig+0x350>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d004      	beq.n	80076c8 <DMA_SetConfig+0x2e0>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1e      	ldr	r2, [pc, #120]	; (800773c <DMA_SetConfig+0x354>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d101      	bne.n	80076cc <DMA_SetConfig+0x2e4>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e000      	b.n	80076ce <DMA_SetConfig+0x2e6>
 80076cc:	2300      	movs	r3, #0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d020      	beq.n	8007714 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d6:	f003 031f 	and.w	r3, r3, #31
 80076da:	2201      	movs	r2, #1
 80076dc:	409a      	lsls	r2, r3
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b40      	cmp	r3, #64	; 0x40
 80076f0:	d108      	bne.n	8007704 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	60da      	str	r2, [r3, #12]
}
 8007702:	e007      	b.n	8007714 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	60da      	str	r2, [r3, #12]
}
 8007714:	bf00      	nop
 8007716:	371c      	adds	r7, #28
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	58025408 	.word	0x58025408
 8007724:	5802541c 	.word	0x5802541c
 8007728:	58025430 	.word	0x58025430
 800772c:	58025444 	.word	0x58025444
 8007730:	58025458 	.word	0x58025458
 8007734:	5802546c 	.word	0x5802546c
 8007738:	58025480 	.word	0x58025480
 800773c:	58025494 	.word	0x58025494

08007740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a42      	ldr	r2, [pc, #264]	; (8007858 <DMA_CalcBaseAndBitshift+0x118>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d04a      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a41      	ldr	r2, [pc, #260]	; (800785c <DMA_CalcBaseAndBitshift+0x11c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d045      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a3f      	ldr	r2, [pc, #252]	; (8007860 <DMA_CalcBaseAndBitshift+0x120>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d040      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a3e      	ldr	r2, [pc, #248]	; (8007864 <DMA_CalcBaseAndBitshift+0x124>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d03b      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a3c      	ldr	r2, [pc, #240]	; (8007868 <DMA_CalcBaseAndBitshift+0x128>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d036      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a3b      	ldr	r2, [pc, #236]	; (800786c <DMA_CalcBaseAndBitshift+0x12c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d031      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a39      	ldr	r2, [pc, #228]	; (8007870 <DMA_CalcBaseAndBitshift+0x130>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d02c      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a38      	ldr	r2, [pc, #224]	; (8007874 <DMA_CalcBaseAndBitshift+0x134>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d027      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a36      	ldr	r2, [pc, #216]	; (8007878 <DMA_CalcBaseAndBitshift+0x138>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d022      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a35      	ldr	r2, [pc, #212]	; (800787c <DMA_CalcBaseAndBitshift+0x13c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d01d      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a33      	ldr	r2, [pc, #204]	; (8007880 <DMA_CalcBaseAndBitshift+0x140>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d018      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a32      	ldr	r2, [pc, #200]	; (8007884 <DMA_CalcBaseAndBitshift+0x144>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a30      	ldr	r2, [pc, #192]	; (8007888 <DMA_CalcBaseAndBitshift+0x148>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00e      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a2f      	ldr	r2, [pc, #188]	; (800788c <DMA_CalcBaseAndBitshift+0x14c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d009      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a2d      	ldr	r2, [pc, #180]	; (8007890 <DMA_CalcBaseAndBitshift+0x150>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d004      	beq.n	80077e8 <DMA_CalcBaseAndBitshift+0xa8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a2c      	ldr	r2, [pc, #176]	; (8007894 <DMA_CalcBaseAndBitshift+0x154>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d101      	bne.n	80077ec <DMA_CalcBaseAndBitshift+0xac>
 80077e8:	2301      	movs	r3, #1
 80077ea:	e000      	b.n	80077ee <DMA_CalcBaseAndBitshift+0xae>
 80077ec:	2300      	movs	r3, #0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d024      	beq.n	800783c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	3b10      	subs	r3, #16
 80077fa:	4a27      	ldr	r2, [pc, #156]	; (8007898 <DMA_CalcBaseAndBitshift+0x158>)
 80077fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007800:	091b      	lsrs	r3, r3, #4
 8007802:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	4a24      	ldr	r2, [pc, #144]	; (800789c <DMA_CalcBaseAndBitshift+0x15c>)
 800780c:	5cd3      	ldrb	r3, [r2, r3]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d908      	bls.n	800782c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	4b1f      	ldr	r3, [pc, #124]	; (80078a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007822:	4013      	ands	r3, r2
 8007824:	1d1a      	adds	r2, r3, #4
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	659a      	str	r2, [r3, #88]	; 0x58
 800782a:	e00d      	b.n	8007848 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	4b1b      	ldr	r3, [pc, #108]	; (80078a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007834:	4013      	ands	r3, r2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6593      	str	r3, [r2, #88]	; 0x58
 800783a:	e005      	b.n	8007848 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	40020010 	.word	0x40020010
 800785c:	40020028 	.word	0x40020028
 8007860:	40020040 	.word	0x40020040
 8007864:	40020058 	.word	0x40020058
 8007868:	40020070 	.word	0x40020070
 800786c:	40020088 	.word	0x40020088
 8007870:	400200a0 	.word	0x400200a0
 8007874:	400200b8 	.word	0x400200b8
 8007878:	40020410 	.word	0x40020410
 800787c:	40020428 	.word	0x40020428
 8007880:	40020440 	.word	0x40020440
 8007884:	40020458 	.word	0x40020458
 8007888:	40020470 	.word	0x40020470
 800788c:	40020488 	.word	0x40020488
 8007890:	400204a0 	.word	0x400204a0
 8007894:	400204b8 	.word	0x400204b8
 8007898:	aaaaaaab 	.word	0xaaaaaaab
 800789c:	08013bcc 	.word	0x08013bcc
 80078a0:	fffffc00 	.word	0xfffffc00

080078a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d120      	bne.n	80078fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d858      	bhi.n	8007972 <DMA_CheckFifoParam+0xce>
 80078c0:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <DMA_CheckFifoParam+0x24>)
 80078c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c6:	bf00      	nop
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	080078eb 	.word	0x080078eb
 80078d0:	080078d9 	.word	0x080078d9
 80078d4:	08007973 	.word	0x08007973
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d048      	beq.n	8007976 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078e8:	e045      	b.n	8007976 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078f2:	d142      	bne.n	800797a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078f8:	e03f      	b.n	800797a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007902:	d123      	bne.n	800794c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007908:	2b03      	cmp	r3, #3
 800790a:	d838      	bhi.n	800797e <DMA_CheckFifoParam+0xda>
 800790c:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <DMA_CheckFifoParam+0x70>)
 800790e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007912:	bf00      	nop
 8007914:	08007925 	.word	0x08007925
 8007918:	0800792b 	.word	0x0800792b
 800791c:	08007925 	.word	0x08007925
 8007920:	0800793d 	.word	0x0800793d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	73fb      	strb	r3, [r7, #15]
        break;
 8007928:	e030      	b.n	800798c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d025      	beq.n	8007982 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800793a:	e022      	b.n	8007982 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007940:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007944:	d11f      	bne.n	8007986 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800794a:	e01c      	b.n	8007986 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	2b02      	cmp	r3, #2
 8007952:	d902      	bls.n	800795a <DMA_CheckFifoParam+0xb6>
 8007954:	2b03      	cmp	r3, #3
 8007956:	d003      	beq.n	8007960 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007958:	e018      	b.n	800798c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	73fb      	strb	r3, [r7, #15]
        break;
 800795e:	e015      	b.n	800798c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00e      	beq.n	800798a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
    break;
 8007970:	e00b      	b.n	800798a <DMA_CheckFifoParam+0xe6>
        break;
 8007972:	bf00      	nop
 8007974:	e00a      	b.n	800798c <DMA_CheckFifoParam+0xe8>
        break;
 8007976:	bf00      	nop
 8007978:	e008      	b.n	800798c <DMA_CheckFifoParam+0xe8>
        break;
 800797a:	bf00      	nop
 800797c:	e006      	b.n	800798c <DMA_CheckFifoParam+0xe8>
        break;
 800797e:	bf00      	nop
 8007980:	e004      	b.n	800798c <DMA_CheckFifoParam+0xe8>
        break;
 8007982:	bf00      	nop
 8007984:	e002      	b.n	800798c <DMA_CheckFifoParam+0xe8>
        break;
 8007986:	bf00      	nop
 8007988:	e000      	b.n	800798c <DMA_CheckFifoParam+0xe8>
    break;
 800798a:	bf00      	nop
    }
  }

  return status;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop

0800799c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a38      	ldr	r2, [pc, #224]	; (8007a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d022      	beq.n	80079fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a36      	ldr	r2, [pc, #216]	; (8007a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d01d      	beq.n	80079fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a35      	ldr	r2, [pc, #212]	; (8007a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d018      	beq.n	80079fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a33      	ldr	r2, [pc, #204]	; (8007a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d013      	beq.n	80079fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a32      	ldr	r2, [pc, #200]	; (8007aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00e      	beq.n	80079fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a30      	ldr	r2, [pc, #192]	; (8007aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d009      	beq.n	80079fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a2f      	ldr	r2, [pc, #188]	; (8007aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d004      	beq.n	80079fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a2d      	ldr	r2, [pc, #180]	; (8007aac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d101      	bne.n	80079fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e000      	b.n	8007a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80079fe:	2300      	movs	r3, #0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01a      	beq.n	8007a3a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	3b08      	subs	r3, #8
 8007a0c:	4a28      	ldr	r2, [pc, #160]	; (8007ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a12:	091b      	lsrs	r3, r3, #4
 8007a14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007a1a:	4413      	add	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	461a      	mov	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a24      	ldr	r2, [pc, #144]	; (8007ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007a28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f003 031f 	and.w	r3, r3, #31
 8007a30:	2201      	movs	r2, #1
 8007a32:	409a      	lsls	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007a38:	e024      	b.n	8007a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	3b10      	subs	r3, #16
 8007a42:	4a1e      	ldr	r2, [pc, #120]	; (8007abc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007a44:	fba2 2303 	umull	r2, r3, r2, r3
 8007a48:	091b      	lsrs	r3, r3, #4
 8007a4a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4a1c      	ldr	r2, [pc, #112]	; (8007ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d806      	bhi.n	8007a62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4a1b      	ldr	r2, [pc, #108]	; (8007ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d902      	bls.n	8007a62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a16      	ldr	r2, [pc, #88]	; (8007acc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007a74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	409a      	lsls	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007a84:	bf00      	nop
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	58025408 	.word	0x58025408
 8007a94:	5802541c 	.word	0x5802541c
 8007a98:	58025430 	.word	0x58025430
 8007a9c:	58025444 	.word	0x58025444
 8007aa0:	58025458 	.word	0x58025458
 8007aa4:	5802546c 	.word	0x5802546c
 8007aa8:	58025480 	.word	0x58025480
 8007aac:	58025494 	.word	0x58025494
 8007ab0:	cccccccd 	.word	0xcccccccd
 8007ab4:	16009600 	.word	0x16009600
 8007ab8:	58025880 	.word	0x58025880
 8007abc:	aaaaaaab 	.word	0xaaaaaaab
 8007ac0:	400204b8 	.word	0x400204b8
 8007ac4:	4002040f 	.word	0x4002040f
 8007ac8:	10008200 	.word	0x10008200
 8007acc:	40020880 	.word	0x40020880

08007ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d04a      	beq.n	8007b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d847      	bhi.n	8007b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a25      	ldr	r2, [pc, #148]	; (8007b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d022      	beq.n	8007b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a24      	ldr	r2, [pc, #144]	; (8007b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d01d      	beq.n	8007b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a22      	ldr	r2, [pc, #136]	; (8007b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d018      	beq.n	8007b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d013      	beq.n	8007b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00e      	beq.n	8007b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d009      	beq.n	8007b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1c      	ldr	r2, [pc, #112]	; (8007ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d004      	beq.n	8007b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d101      	bne.n	8007b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e000      	b.n	8007b42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007b40:	2300      	movs	r3, #0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4b17      	ldr	r3, [pc, #92]	; (8007ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	461a      	mov	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a15      	ldr	r2, [pc, #84]	; (8007bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007b58:	671a      	str	r2, [r3, #112]	; 0x70
 8007b5a:	e009      	b.n	8007b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4b14      	ldr	r3, [pc, #80]	; (8007bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	461a      	mov	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a11      	ldr	r2, [pc, #68]	; (8007bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007b6e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	2201      	movs	r2, #1
 8007b76:	409a      	lsls	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007b7c:	bf00      	nop
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	58025408 	.word	0x58025408
 8007b8c:	5802541c 	.word	0x5802541c
 8007b90:	58025430 	.word	0x58025430
 8007b94:	58025444 	.word	0x58025444
 8007b98:	58025458 	.word	0x58025458
 8007b9c:	5802546c 	.word	0x5802546c
 8007ba0:	58025480 	.word	0x58025480
 8007ba4:	58025494 	.word	0x58025494
 8007ba8:	1600963f 	.word	0x1600963f
 8007bac:	58025940 	.word	0x58025940
 8007bb0:	1000823f 	.word	0x1000823f
 8007bb4:	40020940 	.word	0x40020940

08007bb8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b098      	sub	sp, #96	; 0x60
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007bc0:	4a84      	ldr	r2, [pc, #528]	; (8007dd4 <HAL_FDCAN_Init+0x21c>)
 8007bc2:	f107 030c 	add.w	r3, r7, #12
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	224c      	movs	r2, #76	; 0x4c
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f00a ffaa 	bl	8012b24 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e1ca      	b.n	8007f70 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a7e      	ldr	r2, [pc, #504]	; (8007dd8 <HAL_FDCAN_Init+0x220>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d106      	bne.n	8007bf2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007bec:	461a      	mov	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fa fc82 	bl	8002510 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0210 	bic.w	r2, r2, #16
 8007c1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c1c:	f7fb f9e2 	bl	8002fe4 <HAL_GetTick>
 8007c20:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007c22:	e014      	b.n	8007c4e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007c24:	f7fb f9de 	bl	8002fe4 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b0a      	cmp	r3, #10
 8007c30:	d90d      	bls.n	8007c4e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c38:	f043 0201 	orr.w	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2203      	movs	r2, #3
 8007c46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e190      	b.n	8007f70 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f003 0308 	and.w	r3, r3, #8
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d0e3      	beq.n	8007c24 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0201 	orr.w	r2, r2, #1
 8007c6a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c6c:	f7fb f9ba 	bl	8002fe4 <HAL_GetTick>
 8007c70:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007c72:	e014      	b.n	8007c9e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007c74:	f7fb f9b6 	bl	8002fe4 <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b0a      	cmp	r3, #10
 8007c80:	d90d      	bls.n	8007c9e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c88:	f043 0201 	orr.w	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2203      	movs	r2, #3
 8007c96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e168      	b.n	8007f70 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0e3      	beq.n	8007c74 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0202 	orr.w	r2, r2, #2
 8007cba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	7c1b      	ldrb	r3, [r3, #16]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d108      	bne.n	8007cd6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699a      	ldr	r2, [r3, #24]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cd2:	619a      	str	r2, [r3, #24]
 8007cd4:	e007      	b.n	8007ce6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	699a      	ldr	r2, [r3, #24]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ce4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7c5b      	ldrb	r3, [r3, #17]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d108      	bne.n	8007d00 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699a      	ldr	r2, [r3, #24]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cfc:	619a      	str	r2, [r3, #24]
 8007cfe:	e007      	b.n	8007d10 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	699a      	ldr	r2, [r3, #24]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d0e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	7c9b      	ldrb	r3, [r3, #18]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d108      	bne.n	8007d2a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d26:	619a      	str	r2, [r3, #24]
 8007d28:	e007      	b.n	8007d3a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699a      	ldr	r2, [r3, #24]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d38:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007d5e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691a      	ldr	r2, [r3, #16]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0210 	bic.w	r2, r2, #16
 8007d6e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d108      	bne.n	8007d8a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0204 	orr.w	r2, r2, #4
 8007d86:	619a      	str	r2, [r3, #24]
 8007d88:	e030      	b.n	8007dec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d02c      	beq.n	8007dec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d020      	beq.n	8007ddc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	699a      	ldr	r2, [r3, #24]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007da8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691a      	ldr	r2, [r3, #16]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f042 0210 	orr.w	r2, r2, #16
 8007db8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d114      	bne.n	8007dec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	699a      	ldr	r2, [r3, #24]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 0220 	orr.w	r2, r2, #32
 8007dd0:	619a      	str	r2, [r3, #24]
 8007dd2:	e00b      	b.n	8007dec <HAL_FDCAN_Init+0x234>
 8007dd4:	08013af0 	.word	0x08013af0
 8007dd8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0220 	orr.w	r2, r2, #32
 8007dea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007dfc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007e04:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007e14:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007e16:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e20:	d115      	bne.n	8007e4e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e26:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007e30:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e36:	3b01      	subs	r3, #1
 8007e38:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007e3a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	3b01      	subs	r3, #1
 8007e44:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007e4a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007e4c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e74:	4413      	add	r3, r2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d012      	beq.n	8007ea0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007e82:	f023 0107 	bic.w	r1, r3, #7
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007e90:	4413      	add	r3, r2
 8007e92:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d012      	beq.n	8007ece <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007eb0:	f023 0107 	bic.w	r1, r3, #7
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d013      	beq.n	8007efe <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007ede:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007eec:	4413      	add	r3, r2
 8007eee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007ef2:	011a      	lsls	r2, r3, #4
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d013      	beq.n	8007f2e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007f0e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007f22:	021a      	lsls	r2, r3, #8
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a11      	ldr	r2, [pc, #68]	; (8007f78 <HAL_FDCAN_Init+0x3c0>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d107      	bne.n	8007f48 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	689a      	ldr	r2, [r3, #8]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f022 0203 	bic.w	r2, r2, #3
 8007f46:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f80b 	bl	8007f7c <FDCAN_CalcultateRamBlockAddresses>
 8007f66:	4603      	mov	r3, r0
 8007f68:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007f6c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3760      	adds	r7, #96	; 0x60
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	4000a000 	.word	0x4000a000

08007f7c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f88:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007f92:	4ba7      	ldr	r3, [pc, #668]	; (8008230 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	0091      	lsls	r1, r2, #2
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6812      	ldr	r2, [r2, #0]
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fac:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	041a      	lsls	r2, r3, #16
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fd2:	4b97      	ldr	r3, [pc, #604]	; (8008230 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	0091      	lsls	r1, r2, #2
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	6812      	ldr	r2, [r2, #0]
 8007fde:	430b      	orrs	r3, r1
 8007fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fec:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff4:	041a      	lsls	r2, r3, #16
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	4413      	add	r3, r2
 800800a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008014:	4b86      	ldr	r3, [pc, #536]	; (8008230 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008016:	4013      	ands	r3, r2
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	0091      	lsls	r1, r2, #2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	430b      	orrs	r3, r1
 8008022:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800802e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008036:	041a      	lsls	r2, r3, #16
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800804a:	fb02 f303 	mul.w	r3, r2, r3
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4413      	add	r3, r2
 8008052:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800805c:	4b74      	ldr	r3, [pc, #464]	; (8008230 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800805e:	4013      	ands	r3, r2
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	0091      	lsls	r1, r2, #2
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6812      	ldr	r2, [r2, #0]
 8008068:	430b      	orrs	r3, r1
 800806a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008076:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800807e:	041a      	lsls	r2, r3, #16
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008092:	fb02 f303 	mul.w	r3, r2, r3
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	4413      	add	r3, r2
 800809a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80080a4:	4b62      	ldr	r3, [pc, #392]	; (8008230 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080a6:	4013      	ands	r3, r2
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	0091      	lsls	r1, r2, #2
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	6812      	ldr	r2, [r2, #0]
 80080b0:	430b      	orrs	r3, r1
 80080b2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80080be:	fb02 f303 	mul.w	r3, r2, r3
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	4413      	add	r3, r2
 80080c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80080d0:	4b57      	ldr	r3, [pc, #348]	; (8008230 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080d2:	4013      	ands	r3, r2
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	0091      	lsls	r1, r2, #2
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	430b      	orrs	r3, r1
 80080de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080ea:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	041a      	lsls	r2, r3, #16
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	4413      	add	r3, r2
 8008108:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008112:	4b47      	ldr	r3, [pc, #284]	; (8008230 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008114:	4013      	ands	r3, r2
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	0091      	lsls	r1, r2, #2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6812      	ldr	r2, [r2, #0]
 800811e:	430b      	orrs	r3, r1
 8008120:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800812c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008134:	041a      	lsls	r2, r3, #16
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008148:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008150:	061a      	lsls	r2, r3, #24
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008160:	4b34      	ldr	r3, [pc, #208]	; (8008234 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008162:	4413      	add	r3, r2
 8008164:	009a      	lsls	r2, r3, #2
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	441a      	add	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	441a      	add	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008196:	fb01 f303 	mul.w	r3, r1, r3
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	441a      	add	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80081ae:	fb01 f303 	mul.w	r3, r1, r3
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	441a      	add	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80081c6:	fb01 f303 	mul.w	r3, r1, r3
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	441a      	add	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081de:	00db      	lsls	r3, r3, #3
 80081e0:	441a      	add	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80081f6:	fb01 f303 	mul.w	r3, r1, r3
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	441a      	add	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008212:	fb01 f303 	mul.w	r3, r1, r3
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	441a      	add	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008226:	4a04      	ldr	r2, [pc, #16]	; (8008238 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d915      	bls.n	8008258 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800822c:	e006      	b.n	800823c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800822e:	bf00      	nop
 8008230:	ffff0003 	.word	0xffff0003
 8008234:	10002b00 	.word	0x10002b00
 8008238:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008242:	f043 0220 	orr.w	r2, r3, #32
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2203      	movs	r2, #3
 8008250:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e010      	b.n	800827a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	e005      	b.n	800826c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3304      	adds	r3, #4
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	429a      	cmp	r2, r3
 8008276:	d3f3      	bcc.n	8008260 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop

08008288 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e031      	b.n	80082fe <HAL_FMAC_Init+0x76>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <HAL_FMAC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmac->Lock = HAL_UNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fa f992 	bl	80025d8 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0UL;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f84c 	bl	8008358 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f820 	bl	8008306 <FMAC_Reset>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d10c      	bne.n	80082e6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_RESET;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2210      	movs	r2, #16
 80082d0:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	22a0      	movs	r2, #160	; 0xa0
 80082d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Process Unlocked */
    __HAL_UNLOCK(hfmac);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e00b      	b.n	80082fe <HAL_FMAC_Init+0x76>
  }

  /* Update FMAC error code and FMAC peripheral state */
  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	635a      	str	r2, [r3, #52]	; 0x34
  hfmac->State = HAL_FMAC_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Process Unlocked */
  __HAL_UNLOCK(hfmac);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800830e:	f7fa fe69 	bl	8002fe4 <HAL_GetTick>
 8008312:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	691a      	ldr	r2, [r3, #16]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008322:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 8008324:	e009      	b.n	800833a <FMAC_Reset+0x34>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8008326:	f7fa fe5d 	bl	8002fe4 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008334:	d901      	bls.n	800833a <FMAC_Reset+0x34>
    {
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e00a      	b.n	8008350 <FMAC_Reset+0x4a>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1ee      	bne.n	8008326 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f807 	bl	8008374 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f81b 	bl	80083a2 <FMAC_ResetOutputStateAndDataPointers>
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b089      	sub	sp, #36	; 0x24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083da:	2300      	movs	r3, #0
 80083dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80083de:	4b86      	ldr	r3, [pc, #536]	; (80085f8 <HAL_GPIO_Init+0x228>)
 80083e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083e2:	e18c      	b.n	80086fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	2101      	movs	r1, #1
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	fa01 f303 	lsl.w	r3, r1, r3
 80083f0:	4013      	ands	r3, r2
 80083f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 817e 	beq.w	80086f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d00b      	beq.n	800841c <HAL_GPIO_Init+0x4c>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d007      	beq.n	800841c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008410:	2b11      	cmp	r3, #17
 8008412:	d003      	beq.n	800841c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	2b12      	cmp	r3, #18
 800841a:	d130      	bne.n	800847e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	2203      	movs	r2, #3
 8008428:	fa02 f303 	lsl.w	r3, r2, r3
 800842c:	43db      	mvns	r3, r3
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	4013      	ands	r3, r2
 8008432:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	fa02 f303 	lsl.w	r3, r2, r3
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	4313      	orrs	r3, r2
 8008444:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008452:	2201      	movs	r2, #1
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	fa02 f303 	lsl.w	r3, r2, r3
 800845a:	43db      	mvns	r3, r3
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	4013      	ands	r3, r2
 8008460:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	091b      	lsrs	r3, r3, #4
 8008468:	f003 0201 	and.w	r2, r3, #1
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	fa02 f303 	lsl.w	r3, r2, r3
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	4313      	orrs	r3, r2
 8008476:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	005b      	lsls	r3, r3, #1
 8008488:	2203      	movs	r2, #3
 800848a:	fa02 f303 	lsl.w	r3, r2, r3
 800848e:	43db      	mvns	r3, r3
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	4013      	ands	r3, r2
 8008494:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	fa02 f303 	lsl.w	r3, r2, r3
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d003      	beq.n	80084be <HAL_GPIO_Init+0xee>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2b12      	cmp	r3, #18
 80084bc:	d123      	bne.n	8008506 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	08da      	lsrs	r2, r3, #3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3208      	adds	r2, #8
 80084c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	220f      	movs	r2, #15
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	43db      	mvns	r3, r3
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	4013      	ands	r3, r2
 80084e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	691a      	ldr	r2, [r3, #16]
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	fa02 f303 	lsl.w	r3, r2, r3
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	08da      	lsrs	r2, r3, #3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3208      	adds	r2, #8
 8008500:	69b9      	ldr	r1, [r7, #24]
 8008502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	2203      	movs	r2, #3
 8008512:	fa02 f303 	lsl.w	r3, r2, r3
 8008516:	43db      	mvns	r3, r3
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	4013      	ands	r3, r2
 800851c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f003 0203 	and.w	r2, r3, #3
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	fa02 f303 	lsl.w	r3, r2, r3
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	4313      	orrs	r3, r2
 8008532:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 80d8 	beq.w	80086f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008548:	4b2c      	ldr	r3, [pc, #176]	; (80085fc <HAL_GPIO_Init+0x22c>)
 800854a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800854e:	4a2b      	ldr	r2, [pc, #172]	; (80085fc <HAL_GPIO_Init+0x22c>)
 8008550:	f043 0302 	orr.w	r3, r3, #2
 8008554:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008558:	4b28      	ldr	r3, [pc, #160]	; (80085fc <HAL_GPIO_Init+0x22c>)
 800855a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008566:	4a26      	ldr	r2, [pc, #152]	; (8008600 <HAL_GPIO_Init+0x230>)
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	089b      	lsrs	r3, r3, #2
 800856c:	3302      	adds	r3, #2
 800856e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	220f      	movs	r2, #15
 800857e:	fa02 f303 	lsl.w	r3, r2, r3
 8008582:	43db      	mvns	r3, r3
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	4013      	ands	r3, r2
 8008588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a1d      	ldr	r2, [pc, #116]	; (8008604 <HAL_GPIO_Init+0x234>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d04a      	beq.n	8008628 <HAL_GPIO_Init+0x258>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a1c      	ldr	r2, [pc, #112]	; (8008608 <HAL_GPIO_Init+0x238>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d02b      	beq.n	80085f2 <HAL_GPIO_Init+0x222>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a1b      	ldr	r2, [pc, #108]	; (800860c <HAL_GPIO_Init+0x23c>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d025      	beq.n	80085ee <HAL_GPIO_Init+0x21e>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a1a      	ldr	r2, [pc, #104]	; (8008610 <HAL_GPIO_Init+0x240>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d01f      	beq.n	80085ea <HAL_GPIO_Init+0x21a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a19      	ldr	r2, [pc, #100]	; (8008614 <HAL_GPIO_Init+0x244>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d019      	beq.n	80085e6 <HAL_GPIO_Init+0x216>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a18      	ldr	r2, [pc, #96]	; (8008618 <HAL_GPIO_Init+0x248>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d013      	beq.n	80085e2 <HAL_GPIO_Init+0x212>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a17      	ldr	r2, [pc, #92]	; (800861c <HAL_GPIO_Init+0x24c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d00d      	beq.n	80085de <HAL_GPIO_Init+0x20e>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a16      	ldr	r2, [pc, #88]	; (8008620 <HAL_GPIO_Init+0x250>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d007      	beq.n	80085da <HAL_GPIO_Init+0x20a>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a15      	ldr	r2, [pc, #84]	; (8008624 <HAL_GPIO_Init+0x254>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d101      	bne.n	80085d6 <HAL_GPIO_Init+0x206>
 80085d2:	2309      	movs	r3, #9
 80085d4:	e029      	b.n	800862a <HAL_GPIO_Init+0x25a>
 80085d6:	230a      	movs	r3, #10
 80085d8:	e027      	b.n	800862a <HAL_GPIO_Init+0x25a>
 80085da:	2307      	movs	r3, #7
 80085dc:	e025      	b.n	800862a <HAL_GPIO_Init+0x25a>
 80085de:	2306      	movs	r3, #6
 80085e0:	e023      	b.n	800862a <HAL_GPIO_Init+0x25a>
 80085e2:	2305      	movs	r3, #5
 80085e4:	e021      	b.n	800862a <HAL_GPIO_Init+0x25a>
 80085e6:	2304      	movs	r3, #4
 80085e8:	e01f      	b.n	800862a <HAL_GPIO_Init+0x25a>
 80085ea:	2303      	movs	r3, #3
 80085ec:	e01d      	b.n	800862a <HAL_GPIO_Init+0x25a>
 80085ee:	2302      	movs	r3, #2
 80085f0:	e01b      	b.n	800862a <HAL_GPIO_Init+0x25a>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e019      	b.n	800862a <HAL_GPIO_Init+0x25a>
 80085f6:	bf00      	nop
 80085f8:	58000080 	.word	0x58000080
 80085fc:	58024400 	.word	0x58024400
 8008600:	58000400 	.word	0x58000400
 8008604:	58020000 	.word	0x58020000
 8008608:	58020400 	.word	0x58020400
 800860c:	58020800 	.word	0x58020800
 8008610:	58020c00 	.word	0x58020c00
 8008614:	58021000 	.word	0x58021000
 8008618:	58021400 	.word	0x58021400
 800861c:	58021800 	.word	0x58021800
 8008620:	58021c00 	.word	0x58021c00
 8008624:	58022400 	.word	0x58022400
 8008628:	2300      	movs	r3, #0
 800862a:	69fa      	ldr	r2, [r7, #28]
 800862c:	f002 0203 	and.w	r2, r2, #3
 8008630:	0092      	lsls	r2, r2, #2
 8008632:	4093      	lsls	r3, r2
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	4313      	orrs	r3, r2
 8008638:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800863a:	4938      	ldr	r1, [pc, #224]	; (800871c <HAL_GPIO_Init+0x34c>)
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	089b      	lsrs	r3, r3, #2
 8008640:	3302      	adds	r3, #2
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	43db      	mvns	r3, r3
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	4013      	ands	r3, r2
 8008656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	43db      	mvns	r3, r3
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	4013      	ands	r3, r2
 8008680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	4313      	orrs	r3, r2
 8008694:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800869c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	43db      	mvns	r3, r3
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	4013      	ands	r3, r2
 80086ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	4313      	orrs	r3, r2
 80086c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80086c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80086ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	43db      	mvns	r3, r3
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	4013      	ands	r3, r2
 80086da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80086f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	3301      	adds	r3, #1
 80086fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	fa22 f303 	lsr.w	r3, r2, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	f47f ae6b 	bne.w	80083e4 <HAL_GPIO_Init+0x14>
  }
}
 800870e:	bf00      	nop
 8008710:	bf00      	nop
 8008712:	3724      	adds	r7, #36	; 0x24
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	58000400 	.word	0x58000400

08008720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	807b      	strh	r3, [r7, #2]
 800872c:	4613      	mov	r3, r2
 800872e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008730:	787b      	ldrb	r3, [r7, #1]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008736:	887a      	ldrh	r2, [r7, #2]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800873c:	e003      	b.n	8008746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800873e:	887b      	ldrh	r3, [r7, #2]
 8008740:	041a      	lsls	r2, r3, #16
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	619a      	str	r2, [r3, #24]
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008752:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008754:	b08f      	sub	sp, #60	; 0x3c
 8008756:	af0a      	add	r7, sp, #40	; 0x28
 8008758:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e116      	b.n	8008992 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d106      	bne.n	8008784 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f009 fe9a 	bl	80124b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2203      	movs	r2, #3
 8008788:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f006 fddb 	bl	800f35e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	603b      	str	r3, [r7, #0]
 80087ae:	687e      	ldr	r6, [r7, #4]
 80087b0:	466d      	mov	r5, sp
 80087b2:	f106 0410 	add.w	r4, r6, #16
 80087b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80087c6:	1d33      	adds	r3, r6, #4
 80087c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087ca:	6838      	ldr	r0, [r7, #0]
 80087cc:	f006 fca6 	bl	800f11c <USB_CoreInit>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d005      	beq.n	80087e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2202      	movs	r2, #2
 80087da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e0d7      	b.n	8008992 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f006 fdc9 	bl	800f380 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
 80087f2:	e04a      	b.n	800888a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80087f4:	7bfa      	ldrb	r2, [r7, #15]
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	4613      	mov	r3, r2
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	333d      	adds	r3, #61	; 0x3d
 8008804:	2201      	movs	r2, #1
 8008806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008808:	7bfa      	ldrb	r2, [r7, #15]
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	4613      	mov	r3, r2
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	440b      	add	r3, r1
 8008816:	333c      	adds	r3, #60	; 0x3c
 8008818:	7bfa      	ldrb	r2, [r7, #15]
 800881a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800881c:	7bfa      	ldrb	r2, [r7, #15]
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	b298      	uxth	r0, r3
 8008822:	6879      	ldr	r1, [r7, #4]
 8008824:	4613      	mov	r3, r2
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	1a9b      	subs	r3, r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	440b      	add	r3, r1
 800882e:	3342      	adds	r3, #66	; 0x42
 8008830:	4602      	mov	r2, r0
 8008832:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008834:	7bfa      	ldrb	r2, [r7, #15]
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	4613      	mov	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	333f      	adds	r3, #63	; 0x3f
 8008844:	2200      	movs	r2, #0
 8008846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008848:	7bfa      	ldrb	r2, [r7, #15]
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	4613      	mov	r3, r2
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	1a9b      	subs	r3, r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	3344      	adds	r3, #68	; 0x44
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800885c:	7bfa      	ldrb	r2, [r7, #15]
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	3348      	adds	r3, #72	; 0x48
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008870:	7bfa      	ldrb	r2, [r7, #15]
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	4613      	mov	r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	1a9b      	subs	r3, r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	3350      	adds	r3, #80	; 0x50
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	3301      	adds	r3, #1
 8008888:	73fb      	strb	r3, [r7, #15]
 800888a:	7bfa      	ldrb	r2, [r7, #15]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d3af      	bcc.n	80087f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
 8008898:	e044      	b.n	8008924 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800889a:	7bfa      	ldrb	r2, [r7, #15]
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	440b      	add	r3, r1
 80088a8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80088b0:	7bfa      	ldrb	r2, [r7, #15]
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4613      	mov	r3, r2
 80088b6:	00db      	lsls	r3, r3, #3
 80088b8:	1a9b      	subs	r3, r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80088c2:	7bfa      	ldrb	r2, [r7, #15]
 80088c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80088c6:	7bfa      	ldrb	r2, [r7, #15]
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	00db      	lsls	r3, r3, #3
 80088ce:	1a9b      	subs	r3, r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80088d8:	2200      	movs	r2, #0
 80088da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80088dc:	7bfa      	ldrb	r2, [r7, #15]
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	4613      	mov	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	1a9b      	subs	r3, r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80088ee:	2200      	movs	r2, #0
 80088f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80088f2:	7bfa      	ldrb	r2, [r7, #15]
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	4613      	mov	r3, r2
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	1a9b      	subs	r3, r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	440b      	add	r3, r1
 8008900:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008908:	7bfa      	ldrb	r2, [r7, #15]
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	4613      	mov	r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	1a9b      	subs	r3, r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	440b      	add	r3, r1
 8008916:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	3301      	adds	r3, #1
 8008922:	73fb      	strb	r3, [r7, #15]
 8008924:	7bfa      	ldrb	r2, [r7, #15]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	429a      	cmp	r2, r3
 800892c:	d3b5      	bcc.n	800889a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	687e      	ldr	r6, [r7, #4]
 8008936:	466d      	mov	r5, sp
 8008938:	f106 0410 	add.w	r4, r6, #16
 800893c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800893e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008944:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008948:	e885 0003 	stmia.w	r5, {r0, r1}
 800894c:	1d33      	adds	r3, r6, #4
 800894e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008950:	6838      	ldr	r0, [r7, #0]
 8008952:	f006 fd3f 	bl	800f3d4 <USB_DevInit>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d005      	beq.n	8008968 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2202      	movs	r2, #2
 8008960:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e014      	b.n	8008992 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897c:	2b01      	cmp	r3, #1
 800897e:	d102      	bne.n	8008986 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 f891 	bl	8009aa8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4618      	mov	r0, r3
 800898c:	f007 fdbf 	bl	801050e <USB_DevDisconnect>

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800899a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d101      	bne.n	80089b6 <HAL_PCD_Start+0x1c>
 80089b2:	2302      	movs	r3, #2
 80089b4:	e020      	b.n	80089f8 <HAL_PCD_Start+0x5e>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d109      	bne.n	80089da <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d005      	beq.n	80089da <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4618      	mov	r0, r3
 80089e0:	f006 fcac 	bl	800f33c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f007 fd6f 	bl	80104cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a00:	b590      	push	{r4, r7, lr}
 8008a02:	b08d      	sub	sp, #52	; 0x34
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f007 fe2d 	bl	8010676 <USB_GetMode>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f040 83ca 	bne.w	80091b8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f007 fd91 	bl	8010550 <USB_ReadInterrupts>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 83c0 	beq.w	80091b6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f007 fd88 	bl	8010550 <USB_ReadInterrupts>
 8008a40:	4603      	mov	r3, r0
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d107      	bne.n	8008a5a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	695a      	ldr	r2, [r3, #20]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f002 0202 	and.w	r2, r2, #2
 8008a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f007 fd76 	bl	8010550 <USB_ReadInterrupts>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f003 0310 	and.w	r3, r3, #16
 8008a6a:	2b10      	cmp	r3, #16
 8008a6c:	d161      	bne.n	8008b32 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	699a      	ldr	r2, [r3, #24]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0210 	bic.w	r2, r2, #16
 8008a7c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	f003 020f 	and.w	r2, r3, #15
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	1a9b      	subs	r3, r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	4413      	add	r3, r2
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	0c5b      	lsrs	r3, r3, #17
 8008aa2:	f003 030f 	and.w	r3, r3, #15
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d124      	bne.n	8008af4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d035      	beq.n	8008b22 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	091b      	lsrs	r3, r3, #4
 8008abe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	6a38      	ldr	r0, [r7, #32]
 8008aca:	f007 fbad 	bl	8010228 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	091b      	lsrs	r3, r3, #4
 8008ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ada:	441a      	add	r2, r3
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	091b      	lsrs	r3, r3, #4
 8008ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008aec:	441a      	add	r2, r3
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	619a      	str	r2, [r3, #24]
 8008af2:	e016      	b.n	8008b22 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	0c5b      	lsrs	r3, r3, #17
 8008af8:	f003 030f 	and.w	r3, r3, #15
 8008afc:	2b06      	cmp	r3, #6
 8008afe:	d110      	bne.n	8008b22 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b06:	2208      	movs	r2, #8
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6a38      	ldr	r0, [r7, #32]
 8008b0c:	f007 fb8c 	bl	8010228 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	699a      	ldr	r2, [r3, #24]
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	091b      	lsrs	r3, r3, #4
 8008b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b1c:	441a      	add	r2, r3
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	699a      	ldr	r2, [r3, #24]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f042 0210 	orr.w	r2, r2, #16
 8008b30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f007 fd0a 	bl	8010550 <USB_ReadInterrupts>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b46:	d16e      	bne.n	8008c26 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f007 fd10 	bl	8010576 <USB_ReadDevAllOutEpInterrupt>
 8008b56:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008b58:	e062      	b.n	8008c20 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d057      	beq.n	8008c14 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6a:	b2d2      	uxtb	r2, r2
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f007 fd35 	bl	80105de <USB_ReadDevOutEPInterrupt>
 8008b74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00c      	beq.n	8008b9a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	2301      	movs	r3, #1
 8008b90:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fddd 	bl	8009754 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00c      	beq.n	8008bbe <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fed7 	bl	800996c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f003 0310 	and.w	r3, r3, #16
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d008      	beq.n	8008bda <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	2310      	movs	r3, #16
 8008bd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d008      	beq.n	8008bf6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d009      	beq.n	8008c14 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c12:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	3301      	adds	r3, #1
 8008c18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1c:	085b      	lsrs	r3, r3, #1
 8008c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d199      	bne.n	8008b5a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f007 fc90 	bl	8010550 <USB_ReadInterrupts>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c3a:	f040 80c0 	bne.w	8008dbe <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f007 fcb1 	bl	80105aa <USB_ReadDevAllInEpInterrupt>
 8008c48:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008c4e:	e0b2      	b.n	8008db6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 80a7 	beq.w	8008daa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	4611      	mov	r1, r2
 8008c66:	4618      	mov	r0, r3
 8008c68:	f007 fcd7 	bl	801061a <USB_ReadDevInEPInterrupt>
 8008c6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d057      	beq.n	8008d28 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	2201      	movs	r2, #1
 8008c80:	fa02 f303 	lsl.w	r3, r2, r3
 8008c84:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	43db      	mvns	r3, r3
 8008c92:	69f9      	ldr	r1, [r7, #28]
 8008c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c98:	4013      	ands	r3, r2
 8008c9a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca8:	461a      	mov	r2, r3
 8008caa:	2301      	movs	r3, #1
 8008cac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d132      	bne.n	8008d1c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cba:	4613      	mov	r3, r2
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	440b      	add	r3, r1
 8008cc4:	3348      	adds	r3, #72	; 0x48
 8008cc6:	6819      	ldr	r1, [r3, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ccc:	4613      	mov	r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	1a9b      	subs	r3, r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4403      	add	r3, r0
 8008cd6:	3344      	adds	r3, #68	; 0x44
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4419      	add	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4403      	add	r3, r0
 8008cea:	3348      	adds	r3, #72	; 0x48
 8008cec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d113      	bne.n	8008d1c <HAL_PCD_IRQHandler+0x31c>
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	1a9b      	subs	r3, r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	3350      	adds	r3, #80	; 0x50
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d108      	bne.n	8008d1c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d14:	461a      	mov	r2, r3
 8008d16:	2101      	movs	r1, #1
 8008d18:	f007 fce0 	bl	80106dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f009 fc37 	bl	8012596 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f003 0308 	and.w	r3, r3, #8
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d008      	beq.n	8008d44 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3e:	461a      	mov	r2, r3
 8008d40:	2308      	movs	r3, #8
 8008d42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f003 0310 	and.w	r3, r3, #16
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d008      	beq.n	8008d60 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	2310      	movs	r3, #16
 8008d5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d008      	beq.n	8008d7c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d76:	461a      	mov	r2, r3
 8008d78:	2340      	movs	r3, #64	; 0x40
 8008d7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d008      	beq.n	8008d98 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d92:	461a      	mov	r2, r3
 8008d94:	2302      	movs	r3, #2
 8008d96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fc48 	bl	800963a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	3301      	adds	r3, #1
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	085b      	lsrs	r3, r3, #1
 8008db4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f47f af49 	bne.w	8008c50 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f007 fbc4 	bl	8010550 <USB_ReadInterrupts>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dd2:	d122      	bne.n	8008e1a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	69fa      	ldr	r2, [r7, #28]
 8008dde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008de2:	f023 0301 	bic.w	r3, r3, #1
 8008de6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d108      	bne.n	8008e04 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fe77 	bl	8009af0 <HAL_PCDEx_LPM_Callback>
 8008e02:	e002      	b.n	8008e0a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f009 fc3d 	bl	8012684 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695a      	ldr	r2, [r3, #20]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f007 fb96 	bl	8010550 <USB_ReadInterrupts>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e2e:	d112      	bne.n	8008e56 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d102      	bne.n	8008e46 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f009 fbf9 	bl	8012638 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	695a      	ldr	r2, [r3, #20]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f007 fb78 	bl	8010550 <USB_ReadInterrupts>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e6a:	d121      	bne.n	8008eb0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	695a      	ldr	r2, [r3, #20]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008e7a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d111      	bne.n	8008eaa <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e94:	089b      	lsrs	r3, r3, #2
 8008e96:	f003 020f 	and.w	r2, r3, #15
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fe24 	bl	8009af0 <HAL_PCDEx_LPM_Callback>
 8008ea8:	e002      	b.n	8008eb0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f009 fbc4 	bl	8012638 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f007 fb4b 	bl	8010550 <USB_ReadInterrupts>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ec4:	f040 80c7 	bne.w	8009056 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	69fa      	ldr	r2, [r7, #28]
 8008ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ed6:	f023 0301 	bic.w	r3, r3, #1
 8008eda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2110      	movs	r1, #16
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f006 fbd4 	bl	800f690 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ee8:	2300      	movs	r3, #0
 8008eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eec:	e056      	b.n	8008f9c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efa:	461a      	mov	r2, r3
 8008efc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f12:	0151      	lsls	r1, r2, #5
 8008f14:	69fa      	ldr	r2, [r7, #28]
 8008f16:	440a      	add	r2, r1
 8008f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f20:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f32:	0151      	lsls	r1, r2, #5
 8008f34:	69fa      	ldr	r2, [r7, #28]
 8008f36:	440a      	add	r2, r1
 8008f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f66:	0151      	lsls	r1, r2, #5
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	440a      	add	r2, r1
 8008f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	3301      	adds	r3, #1
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d3a3      	bcc.n	8008eee <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	69fa      	ldr	r2, [r7, #28]
 8008fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fb4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008fb8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d016      	beq.n	8008ff0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fcc:	69fa      	ldr	r2, [r7, #28]
 8008fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fd2:	f043 030b 	orr.w	r3, r3, #11
 8008fd6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fe8:	f043 030b 	orr.w	r3, r3, #11
 8008fec:	6453      	str	r3, [r2, #68]	; 0x44
 8008fee:	e015      	b.n	800901c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff6:	695a      	ldr	r2, [r3, #20]
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffe:	4619      	mov	r1, r3
 8009000:	f242 032b 	movw	r3, #8235	; 0x202b
 8009004:	4313      	orrs	r3, r2
 8009006:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	69fa      	ldr	r2, [r7, #28]
 8009012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009016:	f043 030b 	orr.w	r3, r3, #11
 800901a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	69fa      	ldr	r2, [r7, #28]
 8009026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800902a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800902e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009040:	461a      	mov	r2, r3
 8009042:	f007 fb4b 	bl	80106dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	695a      	ldr	r2, [r3, #20]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009054:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4618      	mov	r0, r3
 800905c:	f007 fa78 	bl	8010550 <USB_ReadInterrupts>
 8009060:	4603      	mov	r3, r0
 8009062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800906a:	d124      	bne.n	80090b6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	f007 fb0f 	bl	8010694 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4618      	mov	r0, r3
 800907c:	f006 fb69 	bl	800f752 <USB_GetDevSpeed>
 8009080:	4603      	mov	r3, r0
 8009082:	461a      	mov	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681c      	ldr	r4, [r3, #0]
 800908c:	f001 fc46 	bl	800a91c <HAL_RCC_GetHCLKFreq>
 8009090:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009096:	b2db      	uxtb	r3, r3
 8009098:	461a      	mov	r2, r3
 800909a:	4620      	mov	r0, r4
 800909c:	f006 f8ac 	bl	800f1f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f009 faa0 	bl	80125e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	695a      	ldr	r2, [r3, #20]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80090b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f007 fa48 	bl	8010550 <USB_ReadInterrupts>
 80090c0:	4603      	mov	r3, r0
 80090c2:	f003 0308 	and.w	r3, r3, #8
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d10a      	bne.n	80090e0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f009 fa7d 	bl	80125ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695a      	ldr	r2, [r3, #20]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f002 0208 	and.w	r2, r2, #8
 80090de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f007 fa33 	bl	8010550 <USB_ReadInterrupts>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090f4:	d10f      	bne.n	8009116 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f009 fadf 	bl	80126c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	695a      	ldr	r2, [r3, #20]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009114:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4618      	mov	r0, r3
 800911c:	f007 fa18 	bl	8010550 <USB_ReadInterrupts>
 8009120:	4603      	mov	r3, r0
 8009122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800912a:	d10f      	bne.n	800914c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	b2db      	uxtb	r3, r3
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f009 fab2 	bl	80126a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	695a      	ldr	r2, [r3, #20]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800914a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4618      	mov	r0, r3
 8009152:	f007 f9fd 	bl	8010550 <USB_ReadInterrupts>
 8009156:	4603      	mov	r3, r0
 8009158:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800915c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009160:	d10a      	bne.n	8009178 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f009 fac0 	bl	80126e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	695a      	ldr	r2, [r3, #20]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	f007 f9e7 	bl	8010550 <USB_ReadInterrupts>
 8009182:	4603      	mov	r3, r0
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b04      	cmp	r3, #4
 800918a:	d115      	bne.n	80091b8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	f003 0304 	and.w	r3, r3, #4
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f009 fab0 	bl	8012704 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6859      	ldr	r1, [r3, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	605a      	str	r2, [r3, #4]
 80091b4:	e000      	b.n	80091b8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80091b6:	bf00      	nop
    }
  }
}
 80091b8:	3734      	adds	r7, #52	; 0x34
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd90      	pop	{r4, r7, pc}

080091be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b082      	sub	sp, #8
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	460b      	mov	r3, r1
 80091c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d101      	bne.n	80091d8 <HAL_PCD_SetAddress+0x1a>
 80091d4:	2302      	movs	r3, #2
 80091d6:	e013      	b.n	8009200 <HAL_PCD_SetAddress+0x42>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	78fa      	ldrb	r2, [r7, #3]
 80091e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	78fa      	ldrb	r2, [r7, #3]
 80091ee:	4611      	mov	r1, r2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f007 f945 	bl	8010480 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	4608      	mov	r0, r1
 8009212:	4611      	mov	r1, r2
 8009214:	461a      	mov	r2, r3
 8009216:	4603      	mov	r3, r0
 8009218:	70fb      	strb	r3, [r7, #3]
 800921a:	460b      	mov	r3, r1
 800921c:	803b      	strh	r3, [r7, #0]
 800921e:	4613      	mov	r3, r2
 8009220:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800922a:	2b00      	cmp	r3, #0
 800922c:	da0f      	bge.n	800924e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800922e:	78fb      	ldrb	r3, [r7, #3]
 8009230:	f003 020f 	and.w	r2, r3, #15
 8009234:	4613      	mov	r3, r2
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	3338      	adds	r3, #56	; 0x38
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	4413      	add	r3, r2
 8009242:	3304      	adds	r3, #4
 8009244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	705a      	strb	r2, [r3, #1]
 800924c:	e00f      	b.n	800926e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	f003 020f 	and.w	r2, r3, #15
 8009254:	4613      	mov	r3, r2
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	1a9b      	subs	r3, r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	4413      	add	r3, r2
 8009264:	3304      	adds	r3, #4
 8009266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800926e:	78fb      	ldrb	r3, [r7, #3]
 8009270:	f003 030f 	and.w	r3, r3, #15
 8009274:	b2da      	uxtb	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800927a:	883a      	ldrh	r2, [r7, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	78ba      	ldrb	r2, [r7, #2]
 8009284:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	785b      	ldrb	r3, [r3, #1]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	b29a      	uxth	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009298:	78bb      	ldrb	r3, [r7, #2]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d102      	bne.n	80092a4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d101      	bne.n	80092b2 <HAL_PCD_EP_Open+0xaa>
 80092ae:	2302      	movs	r3, #2
 80092b0:	e00e      	b.n	80092d0 <HAL_PCD_EP_Open+0xc8>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68f9      	ldr	r1, [r7, #12]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f006 fa6b 	bl	800f79c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80092ce:	7afb      	ldrb	r3, [r7, #11]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80092e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da0f      	bge.n	800930c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	f003 020f 	and.w	r2, r3, #15
 80092f2:	4613      	mov	r3, r2
 80092f4:	00db      	lsls	r3, r3, #3
 80092f6:	1a9b      	subs	r3, r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	3338      	adds	r3, #56	; 0x38
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	4413      	add	r3, r2
 8009300:	3304      	adds	r3, #4
 8009302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2201      	movs	r2, #1
 8009308:	705a      	strb	r2, [r3, #1]
 800930a:	e00f      	b.n	800932c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800930c:	78fb      	ldrb	r3, [r7, #3]
 800930e:	f003 020f 	and.w	r2, r3, #15
 8009312:	4613      	mov	r3, r2
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	4413      	add	r3, r2
 8009322:	3304      	adds	r3, #4
 8009324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	f003 030f 	and.w	r3, r3, #15
 8009332:	b2da      	uxtb	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800933e:	2b01      	cmp	r3, #1
 8009340:	d101      	bne.n	8009346 <HAL_PCD_EP_Close+0x6e>
 8009342:	2302      	movs	r3, #2
 8009344:	e00e      	b.n	8009364 <HAL_PCD_EP_Close+0x8c>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	4618      	mov	r0, r3
 8009356:	f006 faa9 	bl	800f8ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	607a      	str	r2, [r7, #4]
 8009376:	603b      	str	r3, [r7, #0]
 8009378:	460b      	mov	r3, r1
 800937a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	f003 020f 	and.w	r2, r3, #15
 8009382:	4613      	mov	r3, r2
 8009384:	00db      	lsls	r3, r3, #3
 8009386:	1a9b      	subs	r3, r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	4413      	add	r3, r2
 8009392:	3304      	adds	r3, #4
 8009394:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2200      	movs	r2, #0
 80093a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2200      	movs	r2, #0
 80093ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093ae:	7afb      	ldrb	r3, [r7, #11]
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d102      	bne.n	80093c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80093c8:	7afb      	ldrb	r3, [r7, #11]
 80093ca:	f003 030f 	and.w	r3, r3, #15
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	461a      	mov	r2, r3
 80093de:	6979      	ldr	r1, [r7, #20]
 80093e0:	f006 fd8c 	bl	800fefc <USB_EP0StartXfer>
 80093e4:	e008      	b.n	80093f8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	461a      	mov	r2, r3
 80093f2:	6979      	ldr	r1, [r7, #20]
 80093f4:	f006 fb36 	bl	800fa64 <USB_EPStartXfer>
  }

  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	460b      	mov	r3, r1
 800940c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	f003 020f 	and.w	r2, r3, #15
 8009414:	6879      	ldr	r1, [r7, #4]
 8009416:	4613      	mov	r3, r2
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	1a9b      	subs	r3, r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	440b      	add	r3, r1
 8009420:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009424:	681b      	ldr	r3, [r3, #0]
}
 8009426:	4618      	mov	r0, r3
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b086      	sub	sp, #24
 8009436:	af00      	add	r7, sp, #0
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
 800943e:	460b      	mov	r3, r1
 8009440:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009442:	7afb      	ldrb	r3, [r7, #11]
 8009444:	f003 020f 	and.w	r2, r3, #15
 8009448:	4613      	mov	r3, r2
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	1a9b      	subs	r3, r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	3338      	adds	r3, #56	; 0x38
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	4413      	add	r3, r2
 8009456:	3304      	adds	r3, #4
 8009458:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2200      	movs	r2, #0
 800946a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	2201      	movs	r2, #1
 8009470:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009472:	7afb      	ldrb	r3, [r7, #11]
 8009474:	f003 030f 	and.w	r3, r3, #15
 8009478:	b2da      	uxtb	r2, r3
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d102      	bne.n	800948c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	f003 030f 	and.w	r3, r3, #15
 8009492:	2b00      	cmp	r3, #0
 8009494:	d109      	bne.n	80094aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	461a      	mov	r2, r3
 80094a2:	6979      	ldr	r1, [r7, #20]
 80094a4:	f006 fd2a 	bl	800fefc <USB_EP0StartXfer>
 80094a8:	e008      	b.n	80094bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	461a      	mov	r2, r3
 80094b6:	6979      	ldr	r1, [r7, #20]
 80094b8:	f006 fad4 	bl	800fa64 <USB_EPStartXfer>
  }

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80094d2:	78fb      	ldrb	r3, [r7, #3]
 80094d4:	f003 020f 	and.w	r2, r3, #15
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d901      	bls.n	80094e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e050      	b.n	8009586 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80094e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	da0f      	bge.n	800950c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	f003 020f 	and.w	r2, r3, #15
 80094f2:	4613      	mov	r3, r2
 80094f4:	00db      	lsls	r3, r3, #3
 80094f6:	1a9b      	subs	r3, r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	3338      	adds	r3, #56	; 0x38
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	4413      	add	r3, r2
 8009500:	3304      	adds	r3, #4
 8009502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2201      	movs	r2, #1
 8009508:	705a      	strb	r2, [r3, #1]
 800950a:	e00d      	b.n	8009528 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	4613      	mov	r3, r2
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	1a9b      	subs	r3, r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4413      	add	r3, r2
 800951e:	3304      	adds	r3, #4
 8009520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2201      	movs	r2, #1
 800952c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800952e:	78fb      	ldrb	r3, [r7, #3]
 8009530:	f003 030f 	and.w	r3, r3, #15
 8009534:	b2da      	uxtb	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009540:	2b01      	cmp	r3, #1
 8009542:	d101      	bne.n	8009548 <HAL_PCD_EP_SetStall+0x82>
 8009544:	2302      	movs	r3, #2
 8009546:	e01e      	b.n	8009586 <HAL_PCD_EP_SetStall+0xc0>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68f9      	ldr	r1, [r7, #12]
 8009556:	4618      	mov	r0, r3
 8009558:	f006 febe 	bl	80102d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800955c:	78fb      	ldrb	r3, [r7, #3]
 800955e:	f003 030f 	and.w	r3, r3, #15
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10a      	bne.n	800957c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	b2d9      	uxtb	r1, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009576:	461a      	mov	r2, r3
 8009578:	f007 f8b0 	bl	80106dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800959a:	78fb      	ldrb	r3, [r7, #3]
 800959c:	f003 020f 	and.w	r2, r3, #15
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d901      	bls.n	80095ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e042      	b.n	8009632 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80095ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	da0f      	bge.n	80095d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	f003 020f 	and.w	r2, r3, #15
 80095ba:	4613      	mov	r3, r2
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	1a9b      	subs	r3, r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	3338      	adds	r3, #56	; 0x38
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	4413      	add	r3, r2
 80095c8:	3304      	adds	r3, #4
 80095ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2201      	movs	r2, #1
 80095d0:	705a      	strb	r2, [r3, #1]
 80095d2:	e00f      	b.n	80095f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	f003 020f 	and.w	r2, r3, #15
 80095da:	4613      	mov	r3, r2
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	1a9b      	subs	r3, r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	4413      	add	r3, r2
 80095ea:	3304      	adds	r3, #4
 80095ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	f003 030f 	and.w	r3, r3, #15
 8009600:	b2da      	uxtb	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800960c:	2b01      	cmp	r3, #1
 800960e:	d101      	bne.n	8009614 <HAL_PCD_EP_ClrStall+0x86>
 8009610:	2302      	movs	r3, #2
 8009612:	e00e      	b.n	8009632 <HAL_PCD_EP_ClrStall+0xa4>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68f9      	ldr	r1, [r7, #12]
 8009622:	4618      	mov	r0, r3
 8009624:	f006 fec6 	bl	80103b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b08a      	sub	sp, #40	; 0x28
 800963e:	af02      	add	r7, sp, #8
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	4613      	mov	r3, r2
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	1a9b      	subs	r3, r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	3338      	adds	r3, #56	; 0x38
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	4413      	add	r3, r2
 800965e:	3304      	adds	r3, #4
 8009660:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	699a      	ldr	r2, [r3, #24]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	429a      	cmp	r2, r3
 800966c:	d901      	bls.n	8009672 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e06c      	b.n	800974c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	695a      	ldr	r2, [r3, #20]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	429a      	cmp	r2, r3
 8009686:	d902      	bls.n	800968e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	3303      	adds	r3, #3
 8009692:	089b      	lsrs	r3, r3, #2
 8009694:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009696:	e02b      	b.n	80096f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	695a      	ldr	r2, [r3, #20]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	69fa      	ldr	r2, [r7, #28]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d902      	bls.n	80096b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	3303      	adds	r3, #3
 80096b8:	089b      	lsrs	r3, r3, #2
 80096ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	68d9      	ldr	r1, [r3, #12]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	4603      	mov	r3, r0
 80096d2:	6978      	ldr	r0, [r7, #20]
 80096d4:	f006 fd6a 	bl	80101ac <USB_WritePacket>

    ep->xfer_buff  += len;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	68da      	ldr	r2, [r3, #12]
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	441a      	add	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	441a      	add	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	429a      	cmp	r2, r3
 8009704:	d809      	bhi.n	800971a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	699a      	ldr	r2, [r3, #24]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800970e:	429a      	cmp	r2, r3
 8009710:	d203      	bcs.n	800971a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1be      	bne.n	8009698 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	695a      	ldr	r2, [r3, #20]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	429a      	cmp	r2, r3
 8009724:	d811      	bhi.n	800974a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	f003 030f 	and.w	r3, r3, #15
 800972c:	2201      	movs	r2, #1
 800972e:	fa02 f303 	lsl.w	r3, r2, r3
 8009732:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	43db      	mvns	r3, r3
 8009740:	6939      	ldr	r1, [r7, #16]
 8009742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009746:	4013      	ands	r3, r2
 8009748:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	333c      	adds	r3, #60	; 0x3c
 800976c:	3304      	adds	r3, #4
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b01      	cmp	r3, #1
 8009788:	f040 80a0 	bne.w	80098cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f003 0308 	and.w	r3, r3, #8
 8009792:	2b00      	cmp	r3, #0
 8009794:	d015      	beq.n	80097c2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4a72      	ldr	r2, [pc, #456]	; (8009964 <PCD_EP_OutXfrComplete_int+0x210>)
 800979a:	4293      	cmp	r3, r2
 800979c:	f240 80dd 	bls.w	800995a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 80d7 	beq.w	800995a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b8:	461a      	mov	r2, r3
 80097ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097be:	6093      	str	r3, [r2, #8]
 80097c0:	e0cb      	b.n	800995a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f003 0320 	and.w	r3, r3, #32
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d009      	beq.n	80097e0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	015a      	lsls	r2, r3, #5
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	4413      	add	r3, r2
 80097d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d8:	461a      	mov	r2, r3
 80097da:	2320      	movs	r3, #32
 80097dc:	6093      	str	r3, [r2, #8]
 80097de:	e0bc      	b.n	800995a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f040 80b7 	bne.w	800995a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4a5d      	ldr	r2, [pc, #372]	; (8009964 <PCD_EP_OutXfrComplete_int+0x210>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d90f      	bls.n	8009814 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00a      	beq.n	8009814 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980a:	461a      	mov	r2, r3
 800980c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009810:	6093      	str	r3, [r2, #8]
 8009812:	e0a2      	b.n	800995a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009814:	6879      	ldr	r1, [r7, #4]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4613      	mov	r3, r2
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009826:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	0159      	lsls	r1, r3, #5
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	440b      	add	r3, r1
 8009830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800983a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	4613      	mov	r3, r2
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	1a9b      	subs	r3, r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4403      	add	r3, r0
 800984a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800984e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	4613      	mov	r3, r2
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009862:	6819      	ldr	r1, [r3, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	4613      	mov	r3, r2
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	1a9b      	subs	r3, r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4403      	add	r3, r0
 8009872:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4419      	add	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	4613      	mov	r3, r2
 8009880:	00db      	lsls	r3, r3, #3
 8009882:	1a9b      	subs	r3, r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4403      	add	r3, r0
 8009888:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800988c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d114      	bne.n	80098be <PCD_EP_OutXfrComplete_int+0x16a>
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	4613      	mov	r3, r2
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d108      	bne.n	80098be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6818      	ldr	r0, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80098b6:	461a      	mov	r2, r3
 80098b8:	2101      	movs	r1, #1
 80098ba:	f006 ff0f 	bl	80106dc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f008 fe4b 	bl	8012560 <HAL_PCD_DataOutStageCallback>
 80098ca:	e046      	b.n	800995a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4a26      	ldr	r2, [pc, #152]	; (8009968 <PCD_EP_OutXfrComplete_int+0x214>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d124      	bne.n	800991e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ea:	461a      	mov	r2, r3
 80098ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098f0:	6093      	str	r3, [r2, #8]
 80098f2:	e032      	b.n	800995a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f003 0320 	and.w	r3, r3, #32
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d008      	beq.n	8009910 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990a:	461a      	mov	r2, r3
 800990c:	2320      	movs	r3, #32
 800990e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f008 fe22 	bl	8012560 <HAL_PCD_DataOutStageCallback>
 800991c:	e01d      	b.n	800995a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d114      	bne.n	800994e <PCD_EP_OutXfrComplete_int+0x1fa>
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	4613      	mov	r3, r2
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	1a9b      	subs	r3, r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	440b      	add	r3, r1
 8009932:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d108      	bne.n	800994e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009946:	461a      	mov	r2, r3
 8009948:	2100      	movs	r1, #0
 800994a:	f006 fec7 	bl	80106dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f008 fe03 	bl	8012560 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	4f54300a 	.word	0x4f54300a
 8009968:	4f54310a 	.word	0x4f54310a

0800996c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	333c      	adds	r3, #60	; 0x3c
 8009984:	3304      	adds	r3, #4
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	4413      	add	r3, r2
 8009992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4a15      	ldr	r2, [pc, #84]	; (80099f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d90e      	bls.n	80099c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d009      	beq.n	80099c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	461a      	mov	r2, r3
 80099ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f008 fdbb 	bl	801253c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4a0a      	ldr	r2, [pc, #40]	; (80099f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d90c      	bls.n	80099e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d108      	bne.n	80099e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80099e0:	461a      	mov	r2, r3
 80099e2:	2101      	movs	r1, #1
 80099e4:	f006 fe7a 	bl	80106dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	4f54300a 	.word	0x4f54300a

080099f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
 8009a04:	4613      	mov	r3, r2
 8009a06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d107      	bne.n	8009a26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009a16:	883b      	ldrh	r3, [r7, #0]
 8009a18:	0419      	lsls	r1, r3, #16
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	629a      	str	r2, [r3, #40]	; 0x28
 8009a24:	e028      	b.n	8009a78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	0c1b      	lsrs	r3, r3, #16
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	4413      	add	r3, r2
 8009a32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a34:	2300      	movs	r3, #0
 8009a36:	73fb      	strb	r3, [r7, #15]
 8009a38:	e00d      	b.n	8009a56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	3340      	adds	r3, #64	; 0x40
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	0c1b      	lsrs	r3, r3, #16
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	3301      	adds	r3, #1
 8009a54:	73fb      	strb	r3, [r7, #15]
 8009a56:	7bfa      	ldrb	r2, [r7, #15]
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d3ec      	bcc.n	8009a3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009a60:	883b      	ldrh	r3, [r7, #0]
 8009a62:	0418      	lsls	r0, r3, #16
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6819      	ldr	r1, [r3, #0]
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	4302      	orrs	r2, r0
 8009a70:	3340      	adds	r3, #64	; 0x40
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	440b      	add	r3, r1
 8009a76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	887a      	ldrh	r2, [r7, #2]
 8009a98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ad6:	4b05      	ldr	r3, [pc, #20]	; (8009aec <HAL_PCDEx_ActivateLPM+0x44>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	10000003 	.word	0x10000003

08009af0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	460b      	mov	r3, r1
 8009afa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009b10:	4b19      	ldr	r3, [pc, #100]	; (8009b78 <HAL_PWREx_ConfigSupply+0x70>)
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f003 0304 	and.w	r3, r3, #4
 8009b18:	2b04      	cmp	r3, #4
 8009b1a:	d00a      	beq.n	8009b32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009b1c:	4b16      	ldr	r3, [pc, #88]	; (8009b78 <HAL_PWREx_ConfigSupply+0x70>)
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	f003 0307 	and.w	r3, r3, #7
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d001      	beq.n	8009b2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e01f      	b.n	8009b6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e01d      	b.n	8009b6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009b32:	4b11      	ldr	r3, [pc, #68]	; (8009b78 <HAL_PWREx_ConfigSupply+0x70>)
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	f023 0207 	bic.w	r2, r3, #7
 8009b3a:	490f      	ldr	r1, [pc, #60]	; (8009b78 <HAL_PWREx_ConfigSupply+0x70>)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009b42:	f7f9 fa4f 	bl	8002fe4 <HAL_GetTick>
 8009b46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b48:	e009      	b.n	8009b5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009b4a:	f7f9 fa4b 	bl	8002fe4 <HAL_GetTick>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b58:	d901      	bls.n	8009b5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e007      	b.n	8009b6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b5e:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <HAL_PWREx_ConfigSupply+0x70>)
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b6a:	d1ee      	bne.n	8009b4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	58024800 	.word	0x58024800

08009b7c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009b80:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	4a04      	ldr	r2, [pc, #16]	; (8009b98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b8a:	60d3      	str	r3, [r2, #12]
}
 8009b8c:	bf00      	nop
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	58024800 	.word	0x58024800

08009b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08c      	sub	sp, #48	; 0x30
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e37c      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 8089 	beq.w	8009cce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bbc:	4b9d      	ldr	r3, [pc, #628]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bc6:	4b9b      	ldr	r3, [pc, #620]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bce:	2b10      	cmp	r3, #16
 8009bd0:	d007      	beq.n	8009be2 <HAL_RCC_OscConfig+0x46>
 8009bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd4:	2b18      	cmp	r3, #24
 8009bd6:	d110      	bne.n	8009bfa <HAL_RCC_OscConfig+0x5e>
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	f003 0303 	and.w	r3, r3, #3
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d10b      	bne.n	8009bfa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009be2:	4b94      	ldr	r3, [pc, #592]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d06e      	beq.n	8009ccc <HAL_RCC_OscConfig+0x130>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d16a      	bne.n	8009ccc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e356      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c02:	d106      	bne.n	8009c12 <HAL_RCC_OscConfig+0x76>
 8009c04:	4b8b      	ldr	r3, [pc, #556]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a8a      	ldr	r2, [pc, #552]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	e02e      	b.n	8009c70 <HAL_RCC_OscConfig+0xd4>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10c      	bne.n	8009c34 <HAL_RCC_OscConfig+0x98>
 8009c1a:	4b86      	ldr	r3, [pc, #536]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a85      	ldr	r2, [pc, #532]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c24:	6013      	str	r3, [r2, #0]
 8009c26:	4b83      	ldr	r3, [pc, #524]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a82      	ldr	r2, [pc, #520]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c30:	6013      	str	r3, [r2, #0]
 8009c32:	e01d      	b.n	8009c70 <HAL_RCC_OscConfig+0xd4>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c3c:	d10c      	bne.n	8009c58 <HAL_RCC_OscConfig+0xbc>
 8009c3e:	4b7d      	ldr	r3, [pc, #500]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a7c      	ldr	r2, [pc, #496]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c48:	6013      	str	r3, [r2, #0]
 8009c4a:	4b7a      	ldr	r3, [pc, #488]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a79      	ldr	r2, [pc, #484]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c54:	6013      	str	r3, [r2, #0]
 8009c56:	e00b      	b.n	8009c70 <HAL_RCC_OscConfig+0xd4>
 8009c58:	4b76      	ldr	r3, [pc, #472]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a75      	ldr	r2, [pc, #468]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	4b73      	ldr	r3, [pc, #460]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a72      	ldr	r2, [pc, #456]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d014      	beq.n	8009ca2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c78:	f7f9 f9b4 	bl	8002fe4 <HAL_GetTick>
 8009c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c7e:	e009      	b.n	8009c94 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009c80:	f7f9 f9b0 	bl	8002fe4 <HAL_GetTick>
 8009c84:	4602      	mov	r2, r0
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c8e:	d901      	bls.n	8009c94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e309      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c94:	4b67      	ldr	r3, [pc, #412]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0ef      	beq.n	8009c80 <HAL_RCC_OscConfig+0xe4>
 8009ca0:	e015      	b.n	8009cce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca2:	f7f9 f99f 	bl	8002fe4 <HAL_GetTick>
 8009ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ca8:	e009      	b.n	8009cbe <HAL_RCC_OscConfig+0x122>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009caa:	f7f9 f99b 	bl	8002fe4 <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cb8:	d901      	bls.n	8009cbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e2f4      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009cbe:	4b5d      	ldr	r3, [pc, #372]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1ef      	bne.n	8009caa <HAL_RCC_OscConfig+0x10e>
 8009cca:	e000      	b.n	8009cce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d06d      	beq.n	8009db6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cda:	4b56      	ldr	r3, [pc, #344]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ce4:	4b53      	ldr	r3, [pc, #332]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d007      	beq.n	8009d00 <HAL_RCC_OscConfig+0x164>
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	2b18      	cmp	r3, #24
 8009cf4:	d11b      	bne.n	8009d2e <HAL_RCC_OscConfig+0x192>
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	f003 0303 	and.w	r3, r3, #3
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d116      	bne.n	8009d2e <HAL_RCC_OscConfig+0x192>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d00:	4b4c      	ldr	r3, [pc, #304]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 0304 	and.w	r3, r3, #4
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d005      	beq.n	8009d18 <HAL_RCC_OscConfig+0x17c>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e2c7      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d18:	4b46      	ldr	r3, [pc, #280]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	061b      	lsls	r3, r3, #24
 8009d26:	4943      	ldr	r1, [pc, #268]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d2c:	e043      	b.n	8009db6 <HAL_RCC_OscConfig+0x21a>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d026      	beq.n	8009d84 <HAL_RCC_OscConfig+0x1e8>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009d36:	4b3f      	ldr	r3, [pc, #252]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f023 0219 	bic.w	r2, r3, #25
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	493c      	ldr	r1, [pc, #240]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d48:	f7f9 f94c 	bl	8002fe4 <HAL_GetTick>
 8009d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d4e:	e008      	b.n	8009d62 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d50:	f7f9 f948 	bl	8002fe4 <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d901      	bls.n	8009d62 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e2a2      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d62:	4b34      	ldr	r3, [pc, #208]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0304 	and.w	r3, r3, #4
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0f0      	beq.n	8009d50 <HAL_RCC_OscConfig+0x1b4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d6e:	4b31      	ldr	r3, [pc, #196]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	061b      	lsls	r3, r3, #24
 8009d7c:	492d      	ldr	r1, [pc, #180]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	604b      	str	r3, [r1, #4]
 8009d82:	e018      	b.n	8009db6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d84:	4b2b      	ldr	r3, [pc, #172]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a2a      	ldr	r2, [pc, #168]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009d8a:	f023 0301 	bic.w	r3, r3, #1
 8009d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d90:	f7f9 f928 	bl	8002fe4 <HAL_GetTick>
 8009d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d96:	e008      	b.n	8009daa <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d98:	f7f9 f924 	bl	8002fe4 <HAL_GetTick>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d901      	bls.n	8009daa <HAL_RCC_OscConfig+0x20e>
          {
            return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e27e      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009daa:	4b22      	ldr	r3, [pc, #136]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0304 	and.w	r3, r3, #4
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1f0      	bne.n	8009d98 <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0310 	and.w	r3, r3, #16
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d06d      	beq.n	8009e9e <HAL_RCC_OscConfig+0x302>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dc2:	4b1c      	ldr	r3, [pc, #112]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dcc:	4b19      	ldr	r3, [pc, #100]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	d007      	beq.n	8009de8 <HAL_RCC_OscConfig+0x24c>
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2b18      	cmp	r3, #24
 8009ddc:	d11b      	bne.n	8009e16 <HAL_RCC_OscConfig+0x27a>
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d116      	bne.n	8009e16 <HAL_RCC_OscConfig+0x27a>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009de8:	4b12      	ldr	r3, [pc, #72]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d005      	beq.n	8009e00 <HAL_RCC_OscConfig+0x264>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	69db      	ldr	r3, [r3, #28]
 8009df8:	2b80      	cmp	r3, #128	; 0x80
 8009dfa:	d001      	beq.n	8009e00 <HAL_RCC_OscConfig+0x264>
      {
        return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e253      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e00:	4b0c      	ldr	r3, [pc, #48]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	061b      	lsls	r3, r3, #24
 8009e0e:	4909      	ldr	r1, [pc, #36]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e14:	e043      	b.n	8009e9e <HAL_RCC_OscConfig+0x302>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d026      	beq.n	8009e6c <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009e1e:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a04      	ldr	r2, [pc, #16]	; (8009e34 <HAL_RCC_OscConfig+0x298>)
 8009e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2a:	f7f9 f8db 	bl	8002fe4 <HAL_GetTick>
 8009e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e30:	e00b      	b.n	8009e4a <HAL_RCC_OscConfig+0x2ae>
 8009e32:	bf00      	nop
 8009e34:	58024400 	.word	0x58024400
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009e38:	f7f9 f8d4 	bl	8002fe4 <HAL_GetTick>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d901      	bls.n	8009e4a <HAL_RCC_OscConfig+0x2ae>
          {
            return HAL_TIMEOUT;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e22e      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e4a:	4ba3      	ldr	r3, [pc, #652]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0f0      	beq.n	8009e38 <HAL_RCC_OscConfig+0x29c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e56:	4ba0      	ldr	r3, [pc, #640]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	061b      	lsls	r3, r3, #24
 8009e64:	499c      	ldr	r1, [pc, #624]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60cb      	str	r3, [r1, #12]
 8009e6a:	e018      	b.n	8009e9e <HAL_RCC_OscConfig+0x302>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009e6c:	4b9a      	ldr	r3, [pc, #616]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a99      	ldr	r2, [pc, #612]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e78:	f7f9 f8b4 	bl	8002fe4 <HAL_GetTick>
 8009e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e7e:	e008      	b.n	8009e92 <HAL_RCC_OscConfig+0x2f6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009e80:	f7f9 f8b0 	bl	8002fe4 <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d901      	bls.n	8009e92 <HAL_RCC_OscConfig+0x2f6>
          {
            return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e20a      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e92:	4b91      	ldr	r3, [pc, #580]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1f0      	bne.n	8009e80 <HAL_RCC_OscConfig+0x2e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0308 	and.w	r3, r3, #8
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d036      	beq.n	8009f18 <HAL_RCC_OscConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d019      	beq.n	8009ee6 <HAL_RCC_OscConfig+0x34a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009eb2:	4b89      	ldr	r3, [pc, #548]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb6:	4a88      	ldr	r2, [pc, #544]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009eb8:	f043 0301 	orr.w	r3, r3, #1
 8009ebc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ebe:	f7f9 f891 	bl	8002fe4 <HAL_GetTick>
 8009ec2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ec4:	e008      	b.n	8009ed8 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ec6:	f7f9 f88d 	bl	8002fe4 <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d901      	bls.n	8009ed8 <HAL_RCC_OscConfig+0x33c>
        {
          return HAL_TIMEOUT;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	e1e7      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ed8:	4b7f      	ldr	r3, [pc, #508]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0f0      	beq.n	8009ec6 <HAL_RCC_OscConfig+0x32a>
 8009ee4:	e018      	b.n	8009f18 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ee6:	4b7c      	ldr	r3, [pc, #496]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eea:	4a7b      	ldr	r2, [pc, #492]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009eec:	f023 0301 	bic.w	r3, r3, #1
 8009ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ef2:	f7f9 f877 	bl	8002fe4 <HAL_GetTick>
 8009ef6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ef8:	e008      	b.n	8009f0c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009efa:	f7f9 f873 	bl	8002fe4 <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d901      	bls.n	8009f0c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e1cd      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f0c:	4b72      	ldr	r3, [pc, #456]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f10:	f003 0302 	and.w	r3, r3, #2
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1f0      	bne.n	8009efa <HAL_RCC_OscConfig+0x35e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0320 	and.w	r3, r3, #32
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d036      	beq.n	8009f92 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d019      	beq.n	8009f60 <HAL_RCC_OscConfig+0x3c4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f2c:	4b6a      	ldr	r3, [pc, #424]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a69      	ldr	r2, [pc, #420]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009f32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f38:	f7f9 f854 	bl	8002fe4 <HAL_GetTick>
 8009f3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f3e:	e008      	b.n	8009f52 <HAL_RCC_OscConfig+0x3b6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009f40:	f7f9 f850 	bl	8002fe4 <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d901      	bls.n	8009f52 <HAL_RCC_OscConfig+0x3b6>
        {
          return HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e1aa      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f52:	4b61      	ldr	r3, [pc, #388]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0f0      	beq.n	8009f40 <HAL_RCC_OscConfig+0x3a4>
 8009f5e:	e018      	b.n	8009f92 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f60:	4b5d      	ldr	r3, [pc, #372]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a5c      	ldr	r2, [pc, #368]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f6c:	f7f9 f83a 	bl	8002fe4 <HAL_GetTick>
 8009f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f72:	e008      	b.n	8009f86 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009f74:	f7f9 f836 	bl	8002fe4 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d901      	bls.n	8009f86 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e190      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f86:	4b54      	ldr	r3, [pc, #336]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1f0      	bne.n	8009f74 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 0304 	and.w	r3, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 8081 	beq.w	800a0a2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009fa0:	4b4e      	ldr	r3, [pc, #312]	; (800a0dc <HAL_RCC_OscConfig+0x540>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a4d      	ldr	r2, [pc, #308]	; (800a0dc <HAL_RCC_OscConfig+0x540>)
 8009fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009faa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fac:	f7f9 f81a 	bl	8002fe4 <HAL_GetTick>
 8009fb0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fb2:	e008      	b.n	8009fc6 <HAL_RCC_OscConfig+0x42a>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009fb4:	f7f9 f816 	bl	8002fe4 <HAL_GetTick>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	2b64      	cmp	r3, #100	; 0x64
 8009fc0:	d901      	bls.n	8009fc6 <HAL_RCC_OscConfig+0x42a>
      {
        return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e170      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fc6:	4b45      	ldr	r3, [pc, #276]	; (800a0dc <HAL_RCC_OscConfig+0x540>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0f0      	beq.n	8009fb4 <HAL_RCC_OscConfig+0x418>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d106      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x44c>
 8009fda:	4b3f      	ldr	r3, [pc, #252]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fde:	4a3e      	ldr	r2, [pc, #248]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009fe0:	f043 0301 	orr.w	r3, r3, #1
 8009fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8009fe6:	e02d      	b.n	800a044 <HAL_RCC_OscConfig+0x4a8>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10c      	bne.n	800a00a <HAL_RCC_OscConfig+0x46e>
 8009ff0:	4b39      	ldr	r3, [pc, #228]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff4:	4a38      	ldr	r2, [pc, #224]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009ff6:	f023 0301 	bic.w	r3, r3, #1
 8009ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8009ffc:	4b36      	ldr	r3, [pc, #216]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 8009ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a000:	4a35      	ldr	r2, [pc, #212]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a002:	f023 0304 	bic.w	r3, r3, #4
 800a006:	6713      	str	r3, [r2, #112]	; 0x70
 800a008:	e01c      	b.n	800a044 <HAL_RCC_OscConfig+0x4a8>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	2b05      	cmp	r3, #5
 800a010:	d10c      	bne.n	800a02c <HAL_RCC_OscConfig+0x490>
 800a012:	4b31      	ldr	r3, [pc, #196]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a016:	4a30      	ldr	r2, [pc, #192]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a018:	f043 0304 	orr.w	r3, r3, #4
 800a01c:	6713      	str	r3, [r2, #112]	; 0x70
 800a01e:	4b2e      	ldr	r3, [pc, #184]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a022:	4a2d      	ldr	r2, [pc, #180]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a024:	f043 0301 	orr.w	r3, r3, #1
 800a028:	6713      	str	r3, [r2, #112]	; 0x70
 800a02a:	e00b      	b.n	800a044 <HAL_RCC_OscConfig+0x4a8>
 800a02c:	4b2a      	ldr	r3, [pc, #168]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a030:	4a29      	ldr	r2, [pc, #164]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a032:	f023 0301 	bic.w	r3, r3, #1
 800a036:	6713      	str	r3, [r2, #112]	; 0x70
 800a038:	4b27      	ldr	r3, [pc, #156]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03c:	4a26      	ldr	r2, [pc, #152]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a03e:	f023 0304 	bic.w	r3, r3, #4
 800a042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d015      	beq.n	800a078 <HAL_RCC_OscConfig+0x4dc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a04c:	f7f8 ffca 	bl	8002fe4 <HAL_GetTick>
 800a050:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a052:	e00a      	b.n	800a06a <HAL_RCC_OscConfig+0x4ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a054:	f7f8 ffc6 	bl	8002fe4 <HAL_GetTick>
 800a058:	4602      	mov	r2, r0
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a062:	4293      	cmp	r3, r2
 800a064:	d901      	bls.n	800a06a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e11e      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a06a:	4b1b      	ldr	r3, [pc, #108]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06e:	f003 0302 	and.w	r3, r3, #2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0ee      	beq.n	800a054 <HAL_RCC_OscConfig+0x4b8>
 800a076:	e014      	b.n	800a0a2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a078:	f7f8 ffb4 	bl	8002fe4 <HAL_GetTick>
 800a07c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a07e:	e00a      	b.n	800a096 <HAL_RCC_OscConfig+0x4fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a080:	f7f8 ffb0 	bl	8002fe4 <HAL_GetTick>
 800a084:	4602      	mov	r2, r0
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a08e:	4293      	cmp	r3, r2
 800a090:	d901      	bls.n	800a096 <HAL_RCC_OscConfig+0x4fa>
        {
          return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e108      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a096:	4b10      	ldr	r3, [pc, #64]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a09a:	f003 0302 	and.w	r3, r3, #2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1ee      	bne.n	800a080 <HAL_RCC_OscConfig+0x4e4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 80fd 	beq.w	800a2a6 <HAL_RCC_OscConfig+0x70a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a0ac:	4b0a      	ldr	r3, [pc, #40]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0b4:	2b18      	cmp	r3, #24
 800a0b6:	f000 80b8 	beq.w	800a22a <HAL_RCC_OscConfig+0x68e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	f040 8099 	bne.w	800a1f6 <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0c4:	4b04      	ldr	r3, [pc, #16]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a03      	ldr	r2, [pc, #12]	; (800a0d8 <HAL_RCC_OscConfig+0x53c>)
 800a0ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d0:	f7f8 ff88 	bl	8002fe4 <HAL_GetTick>
 800a0d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0d6:	e00c      	b.n	800a0f2 <HAL_RCC_OscConfig+0x556>
 800a0d8:	58024400 	.word	0x58024400
 800a0dc:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0e0:	f7f8 ff80 	bl	8002fe4 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d901      	bls.n	800a0f2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e0da      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0f2:	4b6f      	ldr	r3, [pc, #444]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f0      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0fe:	4b6c      	ldr	r3, [pc, #432]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a102:	4b6c      	ldr	r3, [pc, #432]	; (800a2b4 <HAL_RCC_OscConfig+0x718>)
 800a104:	4013      	ands	r3, r2
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a10e:	0112      	lsls	r2, r2, #4
 800a110:	430a      	orrs	r2, r1
 800a112:	4967      	ldr	r1, [pc, #412]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a114:	4313      	orrs	r3, r2
 800a116:	628b      	str	r3, [r1, #40]	; 0x28
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11c:	3b01      	subs	r3, #1
 800a11e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a126:	3b01      	subs	r3, #1
 800a128:	025b      	lsls	r3, r3, #9
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	431a      	orrs	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a132:	3b01      	subs	r3, #1
 800a134:	041b      	lsls	r3, r3, #16
 800a136:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a13a:	431a      	orrs	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a140:	3b01      	subs	r3, #1
 800a142:	061b      	lsls	r3, r3, #24
 800a144:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a148:	4959      	ldr	r1, [pc, #356]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a14e:	4b58      	ldr	r3, [pc, #352]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	4a57      	ldr	r2, [pc, #348]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a154:	f023 0301 	bic.w	r3, r3, #1
 800a158:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a15a:	4b55      	ldr	r3, [pc, #340]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a15c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a15e:	4b56      	ldr	r3, [pc, #344]	; (800a2b8 <HAL_RCC_OscConfig+0x71c>)
 800a160:	4013      	ands	r3, r2
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a166:	00d2      	lsls	r2, r2, #3
 800a168:	4951      	ldr	r1, [pc, #324]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a16e:	4b50      	ldr	r3, [pc, #320]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a172:	f023 020c 	bic.w	r2, r3, #12
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	494d      	ldr	r1, [pc, #308]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a17c:	4313      	orrs	r3, r2
 800a17e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a180:	4b4b      	ldr	r3, [pc, #300]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	f023 0202 	bic.w	r2, r3, #2
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18c:	4948      	ldr	r1, [pc, #288]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a192:	4b47      	ldr	r3, [pc, #284]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a196:	4a46      	ldr	r2, [pc, #280]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a19c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a19e:	4b44      	ldr	r3, [pc, #272]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a2:	4a43      	ldr	r2, [pc, #268]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a1aa:	4b41      	ldr	r3, [pc, #260]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ae:	4a40      	ldr	r2, [pc, #256]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a1b6:	4b3e      	ldr	r3, [pc, #248]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	4a3d      	ldr	r2, [pc, #244]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1bc:	f043 0301 	orr.w	r3, r3, #1
 800a1c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1c2:	4b3b      	ldr	r3, [pc, #236]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a3a      	ldr	r2, [pc, #232]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ce:	f7f8 ff09 	bl	8002fe4 <HAL_GetTick>
 800a1d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1d4:	e008      	b.n	800a1e8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1d6:	f7f8 ff05 	bl	8002fe4 <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d901      	bls.n	800a1e8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e05f      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1e8:	4b31      	ldr	r3, [pc, #196]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0f0      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x63a>
 800a1f4:	e057      	b.n	800a2a6 <HAL_RCC_OscConfig+0x70a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1f6:	4b2e      	ldr	r3, [pc, #184]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a2d      	ldr	r2, [pc, #180]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a1fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a202:	f7f8 feef 	bl	8002fe4 <HAL_GetTick>
 800a206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a208:	e008      	b.n	800a21c <HAL_RCC_OscConfig+0x680>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a20a:	f7f8 feeb 	bl	8002fe4 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b02      	cmp	r3, #2
 800a216:	d901      	bls.n	800a21c <HAL_RCC_OscConfig+0x680>
          {
            return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e045      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a21c:	4b24      	ldr	r3, [pc, #144]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1f0      	bne.n	800a20a <HAL_RCC_OscConfig+0x66e>
 800a228:	e03d      	b.n	800a2a6 <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a22a:	4b21      	ldr	r3, [pc, #132]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a230:	4b1f      	ldr	r3, [pc, #124]	; (800a2b0 <HAL_RCC_OscConfig+0x714>)
 800a232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a234:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d031      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x706>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f003 0203 	and.w	r2, r3, #3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a248:	429a      	cmp	r2, r3
 800a24a:	d12a      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x706>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	091b      	lsrs	r3, r3, #4
 800a250:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a258:	429a      	cmp	r2, r3
 800a25a:	d122      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x706>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a266:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a268:	429a      	cmp	r2, r3
 800a26a:	d11a      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x706>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	0a5b      	lsrs	r3, r3, #9
 800a270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a278:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d111      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x706>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	0c1b      	lsrs	r3, r3, #16
 800a282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d108      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x706>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	0e1b      	lsrs	r3, r3, #24
 800a294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d001      	beq.n	800a2a6 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e000      	b.n	800a2a8 <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3730      	adds	r7, #48	; 0x30
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	58024400 	.word	0x58024400
 800a2b4:	fffffc0c 	.word	0xfffffc0c
 800a2b8:	ffff0007 	.word	0xffff0007

0800a2bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e19c      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2d0:	4b8a      	ldr	r3, [pc, #552]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 030f 	and.w	r3, r3, #15
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d910      	bls.n	800a300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2de:	4b87      	ldr	r3, [pc, #540]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f023 020f 	bic.w	r2, r3, #15
 800a2e6:	4985      	ldr	r1, [pc, #532]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ee:	4b83      	ldr	r3, [pc, #524]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 030f 	and.w	r3, r3, #15
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d001      	beq.n	800a300 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e184      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d010      	beq.n	800a32e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691a      	ldr	r2, [r3, #16]
 800a310:	4b7b      	ldr	r3, [pc, #492]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a318:	429a      	cmp	r2, r3
 800a31a:	d908      	bls.n	800a32e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a31c:	4b78      	ldr	r3, [pc, #480]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	4975      	ldr	r1, [pc, #468]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a32a:	4313      	orrs	r3, r2
 800a32c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0308 	and.w	r3, r3, #8
 800a336:	2b00      	cmp	r3, #0
 800a338:	d010      	beq.n	800a35c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695a      	ldr	r2, [r3, #20]
 800a33e:	4b70      	ldr	r3, [pc, #448]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a346:	429a      	cmp	r2, r3
 800a348:	d908      	bls.n	800a35c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a34a:	4b6d      	ldr	r3, [pc, #436]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	496a      	ldr	r1, [pc, #424]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a358:	4313      	orrs	r3, r2
 800a35a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0310 	and.w	r3, r3, #16
 800a364:	2b00      	cmp	r3, #0
 800a366:	d010      	beq.n	800a38a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	699a      	ldr	r2, [r3, #24]
 800a36c:	4b64      	ldr	r3, [pc, #400]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a374:	429a      	cmp	r2, r3
 800a376:	d908      	bls.n	800a38a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a378:	4b61      	ldr	r3, [pc, #388]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	495e      	ldr	r1, [pc, #376]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a386:	4313      	orrs	r3, r2
 800a388:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0320 	and.w	r3, r3, #32
 800a392:	2b00      	cmp	r3, #0
 800a394:	d010      	beq.n	800a3b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	69da      	ldr	r2, [r3, #28]
 800a39a:	4b59      	ldr	r3, [pc, #356]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d908      	bls.n	800a3b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a3a6:	4b56      	ldr	r3, [pc, #344]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	69db      	ldr	r3, [r3, #28]
 800a3b2:	4953      	ldr	r1, [pc, #332]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0302 	and.w	r3, r3, #2
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d010      	beq.n	800a3e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	4b4d      	ldr	r3, [pc, #308]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	f003 030f 	and.w	r3, r3, #15
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d908      	bls.n	800a3e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3d4:	4b4a      	ldr	r3, [pc, #296]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	f023 020f 	bic.w	r2, r3, #15
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	4947      	ldr	r1, [pc, #284]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d055      	beq.n	800a49e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a3f2:	4b43      	ldr	r3, [pc, #268]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	4940      	ldr	r1, [pc, #256]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a400:	4313      	orrs	r3, r2
 800a402:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d107      	bne.n	800a41c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a40c:	4b3c      	ldr	r3, [pc, #240]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d121      	bne.n	800a45c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e0f6      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	2b03      	cmp	r3, #3
 800a422:	d107      	bne.n	800a434 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a424:	4b36      	ldr	r3, [pc, #216]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d115      	bne.n	800a45c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e0ea      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d107      	bne.n	800a44c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a43c:	4b30      	ldr	r3, [pc, #192]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a444:	2b00      	cmp	r3, #0
 800a446:	d109      	bne.n	800a45c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e0de      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a44c:	4b2c      	ldr	r3, [pc, #176]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 0304 	and.w	r3, r3, #4
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e0d6      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a45c:	4b28      	ldr	r3, [pc, #160]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	f023 0207 	bic.w	r2, r3, #7
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	4925      	ldr	r1, [pc, #148]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a46e:	f7f8 fdb9 	bl	8002fe4 <HAL_GetTick>
 800a472:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a474:	e00a      	b.n	800a48c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a476:	f7f8 fdb5 	bl	8002fe4 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	f241 3288 	movw	r2, #5000	; 0x1388
 800a484:	4293      	cmp	r3, r2
 800a486:	d901      	bls.n	800a48c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	e0be      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a48c:	4b1c      	ldr	r3, [pc, #112]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d1eb      	bne.n	800a476 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d010      	beq.n	800a4cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	4b14      	ldr	r3, [pc, #80]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	f003 030f 	and.w	r3, r3, #15
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d208      	bcs.n	800a4cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4ba:	4b11      	ldr	r3, [pc, #68]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	f023 020f 	bic.w	r2, r3, #15
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	490e      	ldr	r1, [pc, #56]	; (800a500 <HAL_RCC_ClockConfig+0x244>)
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a4cc:	4b0b      	ldr	r3, [pc, #44]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d214      	bcs.n	800a504 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4da:	4b08      	ldr	r3, [pc, #32]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f023 020f 	bic.w	r2, r3, #15
 800a4e2:	4906      	ldr	r1, [pc, #24]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4ea:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <HAL_RCC_ClockConfig+0x240>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d005      	beq.n	800a504 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e086      	b.n	800a60a <HAL_RCC_ClockConfig+0x34e>
 800a4fc:	52002000 	.word	0x52002000
 800a500:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d010      	beq.n	800a532 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	691a      	ldr	r2, [r3, #16]
 800a514:	4b3f      	ldr	r3, [pc, #252]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d208      	bcs.n	800a532 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a520:	4b3c      	ldr	r3, [pc, #240]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	4939      	ldr	r1, [pc, #228]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a52e:	4313      	orrs	r3, r2
 800a530:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0308 	and.w	r3, r3, #8
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d010      	beq.n	800a560 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	695a      	ldr	r2, [r3, #20]
 800a542:	4b34      	ldr	r3, [pc, #208]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d208      	bcs.n	800a560 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a54e:	4b31      	ldr	r3, [pc, #196]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	492e      	ldr	r1, [pc, #184]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0310 	and.w	r3, r3, #16
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d010      	beq.n	800a58e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	699a      	ldr	r2, [r3, #24]
 800a570:	4b28      	ldr	r3, [pc, #160]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a572:	69db      	ldr	r3, [r3, #28]
 800a574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a578:	429a      	cmp	r2, r3
 800a57a:	d208      	bcs.n	800a58e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a57c:	4b25      	ldr	r3, [pc, #148]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a57e:	69db      	ldr	r3, [r3, #28]
 800a580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	4922      	ldr	r1, [pc, #136]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	2b00      	cmp	r3, #0
 800a598:	d010      	beq.n	800a5bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	69da      	ldr	r2, [r3, #28]
 800a59e:	4b1d      	ldr	r3, [pc, #116]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d208      	bcs.n	800a5bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a5aa:	4b1a      	ldr	r3, [pc, #104]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	69db      	ldr	r3, [r3, #28]
 800a5b6:	4917      	ldr	r1, [pc, #92]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a5bc:	f000 f834 	bl	800a628 <HAL_RCC_GetSysClockFreq>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	4b14      	ldr	r3, [pc, #80]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	0a1b      	lsrs	r3, r3, #8
 800a5c8:	f003 030f 	and.w	r3, r3, #15
 800a5cc:	4912      	ldr	r1, [pc, #72]	; (800a618 <HAL_RCC_ClockConfig+0x35c>)
 800a5ce:	5ccb      	ldrb	r3, [r1, r3]
 800a5d0:	f003 031f 	and.w	r3, r3, #31
 800a5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5da:	4b0e      	ldr	r3, [pc, #56]	; (800a614 <HAL_RCC_ClockConfig+0x358>)
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	4a0d      	ldr	r2, [pc, #52]	; (800a618 <HAL_RCC_ClockConfig+0x35c>)
 800a5e4:	5cd3      	ldrb	r3, [r2, r3]
 800a5e6:	f003 031f 	and.w	r3, r3, #31
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f0:	4a0a      	ldr	r2, [pc, #40]	; (800a61c <HAL_RCC_ClockConfig+0x360>)
 800a5f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5f4:	4a0a      	ldr	r2, [pc, #40]	; (800a620 <HAL_RCC_ClockConfig+0x364>)
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a5fa:	4b0a      	ldr	r3, [pc, #40]	; (800a624 <HAL_RCC_ClockConfig+0x368>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7f8 fca6 	bl	8002f50 <HAL_InitTick>
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a608:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	58024400 	.word	0x58024400
 800a618:	08013bbc 	.word	0x08013bbc
 800a61c:	2400000c 	.word	0x2400000c
 800a620:	24000008 	.word	0x24000008
 800a624:	24000010 	.word	0x24000010

0800a628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a628:	b480      	push	{r7}
 800a62a:	b089      	sub	sp, #36	; 0x24
 800a62c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a62e:	4bb3      	ldr	r3, [pc, #716]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a636:	2b18      	cmp	r3, #24
 800a638:	f200 8155 	bhi.w	800a8e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a63c:	a201      	add	r2, pc, #4	; (adr r2, 800a644 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a642:	bf00      	nop
 800a644:	0800a6a9 	.word	0x0800a6a9
 800a648:	0800a8e7 	.word	0x0800a8e7
 800a64c:	0800a8e7 	.word	0x0800a8e7
 800a650:	0800a8e7 	.word	0x0800a8e7
 800a654:	0800a8e7 	.word	0x0800a8e7
 800a658:	0800a8e7 	.word	0x0800a8e7
 800a65c:	0800a8e7 	.word	0x0800a8e7
 800a660:	0800a8e7 	.word	0x0800a8e7
 800a664:	0800a6cf 	.word	0x0800a6cf
 800a668:	0800a8e7 	.word	0x0800a8e7
 800a66c:	0800a8e7 	.word	0x0800a8e7
 800a670:	0800a8e7 	.word	0x0800a8e7
 800a674:	0800a8e7 	.word	0x0800a8e7
 800a678:	0800a8e7 	.word	0x0800a8e7
 800a67c:	0800a8e7 	.word	0x0800a8e7
 800a680:	0800a8e7 	.word	0x0800a8e7
 800a684:	0800a6d5 	.word	0x0800a6d5
 800a688:	0800a8e7 	.word	0x0800a8e7
 800a68c:	0800a8e7 	.word	0x0800a8e7
 800a690:	0800a8e7 	.word	0x0800a8e7
 800a694:	0800a8e7 	.word	0x0800a8e7
 800a698:	0800a8e7 	.word	0x0800a8e7
 800a69c:	0800a8e7 	.word	0x0800a8e7
 800a6a0:	0800a8e7 	.word	0x0800a8e7
 800a6a4:	0800a6db 	.word	0x0800a6db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6a8:	4b94      	ldr	r3, [pc, #592]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0320 	and.w	r3, r3, #32
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d009      	beq.n	800a6c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6b4:	4b91      	ldr	r3, [pc, #580]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	08db      	lsrs	r3, r3, #3
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	4a90      	ldr	r2, [pc, #576]	; (800a900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a6c6:	e111      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a6c8:	4b8d      	ldr	r3, [pc, #564]	; (800a900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6ca:	61bb      	str	r3, [r7, #24]
    break;
 800a6cc:	e10e      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a6ce:	4b8d      	ldr	r3, [pc, #564]	; (800a904 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a6d0:	61bb      	str	r3, [r7, #24]
    break;
 800a6d2:	e10b      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a6d4:	4b8c      	ldr	r3, [pc, #560]	; (800a908 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a6d6:	61bb      	str	r3, [r7, #24]
    break;
 800a6d8:	e108      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6da:	4b88      	ldr	r3, [pc, #544]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a6e4:	4b85      	ldr	r3, [pc, #532]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e8:	091b      	lsrs	r3, r3, #4
 800a6ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a6f0:	4b82      	ldr	r3, [pc, #520]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a6fa:	4b80      	ldr	r3, [pc, #512]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	08db      	lsrs	r3, r3, #3
 800a700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	fb02 f303 	mul.w	r3, r2, r3
 800a70a:	ee07 3a90 	vmov	s15, r3
 800a70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a712:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 80e1 	beq.w	800a8e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b02      	cmp	r3, #2
 800a722:	f000 8083 	beq.w	800a82c <HAL_RCC_GetSysClockFreq+0x204>
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b02      	cmp	r3, #2
 800a72a:	f200 80a1 	bhi.w	800a870 <HAL_RCC_GetSysClockFreq+0x248>
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <HAL_RCC_GetSysClockFreq+0x114>
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d056      	beq.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a73a:	e099      	b.n	800a870 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a73c:	4b6f      	ldr	r3, [pc, #444]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 0320 	and.w	r3, r3, #32
 800a744:	2b00      	cmp	r3, #0
 800a746:	d02d      	beq.n	800a7a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a748:	4b6c      	ldr	r3, [pc, #432]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	08db      	lsrs	r3, r3, #3
 800a74e:	f003 0303 	and.w	r3, r3, #3
 800a752:	4a6b      	ldr	r2, [pc, #428]	; (800a900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a754:	fa22 f303 	lsr.w	r3, r2, r3
 800a758:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	ee07 3a90 	vmov	s15, r3
 800a760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a772:	4b62      	ldr	r3, [pc, #392]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77a:	ee07 3a90 	vmov	s15, r3
 800a77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a782:	ed97 6a02 	vldr	s12, [r7, #8]
 800a786:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a90c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a79e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a7a2:	e087      	b.n	800a8b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	ee07 3a90 	vmov	s15, r3
 800a7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a910 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7b6:	4b51      	ldr	r3, [pc, #324]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a90c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7e6:	e065      	b.n	800a8b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	ee07 3a90 	vmov	s15, r3
 800a7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a914 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7fa:	4b40      	ldr	r3, [pc, #256]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a802:	ee07 3a90 	vmov	s15, r3
 800a806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a80a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a80e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a90c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a81a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a81e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a82a:	e043      	b.n	800a8b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	ee07 3a90 	vmov	s15, r3
 800a832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a836:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a918 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a83e:	4b2f      	ldr	r3, [pc, #188]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a846:	ee07 3a90 	vmov	s15, r3
 800a84a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a84e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a852:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a90c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a85a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a85e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a86e:	e021      	b.n	800a8b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	ee07 3a90 	vmov	s15, r3
 800a876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a87a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a914 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a87e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a882:	4b1e      	ldr	r3, [pc, #120]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a892:	ed97 6a02 	vldr	s12, [r7, #8]
 800a896:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a90c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a89a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a89e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a8b4:	4b11      	ldr	r3, [pc, #68]	; (800a8fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b8:	0a5b      	lsrs	r3, r3, #9
 800a8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8be:	3301      	adds	r3, #1
 800a8c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	ee07 3a90 	vmov	s15, r3
 800a8c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8d8:	ee17 3a90 	vmov	r3, s15
 800a8dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a8de:	e005      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	61bb      	str	r3, [r7, #24]
    break;
 800a8e4:	e002      	b.n	800a8ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a8e6:	4b07      	ldr	r3, [pc, #28]	; (800a904 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a8e8:	61bb      	str	r3, [r7, #24]
    break;
 800a8ea:	bf00      	nop
  }

  return sysclockfreq;
 800a8ec:	69bb      	ldr	r3, [r7, #24]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3724      	adds	r7, #36	; 0x24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	58024400 	.word	0x58024400
 800a900:	03d09000 	.word	0x03d09000
 800a904:	003d0900 	.word	0x003d0900
 800a908:	01518000 	.word	0x01518000
 800a90c:	46000000 	.word	0x46000000
 800a910:	4c742400 	.word	0x4c742400
 800a914:	4a742400 	.word	0x4a742400
 800a918:	4ba8c000 	.word	0x4ba8c000

0800a91c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a922:	f7ff fe81 	bl	800a628 <HAL_RCC_GetSysClockFreq>
 800a926:	4602      	mov	r2, r0
 800a928:	4b10      	ldr	r3, [pc, #64]	; (800a96c <HAL_RCC_GetHCLKFreq+0x50>)
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	0a1b      	lsrs	r3, r3, #8
 800a92e:	f003 030f 	and.w	r3, r3, #15
 800a932:	490f      	ldr	r1, [pc, #60]	; (800a970 <HAL_RCC_GetHCLKFreq+0x54>)
 800a934:	5ccb      	ldrb	r3, [r1, r3]
 800a936:	f003 031f 	and.w	r3, r3, #31
 800a93a:	fa22 f303 	lsr.w	r3, r2, r3
 800a93e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a940:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <HAL_RCC_GetHCLKFreq+0x50>)
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	f003 030f 	and.w	r3, r3, #15
 800a948:	4a09      	ldr	r2, [pc, #36]	; (800a970 <HAL_RCC_GetHCLKFreq+0x54>)
 800a94a:	5cd3      	ldrb	r3, [r2, r3]
 800a94c:	f003 031f 	and.w	r3, r3, #31
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	fa22 f303 	lsr.w	r3, r2, r3
 800a956:	4a07      	ldr	r2, [pc, #28]	; (800a974 <HAL_RCC_GetHCLKFreq+0x58>)
 800a958:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a95a:	4a07      	ldr	r2, [pc, #28]	; (800a978 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a960:	4b04      	ldr	r3, [pc, #16]	; (800a974 <HAL_RCC_GetHCLKFreq+0x58>)
 800a962:	681b      	ldr	r3, [r3, #0]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	58024400 	.word	0x58024400
 800a970:	08013bbc 	.word	0x08013bbc
 800a974:	2400000c 	.word	0x2400000c
 800a978:	24000008 	.word	0x24000008

0800a97c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a984:	2300      	movs	r3, #0
 800a986:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a988:	2300      	movs	r3, #0
 800a98a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d03f      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a99c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9a0:	d02a      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a9a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9a6:	d824      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a9a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9ac:	d018      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a9ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9b2:	d81e      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d003      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a9b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9bc:	d007      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a9be:	e018      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9c0:	4bab      	ldr	r3, [pc, #684]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	4aaa      	ldr	r2, [pc, #680]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a9cc:	e015      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	2102      	movs	r1, #2
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f001 feff 	bl	800c7d8 <RCCEx_PLL2_Config>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a9de:	e00c      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3324      	adds	r3, #36	; 0x24
 800a9e4:	2102      	movs	r1, #2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 ffa8 	bl	800c93c <RCCEx_PLL3_Config>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a9f0:	e003      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f6:	e000      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a9f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d109      	bne.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aa00:	4b9b      	ldr	r3, [pc, #620]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa0c:	4998      	ldr	r1, [pc, #608]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	650b      	str	r3, [r1, #80]	; 0x50
 800aa12:	e001      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa14:	7dfb      	ldrb	r3, [r7, #23]
 800aa16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d03d      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d826      	bhi.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800aa2c:	a201      	add	r2, pc, #4	; (adr r2, 800aa34 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800aa2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa32:	bf00      	nop
 800aa34:	0800aa49 	.word	0x0800aa49
 800aa38:	0800aa57 	.word	0x0800aa57
 800aa3c:	0800aa69 	.word	0x0800aa69
 800aa40:	0800aa81 	.word	0x0800aa81
 800aa44:	0800aa81 	.word	0x0800aa81
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa48:	4b89      	ldr	r3, [pc, #548]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	4a88      	ldr	r2, [pc, #544]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa54:	e015      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	3304      	adds	r3, #4
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f001 febb 	bl	800c7d8 <RCCEx_PLL2_Config>
 800aa62:	4603      	mov	r3, r0
 800aa64:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa66:	e00c      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3324      	adds	r3, #36	; 0x24
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f001 ff64 	bl	800c93c <RCCEx_PLL3_Config>
 800aa74:	4603      	mov	r3, r0
 800aa76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa78:	e003      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa7e:	e000      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800aa80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa82:	7dfb      	ldrb	r3, [r7, #23]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d109      	bne.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa88:	4b79      	ldr	r3, [pc, #484]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa8c:	f023 0207 	bic.w	r2, r3, #7
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa94:	4976      	ldr	r1, [pc, #472]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa96:	4313      	orrs	r3, r2
 800aa98:	650b      	str	r3, [r1, #80]	; 0x50
 800aa9a:	e001      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
 800aa9e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d051      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aab2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aab6:	d036      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800aab8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aabc:	d830      	bhi.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800aabe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aac2:	d032      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800aac4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aac8:	d82a      	bhi.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800aaca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aace:	d02e      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800aad0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aad4:	d824      	bhi.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800aad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aada:	d018      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800aadc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aae0:	d81e      	bhi.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d003      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x172>
 800aae6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aaea:	d007      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800aaec:	e018      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaee:	4b60      	ldr	r3, [pc, #384]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aaf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf2:	4a5f      	ldr	r2, [pc, #380]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aaf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aafa:	e019      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	3304      	adds	r3, #4
 800ab00:	2100      	movs	r1, #0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 fe68 	bl	800c7d8 <RCCEx_PLL2_Config>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ab0c:	e010      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	3324      	adds	r3, #36	; 0x24
 800ab12:	2100      	movs	r1, #0
 800ab14:	4618      	mov	r0, r3
 800ab16:	f001 ff11 	bl	800c93c <RCCEx_PLL3_Config>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab1e:	e007      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	75fb      	strb	r3, [r7, #23]
      break;
 800ab24:	e004      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800ab26:	bf00      	nop
 800ab28:	e002      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800ab2a:	bf00      	nop
 800ab2c:	e000      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800ab2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10a      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ab36:	4b4e      	ldr	r3, [pc, #312]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab3a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab44:	494a      	ldr	r1, [pc, #296]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	658b      	str	r3, [r1, #88]	; 0x58
 800ab4a:	e001      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d051      	beq.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab62:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ab66:	d036      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800ab68:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ab6c:	d830      	bhi.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800ab6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab72:	d032      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800ab74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab78:	d82a      	bhi.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800ab7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab7e:	d02e      	beq.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x262>
 800ab80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab84:	d824      	bhi.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800ab86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab8a:	d018      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x242>
 800ab8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab90:	d81e      	bhi.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d003      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800ab96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab9a:	d007      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ab9c:	e018      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab9e:	4b34      	ldr	r3, [pc, #208]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba2:	4a33      	ldr	r2, [pc, #204]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aba8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800abaa:	e019      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3304      	adds	r3, #4
 800abb0:	2100      	movs	r1, #0
 800abb2:	4618      	mov	r0, r3
 800abb4:	f001 fe10 	bl	800c7d8 <RCCEx_PLL2_Config>
 800abb8:	4603      	mov	r3, r0
 800abba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800abbc:	e010      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	3324      	adds	r3, #36	; 0x24
 800abc2:	2100      	movs	r1, #0
 800abc4:	4618      	mov	r0, r3
 800abc6:	f001 feb9 	bl	800c93c <RCCEx_PLL3_Config>
 800abca:	4603      	mov	r3, r0
 800abcc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800abce:	e007      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	75fb      	strb	r3, [r7, #23]
      break;
 800abd4:	e004      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800abd6:	bf00      	nop
 800abd8:	e002      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800abda:	bf00      	nop
 800abdc:	e000      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800abde:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10a      	bne.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800abe6:	4b22      	ldr	r3, [pc, #136]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800abf4:	491e      	ldr	r1, [pc, #120]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	658b      	str	r3, [r1, #88]	; 0x58
 800abfa:	e001      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abfc:	7dfb      	ldrb	r3, [r7, #23]
 800abfe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d035      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac10:	2b30      	cmp	r3, #48	; 0x30
 800ac12:	d01c      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ac14:	2b30      	cmp	r3, #48	; 0x30
 800ac16:	d817      	bhi.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800ac18:	2b20      	cmp	r3, #32
 800ac1a:	d00c      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	d813      	bhi.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d016      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800ac24:	2b10      	cmp	r3, #16
 800ac26:	d10f      	bne.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac28:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2c:	4a10      	ldr	r2, [pc, #64]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800ac34:	e00e      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3304      	adds	r3, #4
 800ac3a:	2102      	movs	r1, #2
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f001 fdcb 	bl	800c7d8 <RCCEx_PLL2_Config>
 800ac42:	4603      	mov	r3, r0
 800ac44:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800ac46:	e005      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac4c:	e002      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800ac4e:	bf00      	nop
 800ac50:	e000      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800ac52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10c      	bne.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ac5a:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac66:	4902      	ldr	r1, [pc, #8]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ac6c:	e004      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800ac6e:	bf00      	nop
 800ac70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d047      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac8c:	d030      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800ac8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac92:	d82a      	bhi.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ac94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac98:	d02c      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800ac9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac9e:	d824      	bhi.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800aca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aca4:	d018      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acaa:	d81e      	bhi.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800acac:	2b00      	cmp	r3, #0
 800acae:	d003      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800acb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb4:	d007      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800acb6:	e018      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb8:	4bac      	ldr	r3, [pc, #688]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	4aab      	ldr	r2, [pc, #684]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800acbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800acc4:	e017      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	3304      	adds	r3, #4
 800acca:	2100      	movs	r1, #0
 800accc:	4618      	mov	r0, r3
 800acce:	f001 fd83 	bl	800c7d8 <RCCEx_PLL2_Config>
 800acd2:	4603      	mov	r3, r0
 800acd4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800acd6:	e00e      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3324      	adds	r3, #36	; 0x24
 800acdc:	2100      	movs	r1, #0
 800acde:	4618      	mov	r0, r3
 800ace0:	f001 fe2c 	bl	800c93c <RCCEx_PLL3_Config>
 800ace4:	4603      	mov	r3, r0
 800ace6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ace8:	e005      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	75fb      	strb	r3, [r7, #23]
      break;
 800acee:	e002      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800acf0:	bf00      	nop
 800acf2:	e000      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800acf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d109      	bne.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800acfc:	4b9b      	ldr	r3, [pc, #620]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800acfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad00:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad08:	4998      	ldr	r1, [pc, #608]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	650b      	str	r3, [r1, #80]	; 0x50
 800ad0e:	e001      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad10:	7dfb      	ldrb	r3, [r7, #23]
 800ad12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d049      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad28:	d02e      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800ad2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad2e:	d828      	bhi.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800ad30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad34:	d02a      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ad36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad3a:	d822      	bhi.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800ad3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad40:	d026      	beq.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800ad42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad46:	d81c      	bhi.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800ad48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad4c:	d010      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800ad4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad52:	d816      	bhi.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d01d      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800ad58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad5c:	d111      	bne.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3304      	adds	r3, #4
 800ad62:	2101      	movs	r1, #1
 800ad64:	4618      	mov	r0, r3
 800ad66:	f001 fd37 	bl	800c7d8 <RCCEx_PLL2_Config>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ad6e:	e012      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	3324      	adds	r3, #36	; 0x24
 800ad74:	2101      	movs	r1, #1
 800ad76:	4618      	mov	r0, r3
 800ad78:	f001 fde0 	bl	800c93c <RCCEx_PLL3_Config>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ad80:	e009      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	75fb      	strb	r3, [r7, #23]
      break;
 800ad86:	e006      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ad88:	bf00      	nop
 800ad8a:	e004      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ad8c:	bf00      	nop
 800ad8e:	e002      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ad90:	bf00      	nop
 800ad92:	e000      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ad94:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d109      	bne.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad9c:	4b73      	ldr	r3, [pc, #460]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ad9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ada8:	4970      	ldr	r1, [pc, #448]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800adaa:	4313      	orrs	r3, r2
 800adac:	650b      	str	r3, [r1, #80]	; 0x50
 800adae:	e001      	b.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d04b      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800adc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adca:	d02e      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800adcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800add0:	d828      	bhi.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800add2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800add6:	d02a      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800add8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800addc:	d822      	bhi.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800adde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ade2:	d026      	beq.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800ade4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ade8:	d81c      	bhi.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800adea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adee:	d010      	beq.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800adf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf4:	d816      	bhi.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01d      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800adfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adfe:	d111      	bne.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3304      	adds	r3, #4
 800ae04:	2101      	movs	r1, #1
 800ae06:	4618      	mov	r0, r3
 800ae08:	f001 fce6 	bl	800c7d8 <RCCEx_PLL2_Config>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ae10:	e012      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3324      	adds	r3, #36	; 0x24
 800ae16:	2101      	movs	r1, #1
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f001 fd8f 	bl	800c93c <RCCEx_PLL3_Config>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ae22:	e009      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	75fb      	strb	r3, [r7, #23]
      break;
 800ae28:	e006      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ae2a:	bf00      	nop
 800ae2c:	e004      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ae2e:	bf00      	nop
 800ae30:	e002      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ae32:	bf00      	nop
 800ae34:	e000      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ae36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae3e:	4b4b      	ldr	r3, [pc, #300]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ae40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae4c:	4947      	ldr	r1, [pc, #284]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	658b      	str	r3, [r1, #88]	; 0x58
 800ae52:	e001      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
 800ae56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d02f      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae6c:	d00e      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800ae6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae72:	d814      	bhi.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d015      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800ae78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae7c:	d10f      	bne.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae7e:	4b3b      	ldr	r3, [pc, #236]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae82:	4a3a      	ldr	r2, [pc, #232]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ae84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ae8a:	e00c      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	2101      	movs	r1, #1
 800ae92:	4618      	mov	r0, r3
 800ae94:	f001 fca0 	bl	800c7d8 <RCCEx_PLL2_Config>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ae9c:	e003      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	75fb      	strb	r3, [r7, #23]
      break;
 800aea2:	e000      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800aea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aea6:	7dfb      	ldrb	r3, [r7, #23]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d109      	bne.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aeac:	4b2f      	ldr	r3, [pc, #188]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aeae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aeb8:	492c      	ldr	r1, [pc, #176]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	650b      	str	r3, [r1, #80]	; 0x50
 800aebe:	e001      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec0:	7dfb      	ldrb	r3, [r7, #23]
 800aec2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d032      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed4:	2b03      	cmp	r3, #3
 800aed6:	d81b      	bhi.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800aed8:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800aeda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aede:	bf00      	nop
 800aee0:	0800af17 	.word	0x0800af17
 800aee4:	0800aef1 	.word	0x0800aef1
 800aee8:	0800aeff 	.word	0x0800aeff
 800aeec:	0800af17 	.word	0x0800af17
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aef0:	4b1e      	ldr	r3, [pc, #120]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef4:	4a1d      	ldr	r2, [pc, #116]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aefa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800aefc:	e00c      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	3304      	adds	r3, #4
 800af02:	2102      	movs	r1, #2
 800af04:	4618      	mov	r0, r3
 800af06:	f001 fc67 	bl	800c7d8 <RCCEx_PLL2_Config>
 800af0a:	4603      	mov	r3, r0
 800af0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800af0e:	e003      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	75fb      	strb	r3, [r7, #23]
      break;
 800af14:	e000      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800af16:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af18:	7dfb      	ldrb	r3, [r7, #23]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d109      	bne.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af1e:	4b13      	ldr	r3, [pc, #76]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800af20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af22:	f023 0203 	bic.w	r2, r3, #3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af2a:	4910      	ldr	r1, [pc, #64]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800af2c:	4313      	orrs	r3, r2
 800af2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800af30:	e001      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af32:	7dfb      	ldrb	r3, [r7, #23]
 800af34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 808a 	beq.w	800b058 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af44:	4b0a      	ldr	r3, [pc, #40]	; (800af70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a09      	ldr	r2, [pc, #36]	; (800af70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800af4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af50:	f7f8 f848 	bl	8002fe4 <HAL_GetTick>
 800af54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af56:	e00d      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af58:	f7f8 f844 	bl	8002fe4 <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	2b64      	cmp	r3, #100	; 0x64
 800af64:	d906      	bls.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	75fb      	strb	r3, [r7, #23]
        break;
 800af6a:	e009      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800af6c:	58024400 	.word	0x58024400
 800af70:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af74:	4bb9      	ldr	r3, [pc, #740]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0eb      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d166      	bne.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800af86:	4bb6      	ldr	r3, [pc, #728]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af90:	4053      	eors	r3, r2
 800af92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af96:	2b00      	cmp	r3, #0
 800af98:	d013      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af9a:	4bb1      	ldr	r3, [pc, #708]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afa2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800afa4:	4bae      	ldr	r3, [pc, #696]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800afa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa8:	4aad      	ldr	r2, [pc, #692]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800afaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800afb0:	4bab      	ldr	r3, [pc, #684]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800afb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb4:	4aaa      	ldr	r2, [pc, #680]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800afb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800afbc:	4aa8      	ldr	r2, [pc, #672]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800afc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afcc:	d115      	bne.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afce:	f7f8 f809 	bl	8002fe4 <HAL_GetTick>
 800afd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afd4:	e00b      	b.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afd6:	f7f8 f805 	bl	8002fe4 <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d902      	bls.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800afe8:	2303      	movs	r3, #3
 800afea:	75fb      	strb	r3, [r7, #23]
            break;
 800afec:	e005      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afee:	4b9c      	ldr	r3, [pc, #624]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800aff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0ed      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d126      	bne.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b00a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b00e:	d10d      	bne.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800b010:	4b93      	ldr	r3, [pc, #588]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b01e:	0919      	lsrs	r1, r3, #4
 800b020:	4b90      	ldr	r3, [pc, #576]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800b022:	400b      	ands	r3, r1
 800b024:	498e      	ldr	r1, [pc, #568]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b026:	4313      	orrs	r3, r2
 800b028:	610b      	str	r3, [r1, #16]
 800b02a:	e005      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800b02c:	4b8c      	ldr	r3, [pc, #560]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	4a8b      	ldr	r2, [pc, #556]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b032:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b036:	6113      	str	r3, [r2, #16]
 800b038:	4b89      	ldr	r3, [pc, #548]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b03a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b046:	4986      	ldr	r1, [pc, #536]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b048:	4313      	orrs	r3, r2
 800b04a:	670b      	str	r3, [r1, #112]	; 0x70
 800b04c:	e004      	b.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b04e:	7dfb      	ldrb	r3, [r7, #23]
 800b050:	75bb      	strb	r3, [r7, #22]
 800b052:	e001      	b.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b054:	7dfb      	ldrb	r3, [r7, #23]
 800b056:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d07e      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b068:	2b28      	cmp	r3, #40	; 0x28
 800b06a:	d867      	bhi.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800b06c:	a201      	add	r2, pc, #4	; (adr r2, 800b074 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800b06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b072:	bf00      	nop
 800b074:	0800b143 	.word	0x0800b143
 800b078:	0800b13d 	.word	0x0800b13d
 800b07c:	0800b13d 	.word	0x0800b13d
 800b080:	0800b13d 	.word	0x0800b13d
 800b084:	0800b13d 	.word	0x0800b13d
 800b088:	0800b13d 	.word	0x0800b13d
 800b08c:	0800b13d 	.word	0x0800b13d
 800b090:	0800b13d 	.word	0x0800b13d
 800b094:	0800b119 	.word	0x0800b119
 800b098:	0800b13d 	.word	0x0800b13d
 800b09c:	0800b13d 	.word	0x0800b13d
 800b0a0:	0800b13d 	.word	0x0800b13d
 800b0a4:	0800b13d 	.word	0x0800b13d
 800b0a8:	0800b13d 	.word	0x0800b13d
 800b0ac:	0800b13d 	.word	0x0800b13d
 800b0b0:	0800b13d 	.word	0x0800b13d
 800b0b4:	0800b12b 	.word	0x0800b12b
 800b0b8:	0800b13d 	.word	0x0800b13d
 800b0bc:	0800b13d 	.word	0x0800b13d
 800b0c0:	0800b13d 	.word	0x0800b13d
 800b0c4:	0800b13d 	.word	0x0800b13d
 800b0c8:	0800b13d 	.word	0x0800b13d
 800b0cc:	0800b13d 	.word	0x0800b13d
 800b0d0:	0800b13d 	.word	0x0800b13d
 800b0d4:	0800b143 	.word	0x0800b143
 800b0d8:	0800b13d 	.word	0x0800b13d
 800b0dc:	0800b13d 	.word	0x0800b13d
 800b0e0:	0800b13d 	.word	0x0800b13d
 800b0e4:	0800b13d 	.word	0x0800b13d
 800b0e8:	0800b13d 	.word	0x0800b13d
 800b0ec:	0800b13d 	.word	0x0800b13d
 800b0f0:	0800b13d 	.word	0x0800b13d
 800b0f4:	0800b143 	.word	0x0800b143
 800b0f8:	0800b13d 	.word	0x0800b13d
 800b0fc:	0800b13d 	.word	0x0800b13d
 800b100:	0800b13d 	.word	0x0800b13d
 800b104:	0800b13d 	.word	0x0800b13d
 800b108:	0800b13d 	.word	0x0800b13d
 800b10c:	0800b13d 	.word	0x0800b13d
 800b110:	0800b13d 	.word	0x0800b13d
 800b114:	0800b143 	.word	0x0800b143
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3304      	adds	r3, #4
 800b11c:	2101      	movs	r1, #1
 800b11e:	4618      	mov	r0, r3
 800b120:	f001 fb5a 	bl	800c7d8 <RCCEx_PLL2_Config>
 800b124:	4603      	mov	r3, r0
 800b126:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b128:	e00c      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	3324      	adds	r3, #36	; 0x24
 800b12e:	2101      	movs	r1, #1
 800b130:	4618      	mov	r0, r3
 800b132:	f001 fc03 	bl	800c93c <RCCEx_PLL3_Config>
 800b136:	4603      	mov	r3, r0
 800b138:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b13a:	e003      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	75fb      	strb	r3, [r7, #23]
      break;
 800b140:	e000      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800b142:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d109      	bne.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b14a:	4b45      	ldr	r3, [pc, #276]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b14e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b156:	4942      	ldr	r1, [pc, #264]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	654b      	str	r3, [r1, #84]	; 0x54
 800b15c:	e001      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b15e:	7dfb      	ldrb	r3, [r7, #23]
 800b160:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 0302 	and.w	r3, r3, #2
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d037      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b172:	2b05      	cmp	r3, #5
 800b174:	d820      	bhi.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800b176:	a201      	add	r2, pc, #4	; (adr r2, 800b17c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800b178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17c:	0800b1bf 	.word	0x0800b1bf
 800b180:	0800b195 	.word	0x0800b195
 800b184:	0800b1a7 	.word	0x0800b1a7
 800b188:	0800b1bf 	.word	0x0800b1bf
 800b18c:	0800b1bf 	.word	0x0800b1bf
 800b190:	0800b1bf 	.word	0x0800b1bf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	3304      	adds	r3, #4
 800b198:	2101      	movs	r1, #1
 800b19a:	4618      	mov	r0, r3
 800b19c:	f001 fb1c 	bl	800c7d8 <RCCEx_PLL2_Config>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b1a4:	e00c      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	3324      	adds	r3, #36	; 0x24
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f001 fbc5 	bl	800c93c <RCCEx_PLL3_Config>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b1b6:	e003      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b1bc:	e000      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800b1be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1c0:	7dfb      	ldrb	r3, [r7, #23]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d109      	bne.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b1c6:	4b26      	ldr	r3, [pc, #152]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ca:	f023 0207 	bic.w	r2, r3, #7
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d2:	4923      	ldr	r1, [pc, #140]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	654b      	str	r3, [r1, #84]	; 0x54
 800b1d8:	e001      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f003 0304 	and.w	r3, r3, #4
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d040      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1f0:	2b05      	cmp	r3, #5
 800b1f2:	d821      	bhi.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800b1f4:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800b1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fa:	bf00      	nop
 800b1fc:	0800b23f 	.word	0x0800b23f
 800b200:	0800b215 	.word	0x0800b215
 800b204:	0800b227 	.word	0x0800b227
 800b208:	0800b23f 	.word	0x0800b23f
 800b20c:	0800b23f 	.word	0x0800b23f
 800b210:	0800b23f 	.word	0x0800b23f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3304      	adds	r3, #4
 800b218:	2101      	movs	r1, #1
 800b21a:	4618      	mov	r0, r3
 800b21c:	f001 fadc 	bl	800c7d8 <RCCEx_PLL2_Config>
 800b220:	4603      	mov	r3, r0
 800b222:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b224:	e00c      	b.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3324      	adds	r3, #36	; 0x24
 800b22a:	2101      	movs	r1, #1
 800b22c:	4618      	mov	r0, r3
 800b22e:	f001 fb85 	bl	800c93c <RCCEx_PLL3_Config>
 800b232:	4603      	mov	r3, r0
 800b234:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b236:	e003      	b.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	75fb      	strb	r3, [r7, #23]
      break;
 800b23c:	e000      	b.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800b23e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b240:	7dfb      	ldrb	r3, [r7, #23]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d110      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b246:	4b06      	ldr	r3, [pc, #24]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b24a:	f023 0207 	bic.w	r2, r3, #7
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b254:	4902      	ldr	r1, [pc, #8]	; (800b260 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b256:	4313      	orrs	r3, r2
 800b258:	658b      	str	r3, [r1, #88]	; 0x58
 800b25a:	e007      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b25c:	58024800 	.word	0x58024800
 800b260:	58024400 	.word	0x58024400
 800b264:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 0320 	and.w	r3, r3, #32
 800b274:	2b00      	cmp	r3, #0
 800b276:	d04b      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b27e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b282:	d02e      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800b284:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b288:	d828      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b28a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28e:	d02a      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800b290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b294:	d822      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b296:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b29a:	d026      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b29c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2a0:	d81c      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b2a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2a6:	d010      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800b2a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ac:	d816      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01d      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b2b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2b6:	d111      	bne.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	2100      	movs	r1, #0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f001 fa8a 	bl	800c7d8 <RCCEx_PLL2_Config>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b2c8:	e012      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3324      	adds	r3, #36	; 0x24
 800b2ce:	2102      	movs	r1, #2
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f001 fb33 	bl	800c93c <RCCEx_PLL3_Config>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b2da:	e009      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e0:	e006      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b2e2:	bf00      	nop
 800b2e4:	e004      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b2e6:	bf00      	nop
 800b2e8:	e002      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b2ea:	bf00      	nop
 800b2ec:	e000      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b2ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2f0:	7dfb      	ldrb	r3, [r7, #23]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10a      	bne.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2f6:	4bb2      	ldr	r3, [pc, #712]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b304:	49ae      	ldr	r1, [pc, #696]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b306:	4313      	orrs	r3, r2
 800b308:	654b      	str	r3, [r1, #84]	; 0x54
 800b30a:	e001      	b.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30c:	7dfb      	ldrb	r3, [r7, #23]
 800b30e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d04b      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b322:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b326:	d02e      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800b328:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b32c:	d828      	bhi.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b32e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b332:	d02a      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800b334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b338:	d822      	bhi.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b33a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b33e:	d026      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b344:	d81c      	bhi.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b34a:	d010      	beq.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800b34c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b350:	d816      	bhi.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d01d      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b35a:	d111      	bne.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3304      	adds	r3, #4
 800b360:	2100      	movs	r1, #0
 800b362:	4618      	mov	r0, r3
 800b364:	f001 fa38 	bl	800c7d8 <RCCEx_PLL2_Config>
 800b368:	4603      	mov	r3, r0
 800b36a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b36c:	e012      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	3324      	adds	r3, #36	; 0x24
 800b372:	2102      	movs	r1, #2
 800b374:	4618      	mov	r0, r3
 800b376:	f001 fae1 	bl	800c93c <RCCEx_PLL3_Config>
 800b37a:	4603      	mov	r3, r0
 800b37c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b37e:	e009      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	75fb      	strb	r3, [r7, #23]
      break;
 800b384:	e006      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b386:	bf00      	nop
 800b388:	e004      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b38a:	bf00      	nop
 800b38c:	e002      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b38e:	bf00      	nop
 800b390:	e000      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b392:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b394:	7dfb      	ldrb	r3, [r7, #23]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10a      	bne.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b39a:	4b89      	ldr	r3, [pc, #548]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b39c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3a8:	4985      	ldr	r1, [pc, #532]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	658b      	str	r3, [r1, #88]	; 0x58
 800b3ae:	e001      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b0:	7dfb      	ldrb	r3, [r7, #23]
 800b3b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d04b      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b3ca:	d02e      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800b3cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b3d0:	d828      	bhi.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b3d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3d6:	d02a      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800b3d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3dc:	d822      	bhi.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b3de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b3e2:	d026      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800b3e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b3e8:	d81c      	bhi.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b3ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3ee:	d010      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800b3f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3f4:	d816      	bhi.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d01d      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800b3fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3fe:	d111      	bne.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	3304      	adds	r3, #4
 800b404:	2100      	movs	r1, #0
 800b406:	4618      	mov	r0, r3
 800b408:	f001 f9e6 	bl	800c7d8 <RCCEx_PLL2_Config>
 800b40c:	4603      	mov	r3, r0
 800b40e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b410:	e012      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3324      	adds	r3, #36	; 0x24
 800b416:	2102      	movs	r1, #2
 800b418:	4618      	mov	r0, r3
 800b41a:	f001 fa8f 	bl	800c93c <RCCEx_PLL3_Config>
 800b41e:	4603      	mov	r3, r0
 800b420:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b422:	e009      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	75fb      	strb	r3, [r7, #23]
      break;
 800b428:	e006      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b42a:	bf00      	nop
 800b42c:	e004      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b42e:	bf00      	nop
 800b430:	e002      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b432:	bf00      	nop
 800b434:	e000      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b436:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b438:	7dfb      	ldrb	r3, [r7, #23]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10a      	bne.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b43e:	4b60      	ldr	r3, [pc, #384]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b442:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b44c:	495c      	ldr	r1, [pc, #368]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b44e:	4313      	orrs	r3, r2
 800b450:	658b      	str	r3, [r1, #88]	; 0x58
 800b452:	e001      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 0308 	and.w	r3, r3, #8
 800b460:	2b00      	cmp	r3, #0
 800b462:	d018      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46c:	d10a      	bne.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3324      	adds	r3, #36	; 0x24
 800b472:	2102      	movs	r1, #2
 800b474:	4618      	mov	r0, r3
 800b476:	f001 fa61 	bl	800c93c <RCCEx_PLL3_Config>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b484:	4b4e      	ldr	r3, [pc, #312]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b488:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b490:	494b      	ldr	r1, [pc, #300]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b492:	4313      	orrs	r3, r2
 800b494:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0310 	and.w	r3, r3, #16
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d01a      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ac:	d10a      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3324      	adds	r3, #36	; 0x24
 800b4b2:	2102      	movs	r1, #2
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f001 fa41 	bl	800c93c <RCCEx_PLL3_Config>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b4c4:	4b3e      	ldr	r3, [pc, #248]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b4c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4d2:	493b      	ldr	r1, [pc, #236]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d034      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ee:	d01d      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b4f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4f4:	d817      	bhi.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d003      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b4fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4fe:	d009      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b500:	e011      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3304      	adds	r3, #4
 800b506:	2100      	movs	r1, #0
 800b508:	4618      	mov	r0, r3
 800b50a:	f001 f965 	bl	800c7d8 <RCCEx_PLL2_Config>
 800b50e:	4603      	mov	r3, r0
 800b510:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b512:	e00c      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3324      	adds	r3, #36	; 0x24
 800b518:	2102      	movs	r1, #2
 800b51a:	4618      	mov	r0, r3
 800b51c:	f001 fa0e 	bl	800c93c <RCCEx_PLL3_Config>
 800b520:	4603      	mov	r3, r0
 800b522:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b524:	e003      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	75fb      	strb	r3, [r7, #23]
      break;
 800b52a:	e000      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800b52c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b534:	4b22      	ldr	r3, [pc, #136]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b542:	491f      	ldr	r1, [pc, #124]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b544:	4313      	orrs	r3, r2
 800b546:	658b      	str	r3, [r1, #88]	; 0x58
 800b548:	e001      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
 800b54c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b556:	2b00      	cmp	r3, #0
 800b558:	d036      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b560:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b564:	d01c      	beq.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b566:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b56a:	d816      	bhi.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b56c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b570:	d003      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b576:	d007      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800b578:	e00f      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b57a:	4b11      	ldr	r3, [pc, #68]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57e:	4a10      	ldr	r2, [pc, #64]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b586:	e00c      	b.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	3324      	adds	r3, #36	; 0x24
 800b58c:	2101      	movs	r1, #1
 800b58e:	4618      	mov	r0, r3
 800b590:	f001 f9d4 	bl	800c93c <RCCEx_PLL3_Config>
 800b594:	4603      	mov	r3, r0
 800b596:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b598:	e003      	b.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	75fb      	strb	r3, [r7, #23]
      break;
 800b59e:	e000      	b.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800b5a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10d      	bne.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b5a8:	4b05      	ldr	r3, [pc, #20]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b5aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5b6:	4902      	ldr	r1, [pc, #8]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	654b      	str	r3, [r1, #84]	; 0x54
 800b5bc:	e004      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800b5be:	bf00      	nop
 800b5c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
 800b5c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d029      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b5dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5e0:	d007      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b5e2:	e00f      	b.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5e4:	4b61      	ldr	r3, [pc, #388]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	4a60      	ldr	r2, [pc, #384]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b5ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b5f0:	e00b      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	2102      	movs	r1, #2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f001 f8ed 	bl	800c7d8 <RCCEx_PLL2_Config>
 800b5fe:	4603      	mov	r3, r0
 800b600:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b602:	e002      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	75fb      	strb	r3, [r7, #23]
      break;
 800b608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d109      	bne.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b610:	4b56      	ldr	r3, [pc, #344]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b614:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b61c:	4953      	ldr	r1, [pc, #332]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b61e:	4313      	orrs	r3, r2
 800b620:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b622:	e001      	b.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b624:	7dfb      	ldrb	r3, [r7, #23]
 800b626:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00a      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3324      	adds	r3, #36	; 0x24
 800b638:	2102      	movs	r1, #2
 800b63a:	4618      	mov	r0, r3
 800b63c:	f001 f97e 	bl	800c93c <RCCEx_PLL3_Config>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b652:	2b00      	cmp	r3, #0
 800b654:	d030      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b65a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b65e:	d017      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b664:	d811      	bhi.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800b666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b66a:	d013      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800b66c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b670:	d80b      	bhi.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800b672:	2b00      	cmp	r3, #0
 800b674:	d010      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800b676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b67a:	d106      	bne.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b67c:	4b3b      	ldr	r3, [pc, #236]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b680:	4a3a      	ldr	r2, [pc, #232]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b686:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b688:	e007      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	75fb      	strb	r3, [r7, #23]
      break;
 800b68e:	e004      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800b690:	bf00      	nop
 800b692:	e002      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800b694:	bf00      	nop
 800b696:	e000      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800b698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d109      	bne.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b6a0:	4b32      	ldr	r3, [pc, #200]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b6a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6ac:	492f      	ldr	r1, [pc, #188]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	654b      	str	r3, [r1, #84]	; 0x54
 800b6b2:	e001      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
 800b6b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d008      	beq.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b6c4:	4b29      	ldr	r3, [pc, #164]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b6c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6d0:	4926      	ldr	r1, [pc, #152]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d008      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b6e2:	4b22      	ldr	r3, [pc, #136]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b6e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6ee:	491f      	ldr	r1, [pc, #124]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00d      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b700:	4b1a      	ldr	r3, [pc, #104]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	4a19      	ldr	r2, [pc, #100]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b706:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b70a:	6113      	str	r3, [r2, #16]
 800b70c:	4b17      	ldr	r3, [pc, #92]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b70e:	691a      	ldr	r2, [r3, #16]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b716:	4915      	ldr	r1, [pc, #84]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	da08      	bge.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b724:	4b11      	ldr	r3, [pc, #68]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b728:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b730:	490e      	ldr	r1, [pc, #56]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b732:	4313      	orrs	r3, r2
 800b734:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d009      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b742:	4b0a      	ldr	r3, [pc, #40]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b746:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b750:	4906      	ldr	r1, [pc, #24]	; (800b76c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b752:	4313      	orrs	r3, r2
 800b754:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b756:	7dbb      	ldrb	r3, [r7, #22]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	e000      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
}
 800b762:	4618      	mov	r0, r3
 800b764:	3718      	adds	r7, #24
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	58024400 	.word	0x58024400

0800b770 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b090      	sub	sp, #64	; 0x40
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b77e:	f040 8089 	bne.w	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b782:	4b95      	ldr	r3, [pc, #596]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b786:	f003 0307 	and.w	r3, r3, #7
 800b78a:	633b      	str	r3, [r7, #48]	; 0x30
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	2b04      	cmp	r3, #4
 800b790:	d87d      	bhi.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800b792:	a201      	add	r2, pc, #4	; (adr r2, 800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800b794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b798:	0800b7ad 	.word	0x0800b7ad
 800b79c:	0800b7d1 	.word	0x0800b7d1
 800b7a0:	0800b7f5 	.word	0x0800b7f5
 800b7a4:	0800b889 	.word	0x0800b889
 800b7a8:	0800b819 	.word	0x0800b819

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7ac:	4b8a      	ldr	r3, [pc, #552]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7b8:	d107      	bne.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 feb8 	bl	800c534 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b7c8:	e3ed      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ce:	e3ea      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7d0:	4b81      	ldr	r3, [pc, #516]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7dc:	d107      	bne.n	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7de:	f107 0318 	add.w	r3, r7, #24
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fbfe 	bl	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b7ec:	e3db      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7f2:	e3d8      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7f4:	4b78      	ldr	r3, [pc, #480]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b800:	d107      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b802:	f107 030c 	add.w	r3, r7, #12
 800b806:	4618      	mov	r0, r3
 800b808:	f000 fd40 	bl	800c28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b810:	e3c9      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b816:	e3c6      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b818:	4b6f      	ldr	r3, [pc, #444]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b81c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b820:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b822:	4b6d      	ldr	r3, [pc, #436]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 0304 	and.w	r3, r3, #4
 800b82a:	2b04      	cmp	r3, #4
 800b82c:	d10c      	bne.n	800b848 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800b82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b830:	2b00      	cmp	r3, #0
 800b832:	d109      	bne.n	800b848 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b834:	4b68      	ldr	r3, [pc, #416]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	08db      	lsrs	r3, r3, #3
 800b83a:	f003 0303 	and.w	r3, r3, #3
 800b83e:	4a67      	ldr	r2, [pc, #412]	; (800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800b840:	fa22 f303 	lsr.w	r3, r2, r3
 800b844:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b846:	e01e      	b.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b848:	4b63      	ldr	r3, [pc, #396]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b854:	d106      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800b856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b85c:	d102      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b85e:	4b60      	ldr	r3, [pc, #384]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b860:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b862:	e010      	b.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b864:	4b5c      	ldr	r3, [pc, #368]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b86c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b870:	d106      	bne.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b878:	d102      	bne.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b87a:	4b5a      	ldr	r3, [pc, #360]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b87c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b87e:	e002      	b.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b884:	e38f      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b886:	e38e      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b888:	4b57      	ldr	r3, [pc, #348]	; (800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b88a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b88c:	e38b      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b892:	e388      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b89a:	f040 80a7 	bne.w	800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b89e:	4b4e      	ldr	r3, [pc, #312]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b8a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b8ae:	d054      	beq.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b8b6:	f200 808b 	bhi.w	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b8c0:	f000 8083 	beq.w	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b8ca:	f200 8081 	bhi.w	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8d4:	d02f      	beq.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8dc:	d878      	bhi.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d004      	beq.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8ea:	d012      	beq.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800b8ec:	e070      	b.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8ee:	4b3a      	ldr	r3, [pc, #232]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8fa:	d107      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b900:	4618      	mov	r0, r3
 800b902:	f000 fe17 	bl	800c534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b908:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b90a:	e34c      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b910:	e349      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b912:	4b31      	ldr	r3, [pc, #196]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b91a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b91e:	d107      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b920:	f107 0318 	add.w	r3, r7, #24
 800b924:	4618      	mov	r0, r3
 800b926:	f000 fb5d 	bl	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b92e:	e33a      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b934:	e337      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b936:	4b28      	ldr	r3, [pc, #160]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b93e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b942:	d107      	bne.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b944:	f107 030c 	add.w	r3, r7, #12
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fc9f 	bl	800c28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b952:	e328      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b954:	2300      	movs	r3, #0
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b958:	e325      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b95a:	4b1f      	ldr	r3, [pc, #124]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b962:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b964:	4b1c      	ldr	r3, [pc, #112]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 0304 	and.w	r3, r3, #4
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	d10c      	bne.n	800b98a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800b970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b972:	2b00      	cmp	r3, #0
 800b974:	d109      	bne.n	800b98a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b976:	4b18      	ldr	r3, [pc, #96]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	08db      	lsrs	r3, r3, #3
 800b97c:	f003 0303 	and.w	r3, r3, #3
 800b980:	4a16      	ldr	r2, [pc, #88]	; (800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800b982:	fa22 f303 	lsr.w	r3, r2, r3
 800b986:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b988:	e01e      	b.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b98a:	4b13      	ldr	r3, [pc, #76]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b996:	d106      	bne.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b99e:	d102      	bne.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b9a0:	4b0f      	ldr	r3, [pc, #60]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9a4:	e010      	b.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9a6:	4b0c      	ldr	r3, [pc, #48]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9b2:	d106      	bne.n	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ba:	d102      	bne.n	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b9bc:	4b09      	ldr	r3, [pc, #36]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b9be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c0:	e002      	b.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b9c6:	e2ee      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b9c8:	e2ed      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b9ca:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9ce:	e2ea      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9d4:	e2e7      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b9d6:	bf00      	nop
 800b9d8:	58024400 	.word	0x58024400
 800b9dc:	03d09000 	.word	0x03d09000
 800b9e0:	003d0900 	.word	0x003d0900
 800b9e4:	01518000 	.word	0x01518000
 800b9e8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9f2:	f040 809c 	bne.w	800bb2e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b9f6:	4b9e      	ldr	r3, [pc, #632]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b9fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba06:	d054      	beq.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ba08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba0e:	f200 808b 	bhi.w	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ba12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba18:	f000 8083 	beq.w	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba22:	f200 8081 	bhi.w	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ba26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba2c:	d02f      	beq.n	800ba8e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba34:	d878      	bhi.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d004      	beq.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba42:	d012      	beq.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ba44:	e070      	b.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba46:	4b8a      	ldr	r3, [pc, #552]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba52:	d107      	bne.n	800ba64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f000 fd6b 	bl	800c534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba62:	e2a0      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ba64:	2300      	movs	r3, #0
 800ba66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba68:	e29d      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba6a:	4b81      	ldr	r3, [pc, #516]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba76:	d107      	bne.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba78:	f107 0318 	add.w	r3, r7, #24
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 fab1 	bl	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800ba86:	e28e      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba8c:	e28b      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba8e:	4b78      	ldr	r3, [pc, #480]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba9a:	d107      	bne.n	800baac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba9c:	f107 030c 	add.w	r3, r7, #12
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 fbf3 	bl	800c28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800baaa:	e27c      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800baac:	2300      	movs	r3, #0
 800baae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bab0:	e279      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bab2:	4b6f      	ldr	r3, [pc, #444]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bab6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800baba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800babc:	4b6c      	ldr	r3, [pc, #432]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f003 0304 	and.w	r3, r3, #4
 800bac4:	2b04      	cmp	r3, #4
 800bac6:	d10c      	bne.n	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d109      	bne.n	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bace:	4b68      	ldr	r3, [pc, #416]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	08db      	lsrs	r3, r3, #3
 800bad4:	f003 0303 	and.w	r3, r3, #3
 800bad8:	4a66      	ldr	r2, [pc, #408]	; (800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bada:	fa22 f303 	lsr.w	r3, r2, r3
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bae0:	e01e      	b.n	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bae2:	4b63      	ldr	r3, [pc, #396]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baee:	d106      	bne.n	800bafe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800baf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800baf6:	d102      	bne.n	800bafe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800baf8:	4b5f      	ldr	r3, [pc, #380]	; (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800bafa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bafc:	e010      	b.n	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bafe:	4b5c      	ldr	r3, [pc, #368]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb0a:	d106      	bne.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800bb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb12:	d102      	bne.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bb14:	4b59      	ldr	r3, [pc, #356]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800bb16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb18:	e002      	b.n	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bb1e:	e242      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800bb20:	e241      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bb22:	4b57      	ldr	r3, [pc, #348]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800bb24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb26:	e23e      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb2c:	e23b      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb34:	f040 80a6 	bne.w	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800bb38:	4b4d      	ldr	r3, [pc, #308]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bb3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb3c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bb40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb48:	d054      	beq.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb50:	f200 808b 	bhi.w	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb5a:	f000 8083 	beq.w	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb64:	f200 8081 	bhi.w	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb6e:	d02f      	beq.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb76:	d878      	bhi.n	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d004      	beq.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb84:	d012      	beq.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800bb86:	e070      	b.n	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb88:	4b39      	ldr	r3, [pc, #228]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb94:	d107      	bne.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 fcca 	bl	800c534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bba4:	e1ff      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbaa:	e1fc      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbac:	4b30      	ldr	r3, [pc, #192]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbb8:	d107      	bne.n	800bbca <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbba:	f107 0318 	add.w	r3, r7, #24
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 fa10 	bl	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bbc8:	e1ed      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbce:	e1ea      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbd0:	4b27      	ldr	r3, [pc, #156]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbdc:	d107      	bne.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbde:	f107 030c 	add.w	r3, r7, #12
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 fb52 	bl	800c28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bbec:	e1db      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbf2:	e1d8      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bbf4:	4b1e      	ldr	r3, [pc, #120]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bbf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbfc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbfe:	4b1c      	ldr	r3, [pc, #112]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f003 0304 	and.w	r3, r3, #4
 800bc06:	2b04      	cmp	r3, #4
 800bc08:	d10c      	bne.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800bc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d109      	bne.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc10:	4b17      	ldr	r3, [pc, #92]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	08db      	lsrs	r3, r3, #3
 800bc16:	f003 0303 	and.w	r3, r3, #3
 800bc1a:	4a16      	ldr	r2, [pc, #88]	; (800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bc1c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc22:	e01e      	b.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc24:	4b12      	ldr	r3, [pc, #72]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc30:	d106      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800bc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc38:	d102      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bc3a:	4b0f      	ldr	r3, [pc, #60]	; (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800bc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc3e:	e010      	b.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc40:	4b0b      	ldr	r3, [pc, #44]	; (800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc4c:	d106      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800bc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc54:	d102      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bc56:	4b09      	ldr	r3, [pc, #36]	; (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800bc58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc5a:	e002      	b.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bc60:	e1a1      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800bc62:	e1a0      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bc64:	4b06      	ldr	r3, [pc, #24]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc68:	e19d      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc6e:	e19a      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800bc70:	58024400 	.word	0x58024400
 800bc74:	03d09000 	.word	0x03d09000
 800bc78:	003d0900 	.word	0x003d0900
 800bc7c:	01518000 	.word	0x01518000
 800bc80:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bc8a:	d173      	bne.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800bc8c:	4b9a      	ldr	r3, [pc, #616]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bc8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bc94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc9c:	d02f      	beq.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bca4:	d863      	bhi.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d004      	beq.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800bcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcb2:	d012      	beq.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800bcb4:	e05b      	b.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcb6:	4b90      	ldr	r3, [pc, #576]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcc2:	d107      	bne.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcc4:	f107 0318 	add.w	r3, r7, #24
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f000 f98b 	bl	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bcd2:	e168      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcd8:	e165      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bcda:	4b87      	ldr	r3, [pc, #540]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bce6:	d107      	bne.n	800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bce8:	f107 030c 	add.w	r3, r7, #12
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 facd 	bl	800c28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bcf6:	e156      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcfc:	e153      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bcfe:	4b7e      	ldr	r3, [pc, #504]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bd00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd06:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd08:	4b7b      	ldr	r3, [pc, #492]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 0304 	and.w	r3, r3, #4
 800bd10:	2b04      	cmp	r3, #4
 800bd12:	d10c      	bne.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800bd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d109      	bne.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bd1a:	4b77      	ldr	r3, [pc, #476]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	08db      	lsrs	r3, r3, #3
 800bd20:	f003 0303 	and.w	r3, r3, #3
 800bd24:	4a75      	ldr	r2, [pc, #468]	; (800befc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bd26:	fa22 f303 	lsr.w	r3, r2, r3
 800bd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd2c:	e01e      	b.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd2e:	4b72      	ldr	r3, [pc, #456]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd3a:	d106      	bne.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800bd3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd42:	d102      	bne.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bd44:	4b6e      	ldr	r3, [pc, #440]	; (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800bd46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd48:	e010      	b.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd4a:	4b6b      	ldr	r3, [pc, #428]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd56:	d106      	bne.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd5e:	d102      	bne.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bd60:	4b68      	ldr	r3, [pc, #416]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd64:	e002      	b.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bd6a:	e11c      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800bd6c:	e11b      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd72:	e118      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd7a:	d133      	bne.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800bd7c:	4b5e      	ldr	r3, [pc, #376]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bd7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d004      	beq.n	800bd96 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd92:	d012      	beq.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800bd94:	e023      	b.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd96:	4b58      	ldr	r3, [pc, #352]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bda2:	d107      	bne.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bda4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f000 fbc3 	bl	800c534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bdb2:	e0f8      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdb8:	e0f5      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdba:	4b4f      	ldr	r3, [pc, #316]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdc6:	d107      	bne.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdc8:	f107 0318 	add.w	r3, r7, #24
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 f909 	bl	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bdd6:	e0e6      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bddc:	e0e3      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bde2:	e0e0      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdea:	f040 808d 	bne.w	800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800bdee:	4b42      	ldr	r3, [pc, #264]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bdf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdf2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bdf6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdfe:	d06b      	beq.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800be00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be06:	d874      	bhi.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be0e:	d056      	beq.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800be10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be16:	d86c      	bhi.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800be18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be1e:	d03b      	beq.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be26:	d864      	bhi.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be2e:	d021      	beq.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800be30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be36:	d85c      	bhi.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800be38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d004      	beq.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800be3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be44:	d004      	beq.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800be46:	e054      	b.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800be48:	f000 f8b6 	bl	800bfb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800be4c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800be4e:	e0aa      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be50:	4b29      	ldr	r3, [pc, #164]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be5c:	d107      	bne.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be5e:	f107 0318 	add.w	r3, r7, #24
 800be62:	4618      	mov	r0, r3
 800be64:	f000 f8be 	bl	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800be6c:	e09b      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800be6e:	2300      	movs	r3, #0
 800be70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be72:	e098      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be74:	4b20      	ldr	r3, [pc, #128]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be80:	d107      	bne.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be82:	f107 030c 	add.w	r3, r7, #12
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fa00 	bl	800c28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800be90:	e089      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800be92:	2300      	movs	r3, #0
 800be94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be96:	e086      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be98:	4b17      	ldr	r3, [pc, #92]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0304 	and.w	r3, r3, #4
 800bea0:	2b04      	cmp	r3, #4
 800bea2:	d109      	bne.n	800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bea4:	4b14      	ldr	r3, [pc, #80]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	08db      	lsrs	r3, r3, #3
 800beaa:	f003 0303 	and.w	r3, r3, #3
 800beae:	4a13      	ldr	r2, [pc, #76]	; (800befc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800beb0:	fa22 f303 	lsr.w	r3, r2, r3
 800beb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800beb6:	e076      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800beb8:	2300      	movs	r3, #0
 800beba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bebc:	e073      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bebe:	4b0e      	ldr	r3, [pc, #56]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beca:	d102      	bne.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800becc:	4b0c      	ldr	r3, [pc, #48]	; (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800bece:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bed0:	e069      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800bed2:	2300      	movs	r3, #0
 800bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bed6:	e066      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bed8:	4b07      	ldr	r3, [pc, #28]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bee4:	d102      	bne.n	800beec <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800bee6:	4b07      	ldr	r3, [pc, #28]	; (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800bee8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800beea:	e05c      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bef0:	e059      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bef6:	e056      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800bef8:	58024400 	.word	0x58024400
 800befc:	03d09000 	.word	0x03d09000
 800bf00:	003d0900 	.word	0x003d0900
 800bf04:	01518000 	.word	0x01518000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf0e:	d148      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800bf10:	4b27      	ldr	r3, [pc, #156]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bf12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf20:	d02a      	beq.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800bf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf28:	d838      	bhi.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800bf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d004      	beq.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800bf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf36:	d00d      	beq.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800bf38:	e030      	b.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bf3a:	4b1d      	ldr	r3, [pc, #116]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf46:	d102      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800bf48:	4b1a      	ldr	r3, [pc, #104]	; (800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf4c:	e02b      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf52:	e028      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf54:	4b16      	ldr	r3, [pc, #88]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf60:	d107      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 fae4 	bl	800c534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf70:	e019      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf76:	e016      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf78:	4b0d      	ldr	r3, [pc, #52]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf84:	d107      	bne.n	800bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf86:	f107 0318 	add.w	r3, r7, #24
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f000 f82a 	bl	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf94:	e007      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf9a:	e004      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfa0:	e001      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800bfa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3740      	adds	r7, #64	; 0x40
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	58024400 	.word	0x58024400
 800bfb4:	01518000 	.word	0x01518000

0800bfb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bfbc:	f7fe fcae 	bl	800a91c <HAL_RCC_GetHCLKFreq>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	4b06      	ldr	r3, [pc, #24]	; (800bfdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	091b      	lsrs	r3, r3, #4
 800bfc8:	f003 0307 	and.w	r3, r3, #7
 800bfcc:	4904      	ldr	r1, [pc, #16]	; (800bfe0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bfce:	5ccb      	ldrb	r3, [r1, r3]
 800bfd0:	f003 031f 	and.w	r3, r3, #31
 800bfd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	58024400 	.word	0x58024400
 800bfe0:	08013bbc 	.word	0x08013bbc

0800bfe4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b089      	sub	sp, #36	; 0x24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfec:	4ba1      	ldr	r3, [pc, #644]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff0:	f003 0303 	and.w	r3, r3, #3
 800bff4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bff6:	4b9f      	ldr	r3, [pc, #636]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffa:	0b1b      	lsrs	r3, r3, #12
 800bffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c000:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c002:	4b9c      	ldr	r3, [pc, #624]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c006:	091b      	lsrs	r3, r3, #4
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c00e:	4b99      	ldr	r3, [pc, #612]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c012:	08db      	lsrs	r3, r3, #3
 800c014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c018:	693a      	ldr	r2, [r7, #16]
 800c01a:	fb02 f303 	mul.w	r3, r2, r3
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 8111 	beq.w	800c254 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	2b02      	cmp	r3, #2
 800c036:	f000 8083 	beq.w	800c140 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	f200 80a1 	bhi.w	800c184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d003      	beq.n	800c050 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d056      	beq.n	800c0fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c04e:	e099      	b.n	800c184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c050:	4b88      	ldr	r3, [pc, #544]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 0320 	and.w	r3, r3, #32
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d02d      	beq.n	800c0b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c05c:	4b85      	ldr	r3, [pc, #532]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	08db      	lsrs	r3, r3, #3
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	4a84      	ldr	r2, [pc, #528]	; (800c278 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c068:	fa22 f303 	lsr.w	r3, r2, r3
 800c06c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	ee07 3a90 	vmov	s15, r3
 800c074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c086:	4b7b      	ldr	r3, [pc, #492]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c08e:	ee07 3a90 	vmov	s15, r3
 800c092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c096:	ed97 6a03 	vldr	s12, [r7, #12]
 800c09a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c0b6:	e087      	b.n	800c1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	ee07 3a90 	vmov	s15, r3
 800c0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ca:	4b6a      	ldr	r3, [pc, #424]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d2:	ee07 3a90 	vmov	s15, r3
 800c0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0fa:	e065      	b.n	800c1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	ee07 3a90 	vmov	s15, r3
 800c102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c106:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c10e:	4b59      	ldr	r3, [pc, #356]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c116:	ee07 3a90 	vmov	s15, r3
 800c11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c122:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c13a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c13e:	e043      	b.n	800c1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	ee07 3a90 	vmov	s15, r3
 800c146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c152:	4b48      	ldr	r3, [pc, #288]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15a:	ee07 3a90 	vmov	s15, r3
 800c15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c162:	ed97 6a03 	vldr	s12, [r7, #12]
 800c166:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c17e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c182:	e021      	b.n	800c1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	ee07 3a90 	vmov	s15, r3
 800c18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c18e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c196:	4b37      	ldr	r3, [pc, #220]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c1c8:	4b2a      	ldr	r3, [pc, #168]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1cc:	0a5b      	lsrs	r3, r3, #9
 800c1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1d2:	ee07 3a90 	vmov	s15, r3
 800c1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ee:	ee17 2a90 	vmov	r2, s15
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c1f6:	4b1f      	ldr	r3, [pc, #124]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fa:	0c1b      	lsrs	r3, r3, #16
 800c1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c200:	ee07 3a90 	vmov	s15, r3
 800c204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c20c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c210:	edd7 6a07 	vldr	s13, [r7, #28]
 800c214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c21c:	ee17 2a90 	vmov	r2, s15
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c224:	4b13      	ldr	r3, [pc, #76]	; (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c228:	0e1b      	lsrs	r3, r3, #24
 800c22a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c22e:	ee07 3a90 	vmov	s15, r3
 800c232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c23a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c23e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c24a:	ee17 2a90 	vmov	r2, s15
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c252:	e008      	b.n	800c266 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	609a      	str	r2, [r3, #8]
}
 800c266:	bf00      	nop
 800c268:	3724      	adds	r7, #36	; 0x24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	58024400 	.word	0x58024400
 800c278:	03d09000 	.word	0x03d09000
 800c27c:	46000000 	.word	0x46000000
 800c280:	4c742400 	.word	0x4c742400
 800c284:	4a742400 	.word	0x4a742400
 800c288:	4ba8c000 	.word	0x4ba8c000

0800c28c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b089      	sub	sp, #36	; 0x24
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c294:	4ba1      	ldr	r3, [pc, #644]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c298:	f003 0303 	and.w	r3, r3, #3
 800c29c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c29e:	4b9f      	ldr	r3, [pc, #636]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a2:	0d1b      	lsrs	r3, r3, #20
 800c2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c2aa:	4b9c      	ldr	r3, [pc, #624]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ae:	0a1b      	lsrs	r3, r3, #8
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c2b6:	4b99      	ldr	r3, [pc, #612]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ba:	08db      	lsrs	r3, r3, #3
 800c2bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2c0:	693a      	ldr	r2, [r7, #16]
 800c2c2:	fb02 f303 	mul.w	r3, r2, r3
 800c2c6:	ee07 3a90 	vmov	s15, r3
 800c2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 8111 	beq.w	800c4fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	f000 8083 	beq.w	800c3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	f200 80a1 	bhi.w	800c42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d003      	beq.n	800c2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d056      	beq.n	800c3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c2f6:	e099      	b.n	800c42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2f8:	4b88      	ldr	r3, [pc, #544]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 0320 	and.w	r3, r3, #32
 800c300:	2b00      	cmp	r3, #0
 800c302:	d02d      	beq.n	800c360 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c304:	4b85      	ldr	r3, [pc, #532]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	08db      	lsrs	r3, r3, #3
 800c30a:	f003 0303 	and.w	r3, r3, #3
 800c30e:	4a84      	ldr	r2, [pc, #528]	; (800c520 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c310:	fa22 f303 	lsr.w	r3, r2, r3
 800c314:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	ee07 3a90 	vmov	s15, r3
 800c31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	ee07 3a90 	vmov	s15, r3
 800c326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c32e:	4b7b      	ldr	r3, [pc, #492]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c336:	ee07 3a90 	vmov	s15, r3
 800c33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c342:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c35a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c35e:	e087      	b.n	800c470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	ee07 3a90 	vmov	s15, r3
 800c366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c36a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c372:	4b6a      	ldr	r3, [pc, #424]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c37a:	ee07 3a90 	vmov	s15, r3
 800c37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c382:	ed97 6a03 	vldr	s12, [r7, #12]
 800c386:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c39e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3a2:	e065      	b.n	800c470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	ee07 3a90 	vmov	s15, r3
 800c3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3b6:	4b59      	ldr	r3, [pc, #356]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3be:	ee07 3a90 	vmov	s15, r3
 800c3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3e6:	e043      	b.n	800c470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	ee07 3a90 	vmov	s15, r3
 800c3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3fa:	4b48      	ldr	r3, [pc, #288]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c402:	ee07 3a90 	vmov	s15, r3
 800c406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c40e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c426:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c42a:	e021      	b.n	800c470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	ee07 3a90 	vmov	s15, r3
 800c432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c436:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c43e:	4b37      	ldr	r3, [pc, #220]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c446:	ee07 3a90 	vmov	s15, r3
 800c44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c452:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c45e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c46a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c46e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c470:	4b2a      	ldr	r3, [pc, #168]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c474:	0a5b      	lsrs	r3, r3, #9
 800c476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c47a:	ee07 3a90 	vmov	s15, r3
 800c47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c48a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c48e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c496:	ee17 2a90 	vmov	r2, s15
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c49e:	4b1f      	ldr	r3, [pc, #124]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a2:	0c1b      	lsrs	r3, r3, #16
 800c4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4a8:	ee07 3a90 	vmov	s15, r3
 800c4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4c4:	ee17 2a90 	vmov	r2, s15
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c4cc:	4b13      	ldr	r3, [pc, #76]	; (800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d0:	0e1b      	lsrs	r3, r3, #24
 800c4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4d6:	ee07 3a90 	vmov	s15, r3
 800c4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4f2:	ee17 2a90 	vmov	r2, s15
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c4fa:	e008      	b.n	800c50e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	609a      	str	r2, [r3, #8]
}
 800c50e:	bf00      	nop
 800c510:	3724      	adds	r7, #36	; 0x24
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	58024400 	.word	0x58024400
 800c520:	03d09000 	.word	0x03d09000
 800c524:	46000000 	.word	0x46000000
 800c528:	4c742400 	.word	0x4c742400
 800c52c:	4a742400 	.word	0x4a742400
 800c530:	4ba8c000 	.word	0x4ba8c000

0800c534 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c534:	b480      	push	{r7}
 800c536:	b089      	sub	sp, #36	; 0x24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c53c:	4ba0      	ldr	r3, [pc, #640]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c540:	f003 0303 	and.w	r3, r3, #3
 800c544:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c546:	4b9e      	ldr	r3, [pc, #632]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c54a:	091b      	lsrs	r3, r3, #4
 800c54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c550:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c552:	4b9b      	ldr	r3, [pc, #620]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c556:	f003 0301 	and.w	r3, r3, #1
 800c55a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c55c:	4b98      	ldr	r3, [pc, #608]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c560:	08db      	lsrs	r3, r3, #3
 800c562:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c566:	693a      	ldr	r2, [r7, #16]
 800c568:	fb02 f303 	mul.w	r3, r2, r3
 800c56c:	ee07 3a90 	vmov	s15, r3
 800c570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c574:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f000 8111 	beq.w	800c7a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	2b02      	cmp	r3, #2
 800c584:	f000 8083 	beq.w	800c68e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	2b02      	cmp	r3, #2
 800c58c:	f200 80a1 	bhi.w	800c6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d003      	beq.n	800c59e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d056      	beq.n	800c64a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c59c:	e099      	b.n	800c6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c59e:	4b88      	ldr	r3, [pc, #544]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 0320 	and.w	r3, r3, #32
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d02d      	beq.n	800c606 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c5aa:	4b85      	ldr	r3, [pc, #532]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	08db      	lsrs	r3, r3, #3
 800c5b0:	f003 0303 	and.w	r3, r3, #3
 800c5b4:	4a83      	ldr	r2, [pc, #524]	; (800c7c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ba:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	ee07 3a90 	vmov	s15, r3
 800c5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	ee07 3a90 	vmov	s15, r3
 800c5cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5d4:	4b7a      	ldr	r3, [pc, #488]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5dc:	ee07 3a90 	vmov	s15, r3
 800c5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c5ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c600:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c604:	e087      	b.n	800c716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	ee07 3a90 	vmov	s15, r3
 800c60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c610:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c618:	4b69      	ldr	r3, [pc, #420]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c620:	ee07 3a90 	vmov	s15, r3
 800c624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c628:	ed97 6a03 	vldr	s12, [r7, #12]
 800c62c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c63c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c640:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c644:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c648:	e065      	b.n	800c716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	ee07 3a90 	vmov	s15, r3
 800c650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c654:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c65c:	4b58      	ldr	r3, [pc, #352]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c664:	ee07 3a90 	vmov	s15, r3
 800c668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c66c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c670:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c67c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c684:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c688:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c68c:	e043      	b.n	800c716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	ee07 3a90 	vmov	s15, r3
 800c694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c698:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c69c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6a0:	4b47      	ldr	r3, [pc, #284]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a8:	ee07 3a90 	vmov	s15, r3
 800c6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c6b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6d0:	e021      	b.n	800c716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	ee07 3a90 	vmov	s15, r3
 800c6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c7cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c6e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6e4:	4b36      	ldr	r3, [pc, #216]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ec:	ee07 3a90 	vmov	s15, r3
 800c6f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c6fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c710:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c714:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c716:	4b2a      	ldr	r3, [pc, #168]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71a:	0a5b      	lsrs	r3, r3, #9
 800c71c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c720:	ee07 3a90 	vmov	s15, r3
 800c724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c72c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c730:	edd7 6a07 	vldr	s13, [r7, #28]
 800c734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c73c:	ee17 2a90 	vmov	r2, s15
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c744:	4b1e      	ldr	r3, [pc, #120]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c748:	0c1b      	lsrs	r3, r3, #16
 800c74a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c74e:	ee07 3a90 	vmov	s15, r3
 800c752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c75a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c75e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c76a:	ee17 2a90 	vmov	r2, s15
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c772:	4b13      	ldr	r3, [pc, #76]	; (800c7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c776:	0e1b      	lsrs	r3, r3, #24
 800c778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c77c:	ee07 3a90 	vmov	s15, r3
 800c780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c78c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c798:	ee17 2a90 	vmov	r2, s15
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c7a0:	e008      	b.n	800c7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	609a      	str	r2, [r3, #8]
}
 800c7b4:	bf00      	nop
 800c7b6:	3724      	adds	r7, #36	; 0x24
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr
 800c7c0:	58024400 	.word	0x58024400
 800c7c4:	03d09000 	.word	0x03d09000
 800c7c8:	46000000 	.word	0x46000000
 800c7cc:	4c742400 	.word	0x4c742400
 800c7d0:	4a742400 	.word	0x4a742400
 800c7d4:	4ba8c000 	.word	0x4ba8c000

0800c7d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c7e6:	4b53      	ldr	r3, [pc, #332]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ea:	f003 0303 	and.w	r3, r3, #3
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d101      	bne.n	800c7f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e099      	b.n	800c92a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c7f6:	4b4f      	ldr	r3, [pc, #316]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a4e      	ldr	r2, [pc, #312]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c7fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c802:	f7f6 fbef 	bl	8002fe4 <HAL_GetTick>
 800c806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c808:	e008      	b.n	800c81c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c80a:	f7f6 fbeb 	bl	8002fe4 <HAL_GetTick>
 800c80e:	4602      	mov	r2, r0
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	1ad3      	subs	r3, r2, r3
 800c814:	2b02      	cmp	r3, #2
 800c816:	d901      	bls.n	800c81c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e086      	b.n	800c92a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c81c:	4b45      	ldr	r3, [pc, #276]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1f0      	bne.n	800c80a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c828:	4b42      	ldr	r3, [pc, #264]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c82c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	031b      	lsls	r3, r3, #12
 800c836:	493f      	ldr	r1, [pc, #252]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c838:	4313      	orrs	r3, r2
 800c83a:	628b      	str	r3, [r1, #40]	; 0x28
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	3b01      	subs	r3, #1
 800c842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	3b01      	subs	r3, #1
 800c84c:	025b      	lsls	r3, r3, #9
 800c84e:	b29b      	uxth	r3, r3
 800c850:	431a      	orrs	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	3b01      	subs	r3, #1
 800c858:	041b      	lsls	r3, r3, #16
 800c85a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c85e:	431a      	orrs	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	691b      	ldr	r3, [r3, #16]
 800c864:	3b01      	subs	r3, #1
 800c866:	061b      	lsls	r3, r3, #24
 800c868:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c86c:	4931      	ldr	r1, [pc, #196]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c86e:	4313      	orrs	r3, r2
 800c870:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c872:	4b30      	ldr	r3, [pc, #192]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c876:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	492d      	ldr	r1, [pc, #180]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c880:	4313      	orrs	r3, r2
 800c882:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c884:	4b2b      	ldr	r3, [pc, #172]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c888:	f023 0220 	bic.w	r2, r3, #32
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	4928      	ldr	r1, [pc, #160]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c892:	4313      	orrs	r3, r2
 800c894:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c896:	4b27      	ldr	r3, [pc, #156]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89a:	4a26      	ldr	r2, [pc, #152]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c89c:	f023 0310 	bic.w	r3, r3, #16
 800c8a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c8a2:	4b24      	ldr	r3, [pc, #144]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8a6:	4b24      	ldr	r3, [pc, #144]	; (800c938 <RCCEx_PLL2_Config+0x160>)
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	69d2      	ldr	r2, [r2, #28]
 800c8ae:	00d2      	lsls	r2, r2, #3
 800c8b0:	4920      	ldr	r1, [pc, #128]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c8b6:	4b1f      	ldr	r3, [pc, #124]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ba:	4a1e      	ldr	r2, [pc, #120]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8bc:	f043 0310 	orr.w	r3, r3, #16
 800c8c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d106      	bne.n	800c8d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c8c8:	4b1a      	ldr	r3, [pc, #104]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8cc:	4a19      	ldr	r2, [pc, #100]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c8d4:	e00f      	b.n	800c8f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d106      	bne.n	800c8ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c8dc:	4b15      	ldr	r3, [pc, #84]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e0:	4a14      	ldr	r2, [pc, #80]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c8e8:	e005      	b.n	800c8f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c8ea:	4b12      	ldr	r3, [pc, #72]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ee:	4a11      	ldr	r2, [pc, #68]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c8f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c8f6:	4b0f      	ldr	r3, [pc, #60]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a0e      	ldr	r2, [pc, #56]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c8fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c902:	f7f6 fb6f 	bl	8002fe4 <HAL_GetTick>
 800c906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c908:	e008      	b.n	800c91c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c90a:	f7f6 fb6b 	bl	8002fe4 <HAL_GetTick>
 800c90e:	4602      	mov	r2, r0
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	2b02      	cmp	r3, #2
 800c916:	d901      	bls.n	800c91c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c918:	2303      	movs	r3, #3
 800c91a:	e006      	b.n	800c92a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c91c:	4b05      	ldr	r3, [pc, #20]	; (800c934 <RCCEx_PLL2_Config+0x15c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c924:	2b00      	cmp	r3, #0
 800c926:	d0f0      	beq.n	800c90a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c928:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	58024400 	.word	0x58024400
 800c938:	ffff0007 	.word	0xffff0007

0800c93c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c94a:	4b53      	ldr	r3, [pc, #332]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94e:	f003 0303 	and.w	r3, r3, #3
 800c952:	2b03      	cmp	r3, #3
 800c954:	d101      	bne.n	800c95a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	e099      	b.n	800ca8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c95a:	4b4f      	ldr	r3, [pc, #316]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a4e      	ldr	r2, [pc, #312]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c966:	f7f6 fb3d 	bl	8002fe4 <HAL_GetTick>
 800c96a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c96c:	e008      	b.n	800c980 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c96e:	f7f6 fb39 	bl	8002fe4 <HAL_GetTick>
 800c972:	4602      	mov	r2, r0
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d901      	bls.n	800c980 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c97c:	2303      	movs	r3, #3
 800c97e:	e086      	b.n	800ca8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c980:	4b45      	ldr	r3, [pc, #276]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1f0      	bne.n	800c96e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c98c:	4b42      	ldr	r3, [pc, #264]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c990:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	051b      	lsls	r3, r3, #20
 800c99a:	493f      	ldr	r1, [pc, #252]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c99c:	4313      	orrs	r3, r2
 800c99e:	628b      	str	r3, [r1, #40]	; 0x28
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	025b      	lsls	r3, r3, #9
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	431a      	orrs	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	041b      	lsls	r3, r3, #16
 800c9be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c9c2:	431a      	orrs	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	061b      	lsls	r3, r3, #24
 800c9cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c9d0:	4931      	ldr	r1, [pc, #196]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c9d6:	4b30      	ldr	r3, [pc, #192]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	695b      	ldr	r3, [r3, #20]
 800c9e2:	492d      	ldr	r1, [pc, #180]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c9e8:	4b2b      	ldr	r3, [pc, #172]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	699b      	ldr	r3, [r3, #24]
 800c9f4:	4928      	ldr	r1, [pc, #160]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c9fa:	4b27      	ldr	r3, [pc, #156]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800c9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fe:	4a26      	ldr	r2, [pc, #152]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ca06:	4b24      	ldr	r3, [pc, #144]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca0a:	4b24      	ldr	r3, [pc, #144]	; (800ca9c <RCCEx_PLL3_Config+0x160>)
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	69d2      	ldr	r2, [r2, #28]
 800ca12:	00d2      	lsls	r2, r2, #3
 800ca14:	4920      	ldr	r1, [pc, #128]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca16:	4313      	orrs	r3, r2
 800ca18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ca1a:	4b1f      	ldr	r3, [pc, #124]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca1e:	4a1e      	ldr	r2, [pc, #120]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d106      	bne.n	800ca3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ca2c:	4b1a      	ldr	r3, [pc, #104]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca30:	4a19      	ldr	r2, [pc, #100]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ca36:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca38:	e00f      	b.n	800ca5a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d106      	bne.n	800ca4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ca40:	4b15      	ldr	r3, [pc, #84]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca44:	4a14      	ldr	r2, [pc, #80]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ca4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca4c:	e005      	b.n	800ca5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ca4e:	4b12      	ldr	r3, [pc, #72]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca52:	4a11      	ldr	r2, [pc, #68]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ca5a:	4b0f      	ldr	r3, [pc, #60]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a0e      	ldr	r2, [pc, #56]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca66:	f7f6 fabd 	bl	8002fe4 <HAL_GetTick>
 800ca6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ca6c:	e008      	b.n	800ca80 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ca6e:	f7f6 fab9 	bl	8002fe4 <HAL_GetTick>
 800ca72:	4602      	mov	r2, r0
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d901      	bls.n	800ca80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	e006      	b.n	800ca8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ca80:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <RCCEx_PLL3_Config+0x15c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d0f0      	beq.n	800ca6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	58024400 	.word	0x58024400
 800ca9c:	ffff0007 	.word	0xffff0007

0800caa0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800caa8:	2300      	movs	r3, #0
 800caaa:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d101      	bne.n	800cab6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	e0eb      	b.n	800cc8e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a75      	ldr	r2, [pc, #468]	; (800cc98 <HAL_SPI_Init+0x1f8>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d00f      	beq.n	800cae6 <HAL_SPI_Init+0x46>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a74      	ldr	r2, [pc, #464]	; (800cc9c <HAL_SPI_Init+0x1fc>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d00a      	beq.n	800cae6 <HAL_SPI_Init+0x46>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a72      	ldr	r2, [pc, #456]	; (800cca0 <HAL_SPI_Init+0x200>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d005      	beq.n	800cae6 <HAL_SPI_Init+0x46>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	2b0f      	cmp	r3, #15
 800cae0:	d901      	bls.n	800cae6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e0d3      	b.n	800cc8e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fe88 	bl	800d7fc <SPI_GetPacketSize>
 800caec:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a69      	ldr	r2, [pc, #420]	; (800cc98 <HAL_SPI_Init+0x1f8>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d00c      	beq.n	800cb12 <HAL_SPI_Init+0x72>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a67      	ldr	r2, [pc, #412]	; (800cc9c <HAL_SPI_Init+0x1fc>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d007      	beq.n	800cb12 <HAL_SPI_Init+0x72>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a66      	ldr	r2, [pc, #408]	; (800cca0 <HAL_SPI_Init+0x200>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d002      	beq.n	800cb12 <HAL_SPI_Init+0x72>
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	2b08      	cmp	r3, #8
 800cb10:	d811      	bhi.n	800cb36 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cb16:	4a60      	ldr	r2, [pc, #384]	; (800cc98 <HAL_SPI_Init+0x1f8>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d009      	beq.n	800cb30 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a5e      	ldr	r2, [pc, #376]	; (800cc9c <HAL_SPI_Init+0x1fc>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d004      	beq.n	800cb30 <HAL_SPI_Init+0x90>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a5d      	ldr	r2, [pc, #372]	; (800cca0 <HAL_SPI_Init+0x200>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d104      	bne.n	800cb3a <HAL_SPI_Init+0x9a>
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	2b10      	cmp	r3, #16
 800cb34:	d901      	bls.n	800cb3a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	e0a9      	b.n	800cc8e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d106      	bne.n	800cb54 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7f5 fd64 	bl	800261c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2202      	movs	r2, #2
 800cb58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f022 0201 	bic.w	r2, r2, #1
 800cb6a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb74:	d119      	bne.n	800cbaa <HAL_SPI_Init+0x10a>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb7e:	d103      	bne.n	800cb88 <HAL_SPI_Init+0xe8>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d008      	beq.n	800cb9a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10c      	bne.n	800cbaa <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb98:	d107      	bne.n	800cbaa <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cba8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	69da      	ldr	r2, [r3, #28]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb2:	431a      	orrs	r2, r3
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	431a      	orrs	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbbc:	ea42 0103 	orr.w	r1, r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	68da      	ldr	r2, [r3, #12]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	430a      	orrs	r2, r1
 800cbca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd4:	431a      	orrs	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbda:	431a      	orrs	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	699b      	ldr	r3, [r3, #24]
 800cbe0:	431a      	orrs	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	431a      	orrs	r2, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	695b      	ldr	r3, [r3, #20]
 800cbec:	431a      	orrs	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	431a      	orrs	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbfe:	431a      	orrs	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	431a      	orrs	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc0a:	ea42 0103 	orr.w	r1, r2, r3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	430a      	orrs	r2, r1
 800cc18:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d113      	bne.n	800cc4a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc34:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc48:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f022 0201 	bic.w	r2, r2, #1
 800cc58:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00a      	beq.n	800cc7c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	430a      	orrs	r2, r1
 800cc7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	40013000 	.word	0x40013000
 800cc9c:	40003800 	.word	0x40003800
 800cca0:	40003c00 	.word	0x40003c00

0800cca4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b08a      	sub	sp, #40	; 0x28
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	603b      	str	r3, [r7, #0]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	3320      	adds	r3, #32
 800ccba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d101      	bne.n	800ccce <HAL_SPI_Transmit+0x2a>
 800ccca:	2302      	movs	r3, #2
 800cccc:	e1d7      	b.n	800d07e <HAL_SPI_Transmit+0x3da>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ccd6:	f7f6 f985 	bl	8002fe4 <HAL_GetTick>
 800ccda:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d007      	beq.n	800ccf8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800cce8:	2302      	movs	r3, #2
 800ccea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ccf4:	7efb      	ldrb	r3, [r7, #27]
 800ccf6:	e1c2      	b.n	800d07e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d002      	beq.n	800cd04 <HAL_SPI_Transmit+0x60>
 800ccfe:	88fb      	ldrh	r3, [r7, #6]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d107      	bne.n	800cd14 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cd10:	7efb      	ldrb	r3, [r7, #27]
 800cd12:	e1b4      	b.n	800d07e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2203      	movs	r2, #3
 800cd18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	88fa      	ldrh	r2, [r7, #6]
 800cd2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	88fa      	ldrh	r2, [r7, #6]
 800cd36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cd64:	d107      	bne.n	800cd76 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd74:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	4b96      	ldr	r3, [pc, #600]	; (800cfd8 <HAL_SPI_Transmit+0x334>)
 800cd7e:	4013      	ands	r3, r2
 800cd80:	88f9      	ldrh	r1, [r7, #6]
 800cd82:	68fa      	ldr	r2, [r7, #12]
 800cd84:	6812      	ldr	r2, [r2, #0]
 800cd86:	430b      	orrs	r3, r1
 800cd88:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f042 0201 	orr.w	r2, r2, #1
 800cd98:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cda2:	d107      	bne.n	800cdb4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	2b0f      	cmp	r3, #15
 800cdba:	d947      	bls.n	800ce4c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cdbc:	e03f      	b.n	800ce3e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	695b      	ldr	r3, [r3, #20]
 800cdc4:	f003 0302 	and.w	r3, r3, #2
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d114      	bne.n	800cdf6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6812      	ldr	r2, [r2, #0]
 800cdd6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cddc:	1d1a      	adds	r2, r3, #4
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	3b01      	subs	r3, #1
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cdf4:	e023      	b.n	800ce3e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cdf6:	f7f6 f8f5 	bl	8002fe4 <HAL_GetTick>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d803      	bhi.n	800ce0e <HAL_SPI_Transmit+0x16a>
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0c:	d102      	bne.n	800ce14 <HAL_SPI_Transmit+0x170>
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d114      	bne.n	800ce3e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f000 fc23 	bl	800d660 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2201      	movs	r2, #1
 800ce36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e11f      	b.n	800d07e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1b9      	bne.n	800cdbe <HAL_SPI_Transmit+0x11a>
 800ce4a:	e0f2      	b.n	800d032 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	2b07      	cmp	r3, #7
 800ce52:	f240 80e7 	bls.w	800d024 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ce56:	e05d      	b.n	800cf14 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	f003 0302 	and.w	r3, r3, #2
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d132      	bne.n	800cecc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d918      	bls.n	800cea4 <HAL_SPI_Transmit+0x200>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d014      	beq.n	800cea4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	6812      	ldr	r2, [r2, #0]
 800ce84:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce8a:	1d1a      	adds	r2, r3, #4
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	3b02      	subs	r3, #2
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cea2:	e037      	b.n	800cf14 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cea8:	881a      	ldrh	r2, [r3, #0]
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceb2:	1c9a      	adds	r2, r3, #2
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	3b01      	subs	r3, #1
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ceca:	e023      	b.n	800cf14 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cecc:	f7f6 f88a 	bl	8002fe4 <HAL_GetTick>
 800ced0:	4602      	mov	r2, r0
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d803      	bhi.n	800cee4 <HAL_SPI_Transmit+0x240>
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee2:	d102      	bne.n	800ceea <HAL_SPI_Transmit+0x246>
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d114      	bne.n	800cf14 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f000 fbb8 	bl	800d660 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cefe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e0b4      	b.n	800d07e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d19b      	bne.n	800ce58 <HAL_SPI_Transmit+0x1b4>
 800cf20:	e087      	b.n	800d032 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	695b      	ldr	r3, [r3, #20]
 800cf28:	f003 0302 	and.w	r3, r3, #2
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d155      	bne.n	800cfdc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	2b03      	cmp	r3, #3
 800cf3a:	d918      	bls.n	800cf6e <HAL_SPI_Transmit+0x2ca>
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf40:	2b40      	cmp	r3, #64	; 0x40
 800cf42:	d914      	bls.n	800cf6e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	6812      	ldr	r2, [r2, #0]
 800cf4e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf54:	1d1a      	adds	r2, r3, #4
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	3b04      	subs	r3, #4
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cf6c:	e05a      	b.n	800d024 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d917      	bls.n	800cfaa <HAL_SPI_Transmit+0x306>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d013      	beq.n	800cfaa <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf86:	881a      	ldrh	r2, [r3, #0]
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf90:	1c9a      	adds	r2, r3, #2
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	3b02      	subs	r3, #2
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cfa8:	e03c      	b.n	800d024 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	3320      	adds	r3, #32
 800cfb4:	7812      	ldrb	r2, [r2, #0]
 800cfb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfbc:	1c5a      	adds	r2, r3, #1
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cfd4:	e026      	b.n	800d024 <HAL_SPI_Transmit+0x380>
 800cfd6:	bf00      	nop
 800cfd8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfdc:	f7f6 f802 	bl	8002fe4 <HAL_GetTick>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d803      	bhi.n	800cff4 <HAL_SPI_Transmit+0x350>
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff2:	d102      	bne.n	800cffa <HAL_SPI_Transmit+0x356>
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d114      	bne.n	800d024 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f000 fb30 	bl	800d660 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d00e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d020:	2301      	movs	r3, #1
 800d022:	e02c      	b.n	800d07e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f47f af78 	bne.w	800cf22 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	2200      	movs	r2, #0
 800d03a:	2108      	movs	r1, #8
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f000 fbaf 	bl	800d7a0 <SPI_WaitOnFlagUntilTimeout>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d007      	beq.n	800d058 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d04e:	f043 0220 	orr.w	r2, r3, #32
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f000 fb01 	bl	800d660 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2200      	movs	r2, #0
 800d062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d078:	2301      	movs	r3, #1
 800d07a:	e000      	b.n	800d07e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d07c:	7efb      	ldrb	r3, [r7, #27]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3720      	adds	r7, #32
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop

0800d088 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08e      	sub	sp, #56	; 0x38
 800d08c:	af02      	add	r7, sp, #8
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d096:	2300      	movs	r3, #0
 800d098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3320      	adds	r3, #32
 800d0a2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3330      	adds	r3, #48	; 0x30
 800d0aa:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d101      	bne.n	800d0ba <HAL_SPI_TransmitReceive+0x32>
 800d0b6:	2302      	movs	r3, #2
 800d0b8:	e2ce      	b.n	800d658 <HAL_SPI_TransmitReceive+0x5d0>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0c2:	f7f5 ff8f 	bl	8002fe4 <HAL_GetTick>
 800d0c6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d0c8:	887b      	ldrh	r3, [r7, #2]
 800d0ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d0cc:	887b      	ldrh	r3, [r7, #2]
 800d0ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d0d6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d0de:	7efb      	ldrb	r3, [r7, #27]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d014      	beq.n	800d10e <HAL_SPI_TransmitReceive+0x86>
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d0ea:	d106      	bne.n	800d0fa <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d102      	bne.n	800d0fa <HAL_SPI_TransmitReceive+0x72>
 800d0f4:	7efb      	ldrb	r3, [r7, #27]
 800d0f6:	2b04      	cmp	r3, #4
 800d0f8:	d009      	beq.n	800d10e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2200      	movs	r2, #0
 800d104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d108:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d10c:	e2a4      	b.n	800d658 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d005      	beq.n	800d120 <HAL_SPI_TransmitReceive+0x98>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <HAL_SPI_TransmitReceive+0x98>
 800d11a:	887b      	ldrh	r3, [r7, #2]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d109      	bne.n	800d134 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d12e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d132:	e291      	b.n	800d658 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b04      	cmp	r3, #4
 800d13e:	d003      	beq.n	800d148 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2205      	movs	r2, #5
 800d144:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	887a      	ldrh	r2, [r7, #2]
 800d15a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	887a      	ldrh	r2, [r7, #2]
 800d162:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	887a      	ldrh	r2, [r7, #2]
 800d170:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	887a      	ldrh	r2, [r7, #2]
 800d178:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2200      	movs	r2, #0
 800d186:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	4b9f      	ldr	r3, [pc, #636]	; (800d40c <HAL_SPI_TransmitReceive+0x384>)
 800d190:	4013      	ands	r3, r2
 800d192:	8879      	ldrh	r1, [r7, #2]
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	6812      	ldr	r2, [r2, #0]
 800d198:	430b      	orrs	r3, r1
 800d19a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f042 0201 	orr.w	r2, r2, #1
 800d1aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1b4:	d107      	bne.n	800d1c6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	2b0f      	cmp	r3, #15
 800d1cc:	d970      	bls.n	800d2b0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d1ce:	e068      	b.n	800d2a2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	695b      	ldr	r3, [r3, #20]
 800d1d6:	f003 0302 	and.w	r3, r3, #2
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d11a      	bne.n	800d214 <HAL_SPI_TransmitReceive+0x18c>
 800d1de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d017      	beq.n	800d214 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	6812      	ldr	r2, [r2, #0]
 800d1ee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1f4:	1d1a      	adds	r2, r3, #4
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d200:	b29b      	uxth	r3, r3
 800d202:	3b01      	subs	r3, #1
 800d204:	b29a      	uxth	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d212:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	695a      	ldr	r2, [r3, #20]
 800d21a:	f248 0308 	movw	r3, #32776	; 0x8008
 800d21e:	4013      	ands	r3, r2
 800d220:	2b00      	cmp	r3, #0
 800d222:	d01a      	beq.n	800d25a <HAL_SPI_TransmitReceive+0x1d2>
 800d224:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d226:	2b00      	cmp	r3, #0
 800d228:	d017      	beq.n	800d25a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d232:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d234:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d23a:	1d1a      	adds	r2, r3, #4
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d246:	b29b      	uxth	r3, r3
 800d248:	3b01      	subs	r3, #1
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d258:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d25a:	f7f5 fec3 	bl	8002fe4 <HAL_GetTick>
 800d25e:	4602      	mov	r2, r0
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d266:	429a      	cmp	r2, r3
 800d268:	d803      	bhi.n	800d272 <HAL_SPI_TransmitReceive+0x1ea>
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d270:	d102      	bne.n	800d278 <HAL_SPI_TransmitReceive+0x1f0>
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	2b00      	cmp	r3, #0
 800d276:	d114      	bne.n	800d2a2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f000 f9f1 	bl	800d660 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d28c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e1da      	b.n	800d658 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d2a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d193      	bne.n	800d1d0 <HAL_SPI_TransmitReceive+0x148>
 800d2a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d190      	bne.n	800d1d0 <HAL_SPI_TransmitReceive+0x148>
 800d2ae:	e1ac      	b.n	800d60a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	2b07      	cmp	r3, #7
 800d2b6:	f240 81a0 	bls.w	800d5fa <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d2ba:	e0a9      	b.n	800d410 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	695b      	ldr	r3, [r3, #20]
 800d2c2:	f003 0302 	and.w	r3, r3, #2
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d139      	bne.n	800d33e <HAL_SPI_TransmitReceive+0x2b6>
 800d2ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d036      	beq.n	800d33e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d2d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d91c      	bls.n	800d310 <HAL_SPI_TransmitReceive+0x288>
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d018      	beq.n	800d310 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	6812      	ldr	r2, [r2, #0]
 800d2e8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2ee:	1d1a      	adds	r2, r3, #4
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	3b02      	subs	r3, #2
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d30c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d30e:	e016      	b.n	800d33e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d314:	881a      	ldrh	r2, [r3, #0]
 800d316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d318:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d31e:	1c9a      	adds	r2, r3, #2
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	3b01      	subs	r3, #1
 800d32e:	b29a      	uxth	r2, r3
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d33c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	695b      	ldr	r3, [r3, #20]
 800d344:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d03a      	beq.n	800d3c2 <HAL_SPI_TransmitReceive+0x33a>
 800d34c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d037      	beq.n	800d3c2 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d018      	beq.n	800d392 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d368:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d36a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d370:	1d1a      	adds	r2, r3, #4
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	3b02      	subs	r3, #2
 800d380:	b29a      	uxth	r2, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d38e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d390:	e017      	b.n	800d3c2 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d396:	6a3a      	ldr	r2, [r7, #32]
 800d398:	8812      	ldrh	r2, [r2, #0]
 800d39a:	b292      	uxth	r2, r2
 800d39c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3a2:	1c9a      	adds	r2, r3, #2
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3c2:	f7f5 fe0f 	bl	8002fe4 <HAL_GetTick>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d803      	bhi.n	800d3da <HAL_SPI_TransmitReceive+0x352>
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d8:	d102      	bne.n	800d3e0 <HAL_SPI_TransmitReceive+0x358>
 800d3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d117      	bne.n	800d410 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f000 f93d 	bl	800d660 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e126      	b.n	800d658 <HAL_SPI_TransmitReceive+0x5d0>
 800d40a:	bf00      	nop
 800d40c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d410:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d412:	2b00      	cmp	r3, #0
 800d414:	f47f af52 	bne.w	800d2bc <HAL_SPI_TransmitReceive+0x234>
 800d418:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f47f af4e 	bne.w	800d2bc <HAL_SPI_TransmitReceive+0x234>
 800d420:	e0f3      	b.n	800d60a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	695b      	ldr	r3, [r3, #20]
 800d428:	f003 0302 	and.w	r3, r3, #2
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	d15a      	bne.n	800d4e6 <HAL_SPI_TransmitReceive+0x45e>
 800d430:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d432:	2b00      	cmp	r3, #0
 800d434:	d057      	beq.n	800d4e6 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d436:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d438:	2b03      	cmp	r3, #3
 800d43a:	d91c      	bls.n	800d476 <HAL_SPI_TransmitReceive+0x3ee>
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d440:	2b40      	cmp	r3, #64	; 0x40
 800d442:	d918      	bls.n	800d476 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	6812      	ldr	r2, [r2, #0]
 800d44e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d454:	1d1a      	adds	r2, r3, #4
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d460:	b29b      	uxth	r3, r3
 800d462:	3b04      	subs	r3, #4
 800d464:	b29a      	uxth	r2, r3
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d472:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d474:	e037      	b.n	800d4e6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d476:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d91b      	bls.n	800d4b4 <HAL_SPI_TransmitReceive+0x42c>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d017      	beq.n	800d4b4 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d488:	881a      	ldrh	r2, [r3, #0]
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d492:	1c9a      	adds	r2, r3, #2
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	3b02      	subs	r3, #2
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d4b2:	e018      	b.n	800d4e6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	3320      	adds	r3, #32
 800d4be:	7812      	ldrb	r2, [r2, #0]
 800d4c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	695b      	ldr	r3, [r3, #20]
 800d4ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d05e      	beq.n	800d5b2 <HAL_SPI_TransmitReceive+0x52a>
 800d4f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d05b      	beq.n	800d5b2 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	695b      	ldr	r3, [r3, #20]
 800d500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d504:	2b00      	cmp	r3, #0
 800d506:	d018      	beq.n	800d53a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d510:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d512:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d518:	1d1a      	adds	r2, r3, #4
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d524:	b29b      	uxth	r3, r3
 800d526:	3b04      	subs	r3, #4
 800d528:	b29a      	uxth	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d536:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d538:	e03b      	b.n	800d5b2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	695b      	ldr	r3, [r3, #20]
 800d540:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d548:	d918      	bls.n	800d57c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d54e:	6a3a      	ldr	r2, [r7, #32]
 800d550:	8812      	ldrh	r2, [r2, #0]
 800d552:	b292      	uxth	r2, r2
 800d554:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d55a:	1c9a      	adds	r2, r3, #2
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d566:	b29b      	uxth	r3, r3
 800d568:	3b02      	subs	r3, #2
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d578:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d57a:	e01a      	b.n	800d5b2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d588:	7812      	ldrb	r2, [r2, #0]
 800d58a:	b2d2      	uxtb	r2, r2
 800d58c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d592:	1c5a      	adds	r2, r3, #1
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5b2:	f7f5 fd17 	bl	8002fe4 <HAL_GetTick>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	1ad3      	subs	r3, r2, r3
 800d5bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d803      	bhi.n	800d5ca <HAL_SPI_TransmitReceive+0x542>
 800d5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c8:	d102      	bne.n	800d5d0 <HAL_SPI_TransmitReceive+0x548>
 800d5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d114      	bne.n	800d5fa <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f000 f845 	bl	800d660 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e02e      	b.n	800d658 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d5fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f47f af10 	bne.w	800d422 <HAL_SPI_TransmitReceive+0x39a>
 800d602:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d604:	2b00      	cmp	r3, #0
 800d606:	f47f af0c 	bne.w	800d422 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	2200      	movs	r2, #0
 800d612:	2108      	movs	r1, #8
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f000 f8c3 	bl	800d7a0 <SPI_WaitOnFlagUntilTimeout>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d007      	beq.n	800d630 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d626:	f043 0220 	orr.w	r2, r3, #32
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f000 f815 	bl	800d660 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2201      	movs	r2, #1
 800d642:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e001      	b.n	800d658 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800d654:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3730      	adds	r7, #48	; 0x30
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	699a      	ldr	r2, [r3, #24]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f042 0208 	orr.w	r2, r2, #8
 800d67e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	699a      	ldr	r2, [r3, #24]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f042 0210 	orr.w	r2, r2, #16
 800d68e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f022 0201 	bic.w	r2, r2, #1
 800d69e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6919      	ldr	r1, [r3, #16]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	4b3c      	ldr	r3, [pc, #240]	; (800d79c <SPI_CloseTransfer+0x13c>)
 800d6ac:	400b      	ands	r3, r1
 800d6ae:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	689a      	ldr	r2, [r3, #8]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d6be:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	2b04      	cmp	r3, #4
 800d6ca:	d014      	beq.n	800d6f6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f003 0320 	and.w	r3, r3, #32
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00f      	beq.n	800d6f6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	699a      	ldr	r2, [r3, #24]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f042 0220 	orr.w	r2, r2, #32
 800d6f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b03      	cmp	r3, #3
 800d700:	d014      	beq.n	800d72c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00f      	beq.n	800d72c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d712:	f043 0204 	orr.w	r2, r3, #4
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	699a      	ldr	r2, [r3, #24]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d72a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00f      	beq.n	800d756 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d73c:	f043 0201 	orr.w	r2, r3, #1
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	699a      	ldr	r2, [r3, #24]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d754:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00f      	beq.n	800d780 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d766:	f043 0208 	orr.w	r2, r3, #8
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	699a      	ldr	r2, [r3, #24]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d77e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d790:	bf00      	nop
 800d792:	3714      	adds	r7, #20
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr
 800d79c:	fffffc90 	.word	0xfffffc90

0800d7a0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	603b      	str	r3, [r7, #0]
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d7b0:	e010      	b.n	800d7d4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7b2:	f7f5 fc17 	bl	8002fe4 <HAL_GetTick>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	69ba      	ldr	r2, [r7, #24]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d803      	bhi.n	800d7ca <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c8:	d102      	bne.n	800d7d0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d101      	bne.n	800d7d4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d7d0:	2303      	movs	r3, #3
 800d7d2:	e00f      	b.n	800d7f4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	695a      	ldr	r2, [r3, #20]
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	4013      	ands	r3, r2
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	bf0c      	ite	eq
 800d7e4:	2301      	moveq	r3, #1
 800d7e6:	2300      	movne	r3, #0
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	79fb      	ldrb	r3, [r7, #7]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d0df      	beq.n	800d7b2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d808:	095b      	lsrs	r3, r3, #5
 800d80a:	3301      	adds	r3, #1
 800d80c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	3301      	adds	r3, #1
 800d814:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	3307      	adds	r3, #7
 800d81a:	08db      	lsrs	r3, r3, #3
 800d81c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	68fa      	ldr	r2, [r7, #12]
 800d822:	fb02 f303 	mul.w	r3, r2, r3
}
 800d826:	4618      	mov	r0, r3
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b082      	sub	sp, #8
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d101      	bne.n	800d844 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	e049      	b.n	800d8d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d106      	bne.n	800d85e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7f5 f883 	bl	8002964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2202      	movs	r2, #2
 800d862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	3304      	adds	r3, #4
 800d86e:	4619      	mov	r1, r3
 800d870:	4610      	mov	r0, r2
 800d872:	f000 fee3 	bl	800e63c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2201      	movs	r2, #1
 800d87a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2201      	movs	r2, #1
 800d882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2201      	movs	r2, #1
 800d892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2201      	movs	r2, #1
 800d89a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d001      	beq.n	800d8f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e056      	b.n	800d9a6 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a2b      	ldr	r2, [pc, #172]	; (800d9b4 <HAL_TIM_Base_Start+0xd4>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d02c      	beq.n	800d964 <HAL_TIM_Base_Start+0x84>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d912:	d027      	beq.n	800d964 <HAL_TIM_Base_Start+0x84>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a27      	ldr	r2, [pc, #156]	; (800d9b8 <HAL_TIM_Base_Start+0xd8>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d022      	beq.n	800d964 <HAL_TIM_Base_Start+0x84>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a26      	ldr	r2, [pc, #152]	; (800d9bc <HAL_TIM_Base_Start+0xdc>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d01d      	beq.n	800d964 <HAL_TIM_Base_Start+0x84>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a24      	ldr	r2, [pc, #144]	; (800d9c0 <HAL_TIM_Base_Start+0xe0>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d018      	beq.n	800d964 <HAL_TIM_Base_Start+0x84>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a23      	ldr	r2, [pc, #140]	; (800d9c4 <HAL_TIM_Base_Start+0xe4>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d013      	beq.n	800d964 <HAL_TIM_Base_Start+0x84>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a21      	ldr	r2, [pc, #132]	; (800d9c8 <HAL_TIM_Base_Start+0xe8>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d00e      	beq.n	800d964 <HAL_TIM_Base_Start+0x84>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a20      	ldr	r2, [pc, #128]	; (800d9cc <HAL_TIM_Base_Start+0xec>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d009      	beq.n	800d964 <HAL_TIM_Base_Start+0x84>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a1e      	ldr	r2, [pc, #120]	; (800d9d0 <HAL_TIM_Base_Start+0xf0>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d004      	beq.n	800d964 <HAL_TIM_Base_Start+0x84>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a1d      	ldr	r2, [pc, #116]	; (800d9d4 <HAL_TIM_Base_Start+0xf4>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d115      	bne.n	800d990 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	689a      	ldr	r2, [r3, #8]
 800d96a:	4b1b      	ldr	r3, [pc, #108]	; (800d9d8 <HAL_TIM_Base_Start+0xf8>)
 800d96c:	4013      	ands	r3, r2
 800d96e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2b06      	cmp	r3, #6
 800d974:	d015      	beq.n	800d9a2 <HAL_TIM_Base_Start+0xc2>
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d97c:	d011      	beq.n	800d9a2 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f042 0201 	orr.w	r2, r2, #1
 800d98c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d98e:	e008      	b.n	800d9a2 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f042 0201 	orr.w	r2, r2, #1
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	e000      	b.n	800d9a4 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3714      	adds	r7, #20
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	40010000 	.word	0x40010000
 800d9b8:	40000400 	.word	0x40000400
 800d9bc:	40000800 	.word	0x40000800
 800d9c0:	40000c00 	.word	0x40000c00
 800d9c4:	40010400 	.word	0x40010400
 800d9c8:	40001800 	.word	0x40001800
 800d9cc:	40014000 	.word	0x40014000
 800d9d0:	4000e000 	.word	0x4000e000
 800d9d4:	4000e400 	.word	0x4000e400
 800d9d8:	00010007 	.word	0x00010007

0800d9dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d001      	beq.n	800d9f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e05e      	b.n	800dab2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2202      	movs	r2, #2
 800d9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	68da      	ldr	r2, [r3, #12]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f042 0201 	orr.w	r2, r2, #1
 800da0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a2b      	ldr	r2, [pc, #172]	; (800dac0 <HAL_TIM_Base_Start_IT+0xe4>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d02c      	beq.n	800da70 <HAL_TIM_Base_Start_IT+0x94>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da1e:	d027      	beq.n	800da70 <HAL_TIM_Base_Start_IT+0x94>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a27      	ldr	r2, [pc, #156]	; (800dac4 <HAL_TIM_Base_Start_IT+0xe8>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d022      	beq.n	800da70 <HAL_TIM_Base_Start_IT+0x94>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a26      	ldr	r2, [pc, #152]	; (800dac8 <HAL_TIM_Base_Start_IT+0xec>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d01d      	beq.n	800da70 <HAL_TIM_Base_Start_IT+0x94>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a24      	ldr	r2, [pc, #144]	; (800dacc <HAL_TIM_Base_Start_IT+0xf0>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d018      	beq.n	800da70 <HAL_TIM_Base_Start_IT+0x94>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a23      	ldr	r2, [pc, #140]	; (800dad0 <HAL_TIM_Base_Start_IT+0xf4>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d013      	beq.n	800da70 <HAL_TIM_Base_Start_IT+0x94>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a21      	ldr	r2, [pc, #132]	; (800dad4 <HAL_TIM_Base_Start_IT+0xf8>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d00e      	beq.n	800da70 <HAL_TIM_Base_Start_IT+0x94>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a20      	ldr	r2, [pc, #128]	; (800dad8 <HAL_TIM_Base_Start_IT+0xfc>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d009      	beq.n	800da70 <HAL_TIM_Base_Start_IT+0x94>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a1e      	ldr	r2, [pc, #120]	; (800dadc <HAL_TIM_Base_Start_IT+0x100>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d004      	beq.n	800da70 <HAL_TIM_Base_Start_IT+0x94>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a1d      	ldr	r2, [pc, #116]	; (800dae0 <HAL_TIM_Base_Start_IT+0x104>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d115      	bne.n	800da9c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	689a      	ldr	r2, [r3, #8]
 800da76:	4b1b      	ldr	r3, [pc, #108]	; (800dae4 <HAL_TIM_Base_Start_IT+0x108>)
 800da78:	4013      	ands	r3, r2
 800da7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2b06      	cmp	r3, #6
 800da80:	d015      	beq.n	800daae <HAL_TIM_Base_Start_IT+0xd2>
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da88:	d011      	beq.n	800daae <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f042 0201 	orr.w	r2, r2, #1
 800da98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da9a:	e008      	b.n	800daae <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f042 0201 	orr.w	r2, r2, #1
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	e000      	b.n	800dab0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3714      	adds	r7, #20
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	40010000 	.word	0x40010000
 800dac4:	40000400 	.word	0x40000400
 800dac8:	40000800 	.word	0x40000800
 800dacc:	40000c00 	.word	0x40000c00
 800dad0:	40010400 	.word	0x40010400
 800dad4:	40001800 	.word	0x40001800
 800dad8:	40014000 	.word	0x40014000
 800dadc:	4000e000 	.word	0x4000e000
 800dae0:	4000e400 	.word	0x4000e400
 800dae4:	00010007 	.word	0x00010007

0800dae8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d101      	bne.n	800dafa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800daf6:	2301      	movs	r3, #1
 800daf8:	e049      	b.n	800db8e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db00:	b2db      	uxtb	r3, r3
 800db02:	2b00      	cmp	r3, #0
 800db04:	d106      	bne.n	800db14 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 f841 	bl	800db96 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2202      	movs	r2, #2
 800db18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	3304      	adds	r3, #4
 800db24:	4619      	mov	r1, r3
 800db26:	4610      	mov	r0, r2
 800db28:	f000 fd88 	bl	800e63c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2201      	movs	r2, #1
 800db50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800db96:	b480      	push	{r7}
 800db98:	b083      	sub	sp, #12
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800db9e:	bf00      	nop
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr

0800dbaa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d101      	bne.n	800dbbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e049      	b.n	800dc50 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d106      	bne.n	800dbd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 f841 	bl	800dc58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2202      	movs	r2, #2
 800dbda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	4610      	mov	r0, r2
 800dbea:	f000 fd27 	bl	800e63c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2201      	movs	r2, #1
 800dc12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2201      	movs	r2, #1
 800dc22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2201      	movs	r2, #1
 800dc32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2201      	movs	r2, #1
 800dc42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dc60:	bf00      	nop
 800dc62:	370c      	adds	r7, #12
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d109      	bne.n	800dc90 <HAL_TIM_PWM_Start+0x24>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	bf14      	ite	ne
 800dc88:	2301      	movne	r3, #1
 800dc8a:	2300      	moveq	r3, #0
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	e03c      	b.n	800dd0a <HAL_TIM_PWM_Start+0x9e>
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	2b04      	cmp	r3, #4
 800dc94:	d109      	bne.n	800dcaa <HAL_TIM_PWM_Start+0x3e>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	bf14      	ite	ne
 800dca2:	2301      	movne	r3, #1
 800dca4:	2300      	moveq	r3, #0
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	e02f      	b.n	800dd0a <HAL_TIM_PWM_Start+0x9e>
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	2b08      	cmp	r3, #8
 800dcae:	d109      	bne.n	800dcc4 <HAL_TIM_PWM_Start+0x58>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	bf14      	ite	ne
 800dcbc:	2301      	movne	r3, #1
 800dcbe:	2300      	moveq	r3, #0
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	e022      	b.n	800dd0a <HAL_TIM_PWM_Start+0x9e>
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	2b0c      	cmp	r3, #12
 800dcc8:	d109      	bne.n	800dcde <HAL_TIM_PWM_Start+0x72>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	bf14      	ite	ne
 800dcd6:	2301      	movne	r3, #1
 800dcd8:	2300      	moveq	r3, #0
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	e015      	b.n	800dd0a <HAL_TIM_PWM_Start+0x9e>
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	2b10      	cmp	r3, #16
 800dce2:	d109      	bne.n	800dcf8 <HAL_TIM_PWM_Start+0x8c>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	bf14      	ite	ne
 800dcf0:	2301      	movne	r3, #1
 800dcf2:	2300      	moveq	r3, #0
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	e008      	b.n	800dd0a <HAL_TIM_PWM_Start+0x9e>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	bf14      	ite	ne
 800dd04:	2301      	movne	r3, #1
 800dd06:	2300      	moveq	r3, #0
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d001      	beq.n	800dd12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e0ab      	b.n	800de6a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d104      	bne.n	800dd22 <HAL_TIM_PWM_Start+0xb6>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2202      	movs	r2, #2
 800dd1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd20:	e023      	b.n	800dd6a <HAL_TIM_PWM_Start+0xfe>
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	2b04      	cmp	r3, #4
 800dd26:	d104      	bne.n	800dd32 <HAL_TIM_PWM_Start+0xc6>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd30:	e01b      	b.n	800dd6a <HAL_TIM_PWM_Start+0xfe>
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	2b08      	cmp	r3, #8
 800dd36:	d104      	bne.n	800dd42 <HAL_TIM_PWM_Start+0xd6>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2202      	movs	r2, #2
 800dd3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd40:	e013      	b.n	800dd6a <HAL_TIM_PWM_Start+0xfe>
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	2b0c      	cmp	r3, #12
 800dd46:	d104      	bne.n	800dd52 <HAL_TIM_PWM_Start+0xe6>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2202      	movs	r2, #2
 800dd4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd50:	e00b      	b.n	800dd6a <HAL_TIM_PWM_Start+0xfe>
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	2b10      	cmp	r3, #16
 800dd56:	d104      	bne.n	800dd62 <HAL_TIM_PWM_Start+0xf6>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2202      	movs	r2, #2
 800dd5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd60:	e003      	b.n	800dd6a <HAL_TIM_PWM_Start+0xfe>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2202      	movs	r2, #2
 800dd66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	6839      	ldr	r1, [r7, #0]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f001 f874 	bl	800ee60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a3d      	ldr	r2, [pc, #244]	; (800de74 <HAL_TIM_PWM_Start+0x208>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d013      	beq.n	800ddaa <HAL_TIM_PWM_Start+0x13e>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a3c      	ldr	r2, [pc, #240]	; (800de78 <HAL_TIM_PWM_Start+0x20c>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d00e      	beq.n	800ddaa <HAL_TIM_PWM_Start+0x13e>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a3a      	ldr	r2, [pc, #232]	; (800de7c <HAL_TIM_PWM_Start+0x210>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d009      	beq.n	800ddaa <HAL_TIM_PWM_Start+0x13e>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a39      	ldr	r2, [pc, #228]	; (800de80 <HAL_TIM_PWM_Start+0x214>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d004      	beq.n	800ddaa <HAL_TIM_PWM_Start+0x13e>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a37      	ldr	r2, [pc, #220]	; (800de84 <HAL_TIM_PWM_Start+0x218>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d101      	bne.n	800ddae <HAL_TIM_PWM_Start+0x142>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e000      	b.n	800ddb0 <HAL_TIM_PWM_Start+0x144>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d007      	beq.n	800ddc4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ddc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4a2a      	ldr	r2, [pc, #168]	; (800de74 <HAL_TIM_PWM_Start+0x208>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d02c      	beq.n	800de28 <HAL_TIM_PWM_Start+0x1bc>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddd6:	d027      	beq.n	800de28 <HAL_TIM_PWM_Start+0x1bc>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a2a      	ldr	r2, [pc, #168]	; (800de88 <HAL_TIM_PWM_Start+0x21c>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d022      	beq.n	800de28 <HAL_TIM_PWM_Start+0x1bc>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a29      	ldr	r2, [pc, #164]	; (800de8c <HAL_TIM_PWM_Start+0x220>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d01d      	beq.n	800de28 <HAL_TIM_PWM_Start+0x1bc>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a27      	ldr	r2, [pc, #156]	; (800de90 <HAL_TIM_PWM_Start+0x224>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d018      	beq.n	800de28 <HAL_TIM_PWM_Start+0x1bc>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a1f      	ldr	r2, [pc, #124]	; (800de78 <HAL_TIM_PWM_Start+0x20c>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d013      	beq.n	800de28 <HAL_TIM_PWM_Start+0x1bc>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a23      	ldr	r2, [pc, #140]	; (800de94 <HAL_TIM_PWM_Start+0x228>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d00e      	beq.n	800de28 <HAL_TIM_PWM_Start+0x1bc>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a1b      	ldr	r2, [pc, #108]	; (800de7c <HAL_TIM_PWM_Start+0x210>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d009      	beq.n	800de28 <HAL_TIM_PWM_Start+0x1bc>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4a1f      	ldr	r2, [pc, #124]	; (800de98 <HAL_TIM_PWM_Start+0x22c>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d004      	beq.n	800de28 <HAL_TIM_PWM_Start+0x1bc>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4a1e      	ldr	r2, [pc, #120]	; (800de9c <HAL_TIM_PWM_Start+0x230>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d115      	bne.n	800de54 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689a      	ldr	r2, [r3, #8]
 800de2e:	4b1c      	ldr	r3, [pc, #112]	; (800dea0 <HAL_TIM_PWM_Start+0x234>)
 800de30:	4013      	ands	r3, r2
 800de32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b06      	cmp	r3, #6
 800de38:	d015      	beq.n	800de66 <HAL_TIM_PWM_Start+0x1fa>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de40:	d011      	beq.n	800de66 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f042 0201 	orr.w	r2, r2, #1
 800de50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de52:	e008      	b.n	800de66 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f042 0201 	orr.w	r2, r2, #1
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	e000      	b.n	800de68 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	40010000 	.word	0x40010000
 800de78:	40010400 	.word	0x40010400
 800de7c:	40014000 	.word	0x40014000
 800de80:	40014400 	.word	0x40014400
 800de84:	40014800 	.word	0x40014800
 800de88:	40000400 	.word	0x40000400
 800de8c:	40000800 	.word	0x40000800
 800de90:	40000c00 	.word	0x40000c00
 800de94:	40001800 	.word	0x40001800
 800de98:	4000e000 	.word	0x4000e000
 800de9c:	4000e400 	.word	0x4000e400
 800dea0:	00010007 	.word	0x00010007

0800dea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	691b      	ldr	r3, [r3, #16]
 800deb2:	f003 0302 	and.w	r3, r3, #2
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	d122      	bne.n	800df00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	f003 0302 	and.w	r3, r3, #2
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d11b      	bne.n	800df00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f06f 0202 	mvn.w	r2, #2
 800ded0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2201      	movs	r2, #1
 800ded6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	699b      	ldr	r3, [r3, #24]
 800dede:	f003 0303 	and.w	r3, r3, #3
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d003      	beq.n	800deee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f000 fb8a 	bl	800e600 <HAL_TIM_IC_CaptureCallback>
 800deec:	e005      	b.n	800defa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 fb7c 	bl	800e5ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fb8d 	bl	800e614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	691b      	ldr	r3, [r3, #16]
 800df06:	f003 0304 	and.w	r3, r3, #4
 800df0a:	2b04      	cmp	r3, #4
 800df0c:	d122      	bne.n	800df54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	f003 0304 	and.w	r3, r3, #4
 800df18:	2b04      	cmp	r3, #4
 800df1a:	d11b      	bne.n	800df54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f06f 0204 	mvn.w	r2, #4
 800df24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2202      	movs	r2, #2
 800df2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	699b      	ldr	r3, [r3, #24]
 800df32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df36:	2b00      	cmp	r3, #0
 800df38:	d003      	beq.n	800df42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 fb60 	bl	800e600 <HAL_TIM_IC_CaptureCallback>
 800df40:	e005      	b.n	800df4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fb52 	bl	800e5ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 fb63 	bl	800e614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	691b      	ldr	r3, [r3, #16]
 800df5a:	f003 0308 	and.w	r3, r3, #8
 800df5e:	2b08      	cmp	r3, #8
 800df60:	d122      	bne.n	800dfa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	f003 0308 	and.w	r3, r3, #8
 800df6c:	2b08      	cmp	r3, #8
 800df6e:	d11b      	bne.n	800dfa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f06f 0208 	mvn.w	r2, #8
 800df78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2204      	movs	r2, #4
 800df7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	69db      	ldr	r3, [r3, #28]
 800df86:	f003 0303 	and.w	r3, r3, #3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d003      	beq.n	800df96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 fb36 	bl	800e600 <HAL_TIM_IC_CaptureCallback>
 800df94:	e005      	b.n	800dfa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 fb28 	bl	800e5ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 fb39 	bl	800e614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	f003 0310 	and.w	r3, r3, #16
 800dfb2:	2b10      	cmp	r3, #16
 800dfb4:	d122      	bne.n	800dffc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	f003 0310 	and.w	r3, r3, #16
 800dfc0:	2b10      	cmp	r3, #16
 800dfc2:	d11b      	bne.n	800dffc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f06f 0210 	mvn.w	r2, #16
 800dfcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2208      	movs	r2, #8
 800dfd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	69db      	ldr	r3, [r3, #28]
 800dfda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d003      	beq.n	800dfea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fb0c 	bl	800e600 <HAL_TIM_IC_CaptureCallback>
 800dfe8:	e005      	b.n	800dff6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 fafe 	bl	800e5ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 fb0f 	bl	800e614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	691b      	ldr	r3, [r3, #16]
 800e002:	f003 0301 	and.w	r3, r3, #1
 800e006:	2b01      	cmp	r3, #1
 800e008:	d10e      	bne.n	800e028 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	f003 0301 	and.w	r3, r3, #1
 800e014:	2b01      	cmp	r3, #1
 800e016:	d107      	bne.n	800e028 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f06f 0201 	mvn.w	r2, #1
 800e020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 fad8 	bl	800e5d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	691b      	ldr	r3, [r3, #16]
 800e02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e032:	2b80      	cmp	r3, #128	; 0x80
 800e034:	d10e      	bne.n	800e054 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e040:	2b80      	cmp	r3, #128	; 0x80
 800e042:	d107      	bne.n	800e054 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e04c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f001 f850 	bl	800f0f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	691b      	ldr	r3, [r3, #16]
 800e05a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e05e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e062:	d10e      	bne.n	800e082 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e06e:	2b80      	cmp	r3, #128	; 0x80
 800e070:	d107      	bne.n	800e082 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e07a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f001 f843 	bl	800f108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	691b      	ldr	r3, [r3, #16]
 800e088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e08c:	2b40      	cmp	r3, #64	; 0x40
 800e08e:	d10e      	bne.n	800e0ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e09a:	2b40      	cmp	r3, #64	; 0x40
 800e09c:	d107      	bne.n	800e0ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fabd 	bl	800e628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	f003 0320 	and.w	r3, r3, #32
 800e0b8:	2b20      	cmp	r3, #32
 800e0ba:	d10e      	bne.n	800e0da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	f003 0320 	and.w	r3, r3, #32
 800e0c6:	2b20      	cmp	r3, #32
 800e0c8:	d107      	bne.n	800e0da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f06f 0220 	mvn.w	r2, #32
 800e0d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f001 f803 	bl	800f0e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0da:	bf00      	nop
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
	...

0800e0e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d101      	bne.n	800e0fe <HAL_TIM_OC_ConfigChannel+0x1a>
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	e064      	b.n	800e1c8 <HAL_TIM_OC_ConfigChannel+0xe4>
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2b14      	cmp	r3, #20
 800e10a:	d857      	bhi.n	800e1bc <HAL_TIM_OC_ConfigChannel+0xd8>
 800e10c:	a201      	add	r2, pc, #4	; (adr r2, 800e114 <HAL_TIM_OC_ConfigChannel+0x30>)
 800e10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e112:	bf00      	nop
 800e114:	0800e169 	.word	0x0800e169
 800e118:	0800e1bd 	.word	0x0800e1bd
 800e11c:	0800e1bd 	.word	0x0800e1bd
 800e120:	0800e1bd 	.word	0x0800e1bd
 800e124:	0800e177 	.word	0x0800e177
 800e128:	0800e1bd 	.word	0x0800e1bd
 800e12c:	0800e1bd 	.word	0x0800e1bd
 800e130:	0800e1bd 	.word	0x0800e1bd
 800e134:	0800e185 	.word	0x0800e185
 800e138:	0800e1bd 	.word	0x0800e1bd
 800e13c:	0800e1bd 	.word	0x0800e1bd
 800e140:	0800e1bd 	.word	0x0800e1bd
 800e144:	0800e193 	.word	0x0800e193
 800e148:	0800e1bd 	.word	0x0800e1bd
 800e14c:	0800e1bd 	.word	0x0800e1bd
 800e150:	0800e1bd 	.word	0x0800e1bd
 800e154:	0800e1a1 	.word	0x0800e1a1
 800e158:	0800e1bd 	.word	0x0800e1bd
 800e15c:	0800e1bd 	.word	0x0800e1bd
 800e160:	0800e1bd 	.word	0x0800e1bd
 800e164:	0800e1af 	.word	0x0800e1af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	68b9      	ldr	r1, [r7, #8]
 800e16e:	4618      	mov	r0, r3
 800e170:	f000 fb0a 	bl	800e788 <TIM_OC1_SetConfig>
      break;
 800e174:	e023      	b.n	800e1be <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	68b9      	ldr	r1, [r7, #8]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f000 fb93 	bl	800e8a8 <TIM_OC2_SetConfig>
      break;
 800e182:	e01c      	b.n	800e1be <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	68b9      	ldr	r1, [r7, #8]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f000 fc16 	bl	800e9bc <TIM_OC3_SetConfig>
      break;
 800e190:	e015      	b.n	800e1be <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	68b9      	ldr	r1, [r7, #8]
 800e198:	4618      	mov	r0, r3
 800e19a:	f000 fc95 	bl	800eac8 <TIM_OC4_SetConfig>
      break;
 800e19e:	e00e      	b.n	800e1be <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	68b9      	ldr	r1, [r7, #8]
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f000 fcf6 	bl	800eb98 <TIM_OC5_SetConfig>
      break;
 800e1ac:	e007      	b.n	800e1be <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	68b9      	ldr	r1, [r7, #8]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f000 fd51 	bl	800ec5c <TIM_OC6_SetConfig>
      break;
 800e1ba:	e000      	b.n	800e1be <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800e1bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d101      	bne.n	800e1ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e1e6:	2302      	movs	r3, #2
 800e1e8:	e0fd      	b.n	800e3e6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b14      	cmp	r3, #20
 800e1f6:	f200 80f0 	bhi.w	800e3da <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e1fa:	a201      	add	r2, pc, #4	; (adr r2, 800e200 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e200:	0800e255 	.word	0x0800e255
 800e204:	0800e3db 	.word	0x0800e3db
 800e208:	0800e3db 	.word	0x0800e3db
 800e20c:	0800e3db 	.word	0x0800e3db
 800e210:	0800e295 	.word	0x0800e295
 800e214:	0800e3db 	.word	0x0800e3db
 800e218:	0800e3db 	.word	0x0800e3db
 800e21c:	0800e3db 	.word	0x0800e3db
 800e220:	0800e2d7 	.word	0x0800e2d7
 800e224:	0800e3db 	.word	0x0800e3db
 800e228:	0800e3db 	.word	0x0800e3db
 800e22c:	0800e3db 	.word	0x0800e3db
 800e230:	0800e317 	.word	0x0800e317
 800e234:	0800e3db 	.word	0x0800e3db
 800e238:	0800e3db 	.word	0x0800e3db
 800e23c:	0800e3db 	.word	0x0800e3db
 800e240:	0800e359 	.word	0x0800e359
 800e244:	0800e3db 	.word	0x0800e3db
 800e248:	0800e3db 	.word	0x0800e3db
 800e24c:	0800e3db 	.word	0x0800e3db
 800e250:	0800e399 	.word	0x0800e399
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68b9      	ldr	r1, [r7, #8]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f000 fa94 	bl	800e788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	699a      	ldr	r2, [r3, #24]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f042 0208 	orr.w	r2, r2, #8
 800e26e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	699a      	ldr	r2, [r3, #24]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f022 0204 	bic.w	r2, r2, #4
 800e27e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	6999      	ldr	r1, [r3, #24]
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	691a      	ldr	r2, [r3, #16]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	430a      	orrs	r2, r1
 800e290:	619a      	str	r2, [r3, #24]
      break;
 800e292:	e0a3      	b.n	800e3dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	68b9      	ldr	r1, [r7, #8]
 800e29a:	4618      	mov	r0, r3
 800e29c:	f000 fb04 	bl	800e8a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	699a      	ldr	r2, [r3, #24]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	699a      	ldr	r2, [r3, #24]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6999      	ldr	r1, [r3, #24]
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	691b      	ldr	r3, [r3, #16]
 800e2ca:	021a      	lsls	r2, r3, #8
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	430a      	orrs	r2, r1
 800e2d2:	619a      	str	r2, [r3, #24]
      break;
 800e2d4:	e082      	b.n	800e3dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	68b9      	ldr	r1, [r7, #8]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f000 fb6d 	bl	800e9bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	69da      	ldr	r2, [r3, #28]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f042 0208 	orr.w	r2, r2, #8
 800e2f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	69da      	ldr	r2, [r3, #28]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f022 0204 	bic.w	r2, r2, #4
 800e300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	69d9      	ldr	r1, [r3, #28]
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	691a      	ldr	r2, [r3, #16]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	430a      	orrs	r2, r1
 800e312:	61da      	str	r2, [r3, #28]
      break;
 800e314:	e062      	b.n	800e3dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	68b9      	ldr	r1, [r7, #8]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f000 fbd3 	bl	800eac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	69da      	ldr	r2, [r3, #28]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	69da      	ldr	r2, [r3, #28]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	69d9      	ldr	r1, [r3, #28]
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	021a      	lsls	r2, r3, #8
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	430a      	orrs	r2, r1
 800e354:	61da      	str	r2, [r3, #28]
      break;
 800e356:	e041      	b.n	800e3dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	68b9      	ldr	r1, [r7, #8]
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 fc1a 	bl	800eb98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f042 0208 	orr.w	r2, r2, #8
 800e372:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f022 0204 	bic.w	r2, r2, #4
 800e382:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	691a      	ldr	r2, [r3, #16]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	430a      	orrs	r2, r1
 800e394:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e396:	e021      	b.n	800e3dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	68b9      	ldr	r1, [r7, #8]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f000 fc5c 	bl	800ec5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e3b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	691b      	ldr	r3, [r3, #16]
 800e3ce:	021a      	lsls	r2, r3, #8
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	430a      	orrs	r2, r1
 800e3d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e3d8:	e000      	b.n	800e3dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800e3da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop

0800e3f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e400:	2b01      	cmp	r3, #1
 800e402:	d101      	bne.n	800e408 <HAL_TIM_ConfigClockSource+0x18>
 800e404:	2302      	movs	r3, #2
 800e406:	e0db      	b.n	800e5c0 <HAL_TIM_ConfigClockSource+0x1d0>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2202      	movs	r2, #2
 800e414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	4b69      	ldr	r3, [pc, #420]	; (800e5c8 <HAL_TIM_ConfigClockSource+0x1d8>)
 800e424:	4013      	ands	r3, r2
 800e426:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e42e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a63      	ldr	r2, [pc, #396]	; (800e5cc <HAL_TIM_ConfigClockSource+0x1dc>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	f000 80a9 	beq.w	800e596 <HAL_TIM_ConfigClockSource+0x1a6>
 800e444:	4a61      	ldr	r2, [pc, #388]	; (800e5cc <HAL_TIM_ConfigClockSource+0x1dc>)
 800e446:	4293      	cmp	r3, r2
 800e448:	f200 80ae 	bhi.w	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e44c:	4a60      	ldr	r2, [pc, #384]	; (800e5d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	f000 80a1 	beq.w	800e596 <HAL_TIM_ConfigClockSource+0x1a6>
 800e454:	4a5e      	ldr	r2, [pc, #376]	; (800e5d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e456:	4293      	cmp	r3, r2
 800e458:	f200 80a6 	bhi.w	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e45c:	4a5d      	ldr	r2, [pc, #372]	; (800e5d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	f000 8099 	beq.w	800e596 <HAL_TIM_ConfigClockSource+0x1a6>
 800e464:	4a5b      	ldr	r2, [pc, #364]	; (800e5d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e466:	4293      	cmp	r3, r2
 800e468:	f200 809e 	bhi.w	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e46c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e470:	f000 8091 	beq.w	800e596 <HAL_TIM_ConfigClockSource+0x1a6>
 800e474:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e478:	f200 8096 	bhi.w	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e47c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e480:	f000 8089 	beq.w	800e596 <HAL_TIM_ConfigClockSource+0x1a6>
 800e484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e488:	f200 808e 	bhi.w	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e48c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e490:	d03e      	beq.n	800e510 <HAL_TIM_ConfigClockSource+0x120>
 800e492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e496:	f200 8087 	bhi.w	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e49e:	f000 8085 	beq.w	800e5ac <HAL_TIM_ConfigClockSource+0x1bc>
 800e4a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4a6:	d87f      	bhi.n	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e4a8:	2b70      	cmp	r3, #112	; 0x70
 800e4aa:	d01a      	beq.n	800e4e2 <HAL_TIM_ConfigClockSource+0xf2>
 800e4ac:	2b70      	cmp	r3, #112	; 0x70
 800e4ae:	d87b      	bhi.n	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e4b0:	2b60      	cmp	r3, #96	; 0x60
 800e4b2:	d050      	beq.n	800e556 <HAL_TIM_ConfigClockSource+0x166>
 800e4b4:	2b60      	cmp	r3, #96	; 0x60
 800e4b6:	d877      	bhi.n	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e4b8:	2b50      	cmp	r3, #80	; 0x50
 800e4ba:	d03c      	beq.n	800e536 <HAL_TIM_ConfigClockSource+0x146>
 800e4bc:	2b50      	cmp	r3, #80	; 0x50
 800e4be:	d873      	bhi.n	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e4c0:	2b40      	cmp	r3, #64	; 0x40
 800e4c2:	d058      	beq.n	800e576 <HAL_TIM_ConfigClockSource+0x186>
 800e4c4:	2b40      	cmp	r3, #64	; 0x40
 800e4c6:	d86f      	bhi.n	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e4c8:	2b30      	cmp	r3, #48	; 0x30
 800e4ca:	d064      	beq.n	800e596 <HAL_TIM_ConfigClockSource+0x1a6>
 800e4cc:	2b30      	cmp	r3, #48	; 0x30
 800e4ce:	d86b      	bhi.n	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e4d0:	2b20      	cmp	r3, #32
 800e4d2:	d060      	beq.n	800e596 <HAL_TIM_ConfigClockSource+0x1a6>
 800e4d4:	2b20      	cmp	r3, #32
 800e4d6:	d867      	bhi.n	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d05c      	beq.n	800e596 <HAL_TIM_ConfigClockSource+0x1a6>
 800e4dc:	2b10      	cmp	r3, #16
 800e4de:	d05a      	beq.n	800e596 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800e4e0:	e062      	b.n	800e5a8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6818      	ldr	r0, [r3, #0]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	6899      	ldr	r1, [r3, #8]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	685a      	ldr	r2, [r3, #4]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	f000 fc95 	bl	800ee20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	689b      	ldr	r3, [r3, #8]
 800e4fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e504:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	609a      	str	r2, [r3, #8]
      break;
 800e50e:	e04e      	b.n	800e5ae <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6818      	ldr	r0, [r3, #0]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	6899      	ldr	r1, [r3, #8]
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	685a      	ldr	r2, [r3, #4]
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	f000 fc7e 	bl	800ee20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	689a      	ldr	r2, [r3, #8]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e532:	609a      	str	r2, [r3, #8]
      break;
 800e534:	e03b      	b.n	800e5ae <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6818      	ldr	r0, [r3, #0]
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	6859      	ldr	r1, [r3, #4]
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	461a      	mov	r2, r3
 800e544:	f000 fbee 	bl	800ed24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2150      	movs	r1, #80	; 0x50
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 fc48 	bl	800ede4 <TIM_ITRx_SetConfig>
      break;
 800e554:	e02b      	b.n	800e5ae <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6818      	ldr	r0, [r3, #0]
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	6859      	ldr	r1, [r3, #4]
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	461a      	mov	r2, r3
 800e564:	f000 fc0d 	bl	800ed82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2160      	movs	r1, #96	; 0x60
 800e56e:	4618      	mov	r0, r3
 800e570:	f000 fc38 	bl	800ede4 <TIM_ITRx_SetConfig>
      break;
 800e574:	e01b      	b.n	800e5ae <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	6859      	ldr	r1, [r3, #4]
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	461a      	mov	r2, r3
 800e584:	f000 fbce 	bl	800ed24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2140      	movs	r1, #64	; 0x40
 800e58e:	4618      	mov	r0, r3
 800e590:	f000 fc28 	bl	800ede4 <TIM_ITRx_SetConfig>
      break;
 800e594:	e00b      	b.n	800e5ae <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	4610      	mov	r0, r2
 800e5a2:	f000 fc1f 	bl	800ede4 <TIM_ITRx_SetConfig>
        break;
 800e5a6:	e002      	b.n	800e5ae <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800e5a8:	bf00      	nop
 800e5aa:	e000      	b.n	800e5ae <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800e5ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	ffceff88 	.word	0xffceff88
 800e5cc:	00100040 	.word	0x00100040
 800e5d0:	00100030 	.word	0x00100030
 800e5d4:	00100020 	.word	0x00100020

0800e5d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e5f4:	bf00      	nop
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e608:	bf00      	nop
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e61c:	bf00      	nop
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e630:	bf00      	nop
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a44      	ldr	r2, [pc, #272]	; (800e760 <TIM_Base_SetConfig+0x124>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d013      	beq.n	800e67c <TIM_Base_SetConfig+0x40>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e65a:	d00f      	beq.n	800e67c <TIM_Base_SetConfig+0x40>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a41      	ldr	r2, [pc, #260]	; (800e764 <TIM_Base_SetConfig+0x128>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d00b      	beq.n	800e67c <TIM_Base_SetConfig+0x40>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	4a40      	ldr	r2, [pc, #256]	; (800e768 <TIM_Base_SetConfig+0x12c>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d007      	beq.n	800e67c <TIM_Base_SetConfig+0x40>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4a3f      	ldr	r2, [pc, #252]	; (800e76c <TIM_Base_SetConfig+0x130>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d003      	beq.n	800e67c <TIM_Base_SetConfig+0x40>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4a3e      	ldr	r2, [pc, #248]	; (800e770 <TIM_Base_SetConfig+0x134>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d108      	bne.n	800e68e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	4313      	orrs	r3, r2
 800e68c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4a33      	ldr	r2, [pc, #204]	; (800e760 <TIM_Base_SetConfig+0x124>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d027      	beq.n	800e6e6 <TIM_Base_SetConfig+0xaa>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e69c:	d023      	beq.n	800e6e6 <TIM_Base_SetConfig+0xaa>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4a30      	ldr	r2, [pc, #192]	; (800e764 <TIM_Base_SetConfig+0x128>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d01f      	beq.n	800e6e6 <TIM_Base_SetConfig+0xaa>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4a2f      	ldr	r2, [pc, #188]	; (800e768 <TIM_Base_SetConfig+0x12c>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d01b      	beq.n	800e6e6 <TIM_Base_SetConfig+0xaa>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4a2e      	ldr	r2, [pc, #184]	; (800e76c <TIM_Base_SetConfig+0x130>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d017      	beq.n	800e6e6 <TIM_Base_SetConfig+0xaa>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4a2d      	ldr	r2, [pc, #180]	; (800e770 <TIM_Base_SetConfig+0x134>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d013      	beq.n	800e6e6 <TIM_Base_SetConfig+0xaa>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4a2c      	ldr	r2, [pc, #176]	; (800e774 <TIM_Base_SetConfig+0x138>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d00f      	beq.n	800e6e6 <TIM_Base_SetConfig+0xaa>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4a2b      	ldr	r2, [pc, #172]	; (800e778 <TIM_Base_SetConfig+0x13c>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d00b      	beq.n	800e6e6 <TIM_Base_SetConfig+0xaa>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4a2a      	ldr	r2, [pc, #168]	; (800e77c <TIM_Base_SetConfig+0x140>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d007      	beq.n	800e6e6 <TIM_Base_SetConfig+0xaa>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4a29      	ldr	r2, [pc, #164]	; (800e780 <TIM_Base_SetConfig+0x144>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d003      	beq.n	800e6e6 <TIM_Base_SetConfig+0xaa>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4a28      	ldr	r2, [pc, #160]	; (800e784 <TIM_Base_SetConfig+0x148>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d108      	bne.n	800e6f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	4313      	orrs	r3, r2
 800e704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	689a      	ldr	r2, [r3, #8]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	4a10      	ldr	r2, [pc, #64]	; (800e760 <TIM_Base_SetConfig+0x124>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d00f      	beq.n	800e744 <TIM_Base_SetConfig+0x108>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	4a12      	ldr	r2, [pc, #72]	; (800e770 <TIM_Base_SetConfig+0x134>)
 800e728:	4293      	cmp	r3, r2
 800e72a:	d00b      	beq.n	800e744 <TIM_Base_SetConfig+0x108>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	4a11      	ldr	r2, [pc, #68]	; (800e774 <TIM_Base_SetConfig+0x138>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d007      	beq.n	800e744 <TIM_Base_SetConfig+0x108>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4a10      	ldr	r2, [pc, #64]	; (800e778 <TIM_Base_SetConfig+0x13c>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d003      	beq.n	800e744 <TIM_Base_SetConfig+0x108>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	4a0f      	ldr	r2, [pc, #60]	; (800e77c <TIM_Base_SetConfig+0x140>)
 800e740:	4293      	cmp	r3, r2
 800e742:	d103      	bne.n	800e74c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	691a      	ldr	r2, [r3, #16]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	615a      	str	r2, [r3, #20]
}
 800e752:	bf00      	nop
 800e754:	3714      	adds	r7, #20
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	40010000 	.word	0x40010000
 800e764:	40000400 	.word	0x40000400
 800e768:	40000800 	.word	0x40000800
 800e76c:	40000c00 	.word	0x40000c00
 800e770:	40010400 	.word	0x40010400
 800e774:	40014000 	.word	0x40014000
 800e778:	40014400 	.word	0x40014400
 800e77c:	40014800 	.word	0x40014800
 800e780:	4000e000 	.word	0x4000e000
 800e784:	4000e400 	.word	0x4000e400

0800e788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e788:	b480      	push	{r7}
 800e78a:	b087      	sub	sp, #28
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6a1b      	ldr	r3, [r3, #32]
 800e796:	f023 0201 	bic.w	r2, r3, #1
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6a1b      	ldr	r3, [r3, #32]
 800e7a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	699b      	ldr	r3, [r3, #24]
 800e7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	4b37      	ldr	r3, [pc, #220]	; (800e890 <TIM_OC1_SetConfig+0x108>)
 800e7b4:	4013      	ands	r3, r2
 800e7b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f023 0303 	bic.w	r3, r3, #3
 800e7be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	68fa      	ldr	r2, [r7, #12]
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	f023 0302 	bic.w	r3, r3, #2
 800e7d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	697a      	ldr	r2, [r7, #20]
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	4a2d      	ldr	r2, [pc, #180]	; (800e894 <TIM_OC1_SetConfig+0x10c>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d00f      	beq.n	800e804 <TIM_OC1_SetConfig+0x7c>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	4a2c      	ldr	r2, [pc, #176]	; (800e898 <TIM_OC1_SetConfig+0x110>)
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d00b      	beq.n	800e804 <TIM_OC1_SetConfig+0x7c>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	4a2b      	ldr	r2, [pc, #172]	; (800e89c <TIM_OC1_SetConfig+0x114>)
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d007      	beq.n	800e804 <TIM_OC1_SetConfig+0x7c>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	4a2a      	ldr	r2, [pc, #168]	; (800e8a0 <TIM_OC1_SetConfig+0x118>)
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d003      	beq.n	800e804 <TIM_OC1_SetConfig+0x7c>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	4a29      	ldr	r2, [pc, #164]	; (800e8a4 <TIM_OC1_SetConfig+0x11c>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d10c      	bne.n	800e81e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	f023 0308 	bic.w	r3, r3, #8
 800e80a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	4313      	orrs	r3, r2
 800e814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	f023 0304 	bic.w	r3, r3, #4
 800e81c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4a1c      	ldr	r2, [pc, #112]	; (800e894 <TIM_OC1_SetConfig+0x10c>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d00f      	beq.n	800e846 <TIM_OC1_SetConfig+0xbe>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4a1b      	ldr	r2, [pc, #108]	; (800e898 <TIM_OC1_SetConfig+0x110>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d00b      	beq.n	800e846 <TIM_OC1_SetConfig+0xbe>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4a1a      	ldr	r2, [pc, #104]	; (800e89c <TIM_OC1_SetConfig+0x114>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d007      	beq.n	800e846 <TIM_OC1_SetConfig+0xbe>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	4a19      	ldr	r2, [pc, #100]	; (800e8a0 <TIM_OC1_SetConfig+0x118>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d003      	beq.n	800e846 <TIM_OC1_SetConfig+0xbe>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4a18      	ldr	r2, [pc, #96]	; (800e8a4 <TIM_OC1_SetConfig+0x11c>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d111      	bne.n	800e86a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e84c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	695b      	ldr	r3, [r3, #20]
 800e85a:	693a      	ldr	r2, [r7, #16]
 800e85c:	4313      	orrs	r3, r2
 800e85e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	699b      	ldr	r3, [r3, #24]
 800e864:	693a      	ldr	r2, [r7, #16]
 800e866:	4313      	orrs	r3, r2
 800e868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	693a      	ldr	r2, [r7, #16]
 800e86e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	697a      	ldr	r2, [r7, #20]
 800e882:	621a      	str	r2, [r3, #32]
}
 800e884:	bf00      	nop
 800e886:	371c      	adds	r7, #28
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	fffeff8f 	.word	0xfffeff8f
 800e894:	40010000 	.word	0x40010000
 800e898:	40010400 	.word	0x40010400
 800e89c:	40014000 	.word	0x40014000
 800e8a0:	40014400 	.word	0x40014400
 800e8a4:	40014800 	.word	0x40014800

0800e8a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b087      	sub	sp, #28
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6a1b      	ldr	r3, [r3, #32]
 800e8b6:	f023 0210 	bic.w	r2, r3, #16
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a1b      	ldr	r3, [r3, #32]
 800e8c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	699b      	ldr	r3, [r3, #24]
 800e8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	4b34      	ldr	r3, [pc, #208]	; (800e9a4 <TIM_OC2_SetConfig+0xfc>)
 800e8d4:	4013      	ands	r3, r2
 800e8d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	021b      	lsls	r3, r3, #8
 800e8e6:	68fa      	ldr	r2, [r7, #12]
 800e8e8:	4313      	orrs	r3, r2
 800e8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	f023 0320 	bic.w	r3, r3, #32
 800e8f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	011b      	lsls	r3, r3, #4
 800e8fa:	697a      	ldr	r2, [r7, #20]
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4a29      	ldr	r2, [pc, #164]	; (800e9a8 <TIM_OC2_SetConfig+0x100>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d003      	beq.n	800e910 <TIM_OC2_SetConfig+0x68>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4a28      	ldr	r2, [pc, #160]	; (800e9ac <TIM_OC2_SetConfig+0x104>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d10d      	bne.n	800e92c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	011b      	lsls	r3, r3, #4
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	4313      	orrs	r3, r2
 800e922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e92a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4a1e      	ldr	r2, [pc, #120]	; (800e9a8 <TIM_OC2_SetConfig+0x100>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d00f      	beq.n	800e954 <TIM_OC2_SetConfig+0xac>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4a1d      	ldr	r2, [pc, #116]	; (800e9ac <TIM_OC2_SetConfig+0x104>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d00b      	beq.n	800e954 <TIM_OC2_SetConfig+0xac>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	4a1c      	ldr	r2, [pc, #112]	; (800e9b0 <TIM_OC2_SetConfig+0x108>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d007      	beq.n	800e954 <TIM_OC2_SetConfig+0xac>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4a1b      	ldr	r2, [pc, #108]	; (800e9b4 <TIM_OC2_SetConfig+0x10c>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d003      	beq.n	800e954 <TIM_OC2_SetConfig+0xac>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4a1a      	ldr	r2, [pc, #104]	; (800e9b8 <TIM_OC2_SetConfig+0x110>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d113      	bne.n	800e97c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e95a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	695b      	ldr	r3, [r3, #20]
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	693a      	ldr	r2, [r7, #16]
 800e96c:	4313      	orrs	r3, r2
 800e96e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	009b      	lsls	r3, r3, #2
 800e976:	693a      	ldr	r2, [r7, #16]
 800e978:	4313      	orrs	r3, r2
 800e97a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	693a      	ldr	r2, [r7, #16]
 800e980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	685a      	ldr	r2, [r3, #4]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	621a      	str	r2, [r3, #32]
}
 800e996:	bf00      	nop
 800e998:	371c      	adds	r7, #28
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	feff8fff 	.word	0xfeff8fff
 800e9a8:	40010000 	.word	0x40010000
 800e9ac:	40010400 	.word	0x40010400
 800e9b0:	40014000 	.word	0x40014000
 800e9b4:	40014400 	.word	0x40014400
 800e9b8:	40014800 	.word	0x40014800

0800e9bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b087      	sub	sp, #28
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6a1b      	ldr	r3, [r3, #32]
 800e9ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6a1b      	ldr	r3, [r3, #32]
 800e9d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	69db      	ldr	r3, [r3, #28]
 800e9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f023 0303 	bic.w	r3, r3, #3
 800e9f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	68fa      	ldr	r2, [r7, #12]
 800e9fa:	4313      	orrs	r3, r2
 800e9fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	689b      	ldr	r3, [r3, #8]
 800ea0a:	021b      	lsls	r3, r3, #8
 800ea0c:	697a      	ldr	r2, [r7, #20]
 800ea0e:	4313      	orrs	r3, r2
 800ea10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4a27      	ldr	r2, [pc, #156]	; (800eab4 <TIM_OC3_SetConfig+0xf8>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d003      	beq.n	800ea22 <TIM_OC3_SetConfig+0x66>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4a26      	ldr	r2, [pc, #152]	; (800eab8 <TIM_OC3_SetConfig+0xfc>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d10d      	bne.n	800ea3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	021b      	lsls	r3, r3, #8
 800ea30:	697a      	ldr	r2, [r7, #20]
 800ea32:	4313      	orrs	r3, r2
 800ea34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a1c      	ldr	r2, [pc, #112]	; (800eab4 <TIM_OC3_SetConfig+0xf8>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d00f      	beq.n	800ea66 <TIM_OC3_SetConfig+0xaa>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a1b      	ldr	r2, [pc, #108]	; (800eab8 <TIM_OC3_SetConfig+0xfc>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d00b      	beq.n	800ea66 <TIM_OC3_SetConfig+0xaa>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a1a      	ldr	r2, [pc, #104]	; (800eabc <TIM_OC3_SetConfig+0x100>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d007      	beq.n	800ea66 <TIM_OC3_SetConfig+0xaa>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a19      	ldr	r2, [pc, #100]	; (800eac0 <TIM_OC3_SetConfig+0x104>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d003      	beq.n	800ea66 <TIM_OC3_SetConfig+0xaa>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a18      	ldr	r2, [pc, #96]	; (800eac4 <TIM_OC3_SetConfig+0x108>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d113      	bne.n	800ea8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ea74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	695b      	ldr	r3, [r3, #20]
 800ea7a:	011b      	lsls	r3, r3, #4
 800ea7c:	693a      	ldr	r2, [r7, #16]
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	699b      	ldr	r3, [r3, #24]
 800ea86:	011b      	lsls	r3, r3, #4
 800ea88:	693a      	ldr	r2, [r7, #16]
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	693a      	ldr	r2, [r7, #16]
 800ea92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	685a      	ldr	r2, [r3, #4]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	697a      	ldr	r2, [r7, #20]
 800eaa6:	621a      	str	r2, [r3, #32]
}
 800eaa8:	bf00      	nop
 800eaaa:	371c      	adds	r7, #28
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr
 800eab4:	40010000 	.word	0x40010000
 800eab8:	40010400 	.word	0x40010400
 800eabc:	40014000 	.word	0x40014000
 800eac0:	40014400 	.word	0x40014400
 800eac4:	40014800 	.word	0x40014800

0800eac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b087      	sub	sp, #28
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a1b      	ldr	r3, [r3, #32]
 800ead6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6a1b      	ldr	r3, [r3, #32]
 800eae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	69db      	ldr	r3, [r3, #28]
 800eaee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eaf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eafe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	021b      	lsls	r3, r3, #8
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	4313      	orrs	r3, r2
 800eb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	031b      	lsls	r3, r3, #12
 800eb1a:	693a      	ldr	r2, [r7, #16]
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	4a18      	ldr	r2, [pc, #96]	; (800eb84 <TIM_OC4_SetConfig+0xbc>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d00f      	beq.n	800eb48 <TIM_OC4_SetConfig+0x80>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4a17      	ldr	r2, [pc, #92]	; (800eb88 <TIM_OC4_SetConfig+0xc0>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d00b      	beq.n	800eb48 <TIM_OC4_SetConfig+0x80>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4a16      	ldr	r2, [pc, #88]	; (800eb8c <TIM_OC4_SetConfig+0xc4>)
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d007      	beq.n	800eb48 <TIM_OC4_SetConfig+0x80>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a15      	ldr	r2, [pc, #84]	; (800eb90 <TIM_OC4_SetConfig+0xc8>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d003      	beq.n	800eb48 <TIM_OC4_SetConfig+0x80>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	4a14      	ldr	r2, [pc, #80]	; (800eb94 <TIM_OC4_SetConfig+0xcc>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d109      	bne.n	800eb5c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	695b      	ldr	r3, [r3, #20]
 800eb54:	019b      	lsls	r3, r3, #6
 800eb56:	697a      	ldr	r2, [r7, #20]
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	697a      	ldr	r2, [r7, #20]
 800eb60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	693a      	ldr	r2, [r7, #16]
 800eb74:	621a      	str	r2, [r3, #32]
}
 800eb76:	bf00      	nop
 800eb78:	371c      	adds	r7, #28
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	40010000 	.word	0x40010000
 800eb88:	40010400 	.word	0x40010400
 800eb8c:	40014000 	.word	0x40014000
 800eb90:	40014400 	.word	0x40014400
 800eb94:	40014800 	.word	0x40014800

0800eb98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b087      	sub	sp, #28
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6a1b      	ldr	r3, [r3, #32]
 800eba6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a1b      	ldr	r3, [r3, #32]
 800ebb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ebd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	041b      	lsls	r3, r3, #16
 800ebe0:	693a      	ldr	r2, [r7, #16]
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4a17      	ldr	r2, [pc, #92]	; (800ec48 <TIM_OC5_SetConfig+0xb0>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d00f      	beq.n	800ec0e <TIM_OC5_SetConfig+0x76>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4a16      	ldr	r2, [pc, #88]	; (800ec4c <TIM_OC5_SetConfig+0xb4>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d00b      	beq.n	800ec0e <TIM_OC5_SetConfig+0x76>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	4a15      	ldr	r2, [pc, #84]	; (800ec50 <TIM_OC5_SetConfig+0xb8>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d007      	beq.n	800ec0e <TIM_OC5_SetConfig+0x76>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	4a14      	ldr	r2, [pc, #80]	; (800ec54 <TIM_OC5_SetConfig+0xbc>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d003      	beq.n	800ec0e <TIM_OC5_SetConfig+0x76>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4a13      	ldr	r2, [pc, #76]	; (800ec58 <TIM_OC5_SetConfig+0xc0>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d109      	bne.n	800ec22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	695b      	ldr	r3, [r3, #20]
 800ec1a:	021b      	lsls	r3, r3, #8
 800ec1c:	697a      	ldr	r2, [r7, #20]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	697a      	ldr	r2, [r7, #20]
 800ec26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	68fa      	ldr	r2, [r7, #12]
 800ec2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	685a      	ldr	r2, [r3, #4]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	693a      	ldr	r2, [r7, #16]
 800ec3a:	621a      	str	r2, [r3, #32]
}
 800ec3c:	bf00      	nop
 800ec3e:	371c      	adds	r7, #28
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	40010000 	.word	0x40010000
 800ec4c:	40010400 	.word	0x40010400
 800ec50:	40014000 	.word	0x40014000
 800ec54:	40014400 	.word	0x40014400
 800ec58:	40014800 	.word	0x40014800

0800ec5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b087      	sub	sp, #28
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6a1b      	ldr	r3, [r3, #32]
 800ec6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6a1b      	ldr	r3, [r3, #32]
 800ec76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	021b      	lsls	r3, r3, #8
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	4313      	orrs	r3, r2
 800ec96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ec9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	051b      	lsls	r3, r3, #20
 800eca6:	693a      	ldr	r2, [r7, #16]
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4a18      	ldr	r2, [pc, #96]	; (800ed10 <TIM_OC6_SetConfig+0xb4>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d00f      	beq.n	800ecd4 <TIM_OC6_SetConfig+0x78>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	4a17      	ldr	r2, [pc, #92]	; (800ed14 <TIM_OC6_SetConfig+0xb8>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d00b      	beq.n	800ecd4 <TIM_OC6_SetConfig+0x78>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a16      	ldr	r2, [pc, #88]	; (800ed18 <TIM_OC6_SetConfig+0xbc>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d007      	beq.n	800ecd4 <TIM_OC6_SetConfig+0x78>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a15      	ldr	r2, [pc, #84]	; (800ed1c <TIM_OC6_SetConfig+0xc0>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d003      	beq.n	800ecd4 <TIM_OC6_SetConfig+0x78>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a14      	ldr	r2, [pc, #80]	; (800ed20 <TIM_OC6_SetConfig+0xc4>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d109      	bne.n	800ece8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ecda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	695b      	ldr	r3, [r3, #20]
 800ece0:	029b      	lsls	r3, r3, #10
 800ece2:	697a      	ldr	r2, [r7, #20]
 800ece4:	4313      	orrs	r3, r2
 800ece6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	697a      	ldr	r2, [r7, #20]
 800ecec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	685a      	ldr	r2, [r3, #4]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	693a      	ldr	r2, [r7, #16]
 800ed00:	621a      	str	r2, [r3, #32]
}
 800ed02:	bf00      	nop
 800ed04:	371c      	adds	r7, #28
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop
 800ed10:	40010000 	.word	0x40010000
 800ed14:	40010400 	.word	0x40010400
 800ed18:	40014000 	.word	0x40014000
 800ed1c:	40014400 	.word	0x40014400
 800ed20:	40014800 	.word	0x40014800

0800ed24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b087      	sub	sp, #28
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6a1b      	ldr	r3, [r3, #32]
 800ed34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	6a1b      	ldr	r3, [r3, #32]
 800ed3a:	f023 0201 	bic.w	r2, r3, #1
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	699b      	ldr	r3, [r3, #24]
 800ed46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ed4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	011b      	lsls	r3, r3, #4
 800ed54:	693a      	ldr	r2, [r7, #16]
 800ed56:	4313      	orrs	r3, r2
 800ed58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	f023 030a 	bic.w	r3, r3, #10
 800ed60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	4313      	orrs	r3, r2
 800ed68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	693a      	ldr	r2, [r7, #16]
 800ed6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	621a      	str	r2, [r3, #32]
}
 800ed76:	bf00      	nop
 800ed78:	371c      	adds	r7, #28
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr

0800ed82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed82:	b480      	push	{r7}
 800ed84:	b087      	sub	sp, #28
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	60f8      	str	r0, [r7, #12]
 800ed8a:	60b9      	str	r1, [r7, #8]
 800ed8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	6a1b      	ldr	r3, [r3, #32]
 800ed92:	f023 0210 	bic.w	r2, r3, #16
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	699b      	ldr	r3, [r3, #24]
 800ed9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6a1b      	ldr	r3, [r3, #32]
 800eda4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800edac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	031b      	lsls	r3, r3, #12
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	4313      	orrs	r3, r2
 800edb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800edbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	011b      	lsls	r3, r3, #4
 800edc4:	693a      	ldr	r2, [r7, #16]
 800edc6:	4313      	orrs	r3, r2
 800edc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	697a      	ldr	r2, [r7, #20]
 800edce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	693a      	ldr	r2, [r7, #16]
 800edd4:	621a      	str	r2, [r3, #32]
}
 800edd6:	bf00      	nop
 800edd8:	371c      	adds	r7, #28
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
	...

0800ede4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b085      	sub	sp, #20
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	4b09      	ldr	r3, [pc, #36]	; (800ee1c <TIM_ITRx_SetConfig+0x38>)
 800edf8:	4013      	ands	r3, r2
 800edfa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800edfc:	683a      	ldr	r2, [r7, #0]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	f043 0307 	orr.w	r3, r3, #7
 800ee06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	68fa      	ldr	r2, [r7, #12]
 800ee0c:	609a      	str	r2, [r3, #8]
}
 800ee0e:	bf00      	nop
 800ee10:	3714      	adds	r7, #20
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	ffcfff8f 	.word	0xffcfff8f

0800ee20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b087      	sub	sp, #28
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
 800ee2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ee3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	021a      	lsls	r2, r3, #8
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	431a      	orrs	r2, r3
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	4313      	orrs	r3, r2
 800ee48:	697a      	ldr	r2, [r7, #20]
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	697a      	ldr	r2, [r7, #20]
 800ee52:	609a      	str	r2, [r3, #8]
}
 800ee54:	bf00      	nop
 800ee56:	371c      	adds	r7, #28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b087      	sub	sp, #28
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	f003 031f 	and.w	r3, r3, #31
 800ee72:	2201      	movs	r2, #1
 800ee74:	fa02 f303 	lsl.w	r3, r2, r3
 800ee78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6a1a      	ldr	r2, [r3, #32]
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	43db      	mvns	r3, r3
 800ee82:	401a      	ands	r2, r3
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6a1a      	ldr	r2, [r3, #32]
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	f003 031f 	and.w	r3, r3, #31
 800ee92:	6879      	ldr	r1, [r7, #4]
 800ee94:	fa01 f303 	lsl.w	r3, r1, r3
 800ee98:	431a      	orrs	r2, r3
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	621a      	str	r2, [r3, #32]
}
 800ee9e:	bf00      	nop
 800eea0:	371c      	adds	r7, #28
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr
	...

0800eeac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d101      	bne.n	800eec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eec0:	2302      	movs	r3, #2
 800eec2:	e077      	b.n	800efb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2201      	movs	r2, #1
 800eec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2202      	movs	r2, #2
 800eed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4a35      	ldr	r2, [pc, #212]	; (800efc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d004      	beq.n	800eef8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4a34      	ldr	r2, [pc, #208]	; (800efc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d108      	bne.n	800ef0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eefe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	4313      	orrs	r3, r2
 800ef08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	68fa      	ldr	r2, [r7, #12]
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a25      	ldr	r2, [pc, #148]	; (800efc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d02c      	beq.n	800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef36:	d027      	beq.n	800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a22      	ldr	r2, [pc, #136]	; (800efc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d022      	beq.n	800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4a21      	ldr	r2, [pc, #132]	; (800efcc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d01d      	beq.n	800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a1f      	ldr	r2, [pc, #124]	; (800efd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d018      	beq.n	800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a1a      	ldr	r2, [pc, #104]	; (800efc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d013      	beq.n	800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a1b      	ldr	r2, [pc, #108]	; (800efd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d00e      	beq.n	800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a1a      	ldr	r2, [pc, #104]	; (800efd8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d009      	beq.n	800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a18      	ldr	r2, [pc, #96]	; (800efdc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d004      	beq.n	800ef88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4a17      	ldr	r2, [pc, #92]	; (800efe0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d10c      	bne.n	800efa2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	68ba      	ldr	r2, [r7, #8]
 800ef96:	4313      	orrs	r3, r2
 800ef98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2201      	movs	r2, #1
 800efa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3714      	adds	r7, #20
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr
 800efc0:	40010000 	.word	0x40010000
 800efc4:	40010400 	.word	0x40010400
 800efc8:	40000400 	.word	0x40000400
 800efcc:	40000800 	.word	0x40000800
 800efd0:	40000c00 	.word	0x40000c00
 800efd4:	40001800 	.word	0x40001800
 800efd8:	40014000 	.word	0x40014000
 800efdc:	4000e000 	.word	0x4000e000
 800efe0:	4000e400 	.word	0x4000e400

0800efe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800efee:	2300      	movs	r3, #0
 800eff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d101      	bne.n	800f000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800effc:	2302      	movs	r3, #2
 800effe:	e065      	b.n	800f0cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	4313      	orrs	r3, r2
 800f014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	4313      	orrs	r3, r2
 800f022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	4313      	orrs	r3, r2
 800f030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4313      	orrs	r3, r2
 800f03e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	691b      	ldr	r3, [r3, #16]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	695b      	ldr	r3, [r3, #20]
 800f058:	4313      	orrs	r3, r2
 800f05a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f066:	4313      	orrs	r3, r2
 800f068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	699b      	ldr	r3, [r3, #24]
 800f074:	041b      	lsls	r3, r3, #16
 800f076:	4313      	orrs	r3, r2
 800f078:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	4a16      	ldr	r2, [pc, #88]	; (800f0d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d004      	beq.n	800f08e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a14      	ldr	r2, [pc, #80]	; (800f0dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d115      	bne.n	800f0ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f098:	051b      	lsls	r3, r3, #20
 800f09a:	4313      	orrs	r3, r2
 800f09c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	69db      	ldr	r3, [r3, #28]
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	6a1b      	ldr	r3, [r3, #32]
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f0ca:	2300      	movs	r3, #0
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3714      	adds	r7, #20
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	40010000 	.word	0x40010000
 800f0dc:	40010400 	.word	0x40010400

0800f0e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f0e8:	bf00      	nop
 800f0ea:	370c      	adds	r7, #12
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f0fc:	bf00      	nop
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f110:	bf00      	nop
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f11c:	b084      	sub	sp, #16
 800f11e:	b580      	push	{r7, lr}
 800f120:	b084      	sub	sp, #16
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
 800f126:	f107 001c 	add.w	r0, r7, #28
 800f12a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f130:	2b01      	cmp	r3, #1
 800f132:	d120      	bne.n	800f176 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f138:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	68da      	ldr	r2, [r3, #12]
 800f144:	4b2a      	ldr	r3, [pc, #168]	; (800f1f0 <USB_CoreInit+0xd4>)
 800f146:	4013      	ands	r3, r2
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d105      	bne.n	800f16a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f001 fb14 	bl	8010798 <USB_CoreReset>
 800f170:	4603      	mov	r3, r0
 800f172:	73fb      	strb	r3, [r7, #15]
 800f174:	e01a      	b.n	800f1ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f001 fb08 	bl	8010798 <USB_CoreReset>
 800f188:	4603      	mov	r3, r0
 800f18a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d106      	bne.n	800f1a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f196:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	639a      	str	r2, [r3, #56]	; 0x38
 800f19e:	e005      	b.n	800f1ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d116      	bne.n	800f1e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f1c0:	4b0c      	ldr	r3, [pc, #48]	; (800f1f4 <USB_CoreInit+0xd8>)
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	f043 0206 	orr.w	r2, r3, #6
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	f043 0220 	orr.w	r2, r3, #32
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f1ec:	b004      	add	sp, #16
 800f1ee:	4770      	bx	lr
 800f1f0:	ffbdffbf 	.word	0xffbdffbf
 800f1f4:	03ee0000 	.word	0x03ee0000

0800f1f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b087      	sub	sp, #28
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	4613      	mov	r3, r2
 800f204:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f206:	79fb      	ldrb	r3, [r7, #7]
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d165      	bne.n	800f2d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	4a41      	ldr	r2, [pc, #260]	; (800f314 <USB_SetTurnaroundTime+0x11c>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d906      	bls.n	800f222 <USB_SetTurnaroundTime+0x2a>
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	4a40      	ldr	r2, [pc, #256]	; (800f318 <USB_SetTurnaroundTime+0x120>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d202      	bcs.n	800f222 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f21c:	230f      	movs	r3, #15
 800f21e:	617b      	str	r3, [r7, #20]
 800f220:	e062      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	4a3c      	ldr	r2, [pc, #240]	; (800f318 <USB_SetTurnaroundTime+0x120>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d306      	bcc.n	800f238 <USB_SetTurnaroundTime+0x40>
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	4a3b      	ldr	r2, [pc, #236]	; (800f31c <USB_SetTurnaroundTime+0x124>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d202      	bcs.n	800f238 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f232:	230e      	movs	r3, #14
 800f234:	617b      	str	r3, [r7, #20]
 800f236:	e057      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	4a38      	ldr	r2, [pc, #224]	; (800f31c <USB_SetTurnaroundTime+0x124>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d306      	bcc.n	800f24e <USB_SetTurnaroundTime+0x56>
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	4a37      	ldr	r2, [pc, #220]	; (800f320 <USB_SetTurnaroundTime+0x128>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d202      	bcs.n	800f24e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f248:	230d      	movs	r3, #13
 800f24a:	617b      	str	r3, [r7, #20]
 800f24c:	e04c      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	4a33      	ldr	r2, [pc, #204]	; (800f320 <USB_SetTurnaroundTime+0x128>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d306      	bcc.n	800f264 <USB_SetTurnaroundTime+0x6c>
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	4a32      	ldr	r2, [pc, #200]	; (800f324 <USB_SetTurnaroundTime+0x12c>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d802      	bhi.n	800f264 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f25e:	230c      	movs	r3, #12
 800f260:	617b      	str	r3, [r7, #20]
 800f262:	e041      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	4a2f      	ldr	r2, [pc, #188]	; (800f324 <USB_SetTurnaroundTime+0x12c>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d906      	bls.n	800f27a <USB_SetTurnaroundTime+0x82>
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	4a2e      	ldr	r2, [pc, #184]	; (800f328 <USB_SetTurnaroundTime+0x130>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d802      	bhi.n	800f27a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f274:	230b      	movs	r3, #11
 800f276:	617b      	str	r3, [r7, #20]
 800f278:	e036      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	4a2a      	ldr	r2, [pc, #168]	; (800f328 <USB_SetTurnaroundTime+0x130>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d906      	bls.n	800f290 <USB_SetTurnaroundTime+0x98>
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	4a29      	ldr	r2, [pc, #164]	; (800f32c <USB_SetTurnaroundTime+0x134>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d802      	bhi.n	800f290 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f28a:	230a      	movs	r3, #10
 800f28c:	617b      	str	r3, [r7, #20]
 800f28e:	e02b      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	4a26      	ldr	r2, [pc, #152]	; (800f32c <USB_SetTurnaroundTime+0x134>)
 800f294:	4293      	cmp	r3, r2
 800f296:	d906      	bls.n	800f2a6 <USB_SetTurnaroundTime+0xae>
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	4a25      	ldr	r2, [pc, #148]	; (800f330 <USB_SetTurnaroundTime+0x138>)
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d202      	bcs.n	800f2a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f2a0:	2309      	movs	r3, #9
 800f2a2:	617b      	str	r3, [r7, #20]
 800f2a4:	e020      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	4a21      	ldr	r2, [pc, #132]	; (800f330 <USB_SetTurnaroundTime+0x138>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d306      	bcc.n	800f2bc <USB_SetTurnaroundTime+0xc4>
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	4a20      	ldr	r2, [pc, #128]	; (800f334 <USB_SetTurnaroundTime+0x13c>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d802      	bhi.n	800f2bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f2b6:	2308      	movs	r3, #8
 800f2b8:	617b      	str	r3, [r7, #20]
 800f2ba:	e015      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	4a1d      	ldr	r2, [pc, #116]	; (800f334 <USB_SetTurnaroundTime+0x13c>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d906      	bls.n	800f2d2 <USB_SetTurnaroundTime+0xda>
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	4a1c      	ldr	r2, [pc, #112]	; (800f338 <USB_SetTurnaroundTime+0x140>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d202      	bcs.n	800f2d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f2cc:	2307      	movs	r3, #7
 800f2ce:	617b      	str	r3, [r7, #20]
 800f2d0:	e00a      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f2d2:	2306      	movs	r3, #6
 800f2d4:	617b      	str	r3, [r7, #20]
 800f2d6:	e007      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f2d8:	79fb      	ldrb	r3, [r7, #7]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d102      	bne.n	800f2e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f2de:	2309      	movs	r3, #9
 800f2e0:	617b      	str	r3, [r7, #20]
 800f2e2:	e001      	b.n	800f2e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f2e4:	2309      	movs	r3, #9
 800f2e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	68da      	ldr	r2, [r3, #12]
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	029b      	lsls	r3, r3, #10
 800f2fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f300:	431a      	orrs	r2, r3
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f306:	2300      	movs	r3, #0
}
 800f308:	4618      	mov	r0, r3
 800f30a:	371c      	adds	r7, #28
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr
 800f314:	00d8acbf 	.word	0x00d8acbf
 800f318:	00e4e1c0 	.word	0x00e4e1c0
 800f31c:	00f42400 	.word	0x00f42400
 800f320:	01067380 	.word	0x01067380
 800f324:	011a499f 	.word	0x011a499f
 800f328:	01312cff 	.word	0x01312cff
 800f32c:	014ca43f 	.word	0x014ca43f
 800f330:	016e3600 	.word	0x016e3600
 800f334:	01a6ab1f 	.word	0x01a6ab1f
 800f338:	01e84800 	.word	0x01e84800

0800f33c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	689b      	ldr	r3, [r3, #8]
 800f348:	f043 0201 	orr.w	r2, r3, #1
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f350:	2300      	movs	r3, #0
}
 800f352:	4618      	mov	r0, r3
 800f354:	370c      	adds	r7, #12
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr

0800f35e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f35e:	b480      	push	{r7}
 800f360:	b083      	sub	sp, #12
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	f023 0201 	bic.w	r2, r3, #1
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f372:	2300      	movs	r3, #0
}
 800f374:	4618      	mov	r0, r3
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	460b      	mov	r3, r1
 800f38a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f398:	78fb      	ldrb	r3, [r7, #3]
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d106      	bne.n	800f3ac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	60da      	str	r2, [r3, #12]
 800f3aa:	e00b      	b.n	800f3c4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f3ac:	78fb      	ldrb	r3, [r7, #3]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d106      	bne.n	800f3c0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	60da      	str	r2, [r3, #12]
 800f3be:	e001      	b.n	800f3c4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	e003      	b.n	800f3cc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f3c4:	2032      	movs	r0, #50	; 0x32
 800f3c6:	f7f3 fe19 	bl	8002ffc <HAL_Delay>

  return HAL_OK;
 800f3ca:	2300      	movs	r3, #0
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f3d4:	b084      	sub	sp, #16
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b086      	sub	sp, #24
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
 800f3de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f3e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	613b      	str	r3, [r7, #16]
 800f3f2:	e009      	b.n	800f408 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	3340      	adds	r3, #64	; 0x40
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	4413      	add	r3, r2
 800f3fe:	2200      	movs	r2, #0
 800f400:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	3301      	adds	r3, #1
 800f406:	613b      	str	r3, [r7, #16]
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	2b0e      	cmp	r3, #14
 800f40c:	d9f2      	bls.n	800f3f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f410:	2b00      	cmp	r3, #0
 800f412:	d11c      	bne.n	800f44e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f422:	f043 0302 	orr.w	r3, r3, #2
 800f426:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f42c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	601a      	str	r2, [r3, #0]
 800f44c:	e005      	b.n	800f45a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f452:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f460:	461a      	mov	r2, r3
 800f462:	2300      	movs	r3, #0
 800f464:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f46c:	4619      	mov	r1, r3
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f474:	461a      	mov	r2, r3
 800f476:	680b      	ldr	r3, [r1, #0]
 800f478:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d10c      	bne.n	800f49a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f482:	2b00      	cmp	r3, #0
 800f484:	d104      	bne.n	800f490 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f486:	2100      	movs	r1, #0
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 f949 	bl	800f720 <USB_SetDevSpeed>
 800f48e:	e008      	b.n	800f4a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f490:	2101      	movs	r1, #1
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 f944 	bl	800f720 <USB_SetDevSpeed>
 800f498:	e003      	b.n	800f4a2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f49a:	2103      	movs	r1, #3
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 f93f 	bl	800f720 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f4a2:	2110      	movs	r1, #16
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 f8f3 	bl	800f690 <USB_FlushTxFifo>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d001      	beq.n	800f4b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f000 f911 	bl	800f6dc <USB_FlushRxFifo>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	2300      	movs	r3, #0
 800f4da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	613b      	str	r3, [r7, #16]
 800f4ec:	e043      	b.n	800f576 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	015a      	lsls	r2, r3, #5
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f504:	d118      	bne.n	800f538 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d10a      	bne.n	800f522 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	015a      	lsls	r2, r3, #5
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	4413      	add	r3, r2
 800f514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f518:	461a      	mov	r2, r3
 800f51a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f51e:	6013      	str	r3, [r2, #0]
 800f520:	e013      	b.n	800f54a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	015a      	lsls	r2, r3, #5
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	4413      	add	r3, r2
 800f52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f52e:	461a      	mov	r2, r3
 800f530:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f534:	6013      	str	r3, [r2, #0]
 800f536:	e008      	b.n	800f54a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	015a      	lsls	r2, r3, #5
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	4413      	add	r3, r2
 800f540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f544:	461a      	mov	r2, r3
 800f546:	2300      	movs	r3, #0
 800f548:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	015a      	lsls	r2, r3, #5
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	4413      	add	r3, r2
 800f552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f556:	461a      	mov	r2, r3
 800f558:	2300      	movs	r3, #0
 800f55a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	015a      	lsls	r2, r3, #5
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	4413      	add	r3, r2
 800f564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f568:	461a      	mov	r2, r3
 800f56a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f56e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	3301      	adds	r3, #1
 800f574:	613b      	str	r3, [r7, #16]
 800f576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d3b7      	bcc.n	800f4ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f57e:	2300      	movs	r3, #0
 800f580:	613b      	str	r3, [r7, #16]
 800f582:	e043      	b.n	800f60c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	015a      	lsls	r2, r3, #5
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	4413      	add	r3, r2
 800f58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f59a:	d118      	bne.n	800f5ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d10a      	bne.n	800f5b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	015a      	lsls	r2, r3, #5
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f5b4:	6013      	str	r3, [r2, #0]
 800f5b6:	e013      	b.n	800f5e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	015a      	lsls	r2, r3, #5
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	4413      	add	r3, r2
 800f5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f5ca:	6013      	str	r3, [r2, #0]
 800f5cc:	e008      	b.n	800f5e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	015a      	lsls	r2, r3, #5
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5da:	461a      	mov	r2, r3
 800f5dc:	2300      	movs	r3, #0
 800f5de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	015a      	lsls	r2, r3, #5
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	015a      	lsls	r2, r3, #5
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5fe:	461a      	mov	r2, r3
 800f600:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f604:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	3301      	adds	r3, #1
 800f60a:	613b      	str	r3, [r7, #16]
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	693a      	ldr	r2, [r7, #16]
 800f610:	429a      	cmp	r2, r3
 800f612:	d3b7      	bcc.n	800f584 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f61a:	691b      	ldr	r3, [r3, #16]
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f626:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2200      	movs	r2, #0
 800f62c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f634:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d105      	bne.n	800f648 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	699b      	ldr	r3, [r3, #24]
 800f640:	f043 0210 	orr.w	r2, r3, #16
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	699a      	ldr	r2, [r3, #24]
 800f64c:	4b0e      	ldr	r3, [pc, #56]	; (800f688 <USB_DevInit+0x2b4>)
 800f64e:	4313      	orrs	r3, r2
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f656:	2b00      	cmp	r3, #0
 800f658:	d005      	beq.n	800f666 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	699b      	ldr	r3, [r3, #24]
 800f65e:	f043 0208 	orr.w	r2, r3, #8
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d105      	bne.n	800f678 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	699a      	ldr	r2, [r3, #24]
 800f670:	4b06      	ldr	r3, [pc, #24]	; (800f68c <USB_DevInit+0x2b8>)
 800f672:	4313      	orrs	r3, r2
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f678:	7dfb      	ldrb	r3, [r7, #23]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3718      	adds	r7, #24
 800f67e:	46bd      	mov	sp, r7
 800f680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f684:	b004      	add	sp, #16
 800f686:	4770      	bx	lr
 800f688:	803c3800 	.word	0x803c3800
 800f68c:	40000004 	.word	0x40000004

0800f690 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f690:	b480      	push	{r7}
 800f692:	b085      	sub	sp, #20
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f69a:	2300      	movs	r3, #0
 800f69c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	019b      	lsls	r3, r3, #6
 800f6a2:	f043 0220 	orr.w	r2, r3, #32
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	4a09      	ldr	r2, [pc, #36]	; (800f6d8 <USB_FlushTxFifo+0x48>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d901      	bls.n	800f6bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f6b8:	2303      	movs	r3, #3
 800f6ba:	e006      	b.n	800f6ca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	691b      	ldr	r3, [r3, #16]
 800f6c0:	f003 0320 	and.w	r3, r3, #32
 800f6c4:	2b20      	cmp	r3, #32
 800f6c6:	d0f0      	beq.n	800f6aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f6c8:	2300      	movs	r3, #0
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3714      	adds	r7, #20
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop
 800f6d8:	00030d40 	.word	0x00030d40

0800f6dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b085      	sub	sp, #20
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2210      	movs	r2, #16
 800f6ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	60fb      	str	r3, [r7, #12]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	4a09      	ldr	r2, [pc, #36]	; (800f71c <USB_FlushRxFifo+0x40>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d901      	bls.n	800f700 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f6fc:	2303      	movs	r3, #3
 800f6fe:	e006      	b.n	800f70e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	691b      	ldr	r3, [r3, #16]
 800f704:	f003 0310 	and.w	r3, r3, #16
 800f708:	2b10      	cmp	r3, #16
 800f70a:	d0f0      	beq.n	800f6ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f70c:	2300      	movs	r3, #0
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3714      	adds	r7, #20
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	00030d40 	.word	0x00030d40

0800f720 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f720:	b480      	push	{r7}
 800f722:	b085      	sub	sp, #20
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	460b      	mov	r3, r1
 800f72a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	78fb      	ldrb	r3, [r7, #3]
 800f73a:	68f9      	ldr	r1, [r7, #12]
 800f73c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f740:	4313      	orrs	r3, r2
 800f742:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f744:	2300      	movs	r3, #0
}
 800f746:	4618      	mov	r0, r3
 800f748:	3714      	adds	r7, #20
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr

0800f752 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f752:	b480      	push	{r7}
 800f754:	b087      	sub	sp, #28
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	f003 0306 	and.w	r3, r3, #6
 800f76a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d102      	bne.n	800f778 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f772:	2300      	movs	r3, #0
 800f774:	75fb      	strb	r3, [r7, #23]
 800f776:	e00a      	b.n	800f78e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2b02      	cmp	r3, #2
 800f77c:	d002      	beq.n	800f784 <USB_GetDevSpeed+0x32>
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2b06      	cmp	r3, #6
 800f782:	d102      	bne.n	800f78a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f784:	2302      	movs	r3, #2
 800f786:	75fb      	strb	r3, [r7, #23]
 800f788:	e001      	b.n	800f78e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f78a:	230f      	movs	r3, #15
 800f78c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f78e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f790:	4618      	mov	r0, r3
 800f792:	371c      	adds	r7, #28
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr

0800f79c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b085      	sub	sp, #20
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	785b      	ldrb	r3, [r3, #1]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d139      	bne.n	800f82c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7be:	69da      	ldr	r2, [r3, #28]
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	f003 030f 	and.w	r3, r3, #15
 800f7c8:	2101      	movs	r1, #1
 800f7ca:	fa01 f303 	lsl.w	r3, r1, r3
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	68f9      	ldr	r1, [r7, #12]
 800f7d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	015a      	lsls	r2, r3, #5
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d153      	bne.n	800f898 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	015a      	lsls	r2, r3, #5
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	4413      	add	r3, r2
 800f7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7fc:	681a      	ldr	r2, [r3, #0]
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	78db      	ldrb	r3, [r3, #3]
 800f80a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f80c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	059b      	lsls	r3, r3, #22
 800f812:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f814:	431a      	orrs	r2, r3
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	0159      	lsls	r1, r3, #5
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	440b      	add	r3, r1
 800f81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f822:	4619      	mov	r1, r3
 800f824:	4b20      	ldr	r3, [pc, #128]	; (800f8a8 <USB_ActivateEndpoint+0x10c>)
 800f826:	4313      	orrs	r3, r2
 800f828:	600b      	str	r3, [r1, #0]
 800f82a:	e035      	b.n	800f898 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f832:	69da      	ldr	r2, [r3, #28]
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	f003 030f 	and.w	r3, r3, #15
 800f83c:	2101      	movs	r1, #1
 800f83e:	fa01 f303 	lsl.w	r3, r1, r3
 800f842:	041b      	lsls	r3, r3, #16
 800f844:	68f9      	ldr	r1, [r7, #12]
 800f846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f84a:	4313      	orrs	r3, r2
 800f84c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	015a      	lsls	r2, r3, #5
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	4413      	add	r3, r2
 800f856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f860:	2b00      	cmp	r3, #0
 800f862:	d119      	bne.n	800f898 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	015a      	lsls	r2, r3, #5
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	4413      	add	r3, r2
 800f86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	78db      	ldrb	r3, [r3, #3]
 800f87e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f880:	430b      	orrs	r3, r1
 800f882:	431a      	orrs	r2, r3
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	0159      	lsls	r1, r3, #5
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	440b      	add	r3, r1
 800f88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f890:	4619      	mov	r1, r3
 800f892:	4b05      	ldr	r3, [pc, #20]	; (800f8a8 <USB_ActivateEndpoint+0x10c>)
 800f894:	4313      	orrs	r3, r2
 800f896:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f898:	2300      	movs	r3, #0
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3714      	adds	r7, #20
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr
 800f8a6:	bf00      	nop
 800f8a8:	10008000 	.word	0x10008000

0800f8ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b085      	sub	sp, #20
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	785b      	ldrb	r3, [r3, #1]
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d161      	bne.n	800f98c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	015a      	lsls	r2, r3, #5
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f8da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8de:	d11f      	bne.n	800f920 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	015a      	lsls	r2, r3, #5
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	68ba      	ldr	r2, [r7, #8]
 800f8f0:	0151      	lsls	r1, r2, #5
 800f8f2:	68fa      	ldr	r2, [r7, #12]
 800f8f4:	440a      	add	r2, r1
 800f8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f8fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	015a      	lsls	r2, r3, #5
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	4413      	add	r3, r2
 800f908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	68ba      	ldr	r2, [r7, #8]
 800f910:	0151      	lsls	r1, r2, #5
 800f912:	68fa      	ldr	r2, [r7, #12]
 800f914:	440a      	add	r2, r1
 800f916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f91a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f91e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	f003 030f 	and.w	r3, r3, #15
 800f930:	2101      	movs	r1, #1
 800f932:	fa01 f303 	lsl.w	r3, r1, r3
 800f936:	b29b      	uxth	r3, r3
 800f938:	43db      	mvns	r3, r3
 800f93a:	68f9      	ldr	r1, [r7, #12]
 800f93c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f940:	4013      	ands	r3, r2
 800f942:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f94a:	69da      	ldr	r2, [r3, #28]
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	f003 030f 	and.w	r3, r3, #15
 800f954:	2101      	movs	r1, #1
 800f956:	fa01 f303 	lsl.w	r3, r1, r3
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	43db      	mvns	r3, r3
 800f95e:	68f9      	ldr	r1, [r7, #12]
 800f960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f964:	4013      	ands	r3, r2
 800f966:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	015a      	lsls	r2, r3, #5
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	4413      	add	r3, r2
 800f970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	0159      	lsls	r1, r3, #5
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	440b      	add	r3, r1
 800f97e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f982:	4619      	mov	r1, r3
 800f984:	4b35      	ldr	r3, [pc, #212]	; (800fa5c <USB_DeactivateEndpoint+0x1b0>)
 800f986:	4013      	ands	r3, r2
 800f988:	600b      	str	r3, [r1, #0]
 800f98a:	e060      	b.n	800fa4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	015a      	lsls	r2, r3, #5
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	4413      	add	r3, r2
 800f994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f99e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9a2:	d11f      	bne.n	800f9e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	015a      	lsls	r2, r3, #5
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	68ba      	ldr	r2, [r7, #8]
 800f9b4:	0151      	lsls	r1, r2, #5
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	440a      	add	r2, r1
 800f9ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f9c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	015a      	lsls	r2, r3, #5
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	4413      	add	r3, r2
 800f9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	68ba      	ldr	r2, [r7, #8]
 800f9d4:	0151      	lsls	r1, r2, #5
 800f9d6:	68fa      	ldr	r2, [r7, #12]
 800f9d8:	440a      	add	r2, r1
 800f9da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f9e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	f003 030f 	and.w	r3, r3, #15
 800f9f4:	2101      	movs	r1, #1
 800f9f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f9fa:	041b      	lsls	r3, r3, #16
 800f9fc:	43db      	mvns	r3, r3
 800f9fe:	68f9      	ldr	r1, [r7, #12]
 800fa00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa04:	4013      	ands	r3, r2
 800fa06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa0e:	69da      	ldr	r2, [r3, #28]
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	f003 030f 	and.w	r3, r3, #15
 800fa18:	2101      	movs	r1, #1
 800fa1a:	fa01 f303 	lsl.w	r3, r1, r3
 800fa1e:	041b      	lsls	r3, r3, #16
 800fa20:	43db      	mvns	r3, r3
 800fa22:	68f9      	ldr	r1, [r7, #12]
 800fa24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa28:	4013      	ands	r3, r2
 800fa2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	015a      	lsls	r2, r3, #5
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	4413      	add	r3, r2
 800fa34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	0159      	lsls	r1, r3, #5
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	440b      	add	r3, r1
 800fa42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa46:	4619      	mov	r1, r3
 800fa48:	4b05      	ldr	r3, [pc, #20]	; (800fa60 <USB_DeactivateEndpoint+0x1b4>)
 800fa4a:	4013      	ands	r3, r2
 800fa4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fa4e:	2300      	movs	r3, #0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3714      	adds	r7, #20
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr
 800fa5c:	ec337800 	.word	0xec337800
 800fa60:	eff37800 	.word	0xeff37800

0800fa64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b08a      	sub	sp, #40	; 0x28
 800fa68:	af02      	add	r7, sp, #8
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	785b      	ldrb	r3, [r3, #1]
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	f040 8163 	bne.w	800fd4c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	695b      	ldr	r3, [r3, #20]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d132      	bne.n	800faf4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	015a      	lsls	r2, r3, #5
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	4413      	add	r3, r2
 800fa96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa9a:	691a      	ldr	r2, [r3, #16]
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	0159      	lsls	r1, r3, #5
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	440b      	add	r3, r1
 800faa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faa8:	4619      	mov	r1, r3
 800faaa:	4ba5      	ldr	r3, [pc, #660]	; (800fd40 <USB_EPStartXfer+0x2dc>)
 800faac:	4013      	ands	r3, r2
 800faae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	015a      	lsls	r2, r3, #5
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	4413      	add	r3, r2
 800fab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fabc:	691b      	ldr	r3, [r3, #16]
 800fabe:	69ba      	ldr	r2, [r7, #24]
 800fac0:	0151      	lsls	r1, r2, #5
 800fac2:	69fa      	ldr	r2, [r7, #28]
 800fac4:	440a      	add	r2, r1
 800fac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800face:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fad0:	69bb      	ldr	r3, [r7, #24]
 800fad2:	015a      	lsls	r2, r3, #5
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	4413      	add	r3, r2
 800fad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fadc:	691a      	ldr	r2, [r3, #16]
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	0159      	lsls	r1, r3, #5
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	440b      	add	r3, r1
 800fae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faea:	4619      	mov	r1, r3
 800faec:	4b95      	ldr	r3, [pc, #596]	; (800fd44 <USB_EPStartXfer+0x2e0>)
 800faee:	4013      	ands	r3, r2
 800faf0:	610b      	str	r3, [r1, #16]
 800faf2:	e074      	b.n	800fbde <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	015a      	lsls	r2, r3, #5
 800faf8:	69fb      	ldr	r3, [r7, #28]
 800fafa:	4413      	add	r3, r2
 800fafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb00:	691a      	ldr	r2, [r3, #16]
 800fb02:	69bb      	ldr	r3, [r7, #24]
 800fb04:	0159      	lsls	r1, r3, #5
 800fb06:	69fb      	ldr	r3, [r7, #28]
 800fb08:	440b      	add	r3, r1
 800fb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb0e:	4619      	mov	r1, r3
 800fb10:	4b8c      	ldr	r3, [pc, #560]	; (800fd44 <USB_EPStartXfer+0x2e0>)
 800fb12:	4013      	ands	r3, r2
 800fb14:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	015a      	lsls	r2, r3, #5
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb22:	691a      	ldr	r2, [r3, #16]
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	0159      	lsls	r1, r3, #5
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	440b      	add	r3, r1
 800fb2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb30:	4619      	mov	r1, r3
 800fb32:	4b83      	ldr	r3, [pc, #524]	; (800fd40 <USB_EPStartXfer+0x2dc>)
 800fb34:	4013      	ands	r3, r2
 800fb36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	015a      	lsls	r2, r3, #5
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	4413      	add	r3, r2
 800fb40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb44:	691a      	ldr	r2, [r3, #16]
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	6959      	ldr	r1, [r3, #20]
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	689b      	ldr	r3, [r3, #8]
 800fb4e:	440b      	add	r3, r1
 800fb50:	1e59      	subs	r1, r3, #1
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	fbb1 f3f3 	udiv	r3, r1, r3
 800fb5a:	04d9      	lsls	r1, r3, #19
 800fb5c:	4b7a      	ldr	r3, [pc, #488]	; (800fd48 <USB_EPStartXfer+0x2e4>)
 800fb5e:	400b      	ands	r3, r1
 800fb60:	69b9      	ldr	r1, [r7, #24]
 800fb62:	0148      	lsls	r0, r1, #5
 800fb64:	69f9      	ldr	r1, [r7, #28]
 800fb66:	4401      	add	r1, r0
 800fb68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fb6c:	4313      	orrs	r3, r2
 800fb6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	015a      	lsls	r2, r3, #5
 800fb74:	69fb      	ldr	r3, [r7, #28]
 800fb76:	4413      	add	r3, r2
 800fb78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb7c:	691a      	ldr	r2, [r3, #16]
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	695b      	ldr	r3, [r3, #20]
 800fb82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb86:	69b9      	ldr	r1, [r7, #24]
 800fb88:	0148      	lsls	r0, r1, #5
 800fb8a:	69f9      	ldr	r1, [r7, #28]
 800fb8c:	4401      	add	r1, r0
 800fb8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fb92:	4313      	orrs	r3, r2
 800fb94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	78db      	ldrb	r3, [r3, #3]
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d11f      	bne.n	800fbde <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fb9e:	69bb      	ldr	r3, [r7, #24]
 800fba0:	015a      	lsls	r2, r3, #5
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	4413      	add	r3, r2
 800fba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	69ba      	ldr	r2, [r7, #24]
 800fbae:	0151      	lsls	r1, r2, #5
 800fbb0:	69fa      	ldr	r2, [r7, #28]
 800fbb2:	440a      	add	r2, r1
 800fbb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbb8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fbbc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fbbe:	69bb      	ldr	r3, [r7, #24]
 800fbc0:	015a      	lsls	r2, r3, #5
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbca:	691b      	ldr	r3, [r3, #16]
 800fbcc:	69ba      	ldr	r2, [r7, #24]
 800fbce:	0151      	lsls	r1, r2, #5
 800fbd0:	69fa      	ldr	r2, [r7, #28]
 800fbd2:	440a      	add	r2, r1
 800fbd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fbdc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800fbde:	79fb      	ldrb	r3, [r7, #7]
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d14b      	bne.n	800fc7c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	691b      	ldr	r3, [r3, #16]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d009      	beq.n	800fc00 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fbec:	69bb      	ldr	r3, [r7, #24]
 800fbee:	015a      	lsls	r2, r3, #5
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	691b      	ldr	r3, [r3, #16]
 800fbfe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	78db      	ldrb	r3, [r3, #3]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d128      	bne.n	800fc5a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc0e:	689b      	ldr	r3, [r3, #8]
 800fc10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d110      	bne.n	800fc3a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	015a      	lsls	r2, r3, #5
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	4413      	add	r3, r2
 800fc20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	69ba      	ldr	r2, [r7, #24]
 800fc28:	0151      	lsls	r1, r2, #5
 800fc2a:	69fa      	ldr	r2, [r7, #28]
 800fc2c:	440a      	add	r2, r1
 800fc2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fc36:	6013      	str	r3, [r2, #0]
 800fc38:	e00f      	b.n	800fc5a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	015a      	lsls	r2, r3, #5
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	4413      	add	r3, r2
 800fc42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	69ba      	ldr	r2, [r7, #24]
 800fc4a:	0151      	lsls	r1, r2, #5
 800fc4c:	69fa      	ldr	r2, [r7, #28]
 800fc4e:	440a      	add	r2, r1
 800fc50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc58:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fc5a:	69bb      	ldr	r3, [r7, #24]
 800fc5c:	015a      	lsls	r2, r3, #5
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	4413      	add	r3, r2
 800fc62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	69ba      	ldr	r2, [r7, #24]
 800fc6a:	0151      	lsls	r1, r2, #5
 800fc6c:	69fa      	ldr	r2, [r7, #28]
 800fc6e:	440a      	add	r2, r1
 800fc70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fc78:	6013      	str	r3, [r2, #0]
 800fc7a:	e133      	b.n	800fee4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fc7c:	69bb      	ldr	r3, [r7, #24]
 800fc7e:	015a      	lsls	r2, r3, #5
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	4413      	add	r3, r2
 800fc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	69ba      	ldr	r2, [r7, #24]
 800fc8c:	0151      	lsls	r1, r2, #5
 800fc8e:	69fa      	ldr	r2, [r7, #28]
 800fc90:	440a      	add	r2, r1
 800fc92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fc9a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	78db      	ldrb	r3, [r3, #3]
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d015      	beq.n	800fcd0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	695b      	ldr	r3, [r3, #20]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f000 811b 	beq.w	800fee4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	f003 030f 	and.w	r3, r3, #15
 800fcbe:	2101      	movs	r1, #1
 800fcc0:	fa01 f303 	lsl.w	r3, r1, r3
 800fcc4:	69f9      	ldr	r1, [r7, #28]
 800fcc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcca:	4313      	orrs	r3, r2
 800fccc:	634b      	str	r3, [r1, #52]	; 0x34
 800fcce:	e109      	b.n	800fee4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcd6:	689b      	ldr	r3, [r3, #8]
 800fcd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d110      	bne.n	800fd02 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	015a      	lsls	r2, r3, #5
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	4413      	add	r3, r2
 800fce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	69ba      	ldr	r2, [r7, #24]
 800fcf0:	0151      	lsls	r1, r2, #5
 800fcf2:	69fa      	ldr	r2, [r7, #28]
 800fcf4:	440a      	add	r2, r1
 800fcf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fcfe:	6013      	str	r3, [r2, #0]
 800fd00:	e00f      	b.n	800fd22 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fd02:	69bb      	ldr	r3, [r7, #24]
 800fd04:	015a      	lsls	r2, r3, #5
 800fd06:	69fb      	ldr	r3, [r7, #28]
 800fd08:	4413      	add	r3, r2
 800fd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	69ba      	ldr	r2, [r7, #24]
 800fd12:	0151      	lsls	r1, r2, #5
 800fd14:	69fa      	ldr	r2, [r7, #28]
 800fd16:	440a      	add	r2, r1
 800fd18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd20:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	68d9      	ldr	r1, [r3, #12]
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	781a      	ldrb	r2, [r3, #0]
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	695b      	ldr	r3, [r3, #20]
 800fd2e:	b298      	uxth	r0, r3
 800fd30:	79fb      	ldrb	r3, [r7, #7]
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	4603      	mov	r3, r0
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f000 fa38 	bl	80101ac <USB_WritePacket>
 800fd3c:	e0d2      	b.n	800fee4 <USB_EPStartXfer+0x480>
 800fd3e:	bf00      	nop
 800fd40:	e007ffff 	.word	0xe007ffff
 800fd44:	fff80000 	.word	0xfff80000
 800fd48:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fd4c:	69bb      	ldr	r3, [r7, #24]
 800fd4e:	015a      	lsls	r2, r3, #5
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	4413      	add	r3, r2
 800fd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd58:	691a      	ldr	r2, [r3, #16]
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	0159      	lsls	r1, r3, #5
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	440b      	add	r3, r1
 800fd62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd66:	4619      	mov	r1, r3
 800fd68:	4b61      	ldr	r3, [pc, #388]	; (800fef0 <USB_EPStartXfer+0x48c>)
 800fd6a:	4013      	ands	r3, r2
 800fd6c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fd6e:	69bb      	ldr	r3, [r7, #24]
 800fd70:	015a      	lsls	r2, r3, #5
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	4413      	add	r3, r2
 800fd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd7a:	691a      	ldr	r2, [r3, #16]
 800fd7c:	69bb      	ldr	r3, [r7, #24]
 800fd7e:	0159      	lsls	r1, r3, #5
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	440b      	add	r3, r1
 800fd84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd88:	4619      	mov	r1, r3
 800fd8a:	4b5a      	ldr	r3, [pc, #360]	; (800fef4 <USB_EPStartXfer+0x490>)
 800fd8c:	4013      	ands	r3, r2
 800fd8e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	695b      	ldr	r3, [r3, #20]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d123      	bne.n	800fde0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fd98:	69bb      	ldr	r3, [r7, #24]
 800fd9a:	015a      	lsls	r2, r3, #5
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	4413      	add	r3, r2
 800fda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda4:	691a      	ldr	r2, [r3, #16]
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdae:	69b9      	ldr	r1, [r7, #24]
 800fdb0:	0148      	lsls	r0, r1, #5
 800fdb2:	69f9      	ldr	r1, [r7, #28]
 800fdb4:	4401      	add	r1, r0
 800fdb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	015a      	lsls	r2, r3, #5
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdca:	691b      	ldr	r3, [r3, #16]
 800fdcc:	69ba      	ldr	r2, [r7, #24]
 800fdce:	0151      	lsls	r1, r2, #5
 800fdd0:	69fa      	ldr	r2, [r7, #28]
 800fdd2:	440a      	add	r2, r1
 800fdd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fddc:	6113      	str	r3, [r2, #16]
 800fdde:	e033      	b.n	800fe48 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	695a      	ldr	r2, [r3, #20]
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	689b      	ldr	r3, [r3, #8]
 800fde8:	4413      	add	r3, r2
 800fdea:	1e5a      	subs	r2, r3, #1
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	689b      	ldr	r3, [r3, #8]
 800fdf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdf4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	015a      	lsls	r2, r3, #5
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe02:	691a      	ldr	r2, [r3, #16]
 800fe04:	8afb      	ldrh	r3, [r7, #22]
 800fe06:	04d9      	lsls	r1, r3, #19
 800fe08:	4b3b      	ldr	r3, [pc, #236]	; (800fef8 <USB_EPStartXfer+0x494>)
 800fe0a:	400b      	ands	r3, r1
 800fe0c:	69b9      	ldr	r1, [r7, #24]
 800fe0e:	0148      	lsls	r0, r1, #5
 800fe10:	69f9      	ldr	r1, [r7, #28]
 800fe12:	4401      	add	r1, r0
 800fe14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800fe1c:	69bb      	ldr	r3, [r7, #24]
 800fe1e:	015a      	lsls	r2, r3, #5
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	4413      	add	r3, r2
 800fe24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe28:	691a      	ldr	r2, [r3, #16]
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	689b      	ldr	r3, [r3, #8]
 800fe2e:	8af9      	ldrh	r1, [r7, #22]
 800fe30:	fb01 f303 	mul.w	r3, r1, r3
 800fe34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe38:	69b9      	ldr	r1, [r7, #24]
 800fe3a:	0148      	lsls	r0, r1, #5
 800fe3c:	69f9      	ldr	r1, [r7, #28]
 800fe3e:	4401      	add	r1, r0
 800fe40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fe44:	4313      	orrs	r3, r2
 800fe46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d10d      	bne.n	800fe6a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d009      	beq.n	800fe6a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	68d9      	ldr	r1, [r3, #12]
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	015a      	lsls	r2, r3, #5
 800fe5e:	69fb      	ldr	r3, [r7, #28]
 800fe60:	4413      	add	r3, r2
 800fe62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe66:	460a      	mov	r2, r1
 800fe68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	78db      	ldrb	r3, [r3, #3]
 800fe6e:	2b01      	cmp	r3, #1
 800fe70:	d128      	bne.n	800fec4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe78:	689b      	ldr	r3, [r3, #8]
 800fe7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d110      	bne.n	800fea4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fe82:	69bb      	ldr	r3, [r7, #24]
 800fe84:	015a      	lsls	r2, r3, #5
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	4413      	add	r3, r2
 800fe8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	69ba      	ldr	r2, [r7, #24]
 800fe92:	0151      	lsls	r1, r2, #5
 800fe94:	69fa      	ldr	r2, [r7, #28]
 800fe96:	440a      	add	r2, r1
 800fe98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fea0:	6013      	str	r3, [r2, #0]
 800fea2:	e00f      	b.n	800fec4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	015a      	lsls	r2, r3, #5
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	4413      	add	r3, r2
 800feac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	69ba      	ldr	r2, [r7, #24]
 800feb4:	0151      	lsls	r1, r2, #5
 800feb6:	69fa      	ldr	r2, [r7, #28]
 800feb8:	440a      	add	r2, r1
 800feba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800febe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fec2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	015a      	lsls	r2, r3, #5
 800fec8:	69fb      	ldr	r3, [r7, #28]
 800feca:	4413      	add	r3, r2
 800fecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	69ba      	ldr	r2, [r7, #24]
 800fed4:	0151      	lsls	r1, r2, #5
 800fed6:	69fa      	ldr	r2, [r7, #28]
 800fed8:	440a      	add	r2, r1
 800feda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fede:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fee4:	2300      	movs	r3, #0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3720      	adds	r7, #32
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	fff80000 	.word	0xfff80000
 800fef4:	e007ffff 	.word	0xe007ffff
 800fef8:	1ff80000 	.word	0x1ff80000

0800fefc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b087      	sub	sp, #28
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	4613      	mov	r3, r2
 800ff08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	785b      	ldrb	r3, [r3, #1]
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	f040 80cd 	bne.w	80100b8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	695b      	ldr	r3, [r3, #20]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d132      	bne.n	800ff8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	015a      	lsls	r2, r3, #5
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff32:	691a      	ldr	r2, [r3, #16]
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	0159      	lsls	r1, r3, #5
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	440b      	add	r3, r1
 800ff3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff40:	4619      	mov	r1, r3
 800ff42:	4b98      	ldr	r3, [pc, #608]	; (80101a4 <USB_EP0StartXfer+0x2a8>)
 800ff44:	4013      	ands	r3, r2
 800ff46:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	015a      	lsls	r2, r3, #5
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	4413      	add	r3, r2
 800ff50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff54:	691b      	ldr	r3, [r3, #16]
 800ff56:	693a      	ldr	r2, [r7, #16]
 800ff58:	0151      	lsls	r1, r2, #5
 800ff5a:	697a      	ldr	r2, [r7, #20]
 800ff5c:	440a      	add	r2, r1
 800ff5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	015a      	lsls	r2, r3, #5
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	4413      	add	r3, r2
 800ff70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff74:	691a      	ldr	r2, [r3, #16]
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	0159      	lsls	r1, r3, #5
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	440b      	add	r3, r1
 800ff7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff82:	4619      	mov	r1, r3
 800ff84:	4b88      	ldr	r3, [pc, #544]	; (80101a8 <USB_EP0StartXfer+0x2ac>)
 800ff86:	4013      	ands	r3, r2
 800ff88:	610b      	str	r3, [r1, #16]
 800ff8a:	e04e      	b.n	801002a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	015a      	lsls	r2, r3, #5
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	4413      	add	r3, r2
 800ff94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff98:	691a      	ldr	r2, [r3, #16]
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	0159      	lsls	r1, r3, #5
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	440b      	add	r3, r1
 800ffa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	4b7f      	ldr	r3, [pc, #508]	; (80101a8 <USB_EP0StartXfer+0x2ac>)
 800ffaa:	4013      	ands	r3, r2
 800ffac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	015a      	lsls	r2, r3, #5
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffba:	691a      	ldr	r2, [r3, #16]
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	0159      	lsls	r1, r3, #5
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	440b      	add	r3, r1
 800ffc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffc8:	4619      	mov	r1, r3
 800ffca:	4b76      	ldr	r3, [pc, #472]	; (80101a4 <USB_EP0StartXfer+0x2a8>)
 800ffcc:	4013      	ands	r3, r2
 800ffce:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	695a      	ldr	r2, [r3, #20]
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	689b      	ldr	r3, [r3, #8]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d903      	bls.n	800ffe4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	689a      	ldr	r2, [r3, #8]
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	015a      	lsls	r2, r3, #5
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	4413      	add	r3, r2
 800ffec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fff0:	691b      	ldr	r3, [r3, #16]
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	0151      	lsls	r1, r2, #5
 800fff6:	697a      	ldr	r2, [r7, #20]
 800fff8:	440a      	add	r2, r1
 800fffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fffe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	015a      	lsls	r2, r3, #5
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	4413      	add	r3, r2
 801000c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010010:	691a      	ldr	r2, [r3, #16]
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	695b      	ldr	r3, [r3, #20]
 8010016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801001a:	6939      	ldr	r1, [r7, #16]
 801001c:	0148      	lsls	r0, r1, #5
 801001e:	6979      	ldr	r1, [r7, #20]
 8010020:	4401      	add	r1, r0
 8010022:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010026:	4313      	orrs	r3, r2
 8010028:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801002a:	79fb      	ldrb	r3, [r7, #7]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d11e      	bne.n	801006e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	691b      	ldr	r3, [r3, #16]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d009      	beq.n	801004c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	015a      	lsls	r2, r3, #5
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	4413      	add	r3, r2
 8010040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010044:	461a      	mov	r2, r3
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	691b      	ldr	r3, [r3, #16]
 801004a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	015a      	lsls	r2, r3, #5
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	4413      	add	r3, r2
 8010054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	693a      	ldr	r2, [r7, #16]
 801005c:	0151      	lsls	r1, r2, #5
 801005e:	697a      	ldr	r2, [r7, #20]
 8010060:	440a      	add	r2, r1
 8010062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010066:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801006a:	6013      	str	r3, [r2, #0]
 801006c:	e092      	b.n	8010194 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	015a      	lsls	r2, r3, #5
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	4413      	add	r3, r2
 8010076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	693a      	ldr	r2, [r7, #16]
 801007e:	0151      	lsls	r1, r2, #5
 8010080:	697a      	ldr	r2, [r7, #20]
 8010082:	440a      	add	r2, r1
 8010084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010088:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801008c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	695b      	ldr	r3, [r3, #20]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d07e      	beq.n	8010194 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801009c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	f003 030f 	and.w	r3, r3, #15
 80100a6:	2101      	movs	r1, #1
 80100a8:	fa01 f303 	lsl.w	r3, r1, r3
 80100ac:	6979      	ldr	r1, [r7, #20]
 80100ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100b2:	4313      	orrs	r3, r2
 80100b4:	634b      	str	r3, [r1, #52]	; 0x34
 80100b6:	e06d      	b.n	8010194 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	015a      	lsls	r2, r3, #5
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	4413      	add	r3, r2
 80100c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100c4:	691a      	ldr	r2, [r3, #16]
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	0159      	lsls	r1, r3, #5
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	440b      	add	r3, r1
 80100ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100d2:	4619      	mov	r1, r3
 80100d4:	4b34      	ldr	r3, [pc, #208]	; (80101a8 <USB_EP0StartXfer+0x2ac>)
 80100d6:	4013      	ands	r3, r2
 80100d8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	015a      	lsls	r2, r3, #5
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	4413      	add	r3, r2
 80100e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e6:	691a      	ldr	r2, [r3, #16]
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	0159      	lsls	r1, r3, #5
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	440b      	add	r3, r1
 80100f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100f4:	4619      	mov	r1, r3
 80100f6:	4b2b      	ldr	r3, [pc, #172]	; (80101a4 <USB_EP0StartXfer+0x2a8>)
 80100f8:	4013      	ands	r3, r2
 80100fa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	695b      	ldr	r3, [r3, #20]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d003      	beq.n	801010c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	689a      	ldr	r2, [r3, #8]
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	015a      	lsls	r2, r3, #5
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	4413      	add	r3, r2
 8010114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010118:	691b      	ldr	r3, [r3, #16]
 801011a:	693a      	ldr	r2, [r7, #16]
 801011c:	0151      	lsls	r1, r2, #5
 801011e:	697a      	ldr	r2, [r7, #20]
 8010120:	440a      	add	r2, r1
 8010122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801012a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	015a      	lsls	r2, r3, #5
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	4413      	add	r3, r2
 8010134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010138:	691a      	ldr	r2, [r3, #16]
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	689b      	ldr	r3, [r3, #8]
 801013e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010142:	6939      	ldr	r1, [r7, #16]
 8010144:	0148      	lsls	r0, r1, #5
 8010146:	6979      	ldr	r1, [r7, #20]
 8010148:	4401      	add	r1, r0
 801014a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801014e:	4313      	orrs	r3, r2
 8010150:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010152:	79fb      	ldrb	r3, [r7, #7]
 8010154:	2b01      	cmp	r3, #1
 8010156:	d10d      	bne.n	8010174 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d009      	beq.n	8010174 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	68d9      	ldr	r1, [r3, #12]
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	015a      	lsls	r2, r3, #5
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	4413      	add	r3, r2
 801016c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010170:	460a      	mov	r2, r1
 8010172:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	015a      	lsls	r2, r3, #5
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	4413      	add	r3, r2
 801017c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	693a      	ldr	r2, [r7, #16]
 8010184:	0151      	lsls	r1, r2, #5
 8010186:	697a      	ldr	r2, [r7, #20]
 8010188:	440a      	add	r2, r1
 801018a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801018e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010192:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010194:	2300      	movs	r3, #0
}
 8010196:	4618      	mov	r0, r3
 8010198:	371c      	adds	r7, #28
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr
 80101a2:	bf00      	nop
 80101a4:	e007ffff 	.word	0xe007ffff
 80101a8:	fff80000 	.word	0xfff80000

080101ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b089      	sub	sp, #36	; 0x24
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	60f8      	str	r0, [r7, #12]
 80101b4:	60b9      	str	r1, [r7, #8]
 80101b6:	4611      	mov	r1, r2
 80101b8:	461a      	mov	r2, r3
 80101ba:	460b      	mov	r3, r1
 80101bc:	71fb      	strb	r3, [r7, #7]
 80101be:	4613      	mov	r3, r2
 80101c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80101ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d123      	bne.n	801021a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80101d2:	88bb      	ldrh	r3, [r7, #4]
 80101d4:	3303      	adds	r3, #3
 80101d6:	089b      	lsrs	r3, r3, #2
 80101d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80101da:	2300      	movs	r3, #0
 80101dc:	61bb      	str	r3, [r7, #24]
 80101de:	e018      	b.n	8010212 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80101e0:	79fb      	ldrb	r3, [r7, #7]
 80101e2:	031a      	lsls	r2, r3, #12
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	4413      	add	r3, r2
 80101e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101ec:	461a      	mov	r2, r3
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80101f4:	69fb      	ldr	r3, [r7, #28]
 80101f6:	3301      	adds	r3, #1
 80101f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	3301      	adds	r3, #1
 80101fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	3301      	adds	r3, #1
 8010204:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	3301      	adds	r3, #1
 801020a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	3301      	adds	r3, #1
 8010210:	61bb      	str	r3, [r7, #24]
 8010212:	69ba      	ldr	r2, [r7, #24]
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	429a      	cmp	r2, r3
 8010218:	d3e2      	bcc.n	80101e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801021a:	2300      	movs	r3, #0
}
 801021c:	4618      	mov	r0, r3
 801021e:	3724      	adds	r7, #36	; 0x24
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr

08010228 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010228:	b480      	push	{r7}
 801022a:	b08b      	sub	sp, #44	; 0x2c
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	4613      	mov	r3, r2
 8010234:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801023e:	88fb      	ldrh	r3, [r7, #6]
 8010240:	089b      	lsrs	r3, r3, #2
 8010242:	b29b      	uxth	r3, r3
 8010244:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010246:	88fb      	ldrh	r3, [r7, #6]
 8010248:	f003 0303 	and.w	r3, r3, #3
 801024c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801024e:	2300      	movs	r3, #0
 8010250:	623b      	str	r3, [r7, #32]
 8010252:	e014      	b.n	801027e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010254:	69bb      	ldr	r3, [r7, #24]
 8010256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010262:	3301      	adds	r3, #1
 8010264:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	3301      	adds	r3, #1
 801026a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801026c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026e:	3301      	adds	r3, #1
 8010270:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010274:	3301      	adds	r3, #1
 8010276:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010278:	6a3b      	ldr	r3, [r7, #32]
 801027a:	3301      	adds	r3, #1
 801027c:	623b      	str	r3, [r7, #32]
 801027e:	6a3a      	ldr	r2, [r7, #32]
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	429a      	cmp	r2, r3
 8010284:	d3e6      	bcc.n	8010254 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010286:	8bfb      	ldrh	r3, [r7, #30]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d01e      	beq.n	80102ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801028c:	2300      	movs	r3, #0
 801028e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010290:	69bb      	ldr	r3, [r7, #24]
 8010292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010296:	461a      	mov	r2, r3
 8010298:	f107 0310 	add.w	r3, r7, #16
 801029c:	6812      	ldr	r2, [r2, #0]
 801029e:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80102a0:	693a      	ldr	r2, [r7, #16]
 80102a2:	6a3b      	ldr	r3, [r7, #32]
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	00db      	lsls	r3, r3, #3
 80102a8:	fa22 f303 	lsr.w	r3, r2, r3
 80102ac:	b2da      	uxtb	r2, r3
 80102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b0:	701a      	strb	r2, [r3, #0]
      i++;
 80102b2:	6a3b      	ldr	r3, [r7, #32]
 80102b4:	3301      	adds	r3, #1
 80102b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80102b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ba:	3301      	adds	r3, #1
 80102bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80102be:	8bfb      	ldrh	r3, [r7, #30]
 80102c0:	3b01      	subs	r3, #1
 80102c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80102c4:	8bfb      	ldrh	r3, [r7, #30]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d1ea      	bne.n	80102a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80102ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	372c      	adds	r7, #44	; 0x2c
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80102d8:	b480      	push	{r7}
 80102da:	b085      	sub	sp, #20
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	785b      	ldrb	r3, [r3, #1]
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d12c      	bne.n	801034e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	015a      	lsls	r2, r3, #5
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	4413      	add	r3, r2
 80102fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	db12      	blt.n	801032c <USB_EPSetStall+0x54>
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d00f      	beq.n	801032c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	015a      	lsls	r2, r3, #5
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	4413      	add	r3, r2
 8010314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	68ba      	ldr	r2, [r7, #8]
 801031c:	0151      	lsls	r1, r2, #5
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	440a      	add	r2, r1
 8010322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010326:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801032a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	015a      	lsls	r2, r3, #5
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	4413      	add	r3, r2
 8010334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	68ba      	ldr	r2, [r7, #8]
 801033c:	0151      	lsls	r1, r2, #5
 801033e:	68fa      	ldr	r2, [r7, #12]
 8010340:	440a      	add	r2, r1
 8010342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801034a:	6013      	str	r3, [r2, #0]
 801034c:	e02b      	b.n	80103a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	015a      	lsls	r2, r3, #5
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	4413      	add	r3, r2
 8010356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	db12      	blt.n	8010386 <USB_EPSetStall+0xae>
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00f      	beq.n	8010386 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	015a      	lsls	r2, r3, #5
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	4413      	add	r3, r2
 801036e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68ba      	ldr	r2, [r7, #8]
 8010376:	0151      	lsls	r1, r2, #5
 8010378:	68fa      	ldr	r2, [r7, #12]
 801037a:	440a      	add	r2, r1
 801037c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010384:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	015a      	lsls	r2, r3, #5
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	4413      	add	r3, r2
 801038e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	68ba      	ldr	r2, [r7, #8]
 8010396:	0151      	lsls	r1, r2, #5
 8010398:	68fa      	ldr	r2, [r7, #12]
 801039a:	440a      	add	r2, r1
 801039c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80103a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80103a6:	2300      	movs	r3, #0
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3714      	adds	r7, #20
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b085      	sub	sp, #20
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	785b      	ldrb	r3, [r3, #1]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d128      	bne.n	8010422 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	015a      	lsls	r2, r3, #5
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	4413      	add	r3, r2
 80103d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	68ba      	ldr	r2, [r7, #8]
 80103e0:	0151      	lsls	r1, r2, #5
 80103e2:	68fa      	ldr	r2, [r7, #12]
 80103e4:	440a      	add	r2, r1
 80103e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80103ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	78db      	ldrb	r3, [r3, #3]
 80103f4:	2b03      	cmp	r3, #3
 80103f6:	d003      	beq.n	8010400 <USB_EPClearStall+0x4c>
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	78db      	ldrb	r3, [r3, #3]
 80103fc:	2b02      	cmp	r3, #2
 80103fe:	d138      	bne.n	8010472 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	015a      	lsls	r2, r3, #5
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	4413      	add	r3, r2
 8010408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	68ba      	ldr	r2, [r7, #8]
 8010410:	0151      	lsls	r1, r2, #5
 8010412:	68fa      	ldr	r2, [r7, #12]
 8010414:	440a      	add	r2, r1
 8010416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801041a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801041e:	6013      	str	r3, [r2, #0]
 8010420:	e027      	b.n	8010472 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	015a      	lsls	r2, r3, #5
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	4413      	add	r3, r2
 801042a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	68ba      	ldr	r2, [r7, #8]
 8010432:	0151      	lsls	r1, r2, #5
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	440a      	add	r2, r1
 8010438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801043c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010440:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	78db      	ldrb	r3, [r3, #3]
 8010446:	2b03      	cmp	r3, #3
 8010448:	d003      	beq.n	8010452 <USB_EPClearStall+0x9e>
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	78db      	ldrb	r3, [r3, #3]
 801044e:	2b02      	cmp	r3, #2
 8010450:	d10f      	bne.n	8010472 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	015a      	lsls	r2, r3, #5
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	4413      	add	r3, r2
 801045a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68ba      	ldr	r2, [r7, #8]
 8010462:	0151      	lsls	r1, r2, #5
 8010464:	68fa      	ldr	r2, [r7, #12]
 8010466:	440a      	add	r2, r1
 8010468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801046c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010470:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010472:	2300      	movs	r3, #0
}
 8010474:	4618      	mov	r0, r3
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr

08010480 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010480:	b480      	push	{r7}
 8010482:	b085      	sub	sp, #20
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	460b      	mov	r3, r1
 801048a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801049e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80104a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	78fb      	ldrb	r3, [r7, #3]
 80104ae:	011b      	lsls	r3, r3, #4
 80104b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80104b4:	68f9      	ldr	r1, [r7, #12]
 80104b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104ba:	4313      	orrs	r3, r2
 80104bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80104be:	2300      	movs	r3, #0
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3714      	adds	r7, #20
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b085      	sub	sp, #20
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80104e6:	f023 0303 	bic.w	r3, r3, #3
 80104ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80104fa:	f023 0302 	bic.w	r3, r3, #2
 80104fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010500:	2300      	movs	r3, #0
}
 8010502:	4618      	mov	r0, r3
 8010504:	3714      	adds	r7, #20
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr

0801050e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801050e:	b480      	push	{r7}
 8010510:	b085      	sub	sp, #20
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	68fa      	ldr	r2, [r7, #12]
 8010524:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010528:	f023 0303 	bic.w	r3, r3, #3
 801052c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	68fa      	ldr	r2, [r7, #12]
 8010538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801053c:	f043 0302 	orr.w	r3, r3, #2
 8010540:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010542:	2300      	movs	r3, #0
}
 8010544:	4618      	mov	r0, r3
 8010546:	3714      	adds	r7, #20
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr

08010550 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010550:	b480      	push	{r7}
 8010552:	b085      	sub	sp, #20
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	695b      	ldr	r3, [r3, #20]
 801055c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	699b      	ldr	r3, [r3, #24]
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	4013      	ands	r3, r2
 8010566:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010568:	68fb      	ldr	r3, [r7, #12]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3714      	adds	r7, #20
 801056e:	46bd      	mov	sp, r7
 8010570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010574:	4770      	bx	lr

08010576 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010576:	b480      	push	{r7}
 8010578:	b085      	sub	sp, #20
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010588:	699b      	ldr	r3, [r3, #24]
 801058a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010592:	69db      	ldr	r3, [r3, #28]
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	4013      	ands	r3, r2
 8010598:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	0c1b      	lsrs	r3, r3, #16
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3714      	adds	r7, #20
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr

080105aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80105aa:	b480      	push	{r7}
 80105ac:	b085      	sub	sp, #20
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105bc:	699b      	ldr	r3, [r3, #24]
 80105be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105c6:	69db      	ldr	r3, [r3, #28]
 80105c8:	68ba      	ldr	r2, [r7, #8]
 80105ca:	4013      	ands	r3, r2
 80105cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	b29b      	uxth	r3, r3
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3714      	adds	r7, #20
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80105de:	b480      	push	{r7}
 80105e0:	b085      	sub	sp, #20
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
 80105e6:	460b      	mov	r3, r1
 80105e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80105ee:	78fb      	ldrb	r3, [r7, #3]
 80105f0:	015a      	lsls	r2, r3, #5
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	4413      	add	r3, r2
 80105f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105fa:	689b      	ldr	r3, [r3, #8]
 80105fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010604:	695b      	ldr	r3, [r3, #20]
 8010606:	68ba      	ldr	r2, [r7, #8]
 8010608:	4013      	ands	r3, r2
 801060a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801060c:	68bb      	ldr	r3, [r7, #8]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3714      	adds	r7, #20
 8010612:	46bd      	mov	sp, r7
 8010614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010618:	4770      	bx	lr

0801061a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801061a:	b480      	push	{r7}
 801061c:	b087      	sub	sp, #28
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
 8010622:	460b      	mov	r3, r1
 8010624:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010630:	691b      	ldr	r3, [r3, #16]
 8010632:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801063a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801063c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801063e:	78fb      	ldrb	r3, [r7, #3]
 8010640:	f003 030f 	and.w	r3, r3, #15
 8010644:	68fa      	ldr	r2, [r7, #12]
 8010646:	fa22 f303 	lsr.w	r3, r2, r3
 801064a:	01db      	lsls	r3, r3, #7
 801064c:	b2db      	uxtb	r3, r3
 801064e:	693a      	ldr	r2, [r7, #16]
 8010650:	4313      	orrs	r3, r2
 8010652:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010654:	78fb      	ldrb	r3, [r7, #3]
 8010656:	015a      	lsls	r2, r3, #5
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	4413      	add	r3, r2
 801065c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010660:	689b      	ldr	r3, [r3, #8]
 8010662:	693a      	ldr	r2, [r7, #16]
 8010664:	4013      	ands	r3, r2
 8010666:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010668:	68bb      	ldr	r3, [r7, #8]
}
 801066a:	4618      	mov	r0, r3
 801066c:	371c      	adds	r7, #28
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr

08010676 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010676:	b480      	push	{r7}
 8010678:	b083      	sub	sp, #12
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	695b      	ldr	r3, [r3, #20]
 8010682:	f003 0301 	and.w	r3, r3, #1
}
 8010686:	4618      	mov	r0, r3
 8010688:	370c      	adds	r7, #12
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr
	...

08010694 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010694:	b480      	push	{r7}
 8010696:	b085      	sub	sp, #20
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106ae:	4619      	mov	r1, r3
 80106b0:	4b09      	ldr	r3, [pc, #36]	; (80106d8 <USB_ActivateSetup+0x44>)
 80106b2:	4013      	ands	r3, r2
 80106b4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80106c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80106c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3714      	adds	r7, #20
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr
 80106d8:	fffff800 	.word	0xfffff800

080106dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80106dc:	b480      	push	{r7}
 80106de:	b087      	sub	sp, #28
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	60f8      	str	r0, [r7, #12]
 80106e4:	460b      	mov	r3, r1
 80106e6:	607a      	str	r2, [r7, #4]
 80106e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	333c      	adds	r3, #60	; 0x3c
 80106f2:	3304      	adds	r3, #4
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	4a26      	ldr	r2, [pc, #152]	; (8010794 <USB_EP0_OutStart+0xb8>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d90a      	bls.n	8010716 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801070c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010710:	d101      	bne.n	8010716 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010712:	2300      	movs	r3, #0
 8010714:	e037      	b.n	8010786 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801071c:	461a      	mov	r2, r3
 801071e:	2300      	movs	r3, #0
 8010720:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010728:	691b      	ldr	r3, [r3, #16]
 801072a:	697a      	ldr	r2, [r7, #20]
 801072c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801073c:	691b      	ldr	r3, [r3, #16]
 801073e:	697a      	ldr	r2, [r7, #20]
 8010740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010744:	f043 0318 	orr.w	r3, r3, #24
 8010748:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010750:	691b      	ldr	r3, [r3, #16]
 8010752:	697a      	ldr	r2, [r7, #20]
 8010754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010758:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801075c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801075e:	7afb      	ldrb	r3, [r7, #11]
 8010760:	2b01      	cmp	r3, #1
 8010762:	d10f      	bne.n	8010784 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801076a:	461a      	mov	r2, r3
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	697a      	ldr	r2, [r7, #20]
 801077a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801077e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010782:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010784:	2300      	movs	r3, #0
}
 8010786:	4618      	mov	r0, r3
 8010788:	371c      	adds	r7, #28
 801078a:	46bd      	mov	sp, r7
 801078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop
 8010794:	4f54300a 	.word	0x4f54300a

08010798 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80107a0:	2300      	movs	r3, #0
 80107a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	3301      	adds	r3, #1
 80107a8:	60fb      	str	r3, [r7, #12]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	4a13      	ldr	r2, [pc, #76]	; (80107fc <USB_CoreReset+0x64>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d901      	bls.n	80107b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80107b2:	2303      	movs	r3, #3
 80107b4:	e01b      	b.n	80107ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	691b      	ldr	r3, [r3, #16]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	daf2      	bge.n	80107a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80107be:	2300      	movs	r3, #0
 80107c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	691b      	ldr	r3, [r3, #16]
 80107c6:	f043 0201 	orr.w	r2, r3, #1
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	3301      	adds	r3, #1
 80107d2:	60fb      	str	r3, [r7, #12]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	4a09      	ldr	r2, [pc, #36]	; (80107fc <USB_CoreReset+0x64>)
 80107d8:	4293      	cmp	r3, r2
 80107da:	d901      	bls.n	80107e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80107dc:	2303      	movs	r3, #3
 80107de:	e006      	b.n	80107ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	691b      	ldr	r3, [r3, #16]
 80107e4:	f003 0301 	and.w	r3, r3, #1
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d0f0      	beq.n	80107ce <USB_CoreReset+0x36>

  return HAL_OK;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3714      	adds	r7, #20
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop
 80107fc:	00030d40 	.word	0x00030d40

08010800 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	460b      	mov	r3, r1
 801080a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801080c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010810:	f002 f91a 	bl	8012a48 <USBD_static_malloc>
 8010814:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d105      	bne.n	8010828 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010824:	2302      	movs	r3, #2
 8010826:	e066      	b.n	80108f6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	68fa      	ldr	r2, [r7, #12]
 801082c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	7c1b      	ldrb	r3, [r3, #16]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d119      	bne.n	801086c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010838:	f44f 7300 	mov.w	r3, #512	; 0x200
 801083c:	2202      	movs	r2, #2
 801083e:	2181      	movs	r1, #129	; 0x81
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f001 ffde 	bl	8012802 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2201      	movs	r2, #1
 801084a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801084c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010850:	2202      	movs	r2, #2
 8010852:	2101      	movs	r1, #1
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f001 ffd4 	bl	8012802 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2201      	movs	r2, #1
 801085e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2210      	movs	r2, #16
 8010866:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801086a:	e016      	b.n	801089a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801086c:	2340      	movs	r3, #64	; 0x40
 801086e:	2202      	movs	r2, #2
 8010870:	2181      	movs	r1, #129	; 0x81
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f001 ffc5 	bl	8012802 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2201      	movs	r2, #1
 801087c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801087e:	2340      	movs	r3, #64	; 0x40
 8010880:	2202      	movs	r2, #2
 8010882:	2101      	movs	r1, #1
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f001 ffbc 	bl	8012802 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2201      	movs	r2, #1
 801088e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2210      	movs	r2, #16
 8010896:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801089a:	2308      	movs	r3, #8
 801089c:	2203      	movs	r2, #3
 801089e:	2182      	movs	r1, #130	; 0x82
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f001 ffae 	bl	8012802 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2201      	movs	r2, #1
 80108aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2200      	movs	r2, #0
 80108bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2200      	movs	r2, #0
 80108c4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	7c1b      	ldrb	r3, [r3, #16]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d109      	bne.n	80108e4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80108d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108da:	2101      	movs	r1, #1
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f002 f87f 	bl	80129e0 <USBD_LL_PrepareReceive>
 80108e2:	e007      	b.n	80108f4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80108ea:	2340      	movs	r3, #64	; 0x40
 80108ec:	2101      	movs	r1, #1
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f002 f876 	bl	80129e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3710      	adds	r7, #16
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}

080108fe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108fe:	b580      	push	{r7, lr}
 8010900:	b082      	sub	sp, #8
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
 8010906:	460b      	mov	r3, r1
 8010908:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801090a:	2181      	movs	r1, #129	; 0x81
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f001 ff9e 	bl	801284e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010918:	2101      	movs	r1, #1
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f001 ff97 	bl	801284e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010928:	2182      	movs	r1, #130	; 0x82
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f001 ff8f 	bl	801284e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010946:	2b00      	cmp	r3, #0
 8010948:	d00e      	beq.n	8010968 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801095a:	4618      	mov	r0, r3
 801095c:	f002 f882 	bl	8012a64 <USBD_static_free>
    pdev->pClassData = NULL;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2200      	movs	r2, #0
 8010964:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010968:	2300      	movs	r3, #0
}
 801096a:	4618      	mov	r0, r3
 801096c:	3708      	adds	r7, #8
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
	...

08010974 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b086      	sub	sp, #24
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010984:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010986:	2300      	movs	r3, #0
 8010988:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801098a:	2300      	movs	r3, #0
 801098c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d101      	bne.n	801099c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8010998:	2303      	movs	r3, #3
 801099a:	e0af      	b.n	8010afc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d03f      	beq.n	8010a28 <USBD_CDC_Setup+0xb4>
 80109a8:	2b20      	cmp	r3, #32
 80109aa:	f040 809f 	bne.w	8010aec <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	88db      	ldrh	r3, [r3, #6]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d02e      	beq.n	8010a14 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	b25b      	sxtb	r3, r3
 80109bc:	2b00      	cmp	r3, #0
 80109be:	da16      	bge.n	80109ee <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	683a      	ldr	r2, [r7, #0]
 80109ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80109cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80109ce:	683a      	ldr	r2, [r7, #0]
 80109d0:	88d2      	ldrh	r2, [r2, #6]
 80109d2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	88db      	ldrh	r3, [r3, #6]
 80109d8:	2b07      	cmp	r3, #7
 80109da:	bf28      	it	cs
 80109dc:	2307      	movcs	r3, #7
 80109de:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	89fa      	ldrh	r2, [r7, #14]
 80109e4:	4619      	mov	r1, r3
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f001 fb03 	bl	8011ff2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80109ec:	e085      	b.n	8010afa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	785a      	ldrb	r2, [r3, #1]
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	88db      	ldrh	r3, [r3, #6]
 80109fc:	b2da      	uxtb	r2, r3
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010a04:	6939      	ldr	r1, [r7, #16]
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	88db      	ldrh	r3, [r3, #6]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f001 fb1c 	bl	801204a <USBD_CtlPrepareRx>
      break;
 8010a12:	e072      	b.n	8010afa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	683a      	ldr	r2, [r7, #0]
 8010a1e:	7850      	ldrb	r0, [r2, #1]
 8010a20:	2200      	movs	r2, #0
 8010a22:	6839      	ldr	r1, [r7, #0]
 8010a24:	4798      	blx	r3
      break;
 8010a26:	e068      	b.n	8010afa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	785b      	ldrb	r3, [r3, #1]
 8010a2c:	2b0b      	cmp	r3, #11
 8010a2e:	d852      	bhi.n	8010ad6 <USBD_CDC_Setup+0x162>
 8010a30:	a201      	add	r2, pc, #4	; (adr r2, 8010a38 <USBD_CDC_Setup+0xc4>)
 8010a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a36:	bf00      	nop
 8010a38:	08010a69 	.word	0x08010a69
 8010a3c:	08010ae5 	.word	0x08010ae5
 8010a40:	08010ad7 	.word	0x08010ad7
 8010a44:	08010ad7 	.word	0x08010ad7
 8010a48:	08010ad7 	.word	0x08010ad7
 8010a4c:	08010ad7 	.word	0x08010ad7
 8010a50:	08010ad7 	.word	0x08010ad7
 8010a54:	08010ad7 	.word	0x08010ad7
 8010a58:	08010ad7 	.word	0x08010ad7
 8010a5c:	08010ad7 	.word	0x08010ad7
 8010a60:	08010a93 	.word	0x08010a93
 8010a64:	08010abd 	.word	0x08010abd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	2b03      	cmp	r3, #3
 8010a72:	d107      	bne.n	8010a84 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010a74:	f107 030a 	add.w	r3, r7, #10
 8010a78:	2202      	movs	r2, #2
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f001 fab8 	bl	8011ff2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010a82:	e032      	b.n	8010aea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010a84:	6839      	ldr	r1, [r7, #0]
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f001 fa42 	bl	8011f10 <USBD_CtlError>
            ret = USBD_FAIL;
 8010a8c:	2303      	movs	r3, #3
 8010a8e:	75fb      	strb	r3, [r7, #23]
          break;
 8010a90:	e02b      	b.n	8010aea <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a98:	b2db      	uxtb	r3, r3
 8010a9a:	2b03      	cmp	r3, #3
 8010a9c:	d107      	bne.n	8010aae <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010a9e:	f107 030d 	add.w	r3, r7, #13
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f001 faa3 	bl	8011ff2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010aac:	e01d      	b.n	8010aea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010aae:	6839      	ldr	r1, [r7, #0]
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f001 fa2d 	bl	8011f10 <USBD_CtlError>
            ret = USBD_FAIL;
 8010ab6:	2303      	movs	r3, #3
 8010ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8010aba:	e016      	b.n	8010aea <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	2b03      	cmp	r3, #3
 8010ac6:	d00f      	beq.n	8010ae8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8010ac8:	6839      	ldr	r1, [r7, #0]
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f001 fa20 	bl	8011f10 <USBD_CtlError>
            ret = USBD_FAIL;
 8010ad0:	2303      	movs	r3, #3
 8010ad2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010ad4:	e008      	b.n	8010ae8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010ad6:	6839      	ldr	r1, [r7, #0]
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f001 fa19 	bl	8011f10 <USBD_CtlError>
          ret = USBD_FAIL;
 8010ade:	2303      	movs	r3, #3
 8010ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8010ae2:	e002      	b.n	8010aea <USBD_CDC_Setup+0x176>
          break;
 8010ae4:	bf00      	nop
 8010ae6:	e008      	b.n	8010afa <USBD_CDC_Setup+0x186>
          break;
 8010ae8:	bf00      	nop
      }
      break;
 8010aea:	e006      	b.n	8010afa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010aec:	6839      	ldr	r1, [r7, #0]
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f001 fa0e 	bl	8011f10 <USBD_CtlError>
      ret = USBD_FAIL;
 8010af4:	2303      	movs	r3, #3
 8010af6:	75fb      	strb	r3, [r7, #23]
      break;
 8010af8:	bf00      	nop
  }

  return (uint8_t)ret;
 8010afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3718      	adds	r7, #24
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d101      	bne.n	8010b26 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010b22:	2303      	movs	r3, #3
 8010b24:	e04f      	b.n	8010bc6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010b2e:	78fa      	ldrb	r2, [r7, #3]
 8010b30:	6879      	ldr	r1, [r7, #4]
 8010b32:	4613      	mov	r3, r2
 8010b34:	009b      	lsls	r3, r3, #2
 8010b36:	4413      	add	r3, r2
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	440b      	add	r3, r1
 8010b3c:	3318      	adds	r3, #24
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d029      	beq.n	8010b98 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010b44:	78fa      	ldrb	r2, [r7, #3]
 8010b46:	6879      	ldr	r1, [r7, #4]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	4413      	add	r3, r2
 8010b4e:	009b      	lsls	r3, r3, #2
 8010b50:	440b      	add	r3, r1
 8010b52:	3318      	adds	r3, #24
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	78f9      	ldrb	r1, [r7, #3]
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	1a5b      	subs	r3, r3, r1
 8010b60:	009b      	lsls	r3, r3, #2
 8010b62:	4403      	add	r3, r0
 8010b64:	3344      	adds	r3, #68	; 0x44
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	fbb2 f1f3 	udiv	r1, r2, r3
 8010b6c:	fb03 f301 	mul.w	r3, r3, r1
 8010b70:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d110      	bne.n	8010b98 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010b76:	78fa      	ldrb	r2, [r7, #3]
 8010b78:	6879      	ldr	r1, [r7, #4]
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	4413      	add	r3, r2
 8010b80:	009b      	lsls	r3, r3, #2
 8010b82:	440b      	add	r3, r1
 8010b84:	3318      	adds	r3, #24
 8010b86:	2200      	movs	r2, #0
 8010b88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010b8a:	78f9      	ldrb	r1, [r7, #3]
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	2200      	movs	r2, #0
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f001 ff04 	bl	801299e <USBD_LL_Transmit>
 8010b96:	e015      	b.n	8010bc4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ba6:	691b      	ldr	r3, [r3, #16]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00b      	beq.n	8010bc4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010bb2:	691b      	ldr	r3, [r3, #16]
 8010bb4:	68ba      	ldr	r2, [r7, #8]
 8010bb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010bba:	68ba      	ldr	r2, [r7, #8]
 8010bbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010bc0:	78fa      	ldrb	r2, [r7, #3]
 8010bc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3710      	adds	r7, #16
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b084      	sub	sp, #16
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010be0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d101      	bne.n	8010bf0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010bec:	2303      	movs	r3, #3
 8010bee:	e015      	b.n	8010c1c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010bf0:	78fb      	ldrb	r3, [r7, #3]
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f001 ff14 	bl	8012a22 <USBD_LL_GetRxDataSize>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010c16:	4611      	mov	r1, r2
 8010c18:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010c1a:	2300      	movs	r3, #0
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3710      	adds	r7, #16
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c32:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d101      	bne.n	8010c3e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010c3a:	2303      	movs	r3, #3
 8010c3c:	e01b      	b.n	8010c76 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d015      	beq.n	8010c74 <USBD_CDC_EP0_RxReady+0x50>
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010c4e:	2bff      	cmp	r3, #255	; 0xff
 8010c50:	d010      	beq.n	8010c74 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c58:	689b      	ldr	r3, [r3, #8]
 8010c5a:	68fa      	ldr	r2, [r7, #12]
 8010c5c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010c60:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010c62:	68fa      	ldr	r2, [r7, #12]
 8010c64:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010c68:	b292      	uxth	r2, r2
 8010c6a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	22ff      	movs	r2, #255	; 0xff
 8010c70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010c74:	2300      	movs	r3, #0
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3710      	adds	r7, #16
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
	...

08010c80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010c80:	b480      	push	{r7}
 8010c82:	b083      	sub	sp, #12
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2243      	movs	r2, #67	; 0x43
 8010c8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010c8e:	4b03      	ldr	r3, [pc, #12]	; (8010c9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	370c      	adds	r7, #12
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr
 8010c9c:	240000a0 	.word	0x240000a0

08010ca0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b083      	sub	sp, #12
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2243      	movs	r2, #67	; 0x43
 8010cac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010cae:	4b03      	ldr	r3, [pc, #12]	; (8010cbc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr
 8010cbc:	2400005c 	.word	0x2400005c

08010cc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b083      	sub	sp, #12
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2243      	movs	r2, #67	; 0x43
 8010ccc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010cce:	4b03      	ldr	r3, [pc, #12]	; (8010cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	370c      	adds	r7, #12
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr
 8010cdc:	240000e4 	.word	0x240000e4

08010ce0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	220a      	movs	r2, #10
 8010cec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010cee:	4b03      	ldr	r3, [pc, #12]	; (8010cfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	370c      	adds	r7, #12
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr
 8010cfc:	24000018 	.word	0x24000018

08010d00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d101      	bne.n	8010d14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010d10:	2303      	movs	r3, #3
 8010d12:	e004      	b.n	8010d1e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	683a      	ldr	r2, [r7, #0]
 8010d18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010d1c:	2300      	movs	r3, #0
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	370c      	adds	r7, #12
 8010d22:	46bd      	mov	sp, r7
 8010d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d28:	4770      	bx	lr

08010d2a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010d2a:	b480      	push	{r7}
 8010d2c:	b087      	sub	sp, #28
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	60f8      	str	r0, [r7, #12]
 8010d32:	60b9      	str	r1, [r7, #8]
 8010d34:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d3c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d101      	bne.n	8010d48 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010d44:	2303      	movs	r3, #3
 8010d46:	e008      	b.n	8010d5a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	68ba      	ldr	r2, [r7, #8]
 8010d4c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010d58:	2300      	movs	r3, #0
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	371c      	adds	r7, #28
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr

08010d66 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010d66:	b480      	push	{r7}
 8010d68:	b085      	sub	sp, #20
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	6078      	str	r0, [r7, #4]
 8010d6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d101      	bne.n	8010d82 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010d7e:	2303      	movs	r3, #3
 8010d80:	e004      	b.n	8010d8c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	683a      	ldr	r2, [r7, #0]
 8010d86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010d8a:	2300      	movs	r3, #0
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3714      	adds	r7, #20
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr

08010d98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010da6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d101      	bne.n	8010db6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010db2:	2303      	movs	r3, #3
 8010db4:	e016      	b.n	8010de4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	7c1b      	ldrb	r3, [r3, #16]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d109      	bne.n	8010dd2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dc8:	2101      	movs	r1, #1
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f001 fe08 	bl	80129e0 <USBD_LL_PrepareReceive>
 8010dd0:	e007      	b.n	8010de2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010dd8:	2340      	movs	r3, #64	; 0x40
 8010dda:	2101      	movs	r1, #1
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f001 fdff 	bl	80129e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b086      	sub	sp, #24
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	4613      	mov	r3, r2
 8010df8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d10a      	bne.n	8010e16 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8010e00:	4817      	ldr	r0, [pc, #92]	; (8010e60 <USBD_Init+0x74>)
 8010e02:	f001 fea5 	bl	8012b50 <iprintf>
 8010e06:	4817      	ldr	r0, [pc, #92]	; (8010e64 <USBD_Init+0x78>)
 8010e08:	f001 fea2 	bl	8012b50 <iprintf>
 8010e0c:	200a      	movs	r0, #10
 8010e0e:	f001 feb7 	bl	8012b80 <putchar>
#endif
    return USBD_FAIL;
 8010e12:	2303      	movs	r3, #3
 8010e14:	e01f      	b.n	8010e56 <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	2200      	movs	r2, #0
 8010e22:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d003      	beq.n	8010e3c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	68ba      	ldr	r2, [r7, #8]
 8010e38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2201      	movs	r2, #1
 8010e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	79fa      	ldrb	r2, [r7, #7]
 8010e48:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010e4a:	68f8      	ldr	r0, [r7, #12]
 8010e4c:	f001 fc68 	bl	8012720 <USBD_LL_Init>
 8010e50:	4603      	mov	r3, r0
 8010e52:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3718      	adds	r7, #24
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	08013b3c 	.word	0x08013b3c
 8010e64:	08013b44 	.word	0x08013b44

08010e68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010e72:	2300      	movs	r3, #0
 8010e74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d10a      	bne.n	8010e92 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8010e7c:	4812      	ldr	r0, [pc, #72]	; (8010ec8 <USBD_RegisterClass+0x60>)
 8010e7e:	f001 fe67 	bl	8012b50 <iprintf>
 8010e82:	4812      	ldr	r0, [pc, #72]	; (8010ecc <USBD_RegisterClass+0x64>)
 8010e84:	f001 fe64 	bl	8012b50 <iprintf>
 8010e88:	200a      	movs	r0, #10
 8010e8a:	f001 fe79 	bl	8012b80 <putchar>
#endif
    return USBD_FAIL;
 8010e8e:	2303      	movs	r3, #3
 8010e90:	e016      	b.n	8010ec0 <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	683a      	ldr	r2, [r7, #0]
 8010e96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d00b      	beq.n	8010ebe <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eae:	f107 020e 	add.w	r2, r7, #14
 8010eb2:	4610      	mov	r0, r2
 8010eb4:	4798      	blx	r3
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3710      	adds	r7, #16
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	08013b3c 	.word	0x08013b3c
 8010ecc:	08013b5c 	.word	0x08013b5c

08010ed0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f001 fc77 	bl	80127cc <USBD_LL_Start>
 8010ede:	4603      	mov	r3, r0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b083      	sub	sp, #12
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010ef0:	2300      	movs	r3, #0
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	370c      	adds	r7, #12
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr

08010efe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010efe:	b580      	push	{r7, lr}
 8010f00:	b084      	sub	sp, #16
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
 8010f06:	460b      	mov	r3, r1
 8010f08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010f0a:	2303      	movs	r3, #3
 8010f0c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d009      	beq.n	8010f2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	78fa      	ldrb	r2, [r7, #3]
 8010f22:	4611      	mov	r1, r2
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	4798      	blx	r3
 8010f28:	4603      	mov	r3, r0
 8010f2a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}

08010f36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f36:	b580      	push	{r7, lr}
 8010f38:	b082      	sub	sp, #8
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	6078      	str	r0, [r7, #4]
 8010f3e:	460b      	mov	r3, r1
 8010f40:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d007      	beq.n	8010f5c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	78fa      	ldrb	r2, [r7, #3]
 8010f56:	4611      	mov	r1, r2
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	4798      	blx	r3
  }

  return USBD_OK;
 8010f5c:	2300      	movs	r3, #0
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3708      	adds	r7, #8
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
 8010f6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010f76:	6839      	ldr	r1, [r7, #0]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f000 ff8f 	bl	8011e9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010f9a:	f003 031f 	and.w	r3, r3, #31
 8010f9e:	2b02      	cmp	r3, #2
 8010fa0:	d01a      	beq.n	8010fd8 <USBD_LL_SetupStage+0x72>
 8010fa2:	2b02      	cmp	r3, #2
 8010fa4:	d822      	bhi.n	8010fec <USBD_LL_SetupStage+0x86>
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d002      	beq.n	8010fb0 <USBD_LL_SetupStage+0x4a>
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d00a      	beq.n	8010fc4 <USBD_LL_SetupStage+0x5e>
 8010fae:	e01d      	b.n	8010fec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 fa61 	bl	8011480 <USBD_StdDevReq>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8010fc2:	e020      	b.n	8011006 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010fca:	4619      	mov	r1, r3
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 fac5 	bl	801155c <USBD_StdItfReq>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8010fd6:	e016      	b.n	8011006 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010fde:	4619      	mov	r1, r3
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f000 fb04 	bl	80115ee <USBD_StdEPReq>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8010fea:	e00c      	b.n	8011006 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010ff2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010ff6:	b2db      	uxtb	r3, r3
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f001 fc46 	bl	801288c <USBD_LL_StallEP>
 8011000:	4603      	mov	r3, r0
 8011002:	73fb      	strb	r3, [r7, #15]
      break;
 8011004:	bf00      	nop
  }

  return ret;
 8011006:	7bfb      	ldrb	r3, [r7, #15]
}
 8011008:	4618      	mov	r0, r3
 801100a:	3710      	adds	r7, #16
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b086      	sub	sp, #24
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	460b      	mov	r3, r1
 801101a:	607a      	str	r2, [r7, #4]
 801101c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801101e:	7afb      	ldrb	r3, [r7, #11]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d138      	bne.n	8011096 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801102a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011032:	2b03      	cmp	r3, #3
 8011034:	d14a      	bne.n	80110cc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	689a      	ldr	r2, [r3, #8]
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	429a      	cmp	r2, r3
 8011040:	d913      	bls.n	801106a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	689a      	ldr	r2, [r3, #8]
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	1ad2      	subs	r2, r2, r3
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	68da      	ldr	r2, [r3, #12]
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	689b      	ldr	r3, [r3, #8]
 8011058:	4293      	cmp	r3, r2
 801105a:	bf28      	it	cs
 801105c:	4613      	movcs	r3, r2
 801105e:	461a      	mov	r2, r3
 8011060:	6879      	ldr	r1, [r7, #4]
 8011062:	68f8      	ldr	r0, [r7, #12]
 8011064:	f001 f80e 	bl	8012084 <USBD_CtlContinueRx>
 8011068:	e030      	b.n	80110cc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011070:	b2db      	uxtb	r3, r3
 8011072:	2b03      	cmp	r3, #3
 8011074:	d10b      	bne.n	801108e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801107c:	691b      	ldr	r3, [r3, #16]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d005      	beq.n	801108e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011088:	691b      	ldr	r3, [r3, #16]
 801108a:	68f8      	ldr	r0, [r7, #12]
 801108c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f001 f809 	bl	80120a6 <USBD_CtlSendStatus>
 8011094:	e01a      	b.n	80110cc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801109c:	b2db      	uxtb	r3, r3
 801109e:	2b03      	cmp	r3, #3
 80110a0:	d114      	bne.n	80110cc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110a8:	699b      	ldr	r3, [r3, #24]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d00e      	beq.n	80110cc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110b4:	699b      	ldr	r3, [r3, #24]
 80110b6:	7afa      	ldrb	r2, [r7, #11]
 80110b8:	4611      	mov	r1, r2
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	4798      	blx	r3
 80110be:	4603      	mov	r3, r0
 80110c0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80110c2:	7dfb      	ldrb	r3, [r7, #23]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d001      	beq.n	80110cc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80110c8:	7dfb      	ldrb	r3, [r7, #23]
 80110ca:	e000      	b.n	80110ce <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80110cc:	2300      	movs	r3, #0
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3718      	adds	r7, #24
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}

080110d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80110d6:	b580      	push	{r7, lr}
 80110d8:	b086      	sub	sp, #24
 80110da:	af00      	add	r7, sp, #0
 80110dc:	60f8      	str	r0, [r7, #12]
 80110de:	460b      	mov	r3, r1
 80110e0:	607a      	str	r2, [r7, #4]
 80110e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80110e4:	7afb      	ldrb	r3, [r7, #11]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d16b      	bne.n	80111c2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	3314      	adds	r3, #20
 80110ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	d156      	bne.n	80111a8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	689a      	ldr	r2, [r3, #8]
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	68db      	ldr	r3, [r3, #12]
 8011102:	429a      	cmp	r2, r3
 8011104:	d914      	bls.n	8011130 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	689a      	ldr	r2, [r3, #8]
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	1ad2      	subs	r2, r2, r3
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	689b      	ldr	r3, [r3, #8]
 8011118:	461a      	mov	r2, r3
 801111a:	6879      	ldr	r1, [r7, #4]
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	f000 ff83 	bl	8012028 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011122:	2300      	movs	r3, #0
 8011124:	2200      	movs	r2, #0
 8011126:	2100      	movs	r1, #0
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f001 fc59 	bl	80129e0 <USBD_LL_PrepareReceive>
 801112e:	e03b      	b.n	80111a8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	68da      	ldr	r2, [r3, #12]
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	689b      	ldr	r3, [r3, #8]
 8011138:	429a      	cmp	r2, r3
 801113a:	d11c      	bne.n	8011176 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	685a      	ldr	r2, [r3, #4]
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011144:	429a      	cmp	r2, r3
 8011146:	d316      	bcc.n	8011176 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	685a      	ldr	r2, [r3, #4]
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011152:	429a      	cmp	r2, r3
 8011154:	d20f      	bcs.n	8011176 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011156:	2200      	movs	r2, #0
 8011158:	2100      	movs	r1, #0
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	f000 ff64 	bl	8012028 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2200      	movs	r2, #0
 8011164:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011168:	2300      	movs	r3, #0
 801116a:	2200      	movs	r2, #0
 801116c:	2100      	movs	r1, #0
 801116e:	68f8      	ldr	r0, [r7, #12]
 8011170:	f001 fc36 	bl	80129e0 <USBD_LL_PrepareReceive>
 8011174:	e018      	b.n	80111a8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801117c:	b2db      	uxtb	r3, r3
 801117e:	2b03      	cmp	r3, #3
 8011180:	d10b      	bne.n	801119a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d005      	beq.n	801119a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	68f8      	ldr	r0, [r7, #12]
 8011198:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801119a:	2180      	movs	r1, #128	; 0x80
 801119c:	68f8      	ldr	r0, [r7, #12]
 801119e:	f001 fb75 	bl	801288c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80111a2:	68f8      	ldr	r0, [r7, #12]
 80111a4:	f000 ff92 	bl	80120cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80111ae:	2b01      	cmp	r3, #1
 80111b0:	d122      	bne.n	80111f8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80111b2:	68f8      	ldr	r0, [r7, #12]
 80111b4:	f7ff fe98 	bl	8010ee8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2200      	movs	r2, #0
 80111bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80111c0:	e01a      	b.n	80111f8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	2b03      	cmp	r3, #3
 80111cc:	d114      	bne.n	80111f8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111d4:	695b      	ldr	r3, [r3, #20]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00e      	beq.n	80111f8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111e0:	695b      	ldr	r3, [r3, #20]
 80111e2:	7afa      	ldrb	r2, [r7, #11]
 80111e4:	4611      	mov	r1, r2
 80111e6:	68f8      	ldr	r0, [r7, #12]
 80111e8:	4798      	blx	r3
 80111ea:	4603      	mov	r3, r0
 80111ec:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80111ee:	7dfb      	ldrb	r3, [r7, #23]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d001      	beq.n	80111f8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80111f4:	7dfb      	ldrb	r3, [r7, #23]
 80111f6:	e000      	b.n	80111fa <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3718      	adds	r7, #24
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b082      	sub	sp, #8
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2201      	movs	r2, #1
 801120e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2200      	movs	r2, #0
 8011216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2200      	movs	r2, #0
 801121e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801122e:	2b00      	cmp	r3, #0
 8011230:	d101      	bne.n	8011236 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011232:	2303      	movs	r3, #3
 8011234:	e02f      	b.n	8011296 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00f      	beq.n	8011260 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d009      	beq.n	8011260 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	6852      	ldr	r2, [r2, #4]
 8011258:	b2d2      	uxtb	r2, r2
 801125a:	4611      	mov	r1, r2
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011260:	2340      	movs	r3, #64	; 0x40
 8011262:	2200      	movs	r2, #0
 8011264:	2100      	movs	r1, #0
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f001 facb 	bl	8012802 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2201      	movs	r2, #1
 8011270:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2240      	movs	r2, #64	; 0x40
 8011278:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801127c:	2340      	movs	r3, #64	; 0x40
 801127e:	2200      	movs	r2, #0
 8011280:	2180      	movs	r1, #128	; 0x80
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f001 fabd 	bl	8012802 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2201      	movs	r2, #1
 801128c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2240      	movs	r2, #64	; 0x40
 8011292:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011294:	2300      	movs	r3, #0
}
 8011296:	4618      	mov	r0, r3
 8011298:	3708      	adds	r7, #8
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}

0801129e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801129e:	b480      	push	{r7}
 80112a0:	b083      	sub	sp, #12
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
 80112a6:	460b      	mov	r3, r1
 80112a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	78fa      	ldrb	r2, [r7, #3]
 80112ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80112b0:	2300      	movs	r3, #0
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	370c      	adds	r7, #12
 80112b6:	46bd      	mov	sp, r7
 80112b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112bc:	4770      	bx	lr

080112be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80112be:	b480      	push	{r7}
 80112c0:	b083      	sub	sp, #12
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112cc:	b2da      	uxtb	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2204      	movs	r2, #4
 80112d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80112dc:	2300      	movs	r3, #0
}
 80112de:	4618      	mov	r0, r3
 80112e0:	370c      	adds	r7, #12
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr

080112ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80112ea:	b480      	push	{r7}
 80112ec:	b083      	sub	sp, #12
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112f8:	b2db      	uxtb	r3, r3
 80112fa:	2b04      	cmp	r3, #4
 80112fc:	d106      	bne.n	801130c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011304:	b2da      	uxtb	r2, r3
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	370c      	adds	r7, #12
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr

0801131a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801131a:	b580      	push	{r7, lr}
 801131c:	b082      	sub	sp, #8
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011328:	2b00      	cmp	r3, #0
 801132a:	d101      	bne.n	8011330 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801132c:	2303      	movs	r3, #3
 801132e:	e012      	b.n	8011356 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011336:	b2db      	uxtb	r3, r3
 8011338:	2b03      	cmp	r3, #3
 801133a:	d10b      	bne.n	8011354 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011342:	69db      	ldr	r3, [r3, #28]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d005      	beq.n	8011354 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801134e:	69db      	ldr	r3, [r3, #28]
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011354:	2300      	movs	r3, #0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b082      	sub	sp, #8
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
 8011366:	460b      	mov	r3, r1
 8011368:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011370:	2b00      	cmp	r3, #0
 8011372:	d101      	bne.n	8011378 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8011374:	2303      	movs	r3, #3
 8011376:	e014      	b.n	80113a2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801137e:	b2db      	uxtb	r3, r3
 8011380:	2b03      	cmp	r3, #3
 8011382:	d10d      	bne.n	80113a0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801138a:	6a1b      	ldr	r3, [r3, #32]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d007      	beq.n	80113a0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011396:	6a1b      	ldr	r3, [r3, #32]
 8011398:	78fa      	ldrb	r2, [r7, #3]
 801139a:	4611      	mov	r1, r2
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80113a0:	2300      	movs	r3, #0
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80113aa:	b580      	push	{r7, lr}
 80113ac:	b082      	sub	sp, #8
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
 80113b2:	460b      	mov	r3, r1
 80113b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d101      	bne.n	80113c4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80113c0:	2303      	movs	r3, #3
 80113c2:	e014      	b.n	80113ee <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	2b03      	cmp	r3, #3
 80113ce:	d10d      	bne.n	80113ec <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d007      	beq.n	80113ec <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113e4:	78fa      	ldrb	r2, [r7, #3]
 80113e6:	4611      	mov	r1, r2
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80113ec:	2300      	movs	r3, #0
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3708      	adds	r7, #8
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}

080113f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80113f6:	b480      	push	{r7}
 80113f8:	b083      	sub	sp, #12
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80113fe:	2300      	movs	r3, #0
}
 8011400:	4618      	mov	r0, r3
 8011402:	370c      	adds	r7, #12
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr

0801140c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2201      	movs	r2, #1
 8011418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011422:	2b00      	cmp	r3, #0
 8011424:	d009      	beq.n	801143a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	6852      	ldr	r2, [r2, #4]
 8011432:	b2d2      	uxtb	r2, r2
 8011434:	4611      	mov	r1, r2
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	4798      	blx	r3
  }

  return USBD_OK;
 801143a:	2300      	movs	r3, #0
}
 801143c:	4618      	mov	r0, r3
 801143e:	3708      	adds	r7, #8
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011444:	b480      	push	{r7}
 8011446:	b087      	sub	sp, #28
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	3301      	adds	r3, #1
 801145a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011462:	8a3b      	ldrh	r3, [r7, #16]
 8011464:	021b      	lsls	r3, r3, #8
 8011466:	b21a      	sxth	r2, r3
 8011468:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801146c:	4313      	orrs	r3, r2
 801146e:	b21b      	sxth	r3, r3
 8011470:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011472:	89fb      	ldrh	r3, [r7, #14]
}
 8011474:	4618      	mov	r0, r3
 8011476:	371c      	adds	r7, #28
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr

08011480 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801148a:	2300      	movs	r3, #0
 801148c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011496:	2b40      	cmp	r3, #64	; 0x40
 8011498:	d005      	beq.n	80114a6 <USBD_StdDevReq+0x26>
 801149a:	2b40      	cmp	r3, #64	; 0x40
 801149c:	d853      	bhi.n	8011546 <USBD_StdDevReq+0xc6>
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00b      	beq.n	80114ba <USBD_StdDevReq+0x3a>
 80114a2:	2b20      	cmp	r3, #32
 80114a4:	d14f      	bne.n	8011546 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114ac:	689b      	ldr	r3, [r3, #8]
 80114ae:	6839      	ldr	r1, [r7, #0]
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	4798      	blx	r3
 80114b4:	4603      	mov	r3, r0
 80114b6:	73fb      	strb	r3, [r7, #15]
      break;
 80114b8:	e04a      	b.n	8011550 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	785b      	ldrb	r3, [r3, #1]
 80114be:	2b09      	cmp	r3, #9
 80114c0:	d83b      	bhi.n	801153a <USBD_StdDevReq+0xba>
 80114c2:	a201      	add	r2, pc, #4	; (adr r2, 80114c8 <USBD_StdDevReq+0x48>)
 80114c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114c8:	0801151d 	.word	0x0801151d
 80114cc:	08011531 	.word	0x08011531
 80114d0:	0801153b 	.word	0x0801153b
 80114d4:	08011527 	.word	0x08011527
 80114d8:	0801153b 	.word	0x0801153b
 80114dc:	080114fb 	.word	0x080114fb
 80114e0:	080114f1 	.word	0x080114f1
 80114e4:	0801153b 	.word	0x0801153b
 80114e8:	08011513 	.word	0x08011513
 80114ec:	08011505 	.word	0x08011505
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80114f0:	6839      	ldr	r1, [r7, #0]
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f000 f9de 	bl	80118b4 <USBD_GetDescriptor>
          break;
 80114f8:	e024      	b.n	8011544 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80114fa:	6839      	ldr	r1, [r7, #0]
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f000 fb43 	bl	8011b88 <USBD_SetAddress>
          break;
 8011502:	e01f      	b.n	8011544 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f000 fb82 	bl	8011c10 <USBD_SetConfig>
 801150c:	4603      	mov	r3, r0
 801150e:	73fb      	strb	r3, [r7, #15]
          break;
 8011510:	e018      	b.n	8011544 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011512:	6839      	ldr	r1, [r7, #0]
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f000 fc21 	bl	8011d5c <USBD_GetConfig>
          break;
 801151a:	e013      	b.n	8011544 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801151c:	6839      	ldr	r1, [r7, #0]
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 fc52 	bl	8011dc8 <USBD_GetStatus>
          break;
 8011524:	e00e      	b.n	8011544 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011526:	6839      	ldr	r1, [r7, #0]
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f000 fc81 	bl	8011e30 <USBD_SetFeature>
          break;
 801152e:	e009      	b.n	8011544 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011530:	6839      	ldr	r1, [r7, #0]
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f000 fc90 	bl	8011e58 <USBD_ClrFeature>
          break;
 8011538:	e004      	b.n	8011544 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801153a:	6839      	ldr	r1, [r7, #0]
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f000 fce7 	bl	8011f10 <USBD_CtlError>
          break;
 8011542:	bf00      	nop
      }
      break;
 8011544:	e004      	b.n	8011550 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011546:	6839      	ldr	r1, [r7, #0]
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f000 fce1 	bl	8011f10 <USBD_CtlError>
      break;
 801154e:	bf00      	nop
  }

  return ret;
 8011550:	7bfb      	ldrb	r3, [r7, #15]
}
 8011552:	4618      	mov	r0, r3
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop

0801155c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011566:	2300      	movs	r3, #0
 8011568:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011572:	2b40      	cmp	r3, #64	; 0x40
 8011574:	d005      	beq.n	8011582 <USBD_StdItfReq+0x26>
 8011576:	2b40      	cmp	r3, #64	; 0x40
 8011578:	d82f      	bhi.n	80115da <USBD_StdItfReq+0x7e>
 801157a:	2b00      	cmp	r3, #0
 801157c:	d001      	beq.n	8011582 <USBD_StdItfReq+0x26>
 801157e:	2b20      	cmp	r3, #32
 8011580:	d12b      	bne.n	80115da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011588:	b2db      	uxtb	r3, r3
 801158a:	3b01      	subs	r3, #1
 801158c:	2b02      	cmp	r3, #2
 801158e:	d81d      	bhi.n	80115cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	889b      	ldrh	r3, [r3, #4]
 8011594:	b2db      	uxtb	r3, r3
 8011596:	2b01      	cmp	r3, #1
 8011598:	d813      	bhi.n	80115c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115a0:	689b      	ldr	r3, [r3, #8]
 80115a2:	6839      	ldr	r1, [r7, #0]
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	4798      	blx	r3
 80115a8:	4603      	mov	r3, r0
 80115aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	88db      	ldrh	r3, [r3, #6]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d110      	bne.n	80115d6 <USBD_StdItfReq+0x7a>
 80115b4:	7bfb      	ldrb	r3, [r7, #15]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d10d      	bne.n	80115d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 fd73 	bl	80120a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80115c0:	e009      	b.n	80115d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80115c2:	6839      	ldr	r1, [r7, #0]
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f000 fca3 	bl	8011f10 <USBD_CtlError>
          break;
 80115ca:	e004      	b.n	80115d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80115cc:	6839      	ldr	r1, [r7, #0]
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f000 fc9e 	bl	8011f10 <USBD_CtlError>
          break;
 80115d4:	e000      	b.n	80115d8 <USBD_StdItfReq+0x7c>
          break;
 80115d6:	bf00      	nop
      }
      break;
 80115d8:	e004      	b.n	80115e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80115da:	6839      	ldr	r1, [r7, #0]
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f000 fc97 	bl	8011f10 <USBD_CtlError>
      break;
 80115e2:	bf00      	nop
  }

  return ret;
 80115e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3710      	adds	r7, #16
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b084      	sub	sp, #16
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
 80115f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80115f8:	2300      	movs	r3, #0
 80115fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	889b      	ldrh	r3, [r3, #4]
 8011600:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801160a:	2b40      	cmp	r3, #64	; 0x40
 801160c:	d007      	beq.n	801161e <USBD_StdEPReq+0x30>
 801160e:	2b40      	cmp	r3, #64	; 0x40
 8011610:	f200 8145 	bhi.w	801189e <USBD_StdEPReq+0x2b0>
 8011614:	2b00      	cmp	r3, #0
 8011616:	d00c      	beq.n	8011632 <USBD_StdEPReq+0x44>
 8011618:	2b20      	cmp	r3, #32
 801161a:	f040 8140 	bne.w	801189e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011624:	689b      	ldr	r3, [r3, #8]
 8011626:	6839      	ldr	r1, [r7, #0]
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	4798      	blx	r3
 801162c:	4603      	mov	r3, r0
 801162e:	73fb      	strb	r3, [r7, #15]
      break;
 8011630:	e13a      	b.n	80118a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	785b      	ldrb	r3, [r3, #1]
 8011636:	2b03      	cmp	r3, #3
 8011638:	d007      	beq.n	801164a <USBD_StdEPReq+0x5c>
 801163a:	2b03      	cmp	r3, #3
 801163c:	f300 8129 	bgt.w	8011892 <USBD_StdEPReq+0x2a4>
 8011640:	2b00      	cmp	r3, #0
 8011642:	d07f      	beq.n	8011744 <USBD_StdEPReq+0x156>
 8011644:	2b01      	cmp	r3, #1
 8011646:	d03c      	beq.n	80116c2 <USBD_StdEPReq+0xd4>
 8011648:	e123      	b.n	8011892 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011650:	b2db      	uxtb	r3, r3
 8011652:	2b02      	cmp	r3, #2
 8011654:	d002      	beq.n	801165c <USBD_StdEPReq+0x6e>
 8011656:	2b03      	cmp	r3, #3
 8011658:	d016      	beq.n	8011688 <USBD_StdEPReq+0x9a>
 801165a:	e02c      	b.n	80116b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801165c:	7bbb      	ldrb	r3, [r7, #14]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d00d      	beq.n	801167e <USBD_StdEPReq+0x90>
 8011662:	7bbb      	ldrb	r3, [r7, #14]
 8011664:	2b80      	cmp	r3, #128	; 0x80
 8011666:	d00a      	beq.n	801167e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011668:	7bbb      	ldrb	r3, [r7, #14]
 801166a:	4619      	mov	r1, r3
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f001 f90d 	bl	801288c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011672:	2180      	movs	r1, #128	; 0x80
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f001 f909 	bl	801288c <USBD_LL_StallEP>
 801167a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801167c:	e020      	b.n	80116c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801167e:	6839      	ldr	r1, [r7, #0]
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f000 fc45 	bl	8011f10 <USBD_CtlError>
              break;
 8011686:	e01b      	b.n	80116c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	885b      	ldrh	r3, [r3, #2]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d10e      	bne.n	80116ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011690:	7bbb      	ldrb	r3, [r7, #14]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d00b      	beq.n	80116ae <USBD_StdEPReq+0xc0>
 8011696:	7bbb      	ldrb	r3, [r7, #14]
 8011698:	2b80      	cmp	r3, #128	; 0x80
 801169a:	d008      	beq.n	80116ae <USBD_StdEPReq+0xc0>
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	88db      	ldrh	r3, [r3, #6]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d104      	bne.n	80116ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80116a4:	7bbb      	ldrb	r3, [r7, #14]
 80116a6:	4619      	mov	r1, r3
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f001 f8ef 	bl	801288c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 fcf9 	bl	80120a6 <USBD_CtlSendStatus>

              break;
 80116b4:	e004      	b.n	80116c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80116b6:	6839      	ldr	r1, [r7, #0]
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f000 fc29 	bl	8011f10 <USBD_CtlError>
              break;
 80116be:	bf00      	nop
          }
          break;
 80116c0:	e0ec      	b.n	801189c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	2b02      	cmp	r3, #2
 80116cc:	d002      	beq.n	80116d4 <USBD_StdEPReq+0xe6>
 80116ce:	2b03      	cmp	r3, #3
 80116d0:	d016      	beq.n	8011700 <USBD_StdEPReq+0x112>
 80116d2:	e030      	b.n	8011736 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80116d4:	7bbb      	ldrb	r3, [r7, #14]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d00d      	beq.n	80116f6 <USBD_StdEPReq+0x108>
 80116da:	7bbb      	ldrb	r3, [r7, #14]
 80116dc:	2b80      	cmp	r3, #128	; 0x80
 80116de:	d00a      	beq.n	80116f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80116e0:	7bbb      	ldrb	r3, [r7, #14]
 80116e2:	4619      	mov	r1, r3
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f001 f8d1 	bl	801288c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80116ea:	2180      	movs	r1, #128	; 0x80
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f001 f8cd 	bl	801288c <USBD_LL_StallEP>
 80116f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80116f4:	e025      	b.n	8011742 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80116f6:	6839      	ldr	r1, [r7, #0]
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f000 fc09 	bl	8011f10 <USBD_CtlError>
              break;
 80116fe:	e020      	b.n	8011742 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	885b      	ldrh	r3, [r3, #2]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d11b      	bne.n	8011740 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011708:	7bbb      	ldrb	r3, [r7, #14]
 801170a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801170e:	2b00      	cmp	r3, #0
 8011710:	d004      	beq.n	801171c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011712:	7bbb      	ldrb	r3, [r7, #14]
 8011714:	4619      	mov	r1, r3
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f001 f8d7 	bl	80128ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f000 fcc2 	bl	80120a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011728:	689b      	ldr	r3, [r3, #8]
 801172a:	6839      	ldr	r1, [r7, #0]
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	4798      	blx	r3
 8011730:	4603      	mov	r3, r0
 8011732:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011734:	e004      	b.n	8011740 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011736:	6839      	ldr	r1, [r7, #0]
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 fbe9 	bl	8011f10 <USBD_CtlError>
              break;
 801173e:	e000      	b.n	8011742 <USBD_StdEPReq+0x154>
              break;
 8011740:	bf00      	nop
          }
          break;
 8011742:	e0ab      	b.n	801189c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801174a:	b2db      	uxtb	r3, r3
 801174c:	2b02      	cmp	r3, #2
 801174e:	d002      	beq.n	8011756 <USBD_StdEPReq+0x168>
 8011750:	2b03      	cmp	r3, #3
 8011752:	d032      	beq.n	80117ba <USBD_StdEPReq+0x1cc>
 8011754:	e097      	b.n	8011886 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011756:	7bbb      	ldrb	r3, [r7, #14]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d007      	beq.n	801176c <USBD_StdEPReq+0x17e>
 801175c:	7bbb      	ldrb	r3, [r7, #14]
 801175e:	2b80      	cmp	r3, #128	; 0x80
 8011760:	d004      	beq.n	801176c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8011762:	6839      	ldr	r1, [r7, #0]
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f000 fbd3 	bl	8011f10 <USBD_CtlError>
                break;
 801176a:	e091      	b.n	8011890 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801176c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011770:	2b00      	cmp	r3, #0
 8011772:	da0b      	bge.n	801178c <USBD_StdEPReq+0x19e>
 8011774:	7bbb      	ldrb	r3, [r7, #14]
 8011776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801177a:	4613      	mov	r3, r2
 801177c:	009b      	lsls	r3, r3, #2
 801177e:	4413      	add	r3, r2
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	3310      	adds	r3, #16
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	4413      	add	r3, r2
 8011788:	3304      	adds	r3, #4
 801178a:	e00b      	b.n	80117a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801178c:	7bbb      	ldrb	r3, [r7, #14]
 801178e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011792:	4613      	mov	r3, r2
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	4413      	add	r3, r2
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	4413      	add	r3, r2
 80117a2:	3304      	adds	r3, #4
 80117a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	2200      	movs	r2, #0
 80117aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	2202      	movs	r2, #2
 80117b0:	4619      	mov	r1, r3
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f000 fc1d 	bl	8011ff2 <USBD_CtlSendData>
              break;
 80117b8:	e06a      	b.n	8011890 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80117ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	da11      	bge.n	80117e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80117c2:	7bbb      	ldrb	r3, [r7, #14]
 80117c4:	f003 020f 	and.w	r2, r3, #15
 80117c8:	6879      	ldr	r1, [r7, #4]
 80117ca:	4613      	mov	r3, r2
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	4413      	add	r3, r2
 80117d0:	009b      	lsls	r3, r3, #2
 80117d2:	440b      	add	r3, r1
 80117d4:	3324      	adds	r3, #36	; 0x24
 80117d6:	881b      	ldrh	r3, [r3, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d117      	bne.n	801180c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80117dc:	6839      	ldr	r1, [r7, #0]
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 fb96 	bl	8011f10 <USBD_CtlError>
                  break;
 80117e4:	e054      	b.n	8011890 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80117e6:	7bbb      	ldrb	r3, [r7, #14]
 80117e8:	f003 020f 	and.w	r2, r3, #15
 80117ec:	6879      	ldr	r1, [r7, #4]
 80117ee:	4613      	mov	r3, r2
 80117f0:	009b      	lsls	r3, r3, #2
 80117f2:	4413      	add	r3, r2
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	440b      	add	r3, r1
 80117f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80117fc:	881b      	ldrh	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d104      	bne.n	801180c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011802:	6839      	ldr	r1, [r7, #0]
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f000 fb83 	bl	8011f10 <USBD_CtlError>
                  break;
 801180a:	e041      	b.n	8011890 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801180c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011810:	2b00      	cmp	r3, #0
 8011812:	da0b      	bge.n	801182c <USBD_StdEPReq+0x23e>
 8011814:	7bbb      	ldrb	r3, [r7, #14]
 8011816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801181a:	4613      	mov	r3, r2
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	4413      	add	r3, r2
 8011820:	009b      	lsls	r3, r3, #2
 8011822:	3310      	adds	r3, #16
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	4413      	add	r3, r2
 8011828:	3304      	adds	r3, #4
 801182a:	e00b      	b.n	8011844 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801182c:	7bbb      	ldrb	r3, [r7, #14]
 801182e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011832:	4613      	mov	r3, r2
 8011834:	009b      	lsls	r3, r3, #2
 8011836:	4413      	add	r3, r2
 8011838:	009b      	lsls	r3, r3, #2
 801183a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	4413      	add	r3, r2
 8011842:	3304      	adds	r3, #4
 8011844:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011846:	7bbb      	ldrb	r3, [r7, #14]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d002      	beq.n	8011852 <USBD_StdEPReq+0x264>
 801184c:	7bbb      	ldrb	r3, [r7, #14]
 801184e:	2b80      	cmp	r3, #128	; 0x80
 8011850:	d103      	bne.n	801185a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	2200      	movs	r2, #0
 8011856:	601a      	str	r2, [r3, #0]
 8011858:	e00e      	b.n	8011878 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801185a:	7bbb      	ldrb	r3, [r7, #14]
 801185c:	4619      	mov	r1, r3
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f001 f852 	bl	8012908 <USBD_LL_IsStallEP>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d003      	beq.n	8011872 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	2201      	movs	r2, #1
 801186e:	601a      	str	r2, [r3, #0]
 8011870:	e002      	b.n	8011878 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	2200      	movs	r2, #0
 8011876:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	2202      	movs	r2, #2
 801187c:	4619      	mov	r1, r3
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f000 fbb7 	bl	8011ff2 <USBD_CtlSendData>
              break;
 8011884:	e004      	b.n	8011890 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011886:	6839      	ldr	r1, [r7, #0]
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f000 fb41 	bl	8011f10 <USBD_CtlError>
              break;
 801188e:	bf00      	nop
          }
          break;
 8011890:	e004      	b.n	801189c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011892:	6839      	ldr	r1, [r7, #0]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f000 fb3b 	bl	8011f10 <USBD_CtlError>
          break;
 801189a:	bf00      	nop
      }
      break;
 801189c:	e004      	b.n	80118a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801189e:	6839      	ldr	r1, [r7, #0]
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f000 fb35 	bl	8011f10 <USBD_CtlError>
      break;
 80118a6:	bf00      	nop
  }

  return ret;
 80118a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	3710      	adds	r7, #16
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}
	...

080118b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80118be:	2300      	movs	r3, #0
 80118c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80118c2:	2300      	movs	r3, #0
 80118c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80118c6:	2300      	movs	r3, #0
 80118c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	885b      	ldrh	r3, [r3, #2]
 80118ce:	0a1b      	lsrs	r3, r3, #8
 80118d0:	b29b      	uxth	r3, r3
 80118d2:	3b01      	subs	r3, #1
 80118d4:	2b06      	cmp	r3, #6
 80118d6:	f200 8128 	bhi.w	8011b2a <USBD_GetDescriptor+0x276>
 80118da:	a201      	add	r2, pc, #4	; (adr r2, 80118e0 <USBD_GetDescriptor+0x2c>)
 80118dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118e0:	080118fd 	.word	0x080118fd
 80118e4:	08011915 	.word	0x08011915
 80118e8:	08011955 	.word	0x08011955
 80118ec:	08011b2b 	.word	0x08011b2b
 80118f0:	08011b2b 	.word	0x08011b2b
 80118f4:	08011acb 	.word	0x08011acb
 80118f8:	08011af7 	.word	0x08011af7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	7c12      	ldrb	r2, [r2, #16]
 8011908:	f107 0108 	add.w	r1, r7, #8
 801190c:	4610      	mov	r0, r2
 801190e:	4798      	blx	r3
 8011910:	60f8      	str	r0, [r7, #12]
      break;
 8011912:	e112      	b.n	8011b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	7c1b      	ldrb	r3, [r3, #16]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10d      	bne.n	8011938 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011924:	f107 0208 	add.w	r2, r7, #8
 8011928:	4610      	mov	r0, r2
 801192a:	4798      	blx	r3
 801192c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	3301      	adds	r3, #1
 8011932:	2202      	movs	r2, #2
 8011934:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011936:	e100      	b.n	8011b3a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011940:	f107 0208 	add.w	r2, r7, #8
 8011944:	4610      	mov	r0, r2
 8011946:	4798      	blx	r3
 8011948:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	3301      	adds	r3, #1
 801194e:	2202      	movs	r2, #2
 8011950:	701a      	strb	r2, [r3, #0]
      break;
 8011952:	e0f2      	b.n	8011b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	885b      	ldrh	r3, [r3, #2]
 8011958:	b2db      	uxtb	r3, r3
 801195a:	2b05      	cmp	r3, #5
 801195c:	f200 80ac 	bhi.w	8011ab8 <USBD_GetDescriptor+0x204>
 8011960:	a201      	add	r2, pc, #4	; (adr r2, 8011968 <USBD_GetDescriptor+0xb4>)
 8011962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011966:	bf00      	nop
 8011968:	08011981 	.word	0x08011981
 801196c:	080119b5 	.word	0x080119b5
 8011970:	080119e9 	.word	0x080119e9
 8011974:	08011a1d 	.word	0x08011a1d
 8011978:	08011a51 	.word	0x08011a51
 801197c:	08011a85 	.word	0x08011a85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d00b      	beq.n	80119a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011992:	685b      	ldr	r3, [r3, #4]
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	7c12      	ldrb	r2, [r2, #16]
 8011998:	f107 0108 	add.w	r1, r7, #8
 801199c:	4610      	mov	r0, r2
 801199e:	4798      	blx	r3
 80119a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80119a2:	e091      	b.n	8011ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80119a4:	6839      	ldr	r1, [r7, #0]
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f000 fab2 	bl	8011f10 <USBD_CtlError>
            err++;
 80119ac:	7afb      	ldrb	r3, [r7, #11]
 80119ae:	3301      	adds	r3, #1
 80119b0:	72fb      	strb	r3, [r7, #11]
          break;
 80119b2:	e089      	b.n	8011ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119ba:	689b      	ldr	r3, [r3, #8]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d00b      	beq.n	80119d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119c6:	689b      	ldr	r3, [r3, #8]
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	7c12      	ldrb	r2, [r2, #16]
 80119cc:	f107 0108 	add.w	r1, r7, #8
 80119d0:	4610      	mov	r0, r2
 80119d2:	4798      	blx	r3
 80119d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80119d6:	e077      	b.n	8011ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80119d8:	6839      	ldr	r1, [r7, #0]
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f000 fa98 	bl	8011f10 <USBD_CtlError>
            err++;
 80119e0:	7afb      	ldrb	r3, [r7, #11]
 80119e2:	3301      	adds	r3, #1
 80119e4:	72fb      	strb	r3, [r7, #11]
          break;
 80119e6:	e06f      	b.n	8011ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d00b      	beq.n	8011a0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	7c12      	ldrb	r2, [r2, #16]
 8011a00:	f107 0108 	add.w	r1, r7, #8
 8011a04:	4610      	mov	r0, r2
 8011a06:	4798      	blx	r3
 8011a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a0a:	e05d      	b.n	8011ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011a0c:	6839      	ldr	r1, [r7, #0]
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f000 fa7e 	bl	8011f10 <USBD_CtlError>
            err++;
 8011a14:	7afb      	ldrb	r3, [r7, #11]
 8011a16:	3301      	adds	r3, #1
 8011a18:	72fb      	strb	r3, [r7, #11]
          break;
 8011a1a:	e055      	b.n	8011ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a22:	691b      	ldr	r3, [r3, #16]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d00b      	beq.n	8011a40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a2e:	691b      	ldr	r3, [r3, #16]
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	7c12      	ldrb	r2, [r2, #16]
 8011a34:	f107 0108 	add.w	r1, r7, #8
 8011a38:	4610      	mov	r0, r2
 8011a3a:	4798      	blx	r3
 8011a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a3e:	e043      	b.n	8011ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011a40:	6839      	ldr	r1, [r7, #0]
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 fa64 	bl	8011f10 <USBD_CtlError>
            err++;
 8011a48:	7afb      	ldrb	r3, [r7, #11]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8011a4e:	e03b      	b.n	8011ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a56:	695b      	ldr	r3, [r3, #20]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d00b      	beq.n	8011a74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a62:	695b      	ldr	r3, [r3, #20]
 8011a64:	687a      	ldr	r2, [r7, #4]
 8011a66:	7c12      	ldrb	r2, [r2, #16]
 8011a68:	f107 0108 	add.w	r1, r7, #8
 8011a6c:	4610      	mov	r0, r2
 8011a6e:	4798      	blx	r3
 8011a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a72:	e029      	b.n	8011ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011a74:	6839      	ldr	r1, [r7, #0]
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 fa4a 	bl	8011f10 <USBD_CtlError>
            err++;
 8011a7c:	7afb      	ldrb	r3, [r7, #11]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	72fb      	strb	r3, [r7, #11]
          break;
 8011a82:	e021      	b.n	8011ac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a8a:	699b      	ldr	r3, [r3, #24]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d00b      	beq.n	8011aa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a96:	699b      	ldr	r3, [r3, #24]
 8011a98:	687a      	ldr	r2, [r7, #4]
 8011a9a:	7c12      	ldrb	r2, [r2, #16]
 8011a9c:	f107 0108 	add.w	r1, r7, #8
 8011aa0:	4610      	mov	r0, r2
 8011aa2:	4798      	blx	r3
 8011aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011aa6:	e00f      	b.n	8011ac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011aa8:	6839      	ldr	r1, [r7, #0]
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 fa30 	bl	8011f10 <USBD_CtlError>
            err++;
 8011ab0:	7afb      	ldrb	r3, [r7, #11]
 8011ab2:	3301      	adds	r3, #1
 8011ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8011ab6:	e007      	b.n	8011ac8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011ab8:	6839      	ldr	r1, [r7, #0]
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 fa28 	bl	8011f10 <USBD_CtlError>
          err++;
 8011ac0:	7afb      	ldrb	r3, [r7, #11]
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011ac6:	bf00      	nop
      }
      break;
 8011ac8:	e037      	b.n	8011b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	7c1b      	ldrb	r3, [r3, #16]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d109      	bne.n	8011ae6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ada:	f107 0208 	add.w	r2, r7, #8
 8011ade:	4610      	mov	r0, r2
 8011ae0:	4798      	blx	r3
 8011ae2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ae4:	e029      	b.n	8011b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011ae6:	6839      	ldr	r1, [r7, #0]
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f000 fa11 	bl	8011f10 <USBD_CtlError>
        err++;
 8011aee:	7afb      	ldrb	r3, [r7, #11]
 8011af0:	3301      	adds	r3, #1
 8011af2:	72fb      	strb	r3, [r7, #11]
      break;
 8011af4:	e021      	b.n	8011b3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	7c1b      	ldrb	r3, [r3, #16]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d10d      	bne.n	8011b1a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b06:	f107 0208 	add.w	r2, r7, #8
 8011b0a:	4610      	mov	r0, r2
 8011b0c:	4798      	blx	r3
 8011b0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	3301      	adds	r3, #1
 8011b14:	2207      	movs	r2, #7
 8011b16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011b18:	e00f      	b.n	8011b3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011b1a:	6839      	ldr	r1, [r7, #0]
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f000 f9f7 	bl	8011f10 <USBD_CtlError>
        err++;
 8011b22:	7afb      	ldrb	r3, [r7, #11]
 8011b24:	3301      	adds	r3, #1
 8011b26:	72fb      	strb	r3, [r7, #11]
      break;
 8011b28:	e007      	b.n	8011b3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011b2a:	6839      	ldr	r1, [r7, #0]
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f000 f9ef 	bl	8011f10 <USBD_CtlError>
      err++;
 8011b32:	7afb      	ldrb	r3, [r7, #11]
 8011b34:	3301      	adds	r3, #1
 8011b36:	72fb      	strb	r3, [r7, #11]
      break;
 8011b38:	bf00      	nop
  }

  if (err != 0U)
 8011b3a:	7afb      	ldrb	r3, [r7, #11]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d11e      	bne.n	8011b7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	88db      	ldrh	r3, [r3, #6]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d016      	beq.n	8011b76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011b48:	893b      	ldrh	r3, [r7, #8]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d00e      	beq.n	8011b6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	88da      	ldrh	r2, [r3, #6]
 8011b52:	893b      	ldrh	r3, [r7, #8]
 8011b54:	4293      	cmp	r3, r2
 8011b56:	bf28      	it	cs
 8011b58:	4613      	movcs	r3, r2
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011b5e:	893b      	ldrh	r3, [r7, #8]
 8011b60:	461a      	mov	r2, r3
 8011b62:	68f9      	ldr	r1, [r7, #12]
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f000 fa44 	bl	8011ff2 <USBD_CtlSendData>
 8011b6a:	e009      	b.n	8011b80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011b6c:	6839      	ldr	r1, [r7, #0]
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 f9ce 	bl	8011f10 <USBD_CtlError>
 8011b74:	e004      	b.n	8011b80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 fa95 	bl	80120a6 <USBD_CtlSendStatus>
 8011b7c:	e000      	b.n	8011b80 <USBD_GetDescriptor+0x2cc>
    return;
 8011b7e:	bf00      	nop
  }
}
 8011b80:	3710      	adds	r7, #16
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop

08011b88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	889b      	ldrh	r3, [r3, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d131      	bne.n	8011bfe <USBD_SetAddress+0x76>
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	88db      	ldrh	r3, [r3, #6]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d12d      	bne.n	8011bfe <USBD_SetAddress+0x76>
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	885b      	ldrh	r3, [r3, #2]
 8011ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8011ba8:	d829      	bhi.n	8011bfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	885b      	ldrh	r3, [r3, #2]
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bbc:	b2db      	uxtb	r3, r3
 8011bbe:	2b03      	cmp	r3, #3
 8011bc0:	d104      	bne.n	8011bcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011bc2:	6839      	ldr	r1, [r7, #0]
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f000 f9a3 	bl	8011f10 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bca:	e01d      	b.n	8011c08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	7bfa      	ldrb	r2, [r7, #15]
 8011bd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011bd4:	7bfb      	ldrb	r3, [r7, #15]
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f000 fec1 	bl	8012960 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f000 fa61 	bl	80120a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011be4:	7bfb      	ldrb	r3, [r7, #15]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d004      	beq.n	8011bf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2202      	movs	r2, #2
 8011bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bf2:	e009      	b.n	8011c08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bfc:	e004      	b.n	8011c08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011bfe:	6839      	ldr	r1, [r7, #0]
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f000 f985 	bl	8011f10 <USBD_CtlError>
  }
}
 8011c06:	bf00      	nop
 8011c08:	bf00      	nop
 8011c0a:	3710      	adds	r7, #16
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}

08011c10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	885b      	ldrh	r3, [r3, #2]
 8011c22:	b2da      	uxtb	r2, r3
 8011c24:	4b4c      	ldr	r3, [pc, #304]	; (8011d58 <USBD_SetConfig+0x148>)
 8011c26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011c28:	4b4b      	ldr	r3, [pc, #300]	; (8011d58 <USBD_SetConfig+0x148>)
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d905      	bls.n	8011c3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011c30:	6839      	ldr	r1, [r7, #0]
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f000 f96c 	bl	8011f10 <USBD_CtlError>
    return USBD_FAIL;
 8011c38:	2303      	movs	r3, #3
 8011c3a:	e088      	b.n	8011d4e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	2b02      	cmp	r3, #2
 8011c46:	d002      	beq.n	8011c4e <USBD_SetConfig+0x3e>
 8011c48:	2b03      	cmp	r3, #3
 8011c4a:	d025      	beq.n	8011c98 <USBD_SetConfig+0x88>
 8011c4c:	e071      	b.n	8011d32 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011c4e:	4b42      	ldr	r3, [pc, #264]	; (8011d58 <USBD_SetConfig+0x148>)
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d01c      	beq.n	8011c90 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8011c56:	4b40      	ldr	r3, [pc, #256]	; (8011d58 <USBD_SetConfig+0x148>)
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011c60:	4b3d      	ldr	r3, [pc, #244]	; (8011d58 <USBD_SetConfig+0x148>)
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	4619      	mov	r1, r3
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7ff f949 	bl	8010efe <USBD_SetClassConfig>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011c70:	7bfb      	ldrb	r3, [r7, #15]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d004      	beq.n	8011c80 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011c76:	6839      	ldr	r1, [r7, #0]
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f000 f949 	bl	8011f10 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011c7e:	e065      	b.n	8011d4c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f000 fa10 	bl	80120a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2203      	movs	r2, #3
 8011c8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011c8e:	e05d      	b.n	8011d4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 fa08 	bl	80120a6 <USBD_CtlSendStatus>
      break;
 8011c96:	e059      	b.n	8011d4c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011c98:	4b2f      	ldr	r3, [pc, #188]	; (8011d58 <USBD_SetConfig+0x148>)
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d112      	bne.n	8011cc6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2202      	movs	r2, #2
 8011ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011ca8:	4b2b      	ldr	r3, [pc, #172]	; (8011d58 <USBD_SetConfig+0x148>)
 8011caa:	781b      	ldrb	r3, [r3, #0]
 8011cac:	461a      	mov	r2, r3
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011cb2:	4b29      	ldr	r3, [pc, #164]	; (8011d58 <USBD_SetConfig+0x148>)
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f7ff f93c 	bl	8010f36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f000 f9f1 	bl	80120a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011cc4:	e042      	b.n	8011d4c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011cc6:	4b24      	ldr	r3, [pc, #144]	; (8011d58 <USBD_SetConfig+0x148>)
 8011cc8:	781b      	ldrb	r3, [r3, #0]
 8011cca:	461a      	mov	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d02a      	beq.n	8011d2a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	685b      	ldr	r3, [r3, #4]
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	4619      	mov	r1, r3
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f7ff f92a 	bl	8010f36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011ce2:	4b1d      	ldr	r3, [pc, #116]	; (8011d58 <USBD_SetConfig+0x148>)
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011cec:	4b1a      	ldr	r3, [pc, #104]	; (8011d58 <USBD_SetConfig+0x148>)
 8011cee:	781b      	ldrb	r3, [r3, #0]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff f903 	bl	8010efe <USBD_SetClassConfig>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011cfc:	7bfb      	ldrb	r3, [r7, #15]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00f      	beq.n	8011d22 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011d02:	6839      	ldr	r1, [r7, #0]
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	f000 f903 	bl	8011f10 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	4619      	mov	r1, r3
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7ff f90f 	bl	8010f36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2202      	movs	r2, #2
 8011d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011d20:	e014      	b.n	8011d4c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f000 f9bf 	bl	80120a6 <USBD_CtlSendStatus>
      break;
 8011d28:	e010      	b.n	8011d4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 f9bb 	bl	80120a6 <USBD_CtlSendStatus>
      break;
 8011d30:	e00c      	b.n	8011d4c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011d32:	6839      	ldr	r1, [r7, #0]
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f000 f8eb 	bl	8011f10 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011d3a:	4b07      	ldr	r3, [pc, #28]	; (8011d58 <USBD_SetConfig+0x148>)
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	4619      	mov	r1, r3
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f7ff f8f8 	bl	8010f36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011d46:	2303      	movs	r3, #3
 8011d48:	73fb      	strb	r3, [r7, #15]
      break;
 8011d4a:	bf00      	nop
  }

  return ret;
 8011d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3710      	adds	r7, #16
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	24000274 	.word	0x24000274

08011d5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b082      	sub	sp, #8
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	88db      	ldrh	r3, [r3, #6]
 8011d6a:	2b01      	cmp	r3, #1
 8011d6c:	d004      	beq.n	8011d78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011d6e:	6839      	ldr	r1, [r7, #0]
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f000 f8cd 	bl	8011f10 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011d76:	e023      	b.n	8011dc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	2b02      	cmp	r3, #2
 8011d82:	dc02      	bgt.n	8011d8a <USBD_GetConfig+0x2e>
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	dc03      	bgt.n	8011d90 <USBD_GetConfig+0x34>
 8011d88:	e015      	b.n	8011db6 <USBD_GetConfig+0x5a>
 8011d8a:	2b03      	cmp	r3, #3
 8011d8c:	d00b      	beq.n	8011da6 <USBD_GetConfig+0x4a>
 8011d8e:	e012      	b.n	8011db6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2200      	movs	r2, #0
 8011d94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	3308      	adds	r3, #8
 8011d9a:	2201      	movs	r2, #1
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 f927 	bl	8011ff2 <USBD_CtlSendData>
        break;
 8011da4:	e00c      	b.n	8011dc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	3304      	adds	r3, #4
 8011daa:	2201      	movs	r2, #1
 8011dac:	4619      	mov	r1, r3
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f91f 	bl	8011ff2 <USBD_CtlSendData>
        break;
 8011db4:	e004      	b.n	8011dc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011db6:	6839      	ldr	r1, [r7, #0]
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f000 f8a9 	bl	8011f10 <USBD_CtlError>
        break;
 8011dbe:	bf00      	nop
}
 8011dc0:	bf00      	nop
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	3b01      	subs	r3, #1
 8011ddc:	2b02      	cmp	r3, #2
 8011dde:	d81e      	bhi.n	8011e1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	88db      	ldrh	r3, [r3, #6]
 8011de4:	2b02      	cmp	r3, #2
 8011de6:	d004      	beq.n	8011df2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011de8:	6839      	ldr	r1, [r7, #0]
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 f890 	bl	8011f10 <USBD_CtlError>
        break;
 8011df0:	e01a      	b.n	8011e28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2201      	movs	r2, #1
 8011df6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d005      	beq.n	8011e0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	f043 0202 	orr.w	r2, r3, #2
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	330c      	adds	r3, #12
 8011e12:	2202      	movs	r2, #2
 8011e14:	4619      	mov	r1, r3
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f000 f8eb 	bl	8011ff2 <USBD_CtlSendData>
      break;
 8011e1c:	e004      	b.n	8011e28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011e1e:	6839      	ldr	r1, [r7, #0]
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f000 f875 	bl	8011f10 <USBD_CtlError>
      break;
 8011e26:	bf00      	nop
  }
}
 8011e28:	bf00      	nop
 8011e2a:	3708      	adds	r7, #8
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	885b      	ldrh	r3, [r3, #2]
 8011e3e:	2b01      	cmp	r3, #1
 8011e40:	d106      	bne.n	8011e50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2201      	movs	r2, #1
 8011e46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f000 f92b 	bl	80120a6 <USBD_CtlSendStatus>
  }
}
 8011e50:	bf00      	nop
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	3b01      	subs	r3, #1
 8011e6c:	2b02      	cmp	r3, #2
 8011e6e:	d80b      	bhi.n	8011e88 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	885b      	ldrh	r3, [r3, #2]
 8011e74:	2b01      	cmp	r3, #1
 8011e76:	d10c      	bne.n	8011e92 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f000 f910 	bl	80120a6 <USBD_CtlSendStatus>
      }
      break;
 8011e86:	e004      	b.n	8011e92 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011e88:	6839      	ldr	r1, [r7, #0]
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 f840 	bl	8011f10 <USBD_CtlError>
      break;
 8011e90:	e000      	b.n	8011e94 <USBD_ClrFeature+0x3c>
      break;
 8011e92:	bf00      	nop
  }
}
 8011e94:	bf00      	nop
 8011e96:	3708      	adds	r7, #8
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}

08011e9c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b084      	sub	sp, #16
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	781a      	ldrb	r2, [r3, #0]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	3301      	adds	r3, #1
 8011eb6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	781a      	ldrb	r2, [r3, #0]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011ec6:	68f8      	ldr	r0, [r7, #12]
 8011ec8:	f7ff fabc 	bl	8011444 <SWAPBYTE>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	461a      	mov	r2, r3
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	3301      	adds	r3, #1
 8011ede:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011ee0:	68f8      	ldr	r0, [r7, #12]
 8011ee2:	f7ff faaf 	bl	8011444 <SWAPBYTE>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	461a      	mov	r2, r3
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011efa:	68f8      	ldr	r0, [r7, #12]
 8011efc:	f7ff faa2 	bl	8011444 <SWAPBYTE>
 8011f00:	4603      	mov	r3, r0
 8011f02:	461a      	mov	r2, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	80da      	strh	r2, [r3, #6]
}
 8011f08:	bf00      	nop
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}

08011f10 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f1a:	2180      	movs	r1, #128	; 0x80
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f000 fcb5 	bl	801288c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011f22:	2100      	movs	r1, #0
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f000 fcb1 	bl	801288c <USBD_LL_StallEP>
}
 8011f2a:	bf00      	nop
 8011f2c:	3708      	adds	r7, #8
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}

08011f32 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011f32:	b580      	push	{r7, lr}
 8011f34:	b086      	sub	sp, #24
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	60f8      	str	r0, [r7, #12]
 8011f3a:	60b9      	str	r1, [r7, #8]
 8011f3c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d036      	beq.n	8011fb6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011f4c:	6938      	ldr	r0, [r7, #16]
 8011f4e:	f000 f836 	bl	8011fbe <USBD_GetLen>
 8011f52:	4603      	mov	r3, r0
 8011f54:	3301      	adds	r3, #1
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	005b      	lsls	r3, r3, #1
 8011f5a:	b29a      	uxth	r2, r3
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011f60:	7dfb      	ldrb	r3, [r7, #23]
 8011f62:	68ba      	ldr	r2, [r7, #8]
 8011f64:	4413      	add	r3, r2
 8011f66:	687a      	ldr	r2, [r7, #4]
 8011f68:	7812      	ldrb	r2, [r2, #0]
 8011f6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8011f6c:	7dfb      	ldrb	r3, [r7, #23]
 8011f6e:	3301      	adds	r3, #1
 8011f70:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011f72:	7dfb      	ldrb	r3, [r7, #23]
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	4413      	add	r3, r2
 8011f78:	2203      	movs	r2, #3
 8011f7a:	701a      	strb	r2, [r3, #0]
  idx++;
 8011f7c:	7dfb      	ldrb	r3, [r7, #23]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011f82:	e013      	b.n	8011fac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011f84:	7dfb      	ldrb	r3, [r7, #23]
 8011f86:	68ba      	ldr	r2, [r7, #8]
 8011f88:	4413      	add	r3, r2
 8011f8a:	693a      	ldr	r2, [r7, #16]
 8011f8c:	7812      	ldrb	r2, [r2, #0]
 8011f8e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	3301      	adds	r3, #1
 8011f94:	613b      	str	r3, [r7, #16]
    idx++;
 8011f96:	7dfb      	ldrb	r3, [r7, #23]
 8011f98:	3301      	adds	r3, #1
 8011f9a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011f9c:	7dfb      	ldrb	r3, [r7, #23]
 8011f9e:	68ba      	ldr	r2, [r7, #8]
 8011fa0:	4413      	add	r3, r2
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	701a      	strb	r2, [r3, #0]
    idx++;
 8011fa6:	7dfb      	ldrb	r3, [r7, #23]
 8011fa8:	3301      	adds	r3, #1
 8011faa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d1e7      	bne.n	8011f84 <USBD_GetString+0x52>
 8011fb4:	e000      	b.n	8011fb8 <USBD_GetString+0x86>
    return;
 8011fb6:	bf00      	nop
  }
}
 8011fb8:	3718      	adds	r7, #24
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}

08011fbe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011fbe:	b480      	push	{r7}
 8011fc0:	b085      	sub	sp, #20
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011fce:	e005      	b.n	8011fdc <USBD_GetLen+0x1e>
  {
    len++;
 8011fd0:	7bfb      	ldrb	r3, [r7, #15]
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	3301      	adds	r3, #1
 8011fda:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d1f5      	bne.n	8011fd0 <USBD_GetLen+0x12>
  }

  return len;
 8011fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3714      	adds	r7, #20
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr

08011ff2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011ff2:	b580      	push	{r7, lr}
 8011ff4:	b084      	sub	sp, #16
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	60f8      	str	r0, [r7, #12]
 8011ffa:	60b9      	str	r1, [r7, #8]
 8011ffc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	2202      	movs	r2, #2
 8012002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	687a      	ldr	r2, [r7, #4]
 801200a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	68ba      	ldr	r2, [r7, #8]
 8012016:	2100      	movs	r1, #0
 8012018:	68f8      	ldr	r0, [r7, #12]
 801201a:	f000 fcc0 	bl	801299e <USBD_LL_Transmit>

  return USBD_OK;
 801201e:	2300      	movs	r3, #0
}
 8012020:	4618      	mov	r0, r3
 8012022:	3710      	adds	r7, #16
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b084      	sub	sp, #16
 801202c:	af00      	add	r7, sp, #0
 801202e:	60f8      	str	r0, [r7, #12]
 8012030:	60b9      	str	r1, [r7, #8]
 8012032:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	68ba      	ldr	r2, [r7, #8]
 8012038:	2100      	movs	r1, #0
 801203a:	68f8      	ldr	r0, [r7, #12]
 801203c:	f000 fcaf 	bl	801299e <USBD_LL_Transmit>

  return USBD_OK;
 8012040:	2300      	movs	r3, #0
}
 8012042:	4618      	mov	r0, r3
 8012044:	3710      	adds	r7, #16
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801204a:	b580      	push	{r7, lr}
 801204c:	b084      	sub	sp, #16
 801204e:	af00      	add	r7, sp, #0
 8012050:	60f8      	str	r0, [r7, #12]
 8012052:	60b9      	str	r1, [r7, #8]
 8012054:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	2203      	movs	r2, #3
 801205a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	687a      	ldr	r2, [r7, #4]
 8012062:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	68ba      	ldr	r2, [r7, #8]
 8012072:	2100      	movs	r1, #0
 8012074:	68f8      	ldr	r0, [r7, #12]
 8012076:	f000 fcb3 	bl	80129e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801207a:	2300      	movs	r3, #0
}
 801207c:	4618      	mov	r0, r3
 801207e:	3710      	adds	r7, #16
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b084      	sub	sp, #16
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	68ba      	ldr	r2, [r7, #8]
 8012094:	2100      	movs	r1, #0
 8012096:	68f8      	ldr	r0, [r7, #12]
 8012098:	f000 fca2 	bl	80129e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801209c:	2300      	movs	r3, #0
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3710      	adds	r7, #16
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}

080120a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80120a6:	b580      	push	{r7, lr}
 80120a8:	b082      	sub	sp, #8
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2204      	movs	r2, #4
 80120b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80120b6:	2300      	movs	r3, #0
 80120b8:	2200      	movs	r2, #0
 80120ba:	2100      	movs	r1, #0
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f000 fc6e 	bl	801299e <USBD_LL_Transmit>

  return USBD_OK;
 80120c2:	2300      	movs	r3, #0
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3708      	adds	r7, #8
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2205      	movs	r2, #5
 80120d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80120dc:	2300      	movs	r3, #0
 80120de:	2200      	movs	r2, #0
 80120e0:	2100      	movs	r1, #0
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f000 fc7c 	bl	80129e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80120e8:	2300      	movs	r3, #0
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3708      	adds	r7, #8
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
	...

080120f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80120f8:	2201      	movs	r2, #1
 80120fa:	4913      	ldr	r1, [pc, #76]	; (8012148 <MX_USB_DEVICE_Init+0x54>)
 80120fc:	4813      	ldr	r0, [pc, #76]	; (801214c <MX_USB_DEVICE_Init+0x58>)
 80120fe:	f7fe fe75 	bl	8010dec <USBD_Init>
 8012102:	4603      	mov	r3, r0
 8012104:	2b00      	cmp	r3, #0
 8012106:	d001      	beq.n	801210c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012108:	f7ef fe28 	bl	8001d5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801210c:	4910      	ldr	r1, [pc, #64]	; (8012150 <MX_USB_DEVICE_Init+0x5c>)
 801210e:	480f      	ldr	r0, [pc, #60]	; (801214c <MX_USB_DEVICE_Init+0x58>)
 8012110:	f7fe feaa 	bl	8010e68 <USBD_RegisterClass>
 8012114:	4603      	mov	r3, r0
 8012116:	2b00      	cmp	r3, #0
 8012118:	d001      	beq.n	801211e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801211a:	f7ef fe1f 	bl	8001d5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801211e:	490d      	ldr	r1, [pc, #52]	; (8012154 <MX_USB_DEVICE_Init+0x60>)
 8012120:	480a      	ldr	r0, [pc, #40]	; (801214c <MX_USB_DEVICE_Init+0x58>)
 8012122:	f7fe fded 	bl	8010d00 <USBD_CDC_RegisterInterface>
 8012126:	4603      	mov	r3, r0
 8012128:	2b00      	cmp	r3, #0
 801212a:	d001      	beq.n	8012130 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801212c:	f7ef fe16 	bl	8001d5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8012130:	4806      	ldr	r0, [pc, #24]	; (801214c <MX_USB_DEVICE_Init+0x58>)
 8012132:	f7fe fecd 	bl	8010ed0 <USBD_Start>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d001      	beq.n	8012140 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801213c:	f7ef fe0e 	bl	8001d5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012140:	f7f7 fd1c 	bl	8009b7c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012144:	bf00      	nop
 8012146:	bd80      	pop	{r7, pc}
 8012148:	2400013c 	.word	0x2400013c
 801214c:	24000ddc 	.word	0x24000ddc
 8012150:	24000024 	.word	0x24000024
 8012154:	24000128 	.word	0x24000128

08012158 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801215c:	2200      	movs	r2, #0
 801215e:	4905      	ldr	r1, [pc, #20]	; (8012174 <CDC_Init_HS+0x1c>)
 8012160:	4805      	ldr	r0, [pc, #20]	; (8012178 <CDC_Init_HS+0x20>)
 8012162:	f7fe fde2 	bl	8010d2a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8012166:	4905      	ldr	r1, [pc, #20]	; (801217c <CDC_Init_HS+0x24>)
 8012168:	4803      	ldr	r0, [pc, #12]	; (8012178 <CDC_Init_HS+0x20>)
 801216a:	f7fe fdfc 	bl	8010d66 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801216e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012170:	4618      	mov	r0, r3
 8012172:	bd80      	pop	{r7, pc}
 8012174:	240018ac 	.word	0x240018ac
 8012178:	24000ddc 	.word	0x24000ddc
 801217c:	240010ac 	.word	0x240010ac

08012180 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8012180:	b480      	push	{r7}
 8012182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012184:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8012186:	4618      	mov	r0, r3
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr

08012190 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
 8012196:	4603      	mov	r3, r0
 8012198:	6039      	str	r1, [r7, #0]
 801219a:	71fb      	strb	r3, [r7, #7]
 801219c:	4613      	mov	r3, r2
 801219e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80121a0:	79fb      	ldrb	r3, [r7, #7]
 80121a2:	2b23      	cmp	r3, #35	; 0x23
 80121a4:	d84a      	bhi.n	801223c <CDC_Control_HS+0xac>
 80121a6:	a201      	add	r2, pc, #4	; (adr r2, 80121ac <CDC_Control_HS+0x1c>)
 80121a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ac:	0801223d 	.word	0x0801223d
 80121b0:	0801223d 	.word	0x0801223d
 80121b4:	0801223d 	.word	0x0801223d
 80121b8:	0801223d 	.word	0x0801223d
 80121bc:	0801223d 	.word	0x0801223d
 80121c0:	0801223d 	.word	0x0801223d
 80121c4:	0801223d 	.word	0x0801223d
 80121c8:	0801223d 	.word	0x0801223d
 80121cc:	0801223d 	.word	0x0801223d
 80121d0:	0801223d 	.word	0x0801223d
 80121d4:	0801223d 	.word	0x0801223d
 80121d8:	0801223d 	.word	0x0801223d
 80121dc:	0801223d 	.word	0x0801223d
 80121e0:	0801223d 	.word	0x0801223d
 80121e4:	0801223d 	.word	0x0801223d
 80121e8:	0801223d 	.word	0x0801223d
 80121ec:	0801223d 	.word	0x0801223d
 80121f0:	0801223d 	.word	0x0801223d
 80121f4:	0801223d 	.word	0x0801223d
 80121f8:	0801223d 	.word	0x0801223d
 80121fc:	0801223d 	.word	0x0801223d
 8012200:	0801223d 	.word	0x0801223d
 8012204:	0801223d 	.word	0x0801223d
 8012208:	0801223d 	.word	0x0801223d
 801220c:	0801223d 	.word	0x0801223d
 8012210:	0801223d 	.word	0x0801223d
 8012214:	0801223d 	.word	0x0801223d
 8012218:	0801223d 	.word	0x0801223d
 801221c:	0801223d 	.word	0x0801223d
 8012220:	0801223d 	.word	0x0801223d
 8012224:	0801223d 	.word	0x0801223d
 8012228:	0801223d 	.word	0x0801223d
 801222c:	0801223d 	.word	0x0801223d
 8012230:	0801223d 	.word	0x0801223d
 8012234:	0801223d 	.word	0x0801223d
 8012238:	0801223d 	.word	0x0801223d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801223c:	bf00      	nop
  }

  return (USBD_OK);
 801223e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8012240:	4618      	mov	r0, r3
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8012256:	6879      	ldr	r1, [r7, #4]
 8012258:	4805      	ldr	r0, [pc, #20]	; (8012270 <CDC_Receive_HS+0x24>)
 801225a:	f7fe fd84 	bl	8010d66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801225e:	4804      	ldr	r0, [pc, #16]	; (8012270 <CDC_Receive_HS+0x24>)
 8012260:	f7fe fd9a 	bl	8010d98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012264:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8012266:	4618      	mov	r0, r3
 8012268:	3708      	adds	r7, #8
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	24000ddc 	.word	0x24000ddc

08012274 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012274:	b480      	push	{r7}
 8012276:	b087      	sub	sp, #28
 8012278:	af00      	add	r7, sp, #0
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	60b9      	str	r1, [r7, #8]
 801227e:	4613      	mov	r3, r2
 8012280:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012282:	2300      	movs	r3, #0
 8012284:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8012286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801228a:	4618      	mov	r0, r3
 801228c:	371c      	adds	r7, #28
 801228e:	46bd      	mov	sp, r7
 8012290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012294:	4770      	bx	lr
	...

08012298 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012298:	b480      	push	{r7}
 801229a:	b083      	sub	sp, #12
 801229c:	af00      	add	r7, sp, #0
 801229e:	4603      	mov	r3, r0
 80122a0:	6039      	str	r1, [r7, #0]
 80122a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	2212      	movs	r2, #18
 80122a8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80122aa:	4b03      	ldr	r3, [pc, #12]	; (80122b8 <USBD_HS_DeviceDescriptor+0x20>)
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	370c      	adds	r7, #12
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr
 80122b8:	24000158 	.word	0x24000158

080122bc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	4603      	mov	r3, r0
 80122c4:	6039      	str	r1, [r7, #0]
 80122c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	2204      	movs	r2, #4
 80122cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80122ce:	4b03      	ldr	r3, [pc, #12]	; (80122dc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr
 80122dc:	2400016c 	.word	0x2400016c

080122e0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b082      	sub	sp, #8
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	4603      	mov	r3, r0
 80122e8:	6039      	str	r1, [r7, #0]
 80122ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80122ec:	79fb      	ldrb	r3, [r7, #7]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d105      	bne.n	80122fe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80122f2:	683a      	ldr	r2, [r7, #0]
 80122f4:	4907      	ldr	r1, [pc, #28]	; (8012314 <USBD_HS_ProductStrDescriptor+0x34>)
 80122f6:	4808      	ldr	r0, [pc, #32]	; (8012318 <USBD_HS_ProductStrDescriptor+0x38>)
 80122f8:	f7ff fe1b 	bl	8011f32 <USBD_GetString>
 80122fc:	e004      	b.n	8012308 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80122fe:	683a      	ldr	r2, [r7, #0]
 8012300:	4904      	ldr	r1, [pc, #16]	; (8012314 <USBD_HS_ProductStrDescriptor+0x34>)
 8012302:	4805      	ldr	r0, [pc, #20]	; (8012318 <USBD_HS_ProductStrDescriptor+0x38>)
 8012304:	f7ff fe15 	bl	8011f32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012308:	4b02      	ldr	r3, [pc, #8]	; (8012314 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801230a:	4618      	mov	r0, r3
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	240020ac 	.word	0x240020ac
 8012318:	08013b74 	.word	0x08013b74

0801231c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	4603      	mov	r3, r0
 8012324:	6039      	str	r1, [r7, #0]
 8012326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012328:	683a      	ldr	r2, [r7, #0]
 801232a:	4904      	ldr	r1, [pc, #16]	; (801233c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801232c:	4804      	ldr	r0, [pc, #16]	; (8012340 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801232e:	f7ff fe00 	bl	8011f32 <USBD_GetString>
  return USBD_StrDesc;
 8012332:	4b02      	ldr	r3, [pc, #8]	; (801233c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012334:	4618      	mov	r0, r3
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}
 801233c:	240020ac 	.word	0x240020ac
 8012340:	08013b8c 	.word	0x08013b8c

08012344 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	4603      	mov	r3, r0
 801234c:	6039      	str	r1, [r7, #0]
 801234e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	221a      	movs	r2, #26
 8012354:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012356:	f000 f843 	bl	80123e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801235a:	4b02      	ldr	r3, [pc, #8]	; (8012364 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801235c:	4618      	mov	r0, r3
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}
 8012364:	24000170 	.word	0x24000170

08012368 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	4603      	mov	r3, r0
 8012370:	6039      	str	r1, [r7, #0]
 8012372:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012374:	79fb      	ldrb	r3, [r7, #7]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d105      	bne.n	8012386 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801237a:	683a      	ldr	r2, [r7, #0]
 801237c:	4907      	ldr	r1, [pc, #28]	; (801239c <USBD_HS_ConfigStrDescriptor+0x34>)
 801237e:	4808      	ldr	r0, [pc, #32]	; (80123a0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012380:	f7ff fdd7 	bl	8011f32 <USBD_GetString>
 8012384:	e004      	b.n	8012390 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012386:	683a      	ldr	r2, [r7, #0]
 8012388:	4904      	ldr	r1, [pc, #16]	; (801239c <USBD_HS_ConfigStrDescriptor+0x34>)
 801238a:	4805      	ldr	r0, [pc, #20]	; (80123a0 <USBD_HS_ConfigStrDescriptor+0x38>)
 801238c:	f7ff fdd1 	bl	8011f32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012390:	4b02      	ldr	r3, [pc, #8]	; (801239c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012392:	4618      	mov	r0, r3
 8012394:	3708      	adds	r7, #8
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	240020ac 	.word	0x240020ac
 80123a0:	08013ba0 	.word	0x08013ba0

080123a4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	4603      	mov	r3, r0
 80123ac:	6039      	str	r1, [r7, #0]
 80123ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80123b0:	79fb      	ldrb	r3, [r7, #7]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d105      	bne.n	80123c2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80123b6:	683a      	ldr	r2, [r7, #0]
 80123b8:	4907      	ldr	r1, [pc, #28]	; (80123d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80123ba:	4808      	ldr	r0, [pc, #32]	; (80123dc <USBD_HS_InterfaceStrDescriptor+0x38>)
 80123bc:	f7ff fdb9 	bl	8011f32 <USBD_GetString>
 80123c0:	e004      	b.n	80123cc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80123c2:	683a      	ldr	r2, [r7, #0]
 80123c4:	4904      	ldr	r1, [pc, #16]	; (80123d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80123c6:	4805      	ldr	r0, [pc, #20]	; (80123dc <USBD_HS_InterfaceStrDescriptor+0x38>)
 80123c8:	f7ff fdb3 	bl	8011f32 <USBD_GetString>
  }
  return USBD_StrDesc;
 80123cc:	4b02      	ldr	r3, [pc, #8]	; (80123d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop
 80123d8:	240020ac 	.word	0x240020ac
 80123dc:	08013bac 	.word	0x08013bac

080123e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b084      	sub	sp, #16
 80123e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80123e6:	4b0f      	ldr	r3, [pc, #60]	; (8012424 <Get_SerialNum+0x44>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80123ec:	4b0e      	ldr	r3, [pc, #56]	; (8012428 <Get_SerialNum+0x48>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80123f2:	4b0e      	ldr	r3, [pc, #56]	; (801242c <Get_SerialNum+0x4c>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80123f8:	68fa      	ldr	r2, [r7, #12]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4413      	add	r3, r2
 80123fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d009      	beq.n	801241a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012406:	2208      	movs	r2, #8
 8012408:	4909      	ldr	r1, [pc, #36]	; (8012430 <Get_SerialNum+0x50>)
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f000 f814 	bl	8012438 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012410:	2204      	movs	r2, #4
 8012412:	4908      	ldr	r1, [pc, #32]	; (8012434 <Get_SerialNum+0x54>)
 8012414:	68b8      	ldr	r0, [r7, #8]
 8012416:	f000 f80f 	bl	8012438 <IntToUnicode>
  }
}
 801241a:	bf00      	nop
 801241c:	3710      	adds	r7, #16
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	1ff1e800 	.word	0x1ff1e800
 8012428:	1ff1e804 	.word	0x1ff1e804
 801242c:	1ff1e808 	.word	0x1ff1e808
 8012430:	24000172 	.word	0x24000172
 8012434:	24000182 	.word	0x24000182

08012438 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012438:	b480      	push	{r7}
 801243a:	b087      	sub	sp, #28
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	4613      	mov	r3, r2
 8012444:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012446:	2300      	movs	r3, #0
 8012448:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801244a:	2300      	movs	r3, #0
 801244c:	75fb      	strb	r3, [r7, #23]
 801244e:	e027      	b.n	80124a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	0f1b      	lsrs	r3, r3, #28
 8012454:	2b09      	cmp	r3, #9
 8012456:	d80b      	bhi.n	8012470 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	0f1b      	lsrs	r3, r3, #28
 801245c:	b2da      	uxtb	r2, r3
 801245e:	7dfb      	ldrb	r3, [r7, #23]
 8012460:	005b      	lsls	r3, r3, #1
 8012462:	4619      	mov	r1, r3
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	440b      	add	r3, r1
 8012468:	3230      	adds	r2, #48	; 0x30
 801246a:	b2d2      	uxtb	r2, r2
 801246c:	701a      	strb	r2, [r3, #0]
 801246e:	e00a      	b.n	8012486 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	0f1b      	lsrs	r3, r3, #28
 8012474:	b2da      	uxtb	r2, r3
 8012476:	7dfb      	ldrb	r3, [r7, #23]
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	4619      	mov	r1, r3
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	440b      	add	r3, r1
 8012480:	3237      	adds	r2, #55	; 0x37
 8012482:	b2d2      	uxtb	r2, r2
 8012484:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	011b      	lsls	r3, r3, #4
 801248a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801248c:	7dfb      	ldrb	r3, [r7, #23]
 801248e:	005b      	lsls	r3, r3, #1
 8012490:	3301      	adds	r3, #1
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	4413      	add	r3, r2
 8012496:	2200      	movs	r2, #0
 8012498:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801249a:	7dfb      	ldrb	r3, [r7, #23]
 801249c:	3301      	adds	r3, #1
 801249e:	75fb      	strb	r3, [r7, #23]
 80124a0:	7dfa      	ldrb	r2, [r7, #23]
 80124a2:	79fb      	ldrb	r3, [r7, #7]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d3d3      	bcc.n	8012450 <IntToUnicode+0x18>
  }
}
 80124a8:	bf00      	nop
 80124aa:	bf00      	nop
 80124ac:	371c      	adds	r7, #28
 80124ae:	46bd      	mov	sp, r7
 80124b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b4:	4770      	bx	lr
	...

080124b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b0b0      	sub	sp, #192	; 0xc0
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80124c0:	f107 030c 	add.w	r3, r7, #12
 80124c4:	22b4      	movs	r2, #180	; 0xb4
 80124c6:	2100      	movs	r1, #0
 80124c8:	4618      	mov	r0, r3
 80124ca:	f000 fb39 	bl	8012b40 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	4a18      	ldr	r2, [pc, #96]	; (8012534 <HAL_PCD_MspInit+0x7c>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d129      	bne.n	801252c <HAL_PCD_MspInit+0x74>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80124d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80124dc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80124de:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80124e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80124e6:	f107 030c 	add.w	r3, r7, #12
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7f8 fa46 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d001      	beq.n	80124fa <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 80124f6:	f7ef fc31 	bl	8001d5c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80124fa:	f7f7 fb3f 	bl	8009b7c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80124fe:	4b0e      	ldr	r3, [pc, #56]	; (8012538 <HAL_PCD_MspInit+0x80>)
 8012500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012504:	4a0c      	ldr	r2, [pc, #48]	; (8012538 <HAL_PCD_MspInit+0x80>)
 8012506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801250a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801250e:	4b0a      	ldr	r3, [pc, #40]	; (8012538 <HAL_PCD_MspInit+0x80>)
 8012510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012518:	60bb      	str	r3, [r7, #8]
 801251a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801251c:	2200      	movs	r2, #0
 801251e:	2100      	movs	r1, #0
 8012520:	204d      	movs	r0, #77	; 0x4d
 8012522:	f7f2 ff78 	bl	8005416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012526:	204d      	movs	r0, #77	; 0x4d
 8012528:	f7f2 ff8f 	bl	800544a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801252c:	bf00      	nop
 801252e:	37c0      	adds	r7, #192	; 0xc0
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}
 8012534:	40040000 	.word	0x40040000
 8012538:	58024400 	.word	0x58024400

0801253c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b082      	sub	sp, #8
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012550:	4619      	mov	r1, r3
 8012552:	4610      	mov	r0, r2
 8012554:	f7fe fd07 	bl	8010f66 <USBD_LL_SetupStage>
}
 8012558:	bf00      	nop
 801255a:	3708      	adds	r7, #8
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}

08012560 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	460b      	mov	r3, r1
 801256a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012572:	78fa      	ldrb	r2, [r7, #3]
 8012574:	6879      	ldr	r1, [r7, #4]
 8012576:	4613      	mov	r3, r2
 8012578:	00db      	lsls	r3, r3, #3
 801257a:	1a9b      	subs	r3, r3, r2
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	440b      	add	r3, r1
 8012580:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012584:	681a      	ldr	r2, [r3, #0]
 8012586:	78fb      	ldrb	r3, [r7, #3]
 8012588:	4619      	mov	r1, r3
 801258a:	f7fe fd41 	bl	8011010 <USBD_LL_DataOutStage>
}
 801258e:	bf00      	nop
 8012590:	3708      	adds	r7, #8
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012596:	b580      	push	{r7, lr}
 8012598:	b082      	sub	sp, #8
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	460b      	mov	r3, r1
 80125a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80125a8:	78fa      	ldrb	r2, [r7, #3]
 80125aa:	6879      	ldr	r1, [r7, #4]
 80125ac:	4613      	mov	r3, r2
 80125ae:	00db      	lsls	r3, r3, #3
 80125b0:	1a9b      	subs	r3, r3, r2
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	440b      	add	r3, r1
 80125b6:	3348      	adds	r3, #72	; 0x48
 80125b8:	681a      	ldr	r2, [r3, #0]
 80125ba:	78fb      	ldrb	r3, [r7, #3]
 80125bc:	4619      	mov	r1, r3
 80125be:	f7fe fd8a 	bl	80110d6 <USBD_LL_DataInStage>
}
 80125c2:	bf00      	nop
 80125c4:	3708      	adds	r7, #8
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}

080125ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125ca:	b580      	push	{r7, lr}
 80125cc:	b082      	sub	sp, #8
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80125d8:	4618      	mov	r0, r3
 80125da:	f7fe fe9e 	bl	801131a <USBD_LL_SOF>
}
 80125de:	bf00      	nop
 80125e0:	3708      	adds	r7, #8
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}

080125e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125e6:	b580      	push	{r7, lr}
 80125e8:	b084      	sub	sp, #16
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80125ee:	2301      	movs	r3, #1
 80125f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	68db      	ldr	r3, [r3, #12]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d102      	bne.n	8012600 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80125fa:	2300      	movs	r3, #0
 80125fc:	73fb      	strb	r3, [r7, #15]
 80125fe:	e008      	b.n	8012612 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	2b02      	cmp	r3, #2
 8012606:	d102      	bne.n	801260e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012608:	2301      	movs	r3, #1
 801260a:	73fb      	strb	r3, [r7, #15]
 801260c:	e001      	b.n	8012612 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801260e:	f7ef fba5 	bl	8001d5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012618:	7bfa      	ldrb	r2, [r7, #15]
 801261a:	4611      	mov	r1, r2
 801261c:	4618      	mov	r0, r3
 801261e:	f7fe fe3e 	bl	801129e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012628:	4618      	mov	r0, r3
 801262a:	f7fe fdea 	bl	8011202 <USBD_LL_Reset>
}
 801262e:	bf00      	nop
 8012630:	3710      	adds	r7, #16
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
	...

08012638 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012646:	4618      	mov	r0, r3
 8012648:	f7fe fe39 	bl	80112be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	687a      	ldr	r2, [r7, #4]
 8012658:	6812      	ldr	r2, [r2, #0]
 801265a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801265e:	f043 0301 	orr.w	r3, r3, #1
 8012662:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6a1b      	ldr	r3, [r3, #32]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d005      	beq.n	8012678 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801266c:	4b04      	ldr	r3, [pc, #16]	; (8012680 <HAL_PCD_SuspendCallback+0x48>)
 801266e:	691b      	ldr	r3, [r3, #16]
 8012670:	4a03      	ldr	r2, [pc, #12]	; (8012680 <HAL_PCD_SuspendCallback+0x48>)
 8012672:	f043 0306 	orr.w	r3, r3, #6
 8012676:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	e000ed00 	.word	0xe000ed00

08012684 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012692:	4618      	mov	r0, r3
 8012694:	f7fe fe29 	bl	80112ea <USBD_LL_Resume>
}
 8012698:	bf00      	nop
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	460b      	mov	r3, r1
 80126aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126b2:	78fa      	ldrb	r2, [r7, #3]
 80126b4:	4611      	mov	r1, r2
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7fe fe77 	bl	80113aa <USBD_LL_IsoOUTIncomplete>
}
 80126bc:	bf00      	nop
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	460b      	mov	r3, r1
 80126ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126d6:	78fa      	ldrb	r2, [r7, #3]
 80126d8:	4611      	mov	r1, r2
 80126da:	4618      	mov	r0, r3
 80126dc:	f7fe fe3f 	bl	801135e <USBD_LL_IsoINIncomplete>
}
 80126e0:	bf00      	nop
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b082      	sub	sp, #8
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fe fe7d 	bl	80113f6 <USBD_LL_DevConnected>
}
 80126fc:	bf00      	nop
 80126fe:	3708      	adds	r7, #8
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b082      	sub	sp, #8
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012712:	4618      	mov	r0, r3
 8012714:	f7fe fe7a 	bl	801140c <USBD_LL_DevDisconnected>
}
 8012718:	bf00      	nop
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b082      	sub	sp, #8
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d143      	bne.n	80127b8 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8012730:	4a24      	ldr	r2, [pc, #144]	; (80127c4 <USBD_LL_Init+0xa4>)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	4a22      	ldr	r2, [pc, #136]	; (80127c4 <USBD_LL_Init+0xa4>)
 801273c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8012740:	4b20      	ldr	r3, [pc, #128]	; (80127c4 <USBD_LL_Init+0xa4>)
 8012742:	4a21      	ldr	r2, [pc, #132]	; (80127c8 <USBD_LL_Init+0xa8>)
 8012744:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8012746:	4b1f      	ldr	r3, [pc, #124]	; (80127c4 <USBD_LL_Init+0xa4>)
 8012748:	2209      	movs	r2, #9
 801274a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801274c:	4b1d      	ldr	r3, [pc, #116]	; (80127c4 <USBD_LL_Init+0xa4>)
 801274e:	2202      	movs	r2, #2
 8012750:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8012752:	4b1c      	ldr	r3, [pc, #112]	; (80127c4 <USBD_LL_Init+0xa4>)
 8012754:	2200      	movs	r2, #0
 8012756:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8012758:	4b1a      	ldr	r3, [pc, #104]	; (80127c4 <USBD_LL_Init+0xa4>)
 801275a:	2202      	movs	r2, #2
 801275c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801275e:	4b19      	ldr	r3, [pc, #100]	; (80127c4 <USBD_LL_Init+0xa4>)
 8012760:	2200      	movs	r2, #0
 8012762:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8012764:	4b17      	ldr	r3, [pc, #92]	; (80127c4 <USBD_LL_Init+0xa4>)
 8012766:	2200      	movs	r2, #0
 8012768:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801276a:	4b16      	ldr	r3, [pc, #88]	; (80127c4 <USBD_LL_Init+0xa4>)
 801276c:	2200      	movs	r2, #0
 801276e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 8012770:	4b14      	ldr	r3, [pc, #80]	; (80127c4 <USBD_LL_Init+0xa4>)
 8012772:	2201      	movs	r2, #1
 8012774:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8012776:	4b13      	ldr	r3, [pc, #76]	; (80127c4 <USBD_LL_Init+0xa4>)
 8012778:	2200      	movs	r2, #0
 801277a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801277c:	4b11      	ldr	r3, [pc, #68]	; (80127c4 <USBD_LL_Init+0xa4>)
 801277e:	2200      	movs	r2, #0
 8012780:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8012782:	4b10      	ldr	r3, [pc, #64]	; (80127c4 <USBD_LL_Init+0xa4>)
 8012784:	2200      	movs	r2, #0
 8012786:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8012788:	480e      	ldr	r0, [pc, #56]	; (80127c4 <USBD_LL_Init+0xa4>)
 801278a:	f7f5 ffe2 	bl	8008752 <HAL_PCD_Init>
 801278e:	4603      	mov	r3, r0
 8012790:	2b00      	cmp	r3, #0
 8012792:	d001      	beq.n	8012798 <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 8012794:	f7ef fae2 	bl	8001d5c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8012798:	f44f 7100 	mov.w	r1, #512	; 0x200
 801279c:	4809      	ldr	r0, [pc, #36]	; (80127c4 <USBD_LL_Init+0xa4>)
 801279e:	f7f7 f972 	bl	8009a86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80127a2:	2280      	movs	r2, #128	; 0x80
 80127a4:	2100      	movs	r1, #0
 80127a6:	4807      	ldr	r0, [pc, #28]	; (80127c4 <USBD_LL_Init+0xa4>)
 80127a8:	f7f7 f926 	bl	80099f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80127ac:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80127b0:	2101      	movs	r1, #1
 80127b2:	4804      	ldr	r0, [pc, #16]	; (80127c4 <USBD_LL_Init+0xa4>)
 80127b4:	f7f7 f920 	bl	80099f8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80127b8:	2300      	movs	r3, #0
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	3708      	adds	r7, #8
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	240022ac 	.word	0x240022ac
 80127c8:	40040000 	.word	0x40040000

080127cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127d4:	2300      	movs	r3, #0
 80127d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127d8:	2300      	movs	r3, #0
 80127da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7f6 f8d9 	bl	800899a <HAL_PCD_Start>
 80127e8:	4603      	mov	r3, r0
 80127ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127ec:	7bfb      	ldrb	r3, [r7, #15]
 80127ee:	4618      	mov	r0, r3
 80127f0:	f000 f942 	bl	8012a78 <USBD_Get_USB_Status>
 80127f4:	4603      	mov	r3, r0
 80127f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3710      	adds	r7, #16
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}

08012802 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012802:	b580      	push	{r7, lr}
 8012804:	b084      	sub	sp, #16
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
 801280a:	4608      	mov	r0, r1
 801280c:	4611      	mov	r1, r2
 801280e:	461a      	mov	r2, r3
 8012810:	4603      	mov	r3, r0
 8012812:	70fb      	strb	r3, [r7, #3]
 8012814:	460b      	mov	r3, r1
 8012816:	70bb      	strb	r3, [r7, #2]
 8012818:	4613      	mov	r3, r2
 801281a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801281c:	2300      	movs	r3, #0
 801281e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012820:	2300      	movs	r3, #0
 8012822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801282a:	78bb      	ldrb	r3, [r7, #2]
 801282c:	883a      	ldrh	r2, [r7, #0]
 801282e:	78f9      	ldrb	r1, [r7, #3]
 8012830:	f7f6 fcea 	bl	8009208 <HAL_PCD_EP_Open>
 8012834:	4603      	mov	r3, r0
 8012836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012838:	7bfb      	ldrb	r3, [r7, #15]
 801283a:	4618      	mov	r0, r3
 801283c:	f000 f91c 	bl	8012a78 <USBD_Get_USB_Status>
 8012840:	4603      	mov	r3, r0
 8012842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012844:	7bbb      	ldrb	r3, [r7, #14]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3710      	adds	r7, #16
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801284e:	b580      	push	{r7, lr}
 8012850:	b084      	sub	sp, #16
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
 8012856:	460b      	mov	r3, r1
 8012858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801285a:	2300      	movs	r3, #0
 801285c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801285e:	2300      	movs	r3, #0
 8012860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012868:	78fa      	ldrb	r2, [r7, #3]
 801286a:	4611      	mov	r1, r2
 801286c:	4618      	mov	r0, r3
 801286e:	f7f6 fd33 	bl	80092d8 <HAL_PCD_EP_Close>
 8012872:	4603      	mov	r3, r0
 8012874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012876:	7bfb      	ldrb	r3, [r7, #15]
 8012878:	4618      	mov	r0, r3
 801287a:	f000 f8fd 	bl	8012a78 <USBD_Get_USB_Status>
 801287e:	4603      	mov	r3, r0
 8012880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012882:	7bbb      	ldrb	r3, [r7, #14]
}
 8012884:	4618      	mov	r0, r3
 8012886:	3710      	adds	r7, #16
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}

0801288c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b084      	sub	sp, #16
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	460b      	mov	r3, r1
 8012896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012898:	2300      	movs	r3, #0
 801289a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801289c:	2300      	movs	r3, #0
 801289e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80128a6:	78fa      	ldrb	r2, [r7, #3]
 80128a8:	4611      	mov	r1, r2
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7f6 fe0b 	bl	80094c6 <HAL_PCD_EP_SetStall>
 80128b0:	4603      	mov	r3, r0
 80128b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128b4:	7bfb      	ldrb	r3, [r7, #15]
 80128b6:	4618      	mov	r0, r3
 80128b8:	f000 f8de 	bl	8012a78 <USBD_Get_USB_Status>
 80128bc:	4603      	mov	r3, r0
 80128be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3710      	adds	r7, #16
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}

080128ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128ca:	b580      	push	{r7, lr}
 80128cc:	b084      	sub	sp, #16
 80128ce:	af00      	add	r7, sp, #0
 80128d0:	6078      	str	r0, [r7, #4]
 80128d2:	460b      	mov	r3, r1
 80128d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128d6:	2300      	movs	r3, #0
 80128d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128da:	2300      	movs	r3, #0
 80128dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80128e4:	78fa      	ldrb	r2, [r7, #3]
 80128e6:	4611      	mov	r1, r2
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7f6 fe50 	bl	800958e <HAL_PCD_EP_ClrStall>
 80128ee:	4603      	mov	r3, r0
 80128f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128f2:	7bfb      	ldrb	r3, [r7, #15]
 80128f4:	4618      	mov	r0, r3
 80128f6:	f000 f8bf 	bl	8012a78 <USBD_Get_USB_Status>
 80128fa:	4603      	mov	r3, r0
 80128fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8012900:	4618      	mov	r0, r3
 8012902:	3710      	adds	r7, #16
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012908:	b480      	push	{r7}
 801290a:	b085      	sub	sp, #20
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	460b      	mov	r3, r1
 8012912:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801291a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801291c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012920:	2b00      	cmp	r3, #0
 8012922:	da0b      	bge.n	801293c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012924:	78fb      	ldrb	r3, [r7, #3]
 8012926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801292a:	68f9      	ldr	r1, [r7, #12]
 801292c:	4613      	mov	r3, r2
 801292e:	00db      	lsls	r3, r3, #3
 8012930:	1a9b      	subs	r3, r3, r2
 8012932:	009b      	lsls	r3, r3, #2
 8012934:	440b      	add	r3, r1
 8012936:	333e      	adds	r3, #62	; 0x3e
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	e00b      	b.n	8012954 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801293c:	78fb      	ldrb	r3, [r7, #3]
 801293e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012942:	68f9      	ldr	r1, [r7, #12]
 8012944:	4613      	mov	r3, r2
 8012946:	00db      	lsls	r3, r3, #3
 8012948:	1a9b      	subs	r3, r3, r2
 801294a:	009b      	lsls	r3, r3, #2
 801294c:	440b      	add	r3, r1
 801294e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012952:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012954:	4618      	mov	r0, r3
 8012956:	3714      	adds	r7, #20
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr

08012960 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	460b      	mov	r3, r1
 801296a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801296c:	2300      	movs	r3, #0
 801296e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012970:	2300      	movs	r3, #0
 8012972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801297a:	78fa      	ldrb	r2, [r7, #3]
 801297c:	4611      	mov	r1, r2
 801297e:	4618      	mov	r0, r3
 8012980:	f7f6 fc1d 	bl	80091be <HAL_PCD_SetAddress>
 8012984:	4603      	mov	r3, r0
 8012986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012988:	7bfb      	ldrb	r3, [r7, #15]
 801298a:	4618      	mov	r0, r3
 801298c:	f000 f874 	bl	8012a78 <USBD_Get_USB_Status>
 8012990:	4603      	mov	r3, r0
 8012992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012994:	7bbb      	ldrb	r3, [r7, #14]
}
 8012996:	4618      	mov	r0, r3
 8012998:	3710      	adds	r7, #16
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}

0801299e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801299e:	b580      	push	{r7, lr}
 80129a0:	b086      	sub	sp, #24
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	60f8      	str	r0, [r7, #12]
 80129a6:	607a      	str	r2, [r7, #4]
 80129a8:	603b      	str	r3, [r7, #0]
 80129aa:	460b      	mov	r3, r1
 80129ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129ae:	2300      	movs	r3, #0
 80129b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129b2:	2300      	movs	r3, #0
 80129b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80129bc:	7af9      	ldrb	r1, [r7, #11]
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	687a      	ldr	r2, [r7, #4]
 80129c2:	f7f6 fd36 	bl	8009432 <HAL_PCD_EP_Transmit>
 80129c6:	4603      	mov	r3, r0
 80129c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129ca:	7dfb      	ldrb	r3, [r7, #23]
 80129cc:	4618      	mov	r0, r3
 80129ce:	f000 f853 	bl	8012a78 <USBD_Get_USB_Status>
 80129d2:	4603      	mov	r3, r0
 80129d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80129d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3718      	adds	r7, #24
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b086      	sub	sp, #24
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	60f8      	str	r0, [r7, #12]
 80129e8:	607a      	str	r2, [r7, #4]
 80129ea:	603b      	str	r3, [r7, #0]
 80129ec:	460b      	mov	r3, r1
 80129ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129f0:	2300      	movs	r3, #0
 80129f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129f4:	2300      	movs	r3, #0
 80129f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80129fe:	7af9      	ldrb	r1, [r7, #11]
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	f7f6 fcb2 	bl	800936c <HAL_PCD_EP_Receive>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a0c:	7dfb      	ldrb	r3, [r7, #23]
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f000 f832 	bl	8012a78 <USBD_Get_USB_Status>
 8012a14:	4603      	mov	r3, r0
 8012a16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012a18:	7dbb      	ldrb	r3, [r7, #22]
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3718      	adds	r7, #24
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}

08012a22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a22:	b580      	push	{r7, lr}
 8012a24:	b082      	sub	sp, #8
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
 8012a2a:	460b      	mov	r3, r1
 8012a2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a34:	78fa      	ldrb	r2, [r7, #3]
 8012a36:	4611      	mov	r1, r2
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7f6 fce2 	bl	8009402 <HAL_PCD_EP_GetRxCount>
 8012a3e:	4603      	mov	r3, r0
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3708      	adds	r7, #8
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012a50:	4b03      	ldr	r3, [pc, #12]	; (8012a60 <USBD_static_malloc+0x18>)
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	370c      	adds	r7, #12
 8012a56:	46bd      	mov	sp, r7
 8012a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	24000278 	.word	0x24000278

08012a64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012a64:	b480      	push	{r7}
 8012a66:	b083      	sub	sp, #12
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]

}
 8012a6c:	bf00      	nop
 8012a6e:	370c      	adds	r7, #12
 8012a70:	46bd      	mov	sp, r7
 8012a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a76:	4770      	bx	lr

08012a78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b085      	sub	sp, #20
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	4603      	mov	r3, r0
 8012a80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a82:	2300      	movs	r3, #0
 8012a84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012a86:	79fb      	ldrb	r3, [r7, #7]
 8012a88:	2b03      	cmp	r3, #3
 8012a8a:	d817      	bhi.n	8012abc <USBD_Get_USB_Status+0x44>
 8012a8c:	a201      	add	r2, pc, #4	; (adr r2, 8012a94 <USBD_Get_USB_Status+0x1c>)
 8012a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a92:	bf00      	nop
 8012a94:	08012aa5 	.word	0x08012aa5
 8012a98:	08012aab 	.word	0x08012aab
 8012a9c:	08012ab1 	.word	0x08012ab1
 8012aa0:	08012ab7 	.word	0x08012ab7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8012aa8:	e00b      	b.n	8012ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012aaa:	2303      	movs	r3, #3
 8012aac:	73fb      	strb	r3, [r7, #15]
    break;
 8012aae:	e008      	b.n	8012ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8012ab4:	e005      	b.n	8012ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012ab6:	2303      	movs	r3, #3
 8012ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8012aba:	e002      	b.n	8012ac2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012abc:	2303      	movs	r3, #3
 8012abe:	73fb      	strb	r3, [r7, #15]
    break;
 8012ac0:	bf00      	nop
  }
  return usb_status;
 8012ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3714      	adds	r7, #20
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr

08012ad0 <__errno>:
 8012ad0:	4b01      	ldr	r3, [pc, #4]	; (8012ad8 <__errno+0x8>)
 8012ad2:	6818      	ldr	r0, [r3, #0]
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	2400018c 	.word	0x2400018c

08012adc <__libc_init_array>:
 8012adc:	b570      	push	{r4, r5, r6, lr}
 8012ade:	4d0d      	ldr	r5, [pc, #52]	; (8012b14 <__libc_init_array+0x38>)
 8012ae0:	4c0d      	ldr	r4, [pc, #52]	; (8012b18 <__libc_init_array+0x3c>)
 8012ae2:	1b64      	subs	r4, r4, r5
 8012ae4:	10a4      	asrs	r4, r4, #2
 8012ae6:	2600      	movs	r6, #0
 8012ae8:	42a6      	cmp	r6, r4
 8012aea:	d109      	bne.n	8012b00 <__libc_init_array+0x24>
 8012aec:	4d0b      	ldr	r5, [pc, #44]	; (8012b1c <__libc_init_array+0x40>)
 8012aee:	4c0c      	ldr	r4, [pc, #48]	; (8012b20 <__libc_init_array+0x44>)
 8012af0:	f000 ffe2 	bl	8013ab8 <_init>
 8012af4:	1b64      	subs	r4, r4, r5
 8012af6:	10a4      	asrs	r4, r4, #2
 8012af8:	2600      	movs	r6, #0
 8012afa:	42a6      	cmp	r6, r4
 8012afc:	d105      	bne.n	8012b0a <__libc_init_array+0x2e>
 8012afe:	bd70      	pop	{r4, r5, r6, pc}
 8012b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b04:	4798      	blx	r3
 8012b06:	3601      	adds	r6, #1
 8012b08:	e7ee      	b.n	8012ae8 <__libc_init_array+0xc>
 8012b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b0e:	4798      	blx	r3
 8012b10:	3601      	adds	r6, #1
 8012b12:	e7f2      	b.n	8012afa <__libc_init_array+0x1e>
 8012b14:	08013c6c 	.word	0x08013c6c
 8012b18:	08013c6c 	.word	0x08013c6c
 8012b1c:	08013c6c 	.word	0x08013c6c
 8012b20:	08013c70 	.word	0x08013c70

08012b24 <memcpy>:
 8012b24:	440a      	add	r2, r1
 8012b26:	4291      	cmp	r1, r2
 8012b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b2c:	d100      	bne.n	8012b30 <memcpy+0xc>
 8012b2e:	4770      	bx	lr
 8012b30:	b510      	push	{r4, lr}
 8012b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b3a:	4291      	cmp	r1, r2
 8012b3c:	d1f9      	bne.n	8012b32 <memcpy+0xe>
 8012b3e:	bd10      	pop	{r4, pc}

08012b40 <memset>:
 8012b40:	4402      	add	r2, r0
 8012b42:	4603      	mov	r3, r0
 8012b44:	4293      	cmp	r3, r2
 8012b46:	d100      	bne.n	8012b4a <memset+0xa>
 8012b48:	4770      	bx	lr
 8012b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8012b4e:	e7f9      	b.n	8012b44 <memset+0x4>

08012b50 <iprintf>:
 8012b50:	b40f      	push	{r0, r1, r2, r3}
 8012b52:	4b0a      	ldr	r3, [pc, #40]	; (8012b7c <iprintf+0x2c>)
 8012b54:	b513      	push	{r0, r1, r4, lr}
 8012b56:	681c      	ldr	r4, [r3, #0]
 8012b58:	b124      	cbz	r4, 8012b64 <iprintf+0x14>
 8012b5a:	69a3      	ldr	r3, [r4, #24]
 8012b5c:	b913      	cbnz	r3, 8012b64 <iprintf+0x14>
 8012b5e:	4620      	mov	r0, r4
 8012b60:	f000 f87c 	bl	8012c5c <__sinit>
 8012b64:	ab05      	add	r3, sp, #20
 8012b66:	9a04      	ldr	r2, [sp, #16]
 8012b68:	68a1      	ldr	r1, [r4, #8]
 8012b6a:	9301      	str	r3, [sp, #4]
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	f000 f999 	bl	8012ea4 <_vfiprintf_r>
 8012b72:	b002      	add	sp, #8
 8012b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b78:	b004      	add	sp, #16
 8012b7a:	4770      	bx	lr
 8012b7c:	2400018c 	.word	0x2400018c

08012b80 <putchar>:
 8012b80:	4b09      	ldr	r3, [pc, #36]	; (8012ba8 <putchar+0x28>)
 8012b82:	b513      	push	{r0, r1, r4, lr}
 8012b84:	681c      	ldr	r4, [r3, #0]
 8012b86:	4601      	mov	r1, r0
 8012b88:	b134      	cbz	r4, 8012b98 <putchar+0x18>
 8012b8a:	69a3      	ldr	r3, [r4, #24]
 8012b8c:	b923      	cbnz	r3, 8012b98 <putchar+0x18>
 8012b8e:	9001      	str	r0, [sp, #4]
 8012b90:	4620      	mov	r0, r4
 8012b92:	f000 f863 	bl	8012c5c <__sinit>
 8012b96:	9901      	ldr	r1, [sp, #4]
 8012b98:	68a2      	ldr	r2, [r4, #8]
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	b002      	add	sp, #8
 8012b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ba2:	f000 bc43 	b.w	801342c <_putc_r>
 8012ba6:	bf00      	nop
 8012ba8:	2400018c 	.word	0x2400018c

08012bac <std>:
 8012bac:	2300      	movs	r3, #0
 8012bae:	b510      	push	{r4, lr}
 8012bb0:	4604      	mov	r4, r0
 8012bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8012bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012bba:	6083      	str	r3, [r0, #8]
 8012bbc:	8181      	strh	r1, [r0, #12]
 8012bbe:	6643      	str	r3, [r0, #100]	; 0x64
 8012bc0:	81c2      	strh	r2, [r0, #14]
 8012bc2:	6183      	str	r3, [r0, #24]
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	2208      	movs	r2, #8
 8012bc8:	305c      	adds	r0, #92	; 0x5c
 8012bca:	f7ff ffb9 	bl	8012b40 <memset>
 8012bce:	4b05      	ldr	r3, [pc, #20]	; (8012be4 <std+0x38>)
 8012bd0:	6263      	str	r3, [r4, #36]	; 0x24
 8012bd2:	4b05      	ldr	r3, [pc, #20]	; (8012be8 <std+0x3c>)
 8012bd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8012bd6:	4b05      	ldr	r3, [pc, #20]	; (8012bec <std+0x40>)
 8012bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012bda:	4b05      	ldr	r3, [pc, #20]	; (8012bf0 <std+0x44>)
 8012bdc:	6224      	str	r4, [r4, #32]
 8012bde:	6323      	str	r3, [r4, #48]	; 0x30
 8012be0:	bd10      	pop	{r4, pc}
 8012be2:	bf00      	nop
 8012be4:	080134dd 	.word	0x080134dd
 8012be8:	080134ff 	.word	0x080134ff
 8012bec:	08013537 	.word	0x08013537
 8012bf0:	0801355b 	.word	0x0801355b

08012bf4 <_cleanup_r>:
 8012bf4:	4901      	ldr	r1, [pc, #4]	; (8012bfc <_cleanup_r+0x8>)
 8012bf6:	f000 b8af 	b.w	8012d58 <_fwalk_reent>
 8012bfa:	bf00      	nop
 8012bfc:	08013835 	.word	0x08013835

08012c00 <__sfmoreglue>:
 8012c00:	b570      	push	{r4, r5, r6, lr}
 8012c02:	1e4a      	subs	r2, r1, #1
 8012c04:	2568      	movs	r5, #104	; 0x68
 8012c06:	4355      	muls	r5, r2
 8012c08:	460e      	mov	r6, r1
 8012c0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012c0e:	f000 f8c5 	bl	8012d9c <_malloc_r>
 8012c12:	4604      	mov	r4, r0
 8012c14:	b140      	cbz	r0, 8012c28 <__sfmoreglue+0x28>
 8012c16:	2100      	movs	r1, #0
 8012c18:	e9c0 1600 	strd	r1, r6, [r0]
 8012c1c:	300c      	adds	r0, #12
 8012c1e:	60a0      	str	r0, [r4, #8]
 8012c20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012c24:	f7ff ff8c 	bl	8012b40 <memset>
 8012c28:	4620      	mov	r0, r4
 8012c2a:	bd70      	pop	{r4, r5, r6, pc}

08012c2c <__sfp_lock_acquire>:
 8012c2c:	4801      	ldr	r0, [pc, #4]	; (8012c34 <__sfp_lock_acquire+0x8>)
 8012c2e:	f000 b8b3 	b.w	8012d98 <__retarget_lock_acquire_recursive>
 8012c32:	bf00      	nop
 8012c34:	240026bc 	.word	0x240026bc

08012c38 <__sfp_lock_release>:
 8012c38:	4801      	ldr	r0, [pc, #4]	; (8012c40 <__sfp_lock_release+0x8>)
 8012c3a:	f000 b8ae 	b.w	8012d9a <__retarget_lock_release_recursive>
 8012c3e:	bf00      	nop
 8012c40:	240026bc 	.word	0x240026bc

08012c44 <__sinit_lock_acquire>:
 8012c44:	4801      	ldr	r0, [pc, #4]	; (8012c4c <__sinit_lock_acquire+0x8>)
 8012c46:	f000 b8a7 	b.w	8012d98 <__retarget_lock_acquire_recursive>
 8012c4a:	bf00      	nop
 8012c4c:	240026b7 	.word	0x240026b7

08012c50 <__sinit_lock_release>:
 8012c50:	4801      	ldr	r0, [pc, #4]	; (8012c58 <__sinit_lock_release+0x8>)
 8012c52:	f000 b8a2 	b.w	8012d9a <__retarget_lock_release_recursive>
 8012c56:	bf00      	nop
 8012c58:	240026b7 	.word	0x240026b7

08012c5c <__sinit>:
 8012c5c:	b510      	push	{r4, lr}
 8012c5e:	4604      	mov	r4, r0
 8012c60:	f7ff fff0 	bl	8012c44 <__sinit_lock_acquire>
 8012c64:	69a3      	ldr	r3, [r4, #24]
 8012c66:	b11b      	cbz	r3, 8012c70 <__sinit+0x14>
 8012c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c6c:	f7ff bff0 	b.w	8012c50 <__sinit_lock_release>
 8012c70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012c74:	6523      	str	r3, [r4, #80]	; 0x50
 8012c76:	4b13      	ldr	r3, [pc, #76]	; (8012cc4 <__sinit+0x68>)
 8012c78:	4a13      	ldr	r2, [pc, #76]	; (8012cc8 <__sinit+0x6c>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8012c7e:	42a3      	cmp	r3, r4
 8012c80:	bf04      	itt	eq
 8012c82:	2301      	moveq	r3, #1
 8012c84:	61a3      	streq	r3, [r4, #24]
 8012c86:	4620      	mov	r0, r4
 8012c88:	f000 f820 	bl	8012ccc <__sfp>
 8012c8c:	6060      	str	r0, [r4, #4]
 8012c8e:	4620      	mov	r0, r4
 8012c90:	f000 f81c 	bl	8012ccc <__sfp>
 8012c94:	60a0      	str	r0, [r4, #8]
 8012c96:	4620      	mov	r0, r4
 8012c98:	f000 f818 	bl	8012ccc <__sfp>
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	60e0      	str	r0, [r4, #12]
 8012ca0:	2104      	movs	r1, #4
 8012ca2:	6860      	ldr	r0, [r4, #4]
 8012ca4:	f7ff ff82 	bl	8012bac <std>
 8012ca8:	68a0      	ldr	r0, [r4, #8]
 8012caa:	2201      	movs	r2, #1
 8012cac:	2109      	movs	r1, #9
 8012cae:	f7ff ff7d 	bl	8012bac <std>
 8012cb2:	68e0      	ldr	r0, [r4, #12]
 8012cb4:	2202      	movs	r2, #2
 8012cb6:	2112      	movs	r1, #18
 8012cb8:	f7ff ff78 	bl	8012bac <std>
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	61a3      	str	r3, [r4, #24]
 8012cc0:	e7d2      	b.n	8012c68 <__sinit+0xc>
 8012cc2:	bf00      	nop
 8012cc4:	08013bd4 	.word	0x08013bd4
 8012cc8:	08012bf5 	.word	0x08012bf5

08012ccc <__sfp>:
 8012ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cce:	4607      	mov	r7, r0
 8012cd0:	f7ff ffac 	bl	8012c2c <__sfp_lock_acquire>
 8012cd4:	4b1e      	ldr	r3, [pc, #120]	; (8012d50 <__sfp+0x84>)
 8012cd6:	681e      	ldr	r6, [r3, #0]
 8012cd8:	69b3      	ldr	r3, [r6, #24]
 8012cda:	b913      	cbnz	r3, 8012ce2 <__sfp+0x16>
 8012cdc:	4630      	mov	r0, r6
 8012cde:	f7ff ffbd 	bl	8012c5c <__sinit>
 8012ce2:	3648      	adds	r6, #72	; 0x48
 8012ce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ce8:	3b01      	subs	r3, #1
 8012cea:	d503      	bpl.n	8012cf4 <__sfp+0x28>
 8012cec:	6833      	ldr	r3, [r6, #0]
 8012cee:	b30b      	cbz	r3, 8012d34 <__sfp+0x68>
 8012cf0:	6836      	ldr	r6, [r6, #0]
 8012cf2:	e7f7      	b.n	8012ce4 <__sfp+0x18>
 8012cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012cf8:	b9d5      	cbnz	r5, 8012d30 <__sfp+0x64>
 8012cfa:	4b16      	ldr	r3, [pc, #88]	; (8012d54 <__sfp+0x88>)
 8012cfc:	60e3      	str	r3, [r4, #12]
 8012cfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012d02:	6665      	str	r5, [r4, #100]	; 0x64
 8012d04:	f000 f847 	bl	8012d96 <__retarget_lock_init_recursive>
 8012d08:	f7ff ff96 	bl	8012c38 <__sfp_lock_release>
 8012d0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012d10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012d14:	6025      	str	r5, [r4, #0]
 8012d16:	61a5      	str	r5, [r4, #24]
 8012d18:	2208      	movs	r2, #8
 8012d1a:	4629      	mov	r1, r5
 8012d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012d20:	f7ff ff0e 	bl	8012b40 <memset>
 8012d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d30:	3468      	adds	r4, #104	; 0x68
 8012d32:	e7d9      	b.n	8012ce8 <__sfp+0x1c>
 8012d34:	2104      	movs	r1, #4
 8012d36:	4638      	mov	r0, r7
 8012d38:	f7ff ff62 	bl	8012c00 <__sfmoreglue>
 8012d3c:	4604      	mov	r4, r0
 8012d3e:	6030      	str	r0, [r6, #0]
 8012d40:	2800      	cmp	r0, #0
 8012d42:	d1d5      	bne.n	8012cf0 <__sfp+0x24>
 8012d44:	f7ff ff78 	bl	8012c38 <__sfp_lock_release>
 8012d48:	230c      	movs	r3, #12
 8012d4a:	603b      	str	r3, [r7, #0]
 8012d4c:	e7ee      	b.n	8012d2c <__sfp+0x60>
 8012d4e:	bf00      	nop
 8012d50:	08013bd4 	.word	0x08013bd4
 8012d54:	ffff0001 	.word	0xffff0001

08012d58 <_fwalk_reent>:
 8012d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d5c:	4606      	mov	r6, r0
 8012d5e:	4688      	mov	r8, r1
 8012d60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d64:	2700      	movs	r7, #0
 8012d66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d6a:	f1b9 0901 	subs.w	r9, r9, #1
 8012d6e:	d505      	bpl.n	8012d7c <_fwalk_reent+0x24>
 8012d70:	6824      	ldr	r4, [r4, #0]
 8012d72:	2c00      	cmp	r4, #0
 8012d74:	d1f7      	bne.n	8012d66 <_fwalk_reent+0xe>
 8012d76:	4638      	mov	r0, r7
 8012d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d7c:	89ab      	ldrh	r3, [r5, #12]
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d907      	bls.n	8012d92 <_fwalk_reent+0x3a>
 8012d82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d86:	3301      	adds	r3, #1
 8012d88:	d003      	beq.n	8012d92 <_fwalk_reent+0x3a>
 8012d8a:	4629      	mov	r1, r5
 8012d8c:	4630      	mov	r0, r6
 8012d8e:	47c0      	blx	r8
 8012d90:	4307      	orrs	r7, r0
 8012d92:	3568      	adds	r5, #104	; 0x68
 8012d94:	e7e9      	b.n	8012d6a <_fwalk_reent+0x12>

08012d96 <__retarget_lock_init_recursive>:
 8012d96:	4770      	bx	lr

08012d98 <__retarget_lock_acquire_recursive>:
 8012d98:	4770      	bx	lr

08012d9a <__retarget_lock_release_recursive>:
 8012d9a:	4770      	bx	lr

08012d9c <_malloc_r>:
 8012d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d9e:	1ccd      	adds	r5, r1, #3
 8012da0:	f025 0503 	bic.w	r5, r5, #3
 8012da4:	3508      	adds	r5, #8
 8012da6:	2d0c      	cmp	r5, #12
 8012da8:	bf38      	it	cc
 8012daa:	250c      	movcc	r5, #12
 8012dac:	2d00      	cmp	r5, #0
 8012dae:	4606      	mov	r6, r0
 8012db0:	db01      	blt.n	8012db6 <_malloc_r+0x1a>
 8012db2:	42a9      	cmp	r1, r5
 8012db4:	d903      	bls.n	8012dbe <_malloc_r+0x22>
 8012db6:	230c      	movs	r3, #12
 8012db8:	6033      	str	r3, [r6, #0]
 8012dba:	2000      	movs	r0, #0
 8012dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dbe:	f000 fdeb 	bl	8013998 <__malloc_lock>
 8012dc2:	4921      	ldr	r1, [pc, #132]	; (8012e48 <_malloc_r+0xac>)
 8012dc4:	680a      	ldr	r2, [r1, #0]
 8012dc6:	4614      	mov	r4, r2
 8012dc8:	b99c      	cbnz	r4, 8012df2 <_malloc_r+0x56>
 8012dca:	4f20      	ldr	r7, [pc, #128]	; (8012e4c <_malloc_r+0xb0>)
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	b923      	cbnz	r3, 8012dda <_malloc_r+0x3e>
 8012dd0:	4621      	mov	r1, r4
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	f000 fb72 	bl	80134bc <_sbrk_r>
 8012dd8:	6038      	str	r0, [r7, #0]
 8012dda:	4629      	mov	r1, r5
 8012ddc:	4630      	mov	r0, r6
 8012dde:	f000 fb6d 	bl	80134bc <_sbrk_r>
 8012de2:	1c43      	adds	r3, r0, #1
 8012de4:	d123      	bne.n	8012e2e <_malloc_r+0x92>
 8012de6:	230c      	movs	r3, #12
 8012de8:	6033      	str	r3, [r6, #0]
 8012dea:	4630      	mov	r0, r6
 8012dec:	f000 fdda 	bl	80139a4 <__malloc_unlock>
 8012df0:	e7e3      	b.n	8012dba <_malloc_r+0x1e>
 8012df2:	6823      	ldr	r3, [r4, #0]
 8012df4:	1b5b      	subs	r3, r3, r5
 8012df6:	d417      	bmi.n	8012e28 <_malloc_r+0x8c>
 8012df8:	2b0b      	cmp	r3, #11
 8012dfa:	d903      	bls.n	8012e04 <_malloc_r+0x68>
 8012dfc:	6023      	str	r3, [r4, #0]
 8012dfe:	441c      	add	r4, r3
 8012e00:	6025      	str	r5, [r4, #0]
 8012e02:	e004      	b.n	8012e0e <_malloc_r+0x72>
 8012e04:	6863      	ldr	r3, [r4, #4]
 8012e06:	42a2      	cmp	r2, r4
 8012e08:	bf0c      	ite	eq
 8012e0a:	600b      	streq	r3, [r1, #0]
 8012e0c:	6053      	strne	r3, [r2, #4]
 8012e0e:	4630      	mov	r0, r6
 8012e10:	f000 fdc8 	bl	80139a4 <__malloc_unlock>
 8012e14:	f104 000b 	add.w	r0, r4, #11
 8012e18:	1d23      	adds	r3, r4, #4
 8012e1a:	f020 0007 	bic.w	r0, r0, #7
 8012e1e:	1ac2      	subs	r2, r0, r3
 8012e20:	d0cc      	beq.n	8012dbc <_malloc_r+0x20>
 8012e22:	1a1b      	subs	r3, r3, r0
 8012e24:	50a3      	str	r3, [r4, r2]
 8012e26:	e7c9      	b.n	8012dbc <_malloc_r+0x20>
 8012e28:	4622      	mov	r2, r4
 8012e2a:	6864      	ldr	r4, [r4, #4]
 8012e2c:	e7cc      	b.n	8012dc8 <_malloc_r+0x2c>
 8012e2e:	1cc4      	adds	r4, r0, #3
 8012e30:	f024 0403 	bic.w	r4, r4, #3
 8012e34:	42a0      	cmp	r0, r4
 8012e36:	d0e3      	beq.n	8012e00 <_malloc_r+0x64>
 8012e38:	1a21      	subs	r1, r4, r0
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f000 fb3e 	bl	80134bc <_sbrk_r>
 8012e40:	3001      	adds	r0, #1
 8012e42:	d1dd      	bne.n	8012e00 <_malloc_r+0x64>
 8012e44:	e7cf      	b.n	8012de6 <_malloc_r+0x4a>
 8012e46:	bf00      	nop
 8012e48:	24000498 	.word	0x24000498
 8012e4c:	2400049c 	.word	0x2400049c

08012e50 <__sfputc_r>:
 8012e50:	6893      	ldr	r3, [r2, #8]
 8012e52:	3b01      	subs	r3, #1
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	b410      	push	{r4}
 8012e58:	6093      	str	r3, [r2, #8]
 8012e5a:	da08      	bge.n	8012e6e <__sfputc_r+0x1e>
 8012e5c:	6994      	ldr	r4, [r2, #24]
 8012e5e:	42a3      	cmp	r3, r4
 8012e60:	db01      	blt.n	8012e66 <__sfputc_r+0x16>
 8012e62:	290a      	cmp	r1, #10
 8012e64:	d103      	bne.n	8012e6e <__sfputc_r+0x1e>
 8012e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e6a:	f000 bb7b 	b.w	8013564 <__swbuf_r>
 8012e6e:	6813      	ldr	r3, [r2, #0]
 8012e70:	1c58      	adds	r0, r3, #1
 8012e72:	6010      	str	r0, [r2, #0]
 8012e74:	7019      	strb	r1, [r3, #0]
 8012e76:	4608      	mov	r0, r1
 8012e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e7c:	4770      	bx	lr

08012e7e <__sfputs_r>:
 8012e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e80:	4606      	mov	r6, r0
 8012e82:	460f      	mov	r7, r1
 8012e84:	4614      	mov	r4, r2
 8012e86:	18d5      	adds	r5, r2, r3
 8012e88:	42ac      	cmp	r4, r5
 8012e8a:	d101      	bne.n	8012e90 <__sfputs_r+0x12>
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	e007      	b.n	8012ea0 <__sfputs_r+0x22>
 8012e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e94:	463a      	mov	r2, r7
 8012e96:	4630      	mov	r0, r6
 8012e98:	f7ff ffda 	bl	8012e50 <__sfputc_r>
 8012e9c:	1c43      	adds	r3, r0, #1
 8012e9e:	d1f3      	bne.n	8012e88 <__sfputs_r+0xa>
 8012ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ea4 <_vfiprintf_r>:
 8012ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea8:	460d      	mov	r5, r1
 8012eaa:	b09d      	sub	sp, #116	; 0x74
 8012eac:	4614      	mov	r4, r2
 8012eae:	4698      	mov	r8, r3
 8012eb0:	4606      	mov	r6, r0
 8012eb2:	b118      	cbz	r0, 8012ebc <_vfiprintf_r+0x18>
 8012eb4:	6983      	ldr	r3, [r0, #24]
 8012eb6:	b90b      	cbnz	r3, 8012ebc <_vfiprintf_r+0x18>
 8012eb8:	f7ff fed0 	bl	8012c5c <__sinit>
 8012ebc:	4b89      	ldr	r3, [pc, #548]	; (80130e4 <_vfiprintf_r+0x240>)
 8012ebe:	429d      	cmp	r5, r3
 8012ec0:	d11b      	bne.n	8012efa <_vfiprintf_r+0x56>
 8012ec2:	6875      	ldr	r5, [r6, #4]
 8012ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ec6:	07d9      	lsls	r1, r3, #31
 8012ec8:	d405      	bmi.n	8012ed6 <_vfiprintf_r+0x32>
 8012eca:	89ab      	ldrh	r3, [r5, #12]
 8012ecc:	059a      	lsls	r2, r3, #22
 8012ece:	d402      	bmi.n	8012ed6 <_vfiprintf_r+0x32>
 8012ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ed2:	f7ff ff61 	bl	8012d98 <__retarget_lock_acquire_recursive>
 8012ed6:	89ab      	ldrh	r3, [r5, #12]
 8012ed8:	071b      	lsls	r3, r3, #28
 8012eda:	d501      	bpl.n	8012ee0 <_vfiprintf_r+0x3c>
 8012edc:	692b      	ldr	r3, [r5, #16]
 8012ede:	b9eb      	cbnz	r3, 8012f1c <_vfiprintf_r+0x78>
 8012ee0:	4629      	mov	r1, r5
 8012ee2:	4630      	mov	r0, r6
 8012ee4:	f000 fba2 	bl	801362c <__swsetup_r>
 8012ee8:	b1c0      	cbz	r0, 8012f1c <_vfiprintf_r+0x78>
 8012eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012eec:	07dc      	lsls	r4, r3, #31
 8012eee:	d50e      	bpl.n	8012f0e <_vfiprintf_r+0x6a>
 8012ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ef4:	b01d      	add	sp, #116	; 0x74
 8012ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012efa:	4b7b      	ldr	r3, [pc, #492]	; (80130e8 <_vfiprintf_r+0x244>)
 8012efc:	429d      	cmp	r5, r3
 8012efe:	d101      	bne.n	8012f04 <_vfiprintf_r+0x60>
 8012f00:	68b5      	ldr	r5, [r6, #8]
 8012f02:	e7df      	b.n	8012ec4 <_vfiprintf_r+0x20>
 8012f04:	4b79      	ldr	r3, [pc, #484]	; (80130ec <_vfiprintf_r+0x248>)
 8012f06:	429d      	cmp	r5, r3
 8012f08:	bf08      	it	eq
 8012f0a:	68f5      	ldreq	r5, [r6, #12]
 8012f0c:	e7da      	b.n	8012ec4 <_vfiprintf_r+0x20>
 8012f0e:	89ab      	ldrh	r3, [r5, #12]
 8012f10:	0598      	lsls	r0, r3, #22
 8012f12:	d4ed      	bmi.n	8012ef0 <_vfiprintf_r+0x4c>
 8012f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f16:	f7ff ff40 	bl	8012d9a <__retarget_lock_release_recursive>
 8012f1a:	e7e9      	b.n	8012ef0 <_vfiprintf_r+0x4c>
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8012f20:	2320      	movs	r3, #32
 8012f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f2a:	2330      	movs	r3, #48	; 0x30
 8012f2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80130f0 <_vfiprintf_r+0x24c>
 8012f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f34:	f04f 0901 	mov.w	r9, #1
 8012f38:	4623      	mov	r3, r4
 8012f3a:	469a      	mov	sl, r3
 8012f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f40:	b10a      	cbz	r2, 8012f46 <_vfiprintf_r+0xa2>
 8012f42:	2a25      	cmp	r2, #37	; 0x25
 8012f44:	d1f9      	bne.n	8012f3a <_vfiprintf_r+0x96>
 8012f46:	ebba 0b04 	subs.w	fp, sl, r4
 8012f4a:	d00b      	beq.n	8012f64 <_vfiprintf_r+0xc0>
 8012f4c:	465b      	mov	r3, fp
 8012f4e:	4622      	mov	r2, r4
 8012f50:	4629      	mov	r1, r5
 8012f52:	4630      	mov	r0, r6
 8012f54:	f7ff ff93 	bl	8012e7e <__sfputs_r>
 8012f58:	3001      	adds	r0, #1
 8012f5a:	f000 80aa 	beq.w	80130b2 <_vfiprintf_r+0x20e>
 8012f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f60:	445a      	add	r2, fp
 8012f62:	9209      	str	r2, [sp, #36]	; 0x24
 8012f64:	f89a 3000 	ldrb.w	r3, [sl]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	f000 80a2 	beq.w	80130b2 <_vfiprintf_r+0x20e>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	f04f 32ff 	mov.w	r2, #4294967295
 8012f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f78:	f10a 0a01 	add.w	sl, sl, #1
 8012f7c:	9304      	str	r3, [sp, #16]
 8012f7e:	9307      	str	r3, [sp, #28]
 8012f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f84:	931a      	str	r3, [sp, #104]	; 0x68
 8012f86:	4654      	mov	r4, sl
 8012f88:	2205      	movs	r2, #5
 8012f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f8e:	4858      	ldr	r0, [pc, #352]	; (80130f0 <_vfiprintf_r+0x24c>)
 8012f90:	f7ed f9c6 	bl	8000320 <memchr>
 8012f94:	9a04      	ldr	r2, [sp, #16]
 8012f96:	b9d8      	cbnz	r0, 8012fd0 <_vfiprintf_r+0x12c>
 8012f98:	06d1      	lsls	r1, r2, #27
 8012f9a:	bf44      	itt	mi
 8012f9c:	2320      	movmi	r3, #32
 8012f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fa2:	0713      	lsls	r3, r2, #28
 8012fa4:	bf44      	itt	mi
 8012fa6:	232b      	movmi	r3, #43	; 0x2b
 8012fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fac:	f89a 3000 	ldrb.w	r3, [sl]
 8012fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8012fb2:	d015      	beq.n	8012fe0 <_vfiprintf_r+0x13c>
 8012fb4:	9a07      	ldr	r2, [sp, #28]
 8012fb6:	4654      	mov	r4, sl
 8012fb8:	2000      	movs	r0, #0
 8012fba:	f04f 0c0a 	mov.w	ip, #10
 8012fbe:	4621      	mov	r1, r4
 8012fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fc4:	3b30      	subs	r3, #48	; 0x30
 8012fc6:	2b09      	cmp	r3, #9
 8012fc8:	d94e      	bls.n	8013068 <_vfiprintf_r+0x1c4>
 8012fca:	b1b0      	cbz	r0, 8012ffa <_vfiprintf_r+0x156>
 8012fcc:	9207      	str	r2, [sp, #28]
 8012fce:	e014      	b.n	8012ffa <_vfiprintf_r+0x156>
 8012fd0:	eba0 0308 	sub.w	r3, r0, r8
 8012fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	9304      	str	r3, [sp, #16]
 8012fdc:	46a2      	mov	sl, r4
 8012fde:	e7d2      	b.n	8012f86 <_vfiprintf_r+0xe2>
 8012fe0:	9b03      	ldr	r3, [sp, #12]
 8012fe2:	1d19      	adds	r1, r3, #4
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	9103      	str	r1, [sp, #12]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	bfbb      	ittet	lt
 8012fec:	425b      	neglt	r3, r3
 8012fee:	f042 0202 	orrlt.w	r2, r2, #2
 8012ff2:	9307      	strge	r3, [sp, #28]
 8012ff4:	9307      	strlt	r3, [sp, #28]
 8012ff6:	bfb8      	it	lt
 8012ff8:	9204      	strlt	r2, [sp, #16]
 8012ffa:	7823      	ldrb	r3, [r4, #0]
 8012ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8012ffe:	d10c      	bne.n	801301a <_vfiprintf_r+0x176>
 8013000:	7863      	ldrb	r3, [r4, #1]
 8013002:	2b2a      	cmp	r3, #42	; 0x2a
 8013004:	d135      	bne.n	8013072 <_vfiprintf_r+0x1ce>
 8013006:	9b03      	ldr	r3, [sp, #12]
 8013008:	1d1a      	adds	r2, r3, #4
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	9203      	str	r2, [sp, #12]
 801300e:	2b00      	cmp	r3, #0
 8013010:	bfb8      	it	lt
 8013012:	f04f 33ff 	movlt.w	r3, #4294967295
 8013016:	3402      	adds	r4, #2
 8013018:	9305      	str	r3, [sp, #20]
 801301a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013100 <_vfiprintf_r+0x25c>
 801301e:	7821      	ldrb	r1, [r4, #0]
 8013020:	2203      	movs	r2, #3
 8013022:	4650      	mov	r0, sl
 8013024:	f7ed f97c 	bl	8000320 <memchr>
 8013028:	b140      	cbz	r0, 801303c <_vfiprintf_r+0x198>
 801302a:	2340      	movs	r3, #64	; 0x40
 801302c:	eba0 000a 	sub.w	r0, r0, sl
 8013030:	fa03 f000 	lsl.w	r0, r3, r0
 8013034:	9b04      	ldr	r3, [sp, #16]
 8013036:	4303      	orrs	r3, r0
 8013038:	3401      	adds	r4, #1
 801303a:	9304      	str	r3, [sp, #16]
 801303c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013040:	482c      	ldr	r0, [pc, #176]	; (80130f4 <_vfiprintf_r+0x250>)
 8013042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013046:	2206      	movs	r2, #6
 8013048:	f7ed f96a 	bl	8000320 <memchr>
 801304c:	2800      	cmp	r0, #0
 801304e:	d03f      	beq.n	80130d0 <_vfiprintf_r+0x22c>
 8013050:	4b29      	ldr	r3, [pc, #164]	; (80130f8 <_vfiprintf_r+0x254>)
 8013052:	bb1b      	cbnz	r3, 801309c <_vfiprintf_r+0x1f8>
 8013054:	9b03      	ldr	r3, [sp, #12]
 8013056:	3307      	adds	r3, #7
 8013058:	f023 0307 	bic.w	r3, r3, #7
 801305c:	3308      	adds	r3, #8
 801305e:	9303      	str	r3, [sp, #12]
 8013060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013062:	443b      	add	r3, r7
 8013064:	9309      	str	r3, [sp, #36]	; 0x24
 8013066:	e767      	b.n	8012f38 <_vfiprintf_r+0x94>
 8013068:	fb0c 3202 	mla	r2, ip, r2, r3
 801306c:	460c      	mov	r4, r1
 801306e:	2001      	movs	r0, #1
 8013070:	e7a5      	b.n	8012fbe <_vfiprintf_r+0x11a>
 8013072:	2300      	movs	r3, #0
 8013074:	3401      	adds	r4, #1
 8013076:	9305      	str	r3, [sp, #20]
 8013078:	4619      	mov	r1, r3
 801307a:	f04f 0c0a 	mov.w	ip, #10
 801307e:	4620      	mov	r0, r4
 8013080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013084:	3a30      	subs	r2, #48	; 0x30
 8013086:	2a09      	cmp	r2, #9
 8013088:	d903      	bls.n	8013092 <_vfiprintf_r+0x1ee>
 801308a:	2b00      	cmp	r3, #0
 801308c:	d0c5      	beq.n	801301a <_vfiprintf_r+0x176>
 801308e:	9105      	str	r1, [sp, #20]
 8013090:	e7c3      	b.n	801301a <_vfiprintf_r+0x176>
 8013092:	fb0c 2101 	mla	r1, ip, r1, r2
 8013096:	4604      	mov	r4, r0
 8013098:	2301      	movs	r3, #1
 801309a:	e7f0      	b.n	801307e <_vfiprintf_r+0x1da>
 801309c:	ab03      	add	r3, sp, #12
 801309e:	9300      	str	r3, [sp, #0]
 80130a0:	462a      	mov	r2, r5
 80130a2:	4b16      	ldr	r3, [pc, #88]	; (80130fc <_vfiprintf_r+0x258>)
 80130a4:	a904      	add	r1, sp, #16
 80130a6:	4630      	mov	r0, r6
 80130a8:	f3af 8000 	nop.w
 80130ac:	4607      	mov	r7, r0
 80130ae:	1c78      	adds	r0, r7, #1
 80130b0:	d1d6      	bne.n	8013060 <_vfiprintf_r+0x1bc>
 80130b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130b4:	07d9      	lsls	r1, r3, #31
 80130b6:	d405      	bmi.n	80130c4 <_vfiprintf_r+0x220>
 80130b8:	89ab      	ldrh	r3, [r5, #12]
 80130ba:	059a      	lsls	r2, r3, #22
 80130bc:	d402      	bmi.n	80130c4 <_vfiprintf_r+0x220>
 80130be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130c0:	f7ff fe6b 	bl	8012d9a <__retarget_lock_release_recursive>
 80130c4:	89ab      	ldrh	r3, [r5, #12]
 80130c6:	065b      	lsls	r3, r3, #25
 80130c8:	f53f af12 	bmi.w	8012ef0 <_vfiprintf_r+0x4c>
 80130cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130ce:	e711      	b.n	8012ef4 <_vfiprintf_r+0x50>
 80130d0:	ab03      	add	r3, sp, #12
 80130d2:	9300      	str	r3, [sp, #0]
 80130d4:	462a      	mov	r2, r5
 80130d6:	4b09      	ldr	r3, [pc, #36]	; (80130fc <_vfiprintf_r+0x258>)
 80130d8:	a904      	add	r1, sp, #16
 80130da:	4630      	mov	r0, r6
 80130dc:	f000 f880 	bl	80131e0 <_printf_i>
 80130e0:	e7e4      	b.n	80130ac <_vfiprintf_r+0x208>
 80130e2:	bf00      	nop
 80130e4:	08013bf8 	.word	0x08013bf8
 80130e8:	08013c18 	.word	0x08013c18
 80130ec:	08013bd8 	.word	0x08013bd8
 80130f0:	08013c38 	.word	0x08013c38
 80130f4:	08013c42 	.word	0x08013c42
 80130f8:	00000000 	.word	0x00000000
 80130fc:	08012e7f 	.word	0x08012e7f
 8013100:	08013c3e 	.word	0x08013c3e

08013104 <_printf_common>:
 8013104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013108:	4616      	mov	r6, r2
 801310a:	4699      	mov	r9, r3
 801310c:	688a      	ldr	r2, [r1, #8]
 801310e:	690b      	ldr	r3, [r1, #16]
 8013110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013114:	4293      	cmp	r3, r2
 8013116:	bfb8      	it	lt
 8013118:	4613      	movlt	r3, r2
 801311a:	6033      	str	r3, [r6, #0]
 801311c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013120:	4607      	mov	r7, r0
 8013122:	460c      	mov	r4, r1
 8013124:	b10a      	cbz	r2, 801312a <_printf_common+0x26>
 8013126:	3301      	adds	r3, #1
 8013128:	6033      	str	r3, [r6, #0]
 801312a:	6823      	ldr	r3, [r4, #0]
 801312c:	0699      	lsls	r1, r3, #26
 801312e:	bf42      	ittt	mi
 8013130:	6833      	ldrmi	r3, [r6, #0]
 8013132:	3302      	addmi	r3, #2
 8013134:	6033      	strmi	r3, [r6, #0]
 8013136:	6825      	ldr	r5, [r4, #0]
 8013138:	f015 0506 	ands.w	r5, r5, #6
 801313c:	d106      	bne.n	801314c <_printf_common+0x48>
 801313e:	f104 0a19 	add.w	sl, r4, #25
 8013142:	68e3      	ldr	r3, [r4, #12]
 8013144:	6832      	ldr	r2, [r6, #0]
 8013146:	1a9b      	subs	r3, r3, r2
 8013148:	42ab      	cmp	r3, r5
 801314a:	dc26      	bgt.n	801319a <_printf_common+0x96>
 801314c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013150:	1e13      	subs	r3, r2, #0
 8013152:	6822      	ldr	r2, [r4, #0]
 8013154:	bf18      	it	ne
 8013156:	2301      	movne	r3, #1
 8013158:	0692      	lsls	r2, r2, #26
 801315a:	d42b      	bmi.n	80131b4 <_printf_common+0xb0>
 801315c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013160:	4649      	mov	r1, r9
 8013162:	4638      	mov	r0, r7
 8013164:	47c0      	blx	r8
 8013166:	3001      	adds	r0, #1
 8013168:	d01e      	beq.n	80131a8 <_printf_common+0xa4>
 801316a:	6823      	ldr	r3, [r4, #0]
 801316c:	68e5      	ldr	r5, [r4, #12]
 801316e:	6832      	ldr	r2, [r6, #0]
 8013170:	f003 0306 	and.w	r3, r3, #6
 8013174:	2b04      	cmp	r3, #4
 8013176:	bf08      	it	eq
 8013178:	1aad      	subeq	r5, r5, r2
 801317a:	68a3      	ldr	r3, [r4, #8]
 801317c:	6922      	ldr	r2, [r4, #16]
 801317e:	bf0c      	ite	eq
 8013180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013184:	2500      	movne	r5, #0
 8013186:	4293      	cmp	r3, r2
 8013188:	bfc4      	itt	gt
 801318a:	1a9b      	subgt	r3, r3, r2
 801318c:	18ed      	addgt	r5, r5, r3
 801318e:	2600      	movs	r6, #0
 8013190:	341a      	adds	r4, #26
 8013192:	42b5      	cmp	r5, r6
 8013194:	d11a      	bne.n	80131cc <_printf_common+0xc8>
 8013196:	2000      	movs	r0, #0
 8013198:	e008      	b.n	80131ac <_printf_common+0xa8>
 801319a:	2301      	movs	r3, #1
 801319c:	4652      	mov	r2, sl
 801319e:	4649      	mov	r1, r9
 80131a0:	4638      	mov	r0, r7
 80131a2:	47c0      	blx	r8
 80131a4:	3001      	adds	r0, #1
 80131a6:	d103      	bne.n	80131b0 <_printf_common+0xac>
 80131a8:	f04f 30ff 	mov.w	r0, #4294967295
 80131ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131b0:	3501      	adds	r5, #1
 80131b2:	e7c6      	b.n	8013142 <_printf_common+0x3e>
 80131b4:	18e1      	adds	r1, r4, r3
 80131b6:	1c5a      	adds	r2, r3, #1
 80131b8:	2030      	movs	r0, #48	; 0x30
 80131ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80131be:	4422      	add	r2, r4
 80131c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80131c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80131c8:	3302      	adds	r3, #2
 80131ca:	e7c7      	b.n	801315c <_printf_common+0x58>
 80131cc:	2301      	movs	r3, #1
 80131ce:	4622      	mov	r2, r4
 80131d0:	4649      	mov	r1, r9
 80131d2:	4638      	mov	r0, r7
 80131d4:	47c0      	blx	r8
 80131d6:	3001      	adds	r0, #1
 80131d8:	d0e6      	beq.n	80131a8 <_printf_common+0xa4>
 80131da:	3601      	adds	r6, #1
 80131dc:	e7d9      	b.n	8013192 <_printf_common+0x8e>
	...

080131e0 <_printf_i>:
 80131e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131e4:	460c      	mov	r4, r1
 80131e6:	4691      	mov	r9, r2
 80131e8:	7e27      	ldrb	r7, [r4, #24]
 80131ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80131ec:	2f78      	cmp	r7, #120	; 0x78
 80131ee:	4680      	mov	r8, r0
 80131f0:	469a      	mov	sl, r3
 80131f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131f6:	d807      	bhi.n	8013208 <_printf_i+0x28>
 80131f8:	2f62      	cmp	r7, #98	; 0x62
 80131fa:	d80a      	bhi.n	8013212 <_printf_i+0x32>
 80131fc:	2f00      	cmp	r7, #0
 80131fe:	f000 80d8 	beq.w	80133b2 <_printf_i+0x1d2>
 8013202:	2f58      	cmp	r7, #88	; 0x58
 8013204:	f000 80a3 	beq.w	801334e <_printf_i+0x16e>
 8013208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801320c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013210:	e03a      	b.n	8013288 <_printf_i+0xa8>
 8013212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013216:	2b15      	cmp	r3, #21
 8013218:	d8f6      	bhi.n	8013208 <_printf_i+0x28>
 801321a:	a001      	add	r0, pc, #4	; (adr r0, 8013220 <_printf_i+0x40>)
 801321c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013220:	08013279 	.word	0x08013279
 8013224:	0801328d 	.word	0x0801328d
 8013228:	08013209 	.word	0x08013209
 801322c:	08013209 	.word	0x08013209
 8013230:	08013209 	.word	0x08013209
 8013234:	08013209 	.word	0x08013209
 8013238:	0801328d 	.word	0x0801328d
 801323c:	08013209 	.word	0x08013209
 8013240:	08013209 	.word	0x08013209
 8013244:	08013209 	.word	0x08013209
 8013248:	08013209 	.word	0x08013209
 801324c:	08013399 	.word	0x08013399
 8013250:	080132bd 	.word	0x080132bd
 8013254:	0801337b 	.word	0x0801337b
 8013258:	08013209 	.word	0x08013209
 801325c:	08013209 	.word	0x08013209
 8013260:	080133bb 	.word	0x080133bb
 8013264:	08013209 	.word	0x08013209
 8013268:	080132bd 	.word	0x080132bd
 801326c:	08013209 	.word	0x08013209
 8013270:	08013209 	.word	0x08013209
 8013274:	08013383 	.word	0x08013383
 8013278:	680b      	ldr	r3, [r1, #0]
 801327a:	1d1a      	adds	r2, r3, #4
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	600a      	str	r2, [r1, #0]
 8013280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013288:	2301      	movs	r3, #1
 801328a:	e0a3      	b.n	80133d4 <_printf_i+0x1f4>
 801328c:	6825      	ldr	r5, [r4, #0]
 801328e:	6808      	ldr	r0, [r1, #0]
 8013290:	062e      	lsls	r6, r5, #24
 8013292:	f100 0304 	add.w	r3, r0, #4
 8013296:	d50a      	bpl.n	80132ae <_printf_i+0xce>
 8013298:	6805      	ldr	r5, [r0, #0]
 801329a:	600b      	str	r3, [r1, #0]
 801329c:	2d00      	cmp	r5, #0
 801329e:	da03      	bge.n	80132a8 <_printf_i+0xc8>
 80132a0:	232d      	movs	r3, #45	; 0x2d
 80132a2:	426d      	negs	r5, r5
 80132a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132a8:	485e      	ldr	r0, [pc, #376]	; (8013424 <_printf_i+0x244>)
 80132aa:	230a      	movs	r3, #10
 80132ac:	e019      	b.n	80132e2 <_printf_i+0x102>
 80132ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80132b2:	6805      	ldr	r5, [r0, #0]
 80132b4:	600b      	str	r3, [r1, #0]
 80132b6:	bf18      	it	ne
 80132b8:	b22d      	sxthne	r5, r5
 80132ba:	e7ef      	b.n	801329c <_printf_i+0xbc>
 80132bc:	680b      	ldr	r3, [r1, #0]
 80132be:	6825      	ldr	r5, [r4, #0]
 80132c0:	1d18      	adds	r0, r3, #4
 80132c2:	6008      	str	r0, [r1, #0]
 80132c4:	0628      	lsls	r0, r5, #24
 80132c6:	d501      	bpl.n	80132cc <_printf_i+0xec>
 80132c8:	681d      	ldr	r5, [r3, #0]
 80132ca:	e002      	b.n	80132d2 <_printf_i+0xf2>
 80132cc:	0669      	lsls	r1, r5, #25
 80132ce:	d5fb      	bpl.n	80132c8 <_printf_i+0xe8>
 80132d0:	881d      	ldrh	r5, [r3, #0]
 80132d2:	4854      	ldr	r0, [pc, #336]	; (8013424 <_printf_i+0x244>)
 80132d4:	2f6f      	cmp	r7, #111	; 0x6f
 80132d6:	bf0c      	ite	eq
 80132d8:	2308      	moveq	r3, #8
 80132da:	230a      	movne	r3, #10
 80132dc:	2100      	movs	r1, #0
 80132de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80132e2:	6866      	ldr	r6, [r4, #4]
 80132e4:	60a6      	str	r6, [r4, #8]
 80132e6:	2e00      	cmp	r6, #0
 80132e8:	bfa2      	ittt	ge
 80132ea:	6821      	ldrge	r1, [r4, #0]
 80132ec:	f021 0104 	bicge.w	r1, r1, #4
 80132f0:	6021      	strge	r1, [r4, #0]
 80132f2:	b90d      	cbnz	r5, 80132f8 <_printf_i+0x118>
 80132f4:	2e00      	cmp	r6, #0
 80132f6:	d04d      	beq.n	8013394 <_printf_i+0x1b4>
 80132f8:	4616      	mov	r6, r2
 80132fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80132fe:	fb03 5711 	mls	r7, r3, r1, r5
 8013302:	5dc7      	ldrb	r7, [r0, r7]
 8013304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013308:	462f      	mov	r7, r5
 801330a:	42bb      	cmp	r3, r7
 801330c:	460d      	mov	r5, r1
 801330e:	d9f4      	bls.n	80132fa <_printf_i+0x11a>
 8013310:	2b08      	cmp	r3, #8
 8013312:	d10b      	bne.n	801332c <_printf_i+0x14c>
 8013314:	6823      	ldr	r3, [r4, #0]
 8013316:	07df      	lsls	r7, r3, #31
 8013318:	d508      	bpl.n	801332c <_printf_i+0x14c>
 801331a:	6923      	ldr	r3, [r4, #16]
 801331c:	6861      	ldr	r1, [r4, #4]
 801331e:	4299      	cmp	r1, r3
 8013320:	bfde      	ittt	le
 8013322:	2330      	movle	r3, #48	; 0x30
 8013324:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013328:	f106 36ff 	addle.w	r6, r6, #4294967295
 801332c:	1b92      	subs	r2, r2, r6
 801332e:	6122      	str	r2, [r4, #16]
 8013330:	f8cd a000 	str.w	sl, [sp]
 8013334:	464b      	mov	r3, r9
 8013336:	aa03      	add	r2, sp, #12
 8013338:	4621      	mov	r1, r4
 801333a:	4640      	mov	r0, r8
 801333c:	f7ff fee2 	bl	8013104 <_printf_common>
 8013340:	3001      	adds	r0, #1
 8013342:	d14c      	bne.n	80133de <_printf_i+0x1fe>
 8013344:	f04f 30ff 	mov.w	r0, #4294967295
 8013348:	b004      	add	sp, #16
 801334a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801334e:	4835      	ldr	r0, [pc, #212]	; (8013424 <_printf_i+0x244>)
 8013350:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013354:	6823      	ldr	r3, [r4, #0]
 8013356:	680e      	ldr	r6, [r1, #0]
 8013358:	061f      	lsls	r7, r3, #24
 801335a:	f856 5b04 	ldr.w	r5, [r6], #4
 801335e:	600e      	str	r6, [r1, #0]
 8013360:	d514      	bpl.n	801338c <_printf_i+0x1ac>
 8013362:	07d9      	lsls	r1, r3, #31
 8013364:	bf44      	itt	mi
 8013366:	f043 0320 	orrmi.w	r3, r3, #32
 801336a:	6023      	strmi	r3, [r4, #0]
 801336c:	b91d      	cbnz	r5, 8013376 <_printf_i+0x196>
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	f023 0320 	bic.w	r3, r3, #32
 8013374:	6023      	str	r3, [r4, #0]
 8013376:	2310      	movs	r3, #16
 8013378:	e7b0      	b.n	80132dc <_printf_i+0xfc>
 801337a:	6823      	ldr	r3, [r4, #0]
 801337c:	f043 0320 	orr.w	r3, r3, #32
 8013380:	6023      	str	r3, [r4, #0]
 8013382:	2378      	movs	r3, #120	; 0x78
 8013384:	4828      	ldr	r0, [pc, #160]	; (8013428 <_printf_i+0x248>)
 8013386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801338a:	e7e3      	b.n	8013354 <_printf_i+0x174>
 801338c:	065e      	lsls	r6, r3, #25
 801338e:	bf48      	it	mi
 8013390:	b2ad      	uxthmi	r5, r5
 8013392:	e7e6      	b.n	8013362 <_printf_i+0x182>
 8013394:	4616      	mov	r6, r2
 8013396:	e7bb      	b.n	8013310 <_printf_i+0x130>
 8013398:	680b      	ldr	r3, [r1, #0]
 801339a:	6826      	ldr	r6, [r4, #0]
 801339c:	6960      	ldr	r0, [r4, #20]
 801339e:	1d1d      	adds	r5, r3, #4
 80133a0:	600d      	str	r5, [r1, #0]
 80133a2:	0635      	lsls	r5, r6, #24
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	d501      	bpl.n	80133ac <_printf_i+0x1cc>
 80133a8:	6018      	str	r0, [r3, #0]
 80133aa:	e002      	b.n	80133b2 <_printf_i+0x1d2>
 80133ac:	0671      	lsls	r1, r6, #25
 80133ae:	d5fb      	bpl.n	80133a8 <_printf_i+0x1c8>
 80133b0:	8018      	strh	r0, [r3, #0]
 80133b2:	2300      	movs	r3, #0
 80133b4:	6123      	str	r3, [r4, #16]
 80133b6:	4616      	mov	r6, r2
 80133b8:	e7ba      	b.n	8013330 <_printf_i+0x150>
 80133ba:	680b      	ldr	r3, [r1, #0]
 80133bc:	1d1a      	adds	r2, r3, #4
 80133be:	600a      	str	r2, [r1, #0]
 80133c0:	681e      	ldr	r6, [r3, #0]
 80133c2:	6862      	ldr	r2, [r4, #4]
 80133c4:	2100      	movs	r1, #0
 80133c6:	4630      	mov	r0, r6
 80133c8:	f7ec ffaa 	bl	8000320 <memchr>
 80133cc:	b108      	cbz	r0, 80133d2 <_printf_i+0x1f2>
 80133ce:	1b80      	subs	r0, r0, r6
 80133d0:	6060      	str	r0, [r4, #4]
 80133d2:	6863      	ldr	r3, [r4, #4]
 80133d4:	6123      	str	r3, [r4, #16]
 80133d6:	2300      	movs	r3, #0
 80133d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133dc:	e7a8      	b.n	8013330 <_printf_i+0x150>
 80133de:	6923      	ldr	r3, [r4, #16]
 80133e0:	4632      	mov	r2, r6
 80133e2:	4649      	mov	r1, r9
 80133e4:	4640      	mov	r0, r8
 80133e6:	47d0      	blx	sl
 80133e8:	3001      	adds	r0, #1
 80133ea:	d0ab      	beq.n	8013344 <_printf_i+0x164>
 80133ec:	6823      	ldr	r3, [r4, #0]
 80133ee:	079b      	lsls	r3, r3, #30
 80133f0:	d413      	bmi.n	801341a <_printf_i+0x23a>
 80133f2:	68e0      	ldr	r0, [r4, #12]
 80133f4:	9b03      	ldr	r3, [sp, #12]
 80133f6:	4298      	cmp	r0, r3
 80133f8:	bfb8      	it	lt
 80133fa:	4618      	movlt	r0, r3
 80133fc:	e7a4      	b.n	8013348 <_printf_i+0x168>
 80133fe:	2301      	movs	r3, #1
 8013400:	4632      	mov	r2, r6
 8013402:	4649      	mov	r1, r9
 8013404:	4640      	mov	r0, r8
 8013406:	47d0      	blx	sl
 8013408:	3001      	adds	r0, #1
 801340a:	d09b      	beq.n	8013344 <_printf_i+0x164>
 801340c:	3501      	adds	r5, #1
 801340e:	68e3      	ldr	r3, [r4, #12]
 8013410:	9903      	ldr	r1, [sp, #12]
 8013412:	1a5b      	subs	r3, r3, r1
 8013414:	42ab      	cmp	r3, r5
 8013416:	dcf2      	bgt.n	80133fe <_printf_i+0x21e>
 8013418:	e7eb      	b.n	80133f2 <_printf_i+0x212>
 801341a:	2500      	movs	r5, #0
 801341c:	f104 0619 	add.w	r6, r4, #25
 8013420:	e7f5      	b.n	801340e <_printf_i+0x22e>
 8013422:	bf00      	nop
 8013424:	08013c49 	.word	0x08013c49
 8013428:	08013c5a 	.word	0x08013c5a

0801342c <_putc_r>:
 801342c:	b570      	push	{r4, r5, r6, lr}
 801342e:	460d      	mov	r5, r1
 8013430:	4614      	mov	r4, r2
 8013432:	4606      	mov	r6, r0
 8013434:	b118      	cbz	r0, 801343e <_putc_r+0x12>
 8013436:	6983      	ldr	r3, [r0, #24]
 8013438:	b90b      	cbnz	r3, 801343e <_putc_r+0x12>
 801343a:	f7ff fc0f 	bl	8012c5c <__sinit>
 801343e:	4b1c      	ldr	r3, [pc, #112]	; (80134b0 <_putc_r+0x84>)
 8013440:	429c      	cmp	r4, r3
 8013442:	d124      	bne.n	801348e <_putc_r+0x62>
 8013444:	6874      	ldr	r4, [r6, #4]
 8013446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013448:	07d8      	lsls	r0, r3, #31
 801344a:	d405      	bmi.n	8013458 <_putc_r+0x2c>
 801344c:	89a3      	ldrh	r3, [r4, #12]
 801344e:	0599      	lsls	r1, r3, #22
 8013450:	d402      	bmi.n	8013458 <_putc_r+0x2c>
 8013452:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013454:	f7ff fca0 	bl	8012d98 <__retarget_lock_acquire_recursive>
 8013458:	68a3      	ldr	r3, [r4, #8]
 801345a:	3b01      	subs	r3, #1
 801345c:	2b00      	cmp	r3, #0
 801345e:	60a3      	str	r3, [r4, #8]
 8013460:	da05      	bge.n	801346e <_putc_r+0x42>
 8013462:	69a2      	ldr	r2, [r4, #24]
 8013464:	4293      	cmp	r3, r2
 8013466:	db1c      	blt.n	80134a2 <_putc_r+0x76>
 8013468:	b2eb      	uxtb	r3, r5
 801346a:	2b0a      	cmp	r3, #10
 801346c:	d019      	beq.n	80134a2 <_putc_r+0x76>
 801346e:	6823      	ldr	r3, [r4, #0]
 8013470:	1c5a      	adds	r2, r3, #1
 8013472:	6022      	str	r2, [r4, #0]
 8013474:	701d      	strb	r5, [r3, #0]
 8013476:	b2ed      	uxtb	r5, r5
 8013478:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801347a:	07da      	lsls	r2, r3, #31
 801347c:	d405      	bmi.n	801348a <_putc_r+0x5e>
 801347e:	89a3      	ldrh	r3, [r4, #12]
 8013480:	059b      	lsls	r3, r3, #22
 8013482:	d402      	bmi.n	801348a <_putc_r+0x5e>
 8013484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013486:	f7ff fc88 	bl	8012d9a <__retarget_lock_release_recursive>
 801348a:	4628      	mov	r0, r5
 801348c:	bd70      	pop	{r4, r5, r6, pc}
 801348e:	4b09      	ldr	r3, [pc, #36]	; (80134b4 <_putc_r+0x88>)
 8013490:	429c      	cmp	r4, r3
 8013492:	d101      	bne.n	8013498 <_putc_r+0x6c>
 8013494:	68b4      	ldr	r4, [r6, #8]
 8013496:	e7d6      	b.n	8013446 <_putc_r+0x1a>
 8013498:	4b07      	ldr	r3, [pc, #28]	; (80134b8 <_putc_r+0x8c>)
 801349a:	429c      	cmp	r4, r3
 801349c:	bf08      	it	eq
 801349e:	68f4      	ldreq	r4, [r6, #12]
 80134a0:	e7d1      	b.n	8013446 <_putc_r+0x1a>
 80134a2:	4629      	mov	r1, r5
 80134a4:	4622      	mov	r2, r4
 80134a6:	4630      	mov	r0, r6
 80134a8:	f000 f85c 	bl	8013564 <__swbuf_r>
 80134ac:	4605      	mov	r5, r0
 80134ae:	e7e3      	b.n	8013478 <_putc_r+0x4c>
 80134b0:	08013bf8 	.word	0x08013bf8
 80134b4:	08013c18 	.word	0x08013c18
 80134b8:	08013bd8 	.word	0x08013bd8

080134bc <_sbrk_r>:
 80134bc:	b538      	push	{r3, r4, r5, lr}
 80134be:	4d06      	ldr	r5, [pc, #24]	; (80134d8 <_sbrk_r+0x1c>)
 80134c0:	2300      	movs	r3, #0
 80134c2:	4604      	mov	r4, r0
 80134c4:	4608      	mov	r0, r1
 80134c6:	602b      	str	r3, [r5, #0]
 80134c8:	f7ef fc2a 	bl	8002d20 <_sbrk>
 80134cc:	1c43      	adds	r3, r0, #1
 80134ce:	d102      	bne.n	80134d6 <_sbrk_r+0x1a>
 80134d0:	682b      	ldr	r3, [r5, #0]
 80134d2:	b103      	cbz	r3, 80134d6 <_sbrk_r+0x1a>
 80134d4:	6023      	str	r3, [r4, #0]
 80134d6:	bd38      	pop	{r3, r4, r5, pc}
 80134d8:	240026c0 	.word	0x240026c0

080134dc <__sread>:
 80134dc:	b510      	push	{r4, lr}
 80134de:	460c      	mov	r4, r1
 80134e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134e4:	f000 fab4 	bl	8013a50 <_read_r>
 80134e8:	2800      	cmp	r0, #0
 80134ea:	bfab      	itete	ge
 80134ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80134ee:	89a3      	ldrhlt	r3, [r4, #12]
 80134f0:	181b      	addge	r3, r3, r0
 80134f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80134f6:	bfac      	ite	ge
 80134f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80134fa:	81a3      	strhlt	r3, [r4, #12]
 80134fc:	bd10      	pop	{r4, pc}

080134fe <__swrite>:
 80134fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013502:	461f      	mov	r7, r3
 8013504:	898b      	ldrh	r3, [r1, #12]
 8013506:	05db      	lsls	r3, r3, #23
 8013508:	4605      	mov	r5, r0
 801350a:	460c      	mov	r4, r1
 801350c:	4616      	mov	r6, r2
 801350e:	d505      	bpl.n	801351c <__swrite+0x1e>
 8013510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013514:	2302      	movs	r3, #2
 8013516:	2200      	movs	r2, #0
 8013518:	f000 f9c8 	bl	80138ac <_lseek_r>
 801351c:	89a3      	ldrh	r3, [r4, #12]
 801351e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013526:	81a3      	strh	r3, [r4, #12]
 8013528:	4632      	mov	r2, r6
 801352a:	463b      	mov	r3, r7
 801352c:	4628      	mov	r0, r5
 801352e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013532:	f000 b869 	b.w	8013608 <_write_r>

08013536 <__sseek>:
 8013536:	b510      	push	{r4, lr}
 8013538:	460c      	mov	r4, r1
 801353a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801353e:	f000 f9b5 	bl	80138ac <_lseek_r>
 8013542:	1c43      	adds	r3, r0, #1
 8013544:	89a3      	ldrh	r3, [r4, #12]
 8013546:	bf15      	itete	ne
 8013548:	6560      	strne	r0, [r4, #84]	; 0x54
 801354a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801354e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013552:	81a3      	strheq	r3, [r4, #12]
 8013554:	bf18      	it	ne
 8013556:	81a3      	strhne	r3, [r4, #12]
 8013558:	bd10      	pop	{r4, pc}

0801355a <__sclose>:
 801355a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801355e:	f000 b8d3 	b.w	8013708 <_close_r>
	...

08013564 <__swbuf_r>:
 8013564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013566:	460e      	mov	r6, r1
 8013568:	4614      	mov	r4, r2
 801356a:	4605      	mov	r5, r0
 801356c:	b118      	cbz	r0, 8013576 <__swbuf_r+0x12>
 801356e:	6983      	ldr	r3, [r0, #24]
 8013570:	b90b      	cbnz	r3, 8013576 <__swbuf_r+0x12>
 8013572:	f7ff fb73 	bl	8012c5c <__sinit>
 8013576:	4b21      	ldr	r3, [pc, #132]	; (80135fc <__swbuf_r+0x98>)
 8013578:	429c      	cmp	r4, r3
 801357a:	d12b      	bne.n	80135d4 <__swbuf_r+0x70>
 801357c:	686c      	ldr	r4, [r5, #4]
 801357e:	69a3      	ldr	r3, [r4, #24]
 8013580:	60a3      	str	r3, [r4, #8]
 8013582:	89a3      	ldrh	r3, [r4, #12]
 8013584:	071a      	lsls	r2, r3, #28
 8013586:	d52f      	bpl.n	80135e8 <__swbuf_r+0x84>
 8013588:	6923      	ldr	r3, [r4, #16]
 801358a:	b36b      	cbz	r3, 80135e8 <__swbuf_r+0x84>
 801358c:	6923      	ldr	r3, [r4, #16]
 801358e:	6820      	ldr	r0, [r4, #0]
 8013590:	1ac0      	subs	r0, r0, r3
 8013592:	6963      	ldr	r3, [r4, #20]
 8013594:	b2f6      	uxtb	r6, r6
 8013596:	4283      	cmp	r3, r0
 8013598:	4637      	mov	r7, r6
 801359a:	dc04      	bgt.n	80135a6 <__swbuf_r+0x42>
 801359c:	4621      	mov	r1, r4
 801359e:	4628      	mov	r0, r5
 80135a0:	f000 f948 	bl	8013834 <_fflush_r>
 80135a4:	bb30      	cbnz	r0, 80135f4 <__swbuf_r+0x90>
 80135a6:	68a3      	ldr	r3, [r4, #8]
 80135a8:	3b01      	subs	r3, #1
 80135aa:	60a3      	str	r3, [r4, #8]
 80135ac:	6823      	ldr	r3, [r4, #0]
 80135ae:	1c5a      	adds	r2, r3, #1
 80135b0:	6022      	str	r2, [r4, #0]
 80135b2:	701e      	strb	r6, [r3, #0]
 80135b4:	6963      	ldr	r3, [r4, #20]
 80135b6:	3001      	adds	r0, #1
 80135b8:	4283      	cmp	r3, r0
 80135ba:	d004      	beq.n	80135c6 <__swbuf_r+0x62>
 80135bc:	89a3      	ldrh	r3, [r4, #12]
 80135be:	07db      	lsls	r3, r3, #31
 80135c0:	d506      	bpl.n	80135d0 <__swbuf_r+0x6c>
 80135c2:	2e0a      	cmp	r6, #10
 80135c4:	d104      	bne.n	80135d0 <__swbuf_r+0x6c>
 80135c6:	4621      	mov	r1, r4
 80135c8:	4628      	mov	r0, r5
 80135ca:	f000 f933 	bl	8013834 <_fflush_r>
 80135ce:	b988      	cbnz	r0, 80135f4 <__swbuf_r+0x90>
 80135d0:	4638      	mov	r0, r7
 80135d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135d4:	4b0a      	ldr	r3, [pc, #40]	; (8013600 <__swbuf_r+0x9c>)
 80135d6:	429c      	cmp	r4, r3
 80135d8:	d101      	bne.n	80135de <__swbuf_r+0x7a>
 80135da:	68ac      	ldr	r4, [r5, #8]
 80135dc:	e7cf      	b.n	801357e <__swbuf_r+0x1a>
 80135de:	4b09      	ldr	r3, [pc, #36]	; (8013604 <__swbuf_r+0xa0>)
 80135e0:	429c      	cmp	r4, r3
 80135e2:	bf08      	it	eq
 80135e4:	68ec      	ldreq	r4, [r5, #12]
 80135e6:	e7ca      	b.n	801357e <__swbuf_r+0x1a>
 80135e8:	4621      	mov	r1, r4
 80135ea:	4628      	mov	r0, r5
 80135ec:	f000 f81e 	bl	801362c <__swsetup_r>
 80135f0:	2800      	cmp	r0, #0
 80135f2:	d0cb      	beq.n	801358c <__swbuf_r+0x28>
 80135f4:	f04f 37ff 	mov.w	r7, #4294967295
 80135f8:	e7ea      	b.n	80135d0 <__swbuf_r+0x6c>
 80135fa:	bf00      	nop
 80135fc:	08013bf8 	.word	0x08013bf8
 8013600:	08013c18 	.word	0x08013c18
 8013604:	08013bd8 	.word	0x08013bd8

08013608 <_write_r>:
 8013608:	b538      	push	{r3, r4, r5, lr}
 801360a:	4d07      	ldr	r5, [pc, #28]	; (8013628 <_write_r+0x20>)
 801360c:	4604      	mov	r4, r0
 801360e:	4608      	mov	r0, r1
 8013610:	4611      	mov	r1, r2
 8013612:	2200      	movs	r2, #0
 8013614:	602a      	str	r2, [r5, #0]
 8013616:	461a      	mov	r2, r3
 8013618:	f7ef fb31 	bl	8002c7e <_write>
 801361c:	1c43      	adds	r3, r0, #1
 801361e:	d102      	bne.n	8013626 <_write_r+0x1e>
 8013620:	682b      	ldr	r3, [r5, #0]
 8013622:	b103      	cbz	r3, 8013626 <_write_r+0x1e>
 8013624:	6023      	str	r3, [r4, #0]
 8013626:	bd38      	pop	{r3, r4, r5, pc}
 8013628:	240026c0 	.word	0x240026c0

0801362c <__swsetup_r>:
 801362c:	4b32      	ldr	r3, [pc, #200]	; (80136f8 <__swsetup_r+0xcc>)
 801362e:	b570      	push	{r4, r5, r6, lr}
 8013630:	681d      	ldr	r5, [r3, #0]
 8013632:	4606      	mov	r6, r0
 8013634:	460c      	mov	r4, r1
 8013636:	b125      	cbz	r5, 8013642 <__swsetup_r+0x16>
 8013638:	69ab      	ldr	r3, [r5, #24]
 801363a:	b913      	cbnz	r3, 8013642 <__swsetup_r+0x16>
 801363c:	4628      	mov	r0, r5
 801363e:	f7ff fb0d 	bl	8012c5c <__sinit>
 8013642:	4b2e      	ldr	r3, [pc, #184]	; (80136fc <__swsetup_r+0xd0>)
 8013644:	429c      	cmp	r4, r3
 8013646:	d10f      	bne.n	8013668 <__swsetup_r+0x3c>
 8013648:	686c      	ldr	r4, [r5, #4]
 801364a:	89a3      	ldrh	r3, [r4, #12]
 801364c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013650:	0719      	lsls	r1, r3, #28
 8013652:	d42c      	bmi.n	80136ae <__swsetup_r+0x82>
 8013654:	06dd      	lsls	r5, r3, #27
 8013656:	d411      	bmi.n	801367c <__swsetup_r+0x50>
 8013658:	2309      	movs	r3, #9
 801365a:	6033      	str	r3, [r6, #0]
 801365c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013660:	81a3      	strh	r3, [r4, #12]
 8013662:	f04f 30ff 	mov.w	r0, #4294967295
 8013666:	e03e      	b.n	80136e6 <__swsetup_r+0xba>
 8013668:	4b25      	ldr	r3, [pc, #148]	; (8013700 <__swsetup_r+0xd4>)
 801366a:	429c      	cmp	r4, r3
 801366c:	d101      	bne.n	8013672 <__swsetup_r+0x46>
 801366e:	68ac      	ldr	r4, [r5, #8]
 8013670:	e7eb      	b.n	801364a <__swsetup_r+0x1e>
 8013672:	4b24      	ldr	r3, [pc, #144]	; (8013704 <__swsetup_r+0xd8>)
 8013674:	429c      	cmp	r4, r3
 8013676:	bf08      	it	eq
 8013678:	68ec      	ldreq	r4, [r5, #12]
 801367a:	e7e6      	b.n	801364a <__swsetup_r+0x1e>
 801367c:	0758      	lsls	r0, r3, #29
 801367e:	d512      	bpl.n	80136a6 <__swsetup_r+0x7a>
 8013680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013682:	b141      	cbz	r1, 8013696 <__swsetup_r+0x6a>
 8013684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013688:	4299      	cmp	r1, r3
 801368a:	d002      	beq.n	8013692 <__swsetup_r+0x66>
 801368c:	4630      	mov	r0, r6
 801368e:	f000 f98f 	bl	80139b0 <_free_r>
 8013692:	2300      	movs	r3, #0
 8013694:	6363      	str	r3, [r4, #52]	; 0x34
 8013696:	89a3      	ldrh	r3, [r4, #12]
 8013698:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801369c:	81a3      	strh	r3, [r4, #12]
 801369e:	2300      	movs	r3, #0
 80136a0:	6063      	str	r3, [r4, #4]
 80136a2:	6923      	ldr	r3, [r4, #16]
 80136a4:	6023      	str	r3, [r4, #0]
 80136a6:	89a3      	ldrh	r3, [r4, #12]
 80136a8:	f043 0308 	orr.w	r3, r3, #8
 80136ac:	81a3      	strh	r3, [r4, #12]
 80136ae:	6923      	ldr	r3, [r4, #16]
 80136b0:	b94b      	cbnz	r3, 80136c6 <__swsetup_r+0x9a>
 80136b2:	89a3      	ldrh	r3, [r4, #12]
 80136b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80136b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80136bc:	d003      	beq.n	80136c6 <__swsetup_r+0x9a>
 80136be:	4621      	mov	r1, r4
 80136c0:	4630      	mov	r0, r6
 80136c2:	f000 f929 	bl	8013918 <__smakebuf_r>
 80136c6:	89a0      	ldrh	r0, [r4, #12]
 80136c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80136cc:	f010 0301 	ands.w	r3, r0, #1
 80136d0:	d00a      	beq.n	80136e8 <__swsetup_r+0xbc>
 80136d2:	2300      	movs	r3, #0
 80136d4:	60a3      	str	r3, [r4, #8]
 80136d6:	6963      	ldr	r3, [r4, #20]
 80136d8:	425b      	negs	r3, r3
 80136da:	61a3      	str	r3, [r4, #24]
 80136dc:	6923      	ldr	r3, [r4, #16]
 80136de:	b943      	cbnz	r3, 80136f2 <__swsetup_r+0xc6>
 80136e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80136e4:	d1ba      	bne.n	801365c <__swsetup_r+0x30>
 80136e6:	bd70      	pop	{r4, r5, r6, pc}
 80136e8:	0781      	lsls	r1, r0, #30
 80136ea:	bf58      	it	pl
 80136ec:	6963      	ldrpl	r3, [r4, #20]
 80136ee:	60a3      	str	r3, [r4, #8]
 80136f0:	e7f4      	b.n	80136dc <__swsetup_r+0xb0>
 80136f2:	2000      	movs	r0, #0
 80136f4:	e7f7      	b.n	80136e6 <__swsetup_r+0xba>
 80136f6:	bf00      	nop
 80136f8:	2400018c 	.word	0x2400018c
 80136fc:	08013bf8 	.word	0x08013bf8
 8013700:	08013c18 	.word	0x08013c18
 8013704:	08013bd8 	.word	0x08013bd8

08013708 <_close_r>:
 8013708:	b538      	push	{r3, r4, r5, lr}
 801370a:	4d06      	ldr	r5, [pc, #24]	; (8013724 <_close_r+0x1c>)
 801370c:	2300      	movs	r3, #0
 801370e:	4604      	mov	r4, r0
 8013710:	4608      	mov	r0, r1
 8013712:	602b      	str	r3, [r5, #0]
 8013714:	f7ef facf 	bl	8002cb6 <_close>
 8013718:	1c43      	adds	r3, r0, #1
 801371a:	d102      	bne.n	8013722 <_close_r+0x1a>
 801371c:	682b      	ldr	r3, [r5, #0]
 801371e:	b103      	cbz	r3, 8013722 <_close_r+0x1a>
 8013720:	6023      	str	r3, [r4, #0]
 8013722:	bd38      	pop	{r3, r4, r5, pc}
 8013724:	240026c0 	.word	0x240026c0

08013728 <__sflush_r>:
 8013728:	898a      	ldrh	r2, [r1, #12]
 801372a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801372e:	4605      	mov	r5, r0
 8013730:	0710      	lsls	r0, r2, #28
 8013732:	460c      	mov	r4, r1
 8013734:	d458      	bmi.n	80137e8 <__sflush_r+0xc0>
 8013736:	684b      	ldr	r3, [r1, #4]
 8013738:	2b00      	cmp	r3, #0
 801373a:	dc05      	bgt.n	8013748 <__sflush_r+0x20>
 801373c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801373e:	2b00      	cmp	r3, #0
 8013740:	dc02      	bgt.n	8013748 <__sflush_r+0x20>
 8013742:	2000      	movs	r0, #0
 8013744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801374a:	2e00      	cmp	r6, #0
 801374c:	d0f9      	beq.n	8013742 <__sflush_r+0x1a>
 801374e:	2300      	movs	r3, #0
 8013750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013754:	682f      	ldr	r7, [r5, #0]
 8013756:	602b      	str	r3, [r5, #0]
 8013758:	d032      	beq.n	80137c0 <__sflush_r+0x98>
 801375a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801375c:	89a3      	ldrh	r3, [r4, #12]
 801375e:	075a      	lsls	r2, r3, #29
 8013760:	d505      	bpl.n	801376e <__sflush_r+0x46>
 8013762:	6863      	ldr	r3, [r4, #4]
 8013764:	1ac0      	subs	r0, r0, r3
 8013766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013768:	b10b      	cbz	r3, 801376e <__sflush_r+0x46>
 801376a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801376c:	1ac0      	subs	r0, r0, r3
 801376e:	2300      	movs	r3, #0
 8013770:	4602      	mov	r2, r0
 8013772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013774:	6a21      	ldr	r1, [r4, #32]
 8013776:	4628      	mov	r0, r5
 8013778:	47b0      	blx	r6
 801377a:	1c43      	adds	r3, r0, #1
 801377c:	89a3      	ldrh	r3, [r4, #12]
 801377e:	d106      	bne.n	801378e <__sflush_r+0x66>
 8013780:	6829      	ldr	r1, [r5, #0]
 8013782:	291d      	cmp	r1, #29
 8013784:	d82c      	bhi.n	80137e0 <__sflush_r+0xb8>
 8013786:	4a2a      	ldr	r2, [pc, #168]	; (8013830 <__sflush_r+0x108>)
 8013788:	40ca      	lsrs	r2, r1
 801378a:	07d6      	lsls	r6, r2, #31
 801378c:	d528      	bpl.n	80137e0 <__sflush_r+0xb8>
 801378e:	2200      	movs	r2, #0
 8013790:	6062      	str	r2, [r4, #4]
 8013792:	04d9      	lsls	r1, r3, #19
 8013794:	6922      	ldr	r2, [r4, #16]
 8013796:	6022      	str	r2, [r4, #0]
 8013798:	d504      	bpl.n	80137a4 <__sflush_r+0x7c>
 801379a:	1c42      	adds	r2, r0, #1
 801379c:	d101      	bne.n	80137a2 <__sflush_r+0x7a>
 801379e:	682b      	ldr	r3, [r5, #0]
 80137a0:	b903      	cbnz	r3, 80137a4 <__sflush_r+0x7c>
 80137a2:	6560      	str	r0, [r4, #84]	; 0x54
 80137a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80137a6:	602f      	str	r7, [r5, #0]
 80137a8:	2900      	cmp	r1, #0
 80137aa:	d0ca      	beq.n	8013742 <__sflush_r+0x1a>
 80137ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137b0:	4299      	cmp	r1, r3
 80137b2:	d002      	beq.n	80137ba <__sflush_r+0x92>
 80137b4:	4628      	mov	r0, r5
 80137b6:	f000 f8fb 	bl	80139b0 <_free_r>
 80137ba:	2000      	movs	r0, #0
 80137bc:	6360      	str	r0, [r4, #52]	; 0x34
 80137be:	e7c1      	b.n	8013744 <__sflush_r+0x1c>
 80137c0:	6a21      	ldr	r1, [r4, #32]
 80137c2:	2301      	movs	r3, #1
 80137c4:	4628      	mov	r0, r5
 80137c6:	47b0      	blx	r6
 80137c8:	1c41      	adds	r1, r0, #1
 80137ca:	d1c7      	bne.n	801375c <__sflush_r+0x34>
 80137cc:	682b      	ldr	r3, [r5, #0]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d0c4      	beq.n	801375c <__sflush_r+0x34>
 80137d2:	2b1d      	cmp	r3, #29
 80137d4:	d001      	beq.n	80137da <__sflush_r+0xb2>
 80137d6:	2b16      	cmp	r3, #22
 80137d8:	d101      	bne.n	80137de <__sflush_r+0xb6>
 80137da:	602f      	str	r7, [r5, #0]
 80137dc:	e7b1      	b.n	8013742 <__sflush_r+0x1a>
 80137de:	89a3      	ldrh	r3, [r4, #12]
 80137e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137e4:	81a3      	strh	r3, [r4, #12]
 80137e6:	e7ad      	b.n	8013744 <__sflush_r+0x1c>
 80137e8:	690f      	ldr	r7, [r1, #16]
 80137ea:	2f00      	cmp	r7, #0
 80137ec:	d0a9      	beq.n	8013742 <__sflush_r+0x1a>
 80137ee:	0793      	lsls	r3, r2, #30
 80137f0:	680e      	ldr	r6, [r1, #0]
 80137f2:	bf08      	it	eq
 80137f4:	694b      	ldreq	r3, [r1, #20]
 80137f6:	600f      	str	r7, [r1, #0]
 80137f8:	bf18      	it	ne
 80137fa:	2300      	movne	r3, #0
 80137fc:	eba6 0807 	sub.w	r8, r6, r7
 8013800:	608b      	str	r3, [r1, #8]
 8013802:	f1b8 0f00 	cmp.w	r8, #0
 8013806:	dd9c      	ble.n	8013742 <__sflush_r+0x1a>
 8013808:	6a21      	ldr	r1, [r4, #32]
 801380a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801380c:	4643      	mov	r3, r8
 801380e:	463a      	mov	r2, r7
 8013810:	4628      	mov	r0, r5
 8013812:	47b0      	blx	r6
 8013814:	2800      	cmp	r0, #0
 8013816:	dc06      	bgt.n	8013826 <__sflush_r+0xfe>
 8013818:	89a3      	ldrh	r3, [r4, #12]
 801381a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801381e:	81a3      	strh	r3, [r4, #12]
 8013820:	f04f 30ff 	mov.w	r0, #4294967295
 8013824:	e78e      	b.n	8013744 <__sflush_r+0x1c>
 8013826:	4407      	add	r7, r0
 8013828:	eba8 0800 	sub.w	r8, r8, r0
 801382c:	e7e9      	b.n	8013802 <__sflush_r+0xda>
 801382e:	bf00      	nop
 8013830:	20400001 	.word	0x20400001

08013834 <_fflush_r>:
 8013834:	b538      	push	{r3, r4, r5, lr}
 8013836:	690b      	ldr	r3, [r1, #16]
 8013838:	4605      	mov	r5, r0
 801383a:	460c      	mov	r4, r1
 801383c:	b913      	cbnz	r3, 8013844 <_fflush_r+0x10>
 801383e:	2500      	movs	r5, #0
 8013840:	4628      	mov	r0, r5
 8013842:	bd38      	pop	{r3, r4, r5, pc}
 8013844:	b118      	cbz	r0, 801384e <_fflush_r+0x1a>
 8013846:	6983      	ldr	r3, [r0, #24]
 8013848:	b90b      	cbnz	r3, 801384e <_fflush_r+0x1a>
 801384a:	f7ff fa07 	bl	8012c5c <__sinit>
 801384e:	4b14      	ldr	r3, [pc, #80]	; (80138a0 <_fflush_r+0x6c>)
 8013850:	429c      	cmp	r4, r3
 8013852:	d11b      	bne.n	801388c <_fflush_r+0x58>
 8013854:	686c      	ldr	r4, [r5, #4]
 8013856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d0ef      	beq.n	801383e <_fflush_r+0xa>
 801385e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013860:	07d0      	lsls	r0, r2, #31
 8013862:	d404      	bmi.n	801386e <_fflush_r+0x3a>
 8013864:	0599      	lsls	r1, r3, #22
 8013866:	d402      	bmi.n	801386e <_fflush_r+0x3a>
 8013868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801386a:	f7ff fa95 	bl	8012d98 <__retarget_lock_acquire_recursive>
 801386e:	4628      	mov	r0, r5
 8013870:	4621      	mov	r1, r4
 8013872:	f7ff ff59 	bl	8013728 <__sflush_r>
 8013876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013878:	07da      	lsls	r2, r3, #31
 801387a:	4605      	mov	r5, r0
 801387c:	d4e0      	bmi.n	8013840 <_fflush_r+0xc>
 801387e:	89a3      	ldrh	r3, [r4, #12]
 8013880:	059b      	lsls	r3, r3, #22
 8013882:	d4dd      	bmi.n	8013840 <_fflush_r+0xc>
 8013884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013886:	f7ff fa88 	bl	8012d9a <__retarget_lock_release_recursive>
 801388a:	e7d9      	b.n	8013840 <_fflush_r+0xc>
 801388c:	4b05      	ldr	r3, [pc, #20]	; (80138a4 <_fflush_r+0x70>)
 801388e:	429c      	cmp	r4, r3
 8013890:	d101      	bne.n	8013896 <_fflush_r+0x62>
 8013892:	68ac      	ldr	r4, [r5, #8]
 8013894:	e7df      	b.n	8013856 <_fflush_r+0x22>
 8013896:	4b04      	ldr	r3, [pc, #16]	; (80138a8 <_fflush_r+0x74>)
 8013898:	429c      	cmp	r4, r3
 801389a:	bf08      	it	eq
 801389c:	68ec      	ldreq	r4, [r5, #12]
 801389e:	e7da      	b.n	8013856 <_fflush_r+0x22>
 80138a0:	08013bf8 	.word	0x08013bf8
 80138a4:	08013c18 	.word	0x08013c18
 80138a8:	08013bd8 	.word	0x08013bd8

080138ac <_lseek_r>:
 80138ac:	b538      	push	{r3, r4, r5, lr}
 80138ae:	4d07      	ldr	r5, [pc, #28]	; (80138cc <_lseek_r+0x20>)
 80138b0:	4604      	mov	r4, r0
 80138b2:	4608      	mov	r0, r1
 80138b4:	4611      	mov	r1, r2
 80138b6:	2200      	movs	r2, #0
 80138b8:	602a      	str	r2, [r5, #0]
 80138ba:	461a      	mov	r2, r3
 80138bc:	f7ef fa22 	bl	8002d04 <_lseek>
 80138c0:	1c43      	adds	r3, r0, #1
 80138c2:	d102      	bne.n	80138ca <_lseek_r+0x1e>
 80138c4:	682b      	ldr	r3, [r5, #0]
 80138c6:	b103      	cbz	r3, 80138ca <_lseek_r+0x1e>
 80138c8:	6023      	str	r3, [r4, #0]
 80138ca:	bd38      	pop	{r3, r4, r5, pc}
 80138cc:	240026c0 	.word	0x240026c0

080138d0 <__swhatbuf_r>:
 80138d0:	b570      	push	{r4, r5, r6, lr}
 80138d2:	460e      	mov	r6, r1
 80138d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138d8:	2900      	cmp	r1, #0
 80138da:	b096      	sub	sp, #88	; 0x58
 80138dc:	4614      	mov	r4, r2
 80138de:	461d      	mov	r5, r3
 80138e0:	da07      	bge.n	80138f2 <__swhatbuf_r+0x22>
 80138e2:	2300      	movs	r3, #0
 80138e4:	602b      	str	r3, [r5, #0]
 80138e6:	89b3      	ldrh	r3, [r6, #12]
 80138e8:	061a      	lsls	r2, r3, #24
 80138ea:	d410      	bmi.n	801390e <__swhatbuf_r+0x3e>
 80138ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138f0:	e00e      	b.n	8013910 <__swhatbuf_r+0x40>
 80138f2:	466a      	mov	r2, sp
 80138f4:	f000 f8be 	bl	8013a74 <_fstat_r>
 80138f8:	2800      	cmp	r0, #0
 80138fa:	dbf2      	blt.n	80138e2 <__swhatbuf_r+0x12>
 80138fc:	9a01      	ldr	r2, [sp, #4]
 80138fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013902:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013906:	425a      	negs	r2, r3
 8013908:	415a      	adcs	r2, r3
 801390a:	602a      	str	r2, [r5, #0]
 801390c:	e7ee      	b.n	80138ec <__swhatbuf_r+0x1c>
 801390e:	2340      	movs	r3, #64	; 0x40
 8013910:	2000      	movs	r0, #0
 8013912:	6023      	str	r3, [r4, #0]
 8013914:	b016      	add	sp, #88	; 0x58
 8013916:	bd70      	pop	{r4, r5, r6, pc}

08013918 <__smakebuf_r>:
 8013918:	898b      	ldrh	r3, [r1, #12]
 801391a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801391c:	079d      	lsls	r5, r3, #30
 801391e:	4606      	mov	r6, r0
 8013920:	460c      	mov	r4, r1
 8013922:	d507      	bpl.n	8013934 <__smakebuf_r+0x1c>
 8013924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013928:	6023      	str	r3, [r4, #0]
 801392a:	6123      	str	r3, [r4, #16]
 801392c:	2301      	movs	r3, #1
 801392e:	6163      	str	r3, [r4, #20]
 8013930:	b002      	add	sp, #8
 8013932:	bd70      	pop	{r4, r5, r6, pc}
 8013934:	ab01      	add	r3, sp, #4
 8013936:	466a      	mov	r2, sp
 8013938:	f7ff ffca 	bl	80138d0 <__swhatbuf_r>
 801393c:	9900      	ldr	r1, [sp, #0]
 801393e:	4605      	mov	r5, r0
 8013940:	4630      	mov	r0, r6
 8013942:	f7ff fa2b 	bl	8012d9c <_malloc_r>
 8013946:	b948      	cbnz	r0, 801395c <__smakebuf_r+0x44>
 8013948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801394c:	059a      	lsls	r2, r3, #22
 801394e:	d4ef      	bmi.n	8013930 <__smakebuf_r+0x18>
 8013950:	f023 0303 	bic.w	r3, r3, #3
 8013954:	f043 0302 	orr.w	r3, r3, #2
 8013958:	81a3      	strh	r3, [r4, #12]
 801395a:	e7e3      	b.n	8013924 <__smakebuf_r+0xc>
 801395c:	4b0d      	ldr	r3, [pc, #52]	; (8013994 <__smakebuf_r+0x7c>)
 801395e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013960:	89a3      	ldrh	r3, [r4, #12]
 8013962:	6020      	str	r0, [r4, #0]
 8013964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013968:	81a3      	strh	r3, [r4, #12]
 801396a:	9b00      	ldr	r3, [sp, #0]
 801396c:	6163      	str	r3, [r4, #20]
 801396e:	9b01      	ldr	r3, [sp, #4]
 8013970:	6120      	str	r0, [r4, #16]
 8013972:	b15b      	cbz	r3, 801398c <__smakebuf_r+0x74>
 8013974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013978:	4630      	mov	r0, r6
 801397a:	f000 f88d 	bl	8013a98 <_isatty_r>
 801397e:	b128      	cbz	r0, 801398c <__smakebuf_r+0x74>
 8013980:	89a3      	ldrh	r3, [r4, #12]
 8013982:	f023 0303 	bic.w	r3, r3, #3
 8013986:	f043 0301 	orr.w	r3, r3, #1
 801398a:	81a3      	strh	r3, [r4, #12]
 801398c:	89a0      	ldrh	r0, [r4, #12]
 801398e:	4305      	orrs	r5, r0
 8013990:	81a5      	strh	r5, [r4, #12]
 8013992:	e7cd      	b.n	8013930 <__smakebuf_r+0x18>
 8013994:	08012bf5 	.word	0x08012bf5

08013998 <__malloc_lock>:
 8013998:	4801      	ldr	r0, [pc, #4]	; (80139a0 <__malloc_lock+0x8>)
 801399a:	f7ff b9fd 	b.w	8012d98 <__retarget_lock_acquire_recursive>
 801399e:	bf00      	nop
 80139a0:	240026b8 	.word	0x240026b8

080139a4 <__malloc_unlock>:
 80139a4:	4801      	ldr	r0, [pc, #4]	; (80139ac <__malloc_unlock+0x8>)
 80139a6:	f7ff b9f8 	b.w	8012d9a <__retarget_lock_release_recursive>
 80139aa:	bf00      	nop
 80139ac:	240026b8 	.word	0x240026b8

080139b0 <_free_r>:
 80139b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80139b2:	2900      	cmp	r1, #0
 80139b4:	d048      	beq.n	8013a48 <_free_r+0x98>
 80139b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139ba:	9001      	str	r0, [sp, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f1a1 0404 	sub.w	r4, r1, #4
 80139c2:	bfb8      	it	lt
 80139c4:	18e4      	addlt	r4, r4, r3
 80139c6:	f7ff ffe7 	bl	8013998 <__malloc_lock>
 80139ca:	4a20      	ldr	r2, [pc, #128]	; (8013a4c <_free_r+0x9c>)
 80139cc:	9801      	ldr	r0, [sp, #4]
 80139ce:	6813      	ldr	r3, [r2, #0]
 80139d0:	4615      	mov	r5, r2
 80139d2:	b933      	cbnz	r3, 80139e2 <_free_r+0x32>
 80139d4:	6063      	str	r3, [r4, #4]
 80139d6:	6014      	str	r4, [r2, #0]
 80139d8:	b003      	add	sp, #12
 80139da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139de:	f7ff bfe1 	b.w	80139a4 <__malloc_unlock>
 80139e2:	42a3      	cmp	r3, r4
 80139e4:	d90b      	bls.n	80139fe <_free_r+0x4e>
 80139e6:	6821      	ldr	r1, [r4, #0]
 80139e8:	1862      	adds	r2, r4, r1
 80139ea:	4293      	cmp	r3, r2
 80139ec:	bf04      	itt	eq
 80139ee:	681a      	ldreq	r2, [r3, #0]
 80139f0:	685b      	ldreq	r3, [r3, #4]
 80139f2:	6063      	str	r3, [r4, #4]
 80139f4:	bf04      	itt	eq
 80139f6:	1852      	addeq	r2, r2, r1
 80139f8:	6022      	streq	r2, [r4, #0]
 80139fa:	602c      	str	r4, [r5, #0]
 80139fc:	e7ec      	b.n	80139d8 <_free_r+0x28>
 80139fe:	461a      	mov	r2, r3
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	b10b      	cbz	r3, 8013a08 <_free_r+0x58>
 8013a04:	42a3      	cmp	r3, r4
 8013a06:	d9fa      	bls.n	80139fe <_free_r+0x4e>
 8013a08:	6811      	ldr	r1, [r2, #0]
 8013a0a:	1855      	adds	r5, r2, r1
 8013a0c:	42a5      	cmp	r5, r4
 8013a0e:	d10b      	bne.n	8013a28 <_free_r+0x78>
 8013a10:	6824      	ldr	r4, [r4, #0]
 8013a12:	4421      	add	r1, r4
 8013a14:	1854      	adds	r4, r2, r1
 8013a16:	42a3      	cmp	r3, r4
 8013a18:	6011      	str	r1, [r2, #0]
 8013a1a:	d1dd      	bne.n	80139d8 <_free_r+0x28>
 8013a1c:	681c      	ldr	r4, [r3, #0]
 8013a1e:	685b      	ldr	r3, [r3, #4]
 8013a20:	6053      	str	r3, [r2, #4]
 8013a22:	4421      	add	r1, r4
 8013a24:	6011      	str	r1, [r2, #0]
 8013a26:	e7d7      	b.n	80139d8 <_free_r+0x28>
 8013a28:	d902      	bls.n	8013a30 <_free_r+0x80>
 8013a2a:	230c      	movs	r3, #12
 8013a2c:	6003      	str	r3, [r0, #0]
 8013a2e:	e7d3      	b.n	80139d8 <_free_r+0x28>
 8013a30:	6825      	ldr	r5, [r4, #0]
 8013a32:	1961      	adds	r1, r4, r5
 8013a34:	428b      	cmp	r3, r1
 8013a36:	bf04      	itt	eq
 8013a38:	6819      	ldreq	r1, [r3, #0]
 8013a3a:	685b      	ldreq	r3, [r3, #4]
 8013a3c:	6063      	str	r3, [r4, #4]
 8013a3e:	bf04      	itt	eq
 8013a40:	1949      	addeq	r1, r1, r5
 8013a42:	6021      	streq	r1, [r4, #0]
 8013a44:	6054      	str	r4, [r2, #4]
 8013a46:	e7c7      	b.n	80139d8 <_free_r+0x28>
 8013a48:	b003      	add	sp, #12
 8013a4a:	bd30      	pop	{r4, r5, pc}
 8013a4c:	24000498 	.word	0x24000498

08013a50 <_read_r>:
 8013a50:	b538      	push	{r3, r4, r5, lr}
 8013a52:	4d07      	ldr	r5, [pc, #28]	; (8013a70 <_read_r+0x20>)
 8013a54:	4604      	mov	r4, r0
 8013a56:	4608      	mov	r0, r1
 8013a58:	4611      	mov	r1, r2
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	602a      	str	r2, [r5, #0]
 8013a5e:	461a      	mov	r2, r3
 8013a60:	f7ef f8f0 	bl	8002c44 <_read>
 8013a64:	1c43      	adds	r3, r0, #1
 8013a66:	d102      	bne.n	8013a6e <_read_r+0x1e>
 8013a68:	682b      	ldr	r3, [r5, #0]
 8013a6a:	b103      	cbz	r3, 8013a6e <_read_r+0x1e>
 8013a6c:	6023      	str	r3, [r4, #0]
 8013a6e:	bd38      	pop	{r3, r4, r5, pc}
 8013a70:	240026c0 	.word	0x240026c0

08013a74 <_fstat_r>:
 8013a74:	b538      	push	{r3, r4, r5, lr}
 8013a76:	4d07      	ldr	r5, [pc, #28]	; (8013a94 <_fstat_r+0x20>)
 8013a78:	2300      	movs	r3, #0
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	4608      	mov	r0, r1
 8013a7e:	4611      	mov	r1, r2
 8013a80:	602b      	str	r3, [r5, #0]
 8013a82:	f7ef f924 	bl	8002cce <_fstat>
 8013a86:	1c43      	adds	r3, r0, #1
 8013a88:	d102      	bne.n	8013a90 <_fstat_r+0x1c>
 8013a8a:	682b      	ldr	r3, [r5, #0]
 8013a8c:	b103      	cbz	r3, 8013a90 <_fstat_r+0x1c>
 8013a8e:	6023      	str	r3, [r4, #0]
 8013a90:	bd38      	pop	{r3, r4, r5, pc}
 8013a92:	bf00      	nop
 8013a94:	240026c0 	.word	0x240026c0

08013a98 <_isatty_r>:
 8013a98:	b538      	push	{r3, r4, r5, lr}
 8013a9a:	4d06      	ldr	r5, [pc, #24]	; (8013ab4 <_isatty_r+0x1c>)
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	4604      	mov	r4, r0
 8013aa0:	4608      	mov	r0, r1
 8013aa2:	602b      	str	r3, [r5, #0]
 8013aa4:	f7ef f923 	bl	8002cee <_isatty>
 8013aa8:	1c43      	adds	r3, r0, #1
 8013aaa:	d102      	bne.n	8013ab2 <_isatty_r+0x1a>
 8013aac:	682b      	ldr	r3, [r5, #0]
 8013aae:	b103      	cbz	r3, 8013ab2 <_isatty_r+0x1a>
 8013ab0:	6023      	str	r3, [r4, #0]
 8013ab2:	bd38      	pop	{r3, r4, r5, pc}
 8013ab4:	240026c0 	.word	0x240026c0

08013ab8 <_init>:
 8013ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aba:	bf00      	nop
 8013abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013abe:	bc08      	pop	{r3}
 8013ac0:	469e      	mov	lr, r3
 8013ac2:	4770      	bx	lr

08013ac4 <_fini>:
 8013ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ac6:	bf00      	nop
 8013ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aca:	bc08      	pop	{r3}
 8013acc:	469e      	mov	lr, r3
 8013ace:	4770      	bx	lr
