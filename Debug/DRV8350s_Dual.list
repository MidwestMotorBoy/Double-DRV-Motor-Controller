
DRV8350s_Dual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142cc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080145a0  080145a0  000245a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08014750  08014750  00024750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08014754  08014754  00024754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00001170  24000000  08014758  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000024c8  24001170  080158c8  00031170  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24003638  080158c8  00033638  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00031170  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002ea0b  00000000  00000000  0003119e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005225  00000000  00000000  0005fba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002500  00000000  00000000  00064dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000022b8  00000000  00000000  000672d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003cee0  00000000  00000000  00069588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002e4b9  00000000  00000000  000a6468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017a38a  00000000  00000000  000d4921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0024ecab  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000a924  00000000  00000000  0024ecfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24001170 	.word	0x24001170
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014584 	.word	0x08014584

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24001174 	.word	0x24001174
 800030c:	08014584 	.word	0x08014584

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <inv_parkclark>:
 *
 * OUTPUTS:
 * Va,Vb,Vc- OUTPUT VOLTAGE mV
 */
void inv_parkclark(int *Va, int *Vb, int *Vc, int theta, int Vq, int Vd )
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
 80003cc:	603b      	str	r3, [r7, #0]
	*Va = (int)(pc_coff * ((cos_lut(theta) * Vd - sin_lut(theta) * Vq)) / 1000) / 1000;
 80003ce:	6838      	ldr	r0, [r7, #0]
 80003d0:	f000 f8a4 	bl	800051c <cos_lut>
 80003d4:	4602      	mov	r2, r0
 80003d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d8:	fb03 f402 	mul.w	r4, r3, r2
 80003dc:	6838      	ldr	r0, [r7, #0]
 80003de:	f000 f885 	bl	80004ec <sin_lut>
 80003e2:	4602      	mov	r2, r0
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	fb02 f303 	mul.w	r3, r2, r3
 80003ea:	1ae3      	subs	r3, r4, r3
 80003ec:	ee07 3a90 	vmov	s15, r3
 80003f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80003f4:	4b3a      	ldr	r3, [pc, #232]	; (80004e0 <inv_parkclark+0x120>)
 80003f6:	edd3 7a00 	vldr	s15, [r3]
 80003fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80003fe:	eddf 6a39 	vldr	s13, [pc, #228]	; 80004e4 <inv_parkclark+0x124>
 8000402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800040a:	ee17 1a90 	vmov	r1, s15
 800040e:	4b36      	ldr	r3, [pc, #216]	; (80004e8 <inv_parkclark+0x128>)
 8000410:	fb83 2301 	smull	r2, r3, r3, r1
 8000414:	119a      	asrs	r2, r3, #6
 8000416:	17cb      	asrs	r3, r1, #31
 8000418:	1ad2      	subs	r2, r2, r3
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	601a      	str	r2, [r3, #0]
	*Vb = (int)(pc_coff * ((cos_lut(theta + 683) * Vd - sin_lut(theta + 683) *Vq)) / 1000) / 1000;
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f203 23ab 	addw	r3, r3, #683	; 0x2ab
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f879 	bl	800051c <cos_lut>
 800042a:	4602      	mov	r2, r0
 800042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800042e:	fb03 f402 	mul.w	r4, r3, r2
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	f203 23ab 	addw	r3, r3, #683	; 0x2ab
 8000438:	4618      	mov	r0, r3
 800043a:	f000 f857 	bl	80004ec <sin_lut>
 800043e:	4602      	mov	r2, r0
 8000440:	6a3b      	ldr	r3, [r7, #32]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	1ae3      	subs	r3, r4, r3
 8000448:	ee07 3a90 	vmov	s15, r3
 800044c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000450:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <inv_parkclark+0x120>)
 8000452:	edd3 7a00 	vldr	s15, [r3]
 8000456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800045a:	eddf 6a22 	vldr	s13, [pc, #136]	; 80004e4 <inv_parkclark+0x124>
 800045e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000466:	ee17 1a90 	vmov	r1, s15
 800046a:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <inv_parkclark+0x128>)
 800046c:	fb83 2301 	smull	r2, r3, r3, r1
 8000470:	119a      	asrs	r2, r3, #6
 8000472:	17cb      	asrs	r3, r1, #31
 8000474:	1ad2      	subs	r2, r2, r3
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	601a      	str	r2, [r3, #0]
	*Vc = (int)(pc_coff * ((cos_lut(theta + 341) * Vd - sin_lut(theta + 341) *Vq)) / 1000) / 1000;
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f203 1355 	addw	r3, r3, #341	; 0x155
 8000480:	4618      	mov	r0, r3
 8000482:	f000 f84b 	bl	800051c <cos_lut>
 8000486:	4602      	mov	r2, r0
 8000488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800048a:	fb03 f402 	mul.w	r4, r3, r2
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	f203 1355 	addw	r3, r3, #341	; 0x155
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f829 	bl	80004ec <sin_lut>
 800049a:	4602      	mov	r2, r0
 800049c:	6a3b      	ldr	r3, [r7, #32]
 800049e:	fb02 f303 	mul.w	r3, r2, r3
 80004a2:	1ae3      	subs	r3, r4, r3
 80004a4:	ee07 3a90 	vmov	s15, r3
 80004a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <inv_parkclark+0x120>)
 80004ae:	edd3 7a00 	vldr	s15, [r3]
 80004b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80004b6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80004e4 <inv_parkclark+0x124>
 80004ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004c2:	ee17 1a90 	vmov	r1, s15
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <inv_parkclark+0x128>)
 80004c8:	fb83 2301 	smull	r2, r3, r3, r1
 80004cc:	119a      	asrs	r2, r3, #6
 80004ce:	17cb      	asrs	r3, r1, #31
 80004d0:	1ad2      	subs	r2, r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	601a      	str	r2, [r3, #0]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd90      	pop	{r4, r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000000 	.word	0x24000000
 80004e4:	447a0000 	.word	0x447a0000
 80004e8:	10624dd3 	.word	0x10624dd3

080004ec <sin_lut>:

int sin_lut(int angle){
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	return(sin_lut_table[angle % 1024]);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	425a      	negs	r2, r3
 80004f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000500:	bf58      	it	pl
 8000502:	4253      	negpl	r3, r2
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <sin_lut+0x2c>)
 8000506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	24000004 	.word	0x24000004

0800051c <cos_lut>:

int cos_lut(int angle){
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	return(sin_lut_table[(angle + 256) % 1024]);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800052a:	425a      	negs	r2, r3
 800052c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000530:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000534:	bf58      	it	pl
 8000536:	4253      	negpl	r3, r2
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <cos_lut+0x30>)
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	24000004 	.word	0x24000004

08000550 <find_min_voltage>:

int find_min_voltage(int32_t Va, int32_t Vb, int32_t Vc){
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
	int32_t ret_val = Va;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	617b      	str	r3, [r7, #20]
	if(ret_val > Vb){
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	429a      	cmp	r2, r3
 8000566:	dd01      	ble.n	800056c <find_min_voltage+0x1c>
		ret_val = Vb;
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	617b      	str	r3, [r7, #20]
	}
	if(ret_val > Vc){
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	dd01      	ble.n	8000578 <find_min_voltage+0x28>
		ret_val = Vc;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	617b      	str	r3, [r7, #20]
	}
	return(ret_val);
 8000578:	697b      	ldr	r3, [r7, #20]
}
 800057a:	4618      	mov	r0, r3
 800057c:	371c      	adds	r7, #28
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <write_to_reg>:
 *  Created on: Oct 1, 2021
 *      Author: LoganRosenmayer
 */
#include "drv8350s.h"

void write_to_reg(SPI_HandleTypeDef* spi_handler, uint16_t reg, uint16_t data){
 8000586:	b580      	push	{r7, lr}
 8000588:	b084      	sub	sp, #16
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	460b      	mov	r3, r1
 8000590:	807b      	strh	r3, [r7, #2]
 8000592:	4613      	mov	r3, r2
 8000594:	803b      	strh	r3, [r7, #0]
	uint16_t message = (reg&0x000f)<<11;
 8000596:	887b      	ldrh	r3, [r7, #2]
 8000598:	02db      	lsls	r3, r3, #11
 800059a:	b29b      	uxth	r3, r3
 800059c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	81fb      	strh	r3, [r7, #14]
	message|= data&0x07ff;
 80005a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80005a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	89fb      	ldrh	r3, [r7, #14]
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_Transmit(spi_handler, (uint8_t*) &message, 1, 100);
 80005ba:	f107 010e 	add.w	r1, r7, #14
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	2201      	movs	r2, #1
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f00c fbe2 	bl	800cd8c <HAL_SPI_Transmit>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <read_reg>:

uint16_t read_reg(SPI_HandleTypeDef* spi_handler, uint16_t reg){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]
	uint16_t reg_val;
	uint16_t message = ((reg&0x000f)<<11)+0x8000;
 80005dc:	887b      	ldrh	r3, [r7, #2]
 80005de:	02db      	lsls	r3, r3, #11
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	81bb      	strh	r3, [r7, #12]
	HAL_SPI_TransmitReceive(spi_handler, &message, (uint8_t*) &reg_val, 1, 100);
 80005f0:	f107 020e 	add.w	r2, r7, #14
 80005f4:	f107 010c 	add.w	r1, r7, #12
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f00c fdb6 	bl	800d170 <HAL_SPI_TransmitReceive>
	return(reg_val);
 8000604:	89fb      	ldrh	r3, [r7, #14]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <read_fault_reg>:

uint16_t read_fault_reg(SPI_HandleTypeDef* spi_handler){
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,FAULT_STATUS) & 0xfff);
 8000616:	2100      	movs	r1, #0
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ffd9 	bl	80005d0 <read_reg>
 800061e:	4603      	mov	r3, r0
 8000620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000624:	b29b      	uxth	r3, r3
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <read_vgs_reg>:

uint16_t read_vgs_reg(SPI_HandleTypeDef* spi_handler){
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,VGS_STATUS) & 0xfff);
 8000636:	2101      	movs	r1, #1
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ffc9 	bl	80005d0 <read_reg>
 800063e:	4603      	mov	r3, r0
 8000640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000644:	b29b      	uxth	r3, r3
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <set_driver_ctrl_reg>:

void set_driver_ctrl_reg(SPI_HandleTypeDef* spi_handler, uint_fast16_t ocp_act, uint_fast16_t dis_gduv, uint_fast16_t dis_gdf, uint_fast16_t otw_rep,	uint_fast16_t pwm_mode,
		uint_fast16_t pwm1_mode, uint_fast16_t pwm1_dir, uint_fast16_t coast, uint_fast16_t brake){
 800064e:	b580      	push	{r7, lr}
 8000650:	b086      	sub	sp, #24
 8000652:	af00      	add	r7, sp, #0
 8000654:	60f8      	str	r0, [r7, #12]
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	603b      	str	r3, [r7, #0]
	uint16_t data = (ocp_act<<10) | (dis_gduv<<9) | (otw_rep<<8) | (otw_rep<<7) | (pwm_mode<<5) | (pwm1_mode<<4) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	b29b      	uxth	r3, r3
 8000660:	029b      	lsls	r3, r3, #10
 8000662:	b29a      	uxth	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	b29b      	uxth	r3, r3
 8000668:	025b      	lsls	r3, r3, #9
 800066a:	b29b      	uxth	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b29a      	uxth	r2, r3
 8000670:	6a3b      	ldr	r3, [r7, #32]
 8000672:	b29b      	uxth	r3, r3
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	b29b      	uxth	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b29a      	uxth	r2, r3
 800067c:	6a3b      	ldr	r3, [r7, #32]
 800067e:	b29b      	uxth	r3, r3
 8000680:	01db      	lsls	r3, r3, #7
 8000682:	b29b      	uxth	r3, r3
 8000684:	4313      	orrs	r3, r2
 8000686:	b29a      	uxth	r2, r3
 8000688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068a:	b29b      	uxth	r3, r3
 800068c:	015b      	lsls	r3, r3, #5
 800068e:	b29b      	uxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b29a      	uxth	r2, r3
 8000694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000696:	b29b      	uxth	r3, r3
 8000698:	011b      	lsls	r3, r3, #4
 800069a:	b29b      	uxth	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b29a      	uxth	r2, r3
			(pwm1_dir<<3) | (coast<<2) | (brake<<1);
 80006a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	b29b      	uxth	r3, r3
	uint16_t data = (ocp_act<<10) | (dis_gduv<<9) | (otw_rep<<8) | (otw_rep<<7) | (pwm_mode<<5) | (pwm1_mode<<4) |
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b29a      	uxth	r2, r3
			(pwm1_dir<<3) | (coast<<2) | (brake<<1);
 80006ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	b29b      	uxth	r3, r3
	uint16_t data = (ocp_act<<10) | (dis_gduv<<9) | (otw_rep<<8) | (otw_rep<<7) | (pwm_mode<<5) | (pwm1_mode<<4) |
 80006c0:	4313      	orrs	r3, r2
 80006c2:	82fb      	strh	r3, [r7, #22]
	write_to_reg(spi_handler, DRIVER_CTRL, data);
 80006c4:	8afb      	ldrh	r3, [r7, #22]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2102      	movs	r1, #2
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f7ff ff5b 	bl	8000586 <write_to_reg>
}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <read_driver_ctrl_reg>:

uint16_t read_driver_ctrl_reg(SPI_HandleTypeDef* spi_handler){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,DRIVER_CTRL) & 0xfff);
 80006e0:	2102      	movs	r1, #2
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff74 	bl	80005d0 <read_reg>
 80006e8:	4603      	mov	r3, r0
 80006ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006ee:	b29b      	uxth	r3, r3
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <set_hs_driver_reg>:

void set_hs_driver_reg(SPI_HandleTypeDef* spi_handler, uint_fast16_t lock, uint_fast16_t idrvp_hs, uint_fast16_t idrvn_hs){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
	uint16_t data = (lock<<8) | (idrvp_hs<<4) | idrvn_hs;
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	b29b      	uxth	r3, r3
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b29a      	uxth	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	b29b      	uxth	r3, r3
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	b29b      	uxth	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b29a      	uxth	r2, r3
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	b29b      	uxth	r3, r3
 800071e:	4313      	orrs	r3, r2
 8000720:	82fb      	strh	r3, [r7, #22]
	write_to_reg(spi_handler, HS_GATE_DRV, data);
 8000722:	8afb      	ldrh	r3, [r7, #22]
 8000724:	461a      	mov	r2, r3
 8000726:	2103      	movs	r1, #3
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f7ff ff2c 	bl	8000586 <write_to_reg>
}
 800072e:	bf00      	nop
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <read_hs_driver_reg>:

uint16_t read_hs_driver_reg(SPI_HandleTypeDef* spi_handler){
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,HS_GATE_DRV));
 800073e:	2103      	movs	r1, #3
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff45 	bl	80005d0 <read_reg>
 8000746:	4603      	mov	r3, r0
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <set_ls_driver_ctrl_reg>:

void set_ls_driver_ctrl_reg(SPI_HandleTypeDef* spi_handler, uint_fast16_t cbc, uint_fast16_t tdrive, uint_fast16_t idrvp_ls, uint_fast16_t idrvn_ls){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	603b      	str	r3, [r7, #0]
	uint16_t data = (cbc<<10)| (tdrive<<8) | (idrvp_ls<<4) | idrvn_ls;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	b29b      	uxth	r3, r3
 8000762:	029b      	lsls	r3, r3, #10
 8000764:	b29a      	uxth	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	b29b      	uxth	r3, r3
 800076a:	021b      	lsls	r3, r3, #8
 800076c:	b29b      	uxth	r3, r3
 800076e:	4313      	orrs	r3, r2
 8000770:	b29a      	uxth	r2, r3
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b29b      	uxth	r3, r3
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	b29b      	uxth	r3, r3
 800077a:	4313      	orrs	r3, r2
 800077c:	b29a      	uxth	r2, r3
 800077e:	6a3b      	ldr	r3, [r7, #32]
 8000780:	b29b      	uxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	82fb      	strh	r3, [r7, #22]
	write_to_reg(spi_handler, LS_GATE_DRV, data);
 8000786:	8afb      	ldrh	r3, [r7, #22]
 8000788:	461a      	mov	r2, r3
 800078a:	2104      	movs	r1, #4
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f7ff fefa 	bl	8000586 <write_to_reg>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <read_ls_driver_reg>:

uint16_t read_ls_driver_reg(SPI_HandleTypeDef* spi_handler){
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,LS_GATE_DRV));
 80007a2:	2104      	movs	r1, #4
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff13 	bl	80005d0 <read_reg>
 80007aa:	4603      	mov	r3, r0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <set_ocp_ctrl_reg>:

void set_ocp_ctrl_reg(SPI_HandleTypeDef* spi_handler, uint_fast16_t retry_time, uint_fast16_t dead_time, uint_fast16_t mode, uint_fast16_t deglitch, uint_fast16_t vds_lvl){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
 80007c0:	603b      	str	r3, [r7, #0]
	uint16_t data = (retry_time<<10) | (dead_time<<8) | (mode<<6) | (deglitch<<4) | vds_lvl;
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	029b      	lsls	r3, r3, #10
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	019b      	lsls	r3, r3, #6
 80007dc:	b29b      	uxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	82fb      	strh	r3, [r7, #22]
	write_to_reg(spi_handler, OCP_CTRL, data);
 80007f6:	8afb      	ldrh	r3, [r7, #22]
 80007f8:	461a      	mov	r2, r3
 80007fa:	2105      	movs	r1, #5
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff fec2 	bl	8000586 <write_to_reg>
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <read_ocp_reg>:

uint16_t read_ocp_reg(SPI_HandleTypeDef* spi_handler){
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	return(read_reg(spi_handler,OCP_CTRL));
 8000812:	2105      	movs	r1, #5
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff fedb 	bl	80005d0 <read_reg>
 800081a:	4603      	mov	r3, r0
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <read_all_regs>:

void read_all_regs(SPI_HandleTypeDef* spi_handler,uint16_t * reg_data){
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
	reg_data[0] = read_fault_reg(spi_handler);
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff feed 	bl	800060e <read_fault_reg>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	801a      	strh	r2, [r3, #0]
	reg_data[1] = read_vgs_reg(spi_handler);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	1c9c      	adds	r4, r3, #2
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fef4 	bl	800062e <read_vgs_reg>
 8000846:	4603      	mov	r3, r0
 8000848:	8023      	strh	r3, [r4, #0]
	reg_data[2] = read_driver_ctrl_reg(spi_handler);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	1d1c      	adds	r4, r3, #4
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ff42 	bl	80006d8 <read_driver_ctrl_reg>
 8000854:	4603      	mov	r3, r0
 8000856:	8023      	strh	r3, [r4, #0]
	reg_data[3] = read_hs_driver_reg(spi_handler);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	1d9c      	adds	r4, r3, #6
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff6a 	bl	8000736 <read_hs_driver_reg>
 8000862:	4603      	mov	r3, r0
 8000864:	8023      	strh	r3, [r4, #0]
	reg_data[4] = read_ls_driver_reg(spi_handler);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	f103 0408 	add.w	r4, r3, #8
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff94 	bl	800079a <read_ls_driver_reg>
 8000872:	4603      	mov	r3, r0
 8000874:	8023      	strh	r3, [r4, #0]
	reg_data[5] = read_ocp_reg(spi_handler);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	f103 040a 	add.w	r4, r3, #10
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ffc4 	bl	800080a <read_ocp_reg>
 8000882:	4603      	mov	r3, r0
 8000884:	8023      	strh	r3, [r4, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}

0800088e <clear_flt>:

void clear_flt(SPI_HandleTypeDef* spi_handler){
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	uint_fast16_t temp = read_driver_ctrl_reg(spi_handler)|0x01;
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff ff1e 	bl	80006d8 <read_driver_ctrl_reg>
 800089c:	4603      	mov	r3, r0
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	60fb      	str	r3, [r7, #12]
	write_to_reg(spi_handler, DRIVER_CTRL, temp);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	2102      	movs	r1, #2
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fe69 	bl	8000586 <write_to_reg>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b5b0      	push	{r4, r5, r7, lr}
 80008be:	b0a4      	sub	sp, #144	; 0x90
 80008c0:	af06      	add	r7, sp, #24
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <main+0x4c>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d11e      	bne.n	800090c <main+0x50>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008ce:	f3bf 8f4f 	dsb	sy
}
 80008d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d4:	f3bf 8f6f 	isb	sy
}
 80008d8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <main+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008e2:	f3bf 8f4f 	dsb	sy
}
 80008e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008e8:	f3bf 8f6f 	isb	sy
}
 80008ec:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <main+0x4c>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <main+0x4c>)
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008fa:	f3bf 8f4f 	dsb	sy
}
 80008fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000900:	f3bf 8f6f 	isb	sy
}
 8000904:	e003      	b.n	800090e <main+0x52>
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800090c:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090e:	f002 feff 	bl	8003710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000912:	f000 fa0f 	bl	8000d34 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000916:	f000 fa81 	bl	8000e1c <PeriphCommonClock_Config>
//  volatile uint32_t adc1;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f001 fa4d 	bl	8001db8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800091e:	f000 fa99 	bl	8000e54 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000922:	f000 fb4d 	bl	8000fc0 <MX_ADC2_Init>
  MX_CORDIC_Init();
 8000926:	f000 fc51 	bl	80011cc <MX_CORDIC_Init>
  MX_DFSDM1_Init();
 800092a:	f000 fc63 	bl	80011f4 <MX_DFSDM1_Init>
  MX_FDCAN1_Init();
 800092e:	f000 fdf1 	bl	8001514 <MX_FDCAN1_Init>
  MX_FMAC_Init();
 8000932:	f000 fe53 	bl	80015dc <MX_FMAC_Init>
  MX_SPI2_Init();
 8000936:	f000 fe65 	bl	8001604 <MX_SPI2_Init>
  MX_SPI3_Init();
 800093a:	f000 febb 	bl	80016b4 <MX_SPI3_Init>
  MX_SPI4_Init();
 800093e:	f000 ff11 	bl	8001764 <MX_SPI4_Init>
  MX_SPI6_Init();
 8000942:	f000 ff69 	bl	8001818 <MX_SPI6_Init>
  MX_TIM1_Init();
 8000946:	f000 ffbf 	bl	80018c8 <MX_TIM1_Init>
  MX_TIM8_Init();
 800094a:	f001 f947 	bl	8001bdc <MX_TIM8_Init>
  MX_DMA_Init();
 800094e:	f001 fa13 	bl	8001d78 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000952:	f011 ffc9 	bl	80128e8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000956:	f001 f87b 	bl	8001a50 <MX_TIM2_Init>
  MX_ADC3_Init();
 800095a:	f000 fbb7 	bl	80010cc <MX_ADC3_Init>
  MX_TIM4_Init();
 800095e:	f001 f8c5 	bl	8001aec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2102      	movs	r1, #2
 8000966:	48c6      	ldr	r0, [pc, #792]	; (8000c80 <main+0x3c4>)
 8000968:	f007 fe2e 	bl	80085c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRD_EN_GPIO_Port, BRD_EN_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2104      	movs	r1, #4
 8000970:	48c3      	ldr	r0, [pc, #780]	; (8000c80 <main+0x3c4>)
 8000972:	f007 fe29 	bl	80085c8 <HAL_GPIO_WritePin>
  HAL_Delay (100);
 8000976:	2064      	movs	r0, #100	; 0x64
 8000978:	f002 ff5c 	bl	8003834 <HAL_Delay>
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0) != HAL_OK){
 800097c:	48c1      	ldr	r0, [pc, #772]	; (8000c84 <main+0x3c8>)
 800097e:	f005 facf 	bl	8005f20 <HAL_DFSDM_FilterRegularStart>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <main+0xd0>
	  Error_Handler();
 8000988:	f001 fad2 	bl	8001f30 <Error_Handler>
  }
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1) != HAL_OK){
 800098c:	48be      	ldr	r0, [pc, #760]	; (8000c88 <main+0x3cc>)
 800098e:	f005 fac7 	bl	8005f20 <HAL_DFSDM_FilterRegularStart>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <main+0xe0>
	  Error_Handler();
 8000998:	f001 faca 	bl	8001f30 <Error_Handler>
  }
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter2) != HAL_OK){
 800099c:	48bb      	ldr	r0, [pc, #748]	; (8000c8c <main+0x3d0>)
 800099e:	f005 fabf 	bl	8005f20 <HAL_DFSDM_FilterRegularStart>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <main+0xf0>
	  Error_Handler();
 80009a8:	f001 fac2 	bl	8001f30 <Error_Handler>
  }
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter3) != HAL_OK){
 80009ac:	48b8      	ldr	r0, [pc, #736]	; (8000c90 <main+0x3d4>)
 80009ae:	f005 fab7 	bl	8005f20 <HAL_DFSDM_FilterRegularStart>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <main+0x100>
	  Error_Handler();
 80009b8:	f001 faba 	bl	8001f30 <Error_Handler>
  }
  HAL_TIM_Base_Start_IT(&htim1);
 80009bc:	48b5      	ldr	r0, [pc, #724]	; (8000c94 <main+0x3d8>)
 80009be:	f00c ffbd 	bl	800d93c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009c2:	2100      	movs	r1, #0
 80009c4:	48b3      	ldr	r0, [pc, #716]	; (8000c94 <main+0x3d8>)
 80009c6:	f00d f901 	bl	800dbcc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009ca:	2104      	movs	r1, #4
 80009cc:	48b1      	ldr	r0, [pc, #708]	; (8000c94 <main+0x3d8>)
 80009ce:	f00d f8fd 	bl	800dbcc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009d2:	2108      	movs	r1, #8
 80009d4:	48af      	ldr	r0, [pc, #700]	; (8000c94 <main+0x3d8>)
 80009d6:	f00d f8f9 	bl	800dbcc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80009da:	210c      	movs	r1, #12
 80009dc:	48ad      	ldr	r0, [pc, #692]	; (8000c94 <main+0x3d8>)
 80009de:	f00d f8f5 	bl	800dbcc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80009e2:	48ad      	ldr	r0, [pc, #692]	; (8000c98 <main+0x3dc>)
 80009e4:	f00c ffaa 	bl	800d93c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 80009e8:	48ac      	ldr	r0, [pc, #688]	; (8000c9c <main+0x3e0>)
 80009ea:	f00c ff29 	bl	800d840 <HAL_TIM_Base_Start>
//  HAL_TIM_Base_Start_IT(&htim8);
  TIM4->CCER = 0b0000010101010101;
 80009ee:	4bac      	ldr	r3, [pc, #688]	; (8000ca0 <main+0x3e4>)
 80009f0:	f240 5255 	movw	r2, #1365	; 0x555
 80009f4:	621a      	str	r2, [r3, #32]
  TIM4->CCR1 = 10000;
 80009f6:	4baa      	ldr	r3, [pc, #680]	; (8000ca0 <main+0x3e4>)
 80009f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCER = 0b0000010101010101;
 80009fe:	4ba9      	ldr	r3, [pc, #676]	; (8000ca4 <main+0x3e8>)
 8000a00:	f240 5255 	movw	r2, #1365	; 0x555
 8000a04:	621a      	str	r2, [r3, #32]
  TIM1->CCR1 = 0;
 8000a06:	4ba7      	ldr	r3, [pc, #668]	; (8000ca4 <main+0x3e8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8000a0c:	4ba5      	ldr	r3, [pc, #660]	; (8000ca4 <main+0x3e8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000a12:	4ba4      	ldr	r3, [pc, #656]	; (8000ca4 <main+0x3e8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 8000a18:	4ba2      	ldr	r3, [pc, #648]	; (8000ca4 <main+0x3e8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	641a      	str	r2, [r3, #64]	; 0x40
  uint8_t data[] = "Hello World from USB CDC123\n";
 8000a1e:	4ba2      	ldr	r3, [pc, #648]	; (8000ca8 <main+0x3ec>)
 8000a20:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000a24:	461d      	mov	r5, r3
 8000a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a2e:	c407      	stmia	r4!, {r0, r1, r2}
 8000a30:	7023      	strb	r3, [r4, #0]
  float current_C1 = 0, current_A1 = 0, current_C2 = 0, current_A2 = 0;
 8000a32:	f04f 0300 	mov.w	r3, #0
 8000a36:	66bb      	str	r3, [r7, #104]	; 0x68
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	667b      	str	r3, [r7, #100]	; 0x64
 8000a3e:	f04f 0300 	mov.w	r3, #0
 8000a42:	663b      	str	r3, [r7, #96]	; 0x60
 8000a44:	f04f 0300 	mov.w	r3, #0
 8000a48:	65fb      	str	r3, [r7, #92]	; 0x5c
  float prev_angle,angle_sum;
  uint8_t result=0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  uint32_t channel1 = 0, channel2 = 0, channel4 = 0, channel5 = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  uint16_t length = strlen(data);
 8000a60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fc53 	bl	8000310 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  uint16_t regs_data[6] = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
  	  Error_Handler();
  }
  */
  //HAL_ADC_Start_DMA(&hadc2, adc2, 3);
 //HAL_ADC_Start_DMA(&hadc3, adc3, 1);
  HAL_ADC_Start(&hadc3);
 8000a7c:	488b      	ldr	r0, [pc, #556]	; (8000cac <main+0x3f0>)
 8000a7e:	f003 fc17 	bl	80042b0 <HAL_ADC_Start>
  // Setup DRV
  HAL_GPIO_WritePin(DRV1_EN_GPIO_Port, DRV1_EN_Pin, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a88:	4889      	ldr	r0, [pc, #548]	; (8000cb0 <main+0x3f4>)
 8000a8a:	f007 fd9d 	bl	80085c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV2_EN_GPIO_Port, DRV2_EN_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2108      	movs	r1, #8
 8000a92:	4887      	ldr	r0, [pc, #540]	; (8000cb0 <main+0x3f4>)
 8000a94:	f007 fd98 	bl	80085c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, FAULT_LED_Pin|BRD_EN_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2106      	movs	r1, #6
 8000a9c:	4878      	ldr	r0, [pc, #480]	; (8000c80 <main+0x3c4>)
 8000a9e:	f007 fd93 	bl	80085c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(INV1_EN_GPIO_Port, INV1_EN_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa8:	4882      	ldr	r0, [pc, #520]	; (8000cb4 <main+0x3f8>)
 8000aaa:	f007 fd8d 	bl	80085c8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi6, (uint8_t*) &request_pos, (uint8_t*) &position, 1, 100);
 8000aae:	2364      	movs	r3, #100	; 0x64
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	4a80      	ldr	r2, [pc, #512]	; (8000cb8 <main+0x3fc>)
 8000ab6:	4981      	ldr	r1, [pc, #516]	; (8000cbc <main+0x400>)
 8000ab8:	4881      	ldr	r0, [pc, #516]	; (8000cc0 <main+0x404>)
 8000aba:	f00c fb59 	bl	800d170 <HAL_SPI_TransmitReceive>

  //spi setup
  set_driver_ctrl_reg(&hspi2, SHUTDOWN_ALL_BRIDGES, UVLO_EN, GATE_DRV_FAULT_EN, OTW_REPORT_EN, PWM_3X, SYNC_RECT, CW, COAST_DIS, NO_TPS);
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9305      	str	r3, [sp, #20]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9304      	str	r3, [sp, #16]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	9303      	str	r3, [sp, #12]
 8000aca:	2300      	movs	r3, #0
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2101      	movs	r1, #1
 8000adc:	4879      	ldr	r0, [pc, #484]	; (8000cc4 <main+0x408>)
 8000ade:	f7ff fdb6 	bl	800064e <set_driver_ctrl_reg>
  set_hs_driver_reg(&hspi2, UNLOCK_REGS, IDRIVEP_1000MA, IDRIVEN_1200MA);
 8000ae2:	2309      	movs	r3, #9
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	4876      	ldr	r0, [pc, #472]	; (8000cc4 <main+0x408>)
 8000aea:	f7ff fe05 	bl	80006f8 <set_hs_driver_reg>
  set_ls_driver_ctrl_reg(&hspi2, RETRY_ONLY, PK_CUR_2000NS, IDRIVEP_1000MA, IDRIVEN_1200MA);
 8000aee:	2309      	movs	r3, #9
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	230f      	movs	r3, #15
 8000af4:	2202      	movs	r2, #2
 8000af6:	2100      	movs	r1, #0
 8000af8:	4872      	ldr	r0, [pc, #456]	; (8000cc4 <main+0x408>)
 8000afa:	f7ff fe29 	bl	8000750 <set_ls_driver_ctrl_reg>
  set_ocp_ctrl_reg(&hspi2, RETRY_8MS, DEAD_TIME_200NS, OC_LATCHED, OCP_DEG_8US, VDS_LVL_1_0V);
 8000afe:	230d      	movs	r3, #13
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	2303      	movs	r3, #3
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	2202      	movs	r2, #2
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	486d      	ldr	r0, [pc, #436]	; (8000cc4 <main+0x408>)
 8000b0e:	f7ff fe51 	bl	80007b4 <set_ocp_ctrl_reg>
  HAL_Delay(10);
 8000b12:	200a      	movs	r0, #10
 8000b14:	f002 fe8e 	bl	8003834 <HAL_Delay>
  clear_flt(&hspi2);
 8000b18:	486a      	ldr	r0, [pc, #424]	; (8000cc4 <main+0x408>)
 8000b1a:	f7ff feb8 	bl	800088e <clear_flt>
  HAL_Delay(10);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f002 fe88 	bl	8003834 <HAL_Delay>
  SENSOR_OFFSET_E mot_offset_1 = get_pos_offset(TIM1, &hspi4);
 8000b24:	463b      	mov	r3, r7
 8000b26:	4a68      	ldr	r2, [pc, #416]	; (8000cc8 <main+0x40c>)
 8000b28:	495e      	ldr	r1, [pc, #376]	; (8000ca4 <main+0x3e8>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 fa0c 	bl	8001f48 <get_pos_offset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_all_regs(&hspi2, regs_data);
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4619      	mov	r1, r3
 8000b36:	4863      	ldr	r0, [pc, #396]	; (8000cc4 <main+0x408>)
 8000b38:	f7ff fe74 	bl	8000824 <read_all_regs>
	  current_C1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &channel1) * CURRENT_A_SCALER;
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	4850      	ldr	r0, [pc, #320]	; (8000c84 <main+0x3c8>)
 8000b44:	f005 fa07 	bl	8005f56 <HAL_DFSDM_FilterGetRegularValue>
 8000b48:	ee07 0a90 	vmov	s15, r0
 8000b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b50:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8000ccc <main+0x410>
 8000b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b58:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	  current_A1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1, &channel2) * CURRENT_A_SCALER;
 8000b5c:	f107 0320 	add.w	r3, r7, #32
 8000b60:	4619      	mov	r1, r3
 8000b62:	4849      	ldr	r0, [pc, #292]	; (8000c88 <main+0x3cc>)
 8000b64:	f005 f9f7 	bl	8005f56 <HAL_DFSDM_FilterGetRegularValue>
 8000b68:	ee07 0a90 	vmov	s15, r0
 8000b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b70:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000ccc <main+0x410>
 8000b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b78:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	  current_C2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter2, &channel4) * CURRENT_A_SCALER;
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4842      	ldr	r0, [pc, #264]	; (8000c8c <main+0x3d0>)
 8000b84:	f005 f9e7 	bl	8005f56 <HAL_DFSDM_FilterGetRegularValue>
 8000b88:	ee07 0a90 	vmov	s15, r0
 8000b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b90:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000ccc <main+0x410>
 8000b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b98:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	  current_A2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter3, &channel5) * CURRENT_A_SCALER;
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	483b      	ldr	r0, [pc, #236]	; (8000c90 <main+0x3d4>)
 8000ba4:	f005 f9d7 	bl	8005f56 <HAL_DFSDM_FilterGetRegularValue>
 8000ba8:	ee07 0a90 	vmov	s15, r0
 8000bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000ccc <main+0x410>
 8000bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bb8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	  int dc_bus_fxpt = HAL_ADC_GetValue(&hadc3);
 8000bbc:	483b      	ldr	r0, [pc, #236]	; (8000cac <main+0x3f0>)
 8000bbe:	f003 fc41 	bl	8004444 <HAL_ADC_GetValue>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	657b      	str	r3, [r7, #84]	; 0x54
	  float dc_bus = dc_bus_fxpt*0.028998778998779f;
 8000bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000cd0 <main+0x414>
 8000bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	  HAL_SPI_TransmitReceive(&hspi6, (uint8_t*) &request_pos, (uint8_t*) &position_2, 1, 100);
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2301      	movs	r3, #1
 8000be2:	4a3c      	ldr	r2, [pc, #240]	; (8000cd4 <main+0x418>)
 8000be4:	4935      	ldr	r1, [pc, #212]	; (8000cbc <main+0x400>)
 8000be6:	4836      	ldr	r0, [pc, #216]	; (8000cc0 <main+0x404>)
 8000be8:	f00c fac2 	bl	800d170 <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(&hspi4, (uint8_t*) &request_pos, (uint8_t*) &position, 1, 100);
 8000bec:	2364      	movs	r3, #100	; 0x64
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	4a31      	ldr	r2, [pc, #196]	; (8000cb8 <main+0x3fc>)
 8000bf4:	4931      	ldr	r1, [pc, #196]	; (8000cbc <main+0x400>)
 8000bf6:	4834      	ldr	r0, [pc, #208]	; (8000cc8 <main+0x40c>)
 8000bf8:	f00c faba 	bl	800d170 <HAL_SPI_TransmitReceive>
	  float position_temp = position >> 4;
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <main+0x3fc>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	111b      	asrs	r3, r3, #4
 8000c02:	ee07 3a90 	vmov	s15, r3
 8000c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c0a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	  float position_temp_2 = position_2 >> 4;
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <main+0x418>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	111b      	asrs	r3, r3, #4
 8000c14:	ee07 3a90 	vmov	s15, r3
 8000c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c1c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	  angle = data2angle * position_temp;
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <main+0x41c>)
 8000c22:	ed93 7a00 	vldr	s14, [r3]
 8000c26:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <main+0x420>)
 8000c30:	edc3 7a00 	vstr	s15, [r3]
	  angle_2 = data2angle * position_temp_2;
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <main+0x41c>)
 8000c36:	ed93 7a00 	vldr	s14, [r3]
 8000c3a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <main+0x424>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
	  //speed cal
	  float diff_angle = angle - prev_angle;
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <main+0x420>)
 8000c4a:	ed93 7a00 	vldr	s14, [r3]
 8000c4e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c56:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	  if(diff_angle > 180){
 8000c5a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000c5e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000ce4 <main+0x428>
 8000c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6a:	dd41      	ble.n	8000cf0 <main+0x434>
		  diff_angle -= 360;
 8000c6c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000c70:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000cec <main+0x430>
 8000c74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c78:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 8000c7c:	e049      	b.n	8000d12 <main+0x456>
 8000c7e:	bf00      	nop
 8000c80:	58020000 	.word	0x58020000
 8000c84:	2400137c 	.word	0x2400137c
 8000c88:	240013d0 	.word	0x240013d0
 8000c8c:	24001424 	.word	0x24001424
 8000c90:	24001478 	.word	0x24001478
 8000c94:	240018a4 	.word	0x240018a4
 8000c98:	240018f0 	.word	0x240018f0
 8000c9c:	2400193c 	.word	0x2400193c
 8000ca0:	40000800 	.word	0x40000800
 8000ca4:	40010000 	.word	0x40010000
 8000ca8:	080145a0 	.word	0x080145a0
 8000cac:	2400126c 	.word	0x2400126c
 8000cb0:	58020c00 	.word	0x58020c00
 8000cb4:	58020800 	.word	0x58020800
 8000cb8:	240019d4 	.word	0x240019d4
 8000cbc:	24001004 	.word	0x24001004
 8000cc0:	2400181c 	.word	0x2400181c
 8000cc4:	24001684 	.word	0x24001684
 8000cc8:	24001794 	.word	0x24001794
 8000ccc:	3c610000 	.word	0x3c610000
 8000cd0:	3ced8ed9 	.word	0x3ced8ed9
 8000cd4:	240019d8 	.word	0x240019d8
 8000cd8:	24001008 	.word	0x24001008
 8000cdc:	240019dc 	.word	0x240019dc
 8000ce0:	240019e0 	.word	0x240019e0
 8000ce4:	43340000 	.word	0x43340000
 8000ce8:	c3340000 	.word	0xc3340000
 8000cec:	43b40000 	.word	0x43b40000
	  }
	  else if(diff_angle < -180){
 8000cf0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000cf4:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8000ce8 <main+0x42c>
 8000cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d00:	d507      	bpl.n	8000d12 <main+0x456>
		diff_angle += 360;
 8000d02:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000d06:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8000cec <main+0x430>
 8000d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d0e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	  }
	  angle_sum += diff_angle;
 8000d12:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8000d16:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	  prev_angle = angle;
 8000d22:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <main+0x474>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	677b      	str	r3, [r7, #116]	; 0x74

	  //	  uint32_t *adc1_add = adc1;
	  HAL_Delay (1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f002 fd83 	bl	8003834 <HAL_Delay>
  {
 8000d2e:	e6ff      	b.n	8000b30 <main+0x274>
 8000d30:	240019dc 	.word	0x240019dc

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b09c      	sub	sp, #112	; 0x70
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	224c      	movs	r2, #76	; 0x4c
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f012 fc2a 	bl	801359c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2220      	movs	r2, #32
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f012 fc24 	bl	801359c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d54:	2002      	movs	r0, #2
 8000d56:	f008 ff25 	bl	8009ba4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <SystemClock_Config+0xe4>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a2d      	ldr	r2, [pc, #180]	; (8000e18 <SystemClock_Config+0xe4>)
 8000d64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <SystemClock_Config+0xe4>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d76:	bf00      	nop
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <SystemClock_Config+0xe4>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d84:	d1f8      	bne.n	8000d78 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI
 8000d86:	2331      	movs	r3, #49	; 0x31
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d8a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d90:	2301      	movs	r3, #1
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da0:	2302      	movs	r3, #2
 8000da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000da4:	2303      	movs	r3, #3
 8000da6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 74;
 8000da8:	234a      	movs	r3, #74	; 0x4a
 8000daa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000db0:	230a      	movs	r3, #10
 8000db2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 10;
 8000db4:	230a      	movs	r3, #10
 8000db6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000db8:	2308      	movs	r3, #8
 8000dba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4903;
 8000dc0:	f241 3327 	movw	r3, #4903	; 0x1327
 8000dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f008 ff34 	bl	8009c38 <HAL_RCC_OscConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000dd6:	f001 f8ab 	bl	8001f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dda:	233f      	movs	r3, #63	; 0x3f
 8000ddc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dde:	2303      	movs	r3, #3
 8000de0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000de6:	2308      	movs	r3, #8
 8000de8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dea:	2340      	movs	r3, #64	; 0x40
 8000dec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dee:	2340      	movs	r3, #64	; 0x40
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2103      	movs	r1, #3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f009 fac9 	bl	800a398 <HAL_RCC_ClockConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000e0c:	f001 f890 	bl	8001f30 <Error_Handler>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3770      	adds	r7, #112	; 0x70
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	58024800 	.word	0x58024800

08000e1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ae      	sub	sp, #184	; 0xb8
 8000e20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	22b4      	movs	r2, #180	; 0xb4
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f012 fbb7 	bl	801359c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000e2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e32:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_CSI;
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 fe0b 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000e48:	f001 f872 	bl	8001f30 <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	37b8      	adds	r7, #184	; 0xb8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2224      	movs	r2, #36	; 0x24
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f012 fb95 	bl	801359c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e72:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000e74:	4a4d      	ldr	r2, [pc, #308]	; (8000fac <MX_ADC1_Init+0x158>)
 8000e76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000e7a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000e7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000e80:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e86:	4b48      	ldr	r3, [pc, #288]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8c:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e92:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e98:	4b43      	ldr	r3, [pc, #268]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000e9e:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea4:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eac:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb2:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000eb8:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000ec0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = ENABLE;
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.Ratio = 2;
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000eda:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000ee0:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000ee6:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eec:	482e      	ldr	r0, [pc, #184]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000eee:	f002 ffd7 	bl	8003ea0 <HAL_ADC_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000ef8:	f001 f81a 	bl	8001f30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000f08:	f004 fbfc 	bl	8005704 <HAL_ADCEx_MultiModeConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000f12:	f001 f80d 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <MX_ADC1_Init+0x15c>)
 8000f18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000f1e:	2305      	movs	r3, #5
 8000f20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f22:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f26:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000f3c:	f003 fce8 	bl	8004910 <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f46:	f000 fff3 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_ADC1_Init+0x160>)
 8000f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f4e:	230c      	movs	r3, #12
 8000f50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000f58:	f003 fcda 	bl	8004910 <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000f62:	f000 ffe5 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_ADC1_Init+0x164>)
 8000f68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f6a:	2312      	movs	r3, #18
 8000f6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000f74:	f003 fccc 	bl	8004910 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 8000f7e:	f000 ffd7 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_ADC1_Init+0x168>)
 8000f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f86:	2318      	movs	r3, #24
 8000f88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_ADC1_Init+0x154>)
 8000f90:	f003 fcbe 	bl	8004910 <HAL_ADC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8000f9a:	f000 ffc9 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3730      	adds	r7, #48	; 0x30
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2400118c 	.word	0x2400118c
 8000fac:	40022000 	.word	0x40022000
 8000fb0:	10c00010 	.word	0x10c00010
 8000fb4:	21800100 	.word	0x21800100
 8000fb8:	25b00200 	.word	0x25b00200
 8000fbc:	43210000 	.word	0x43210000

08000fc0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2224      	movs	r2, #36	; 0x24
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f012 fae5 	bl	801359c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fd2:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8000fd4:	4a39      	ldr	r2, [pc, #228]	; (80010bc <MX_ADC2_Init+0xfc>)
 8000fd6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000fd8:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8000fda:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000fde:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fe6:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fec:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8000fee:	2204      	movs	r2, #4
 8000ff0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8001000:	2203      	movs	r2, #3
 8001002:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <MX_ADC2_Init+0xf8>)
 800100e:	2200      	movs	r2, #0
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8001014:	2200      	movs	r2, #0
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_ADC2_Init+0xf8>)
 800101a:	2203      	movs	r2, #3
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8001020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8001028:	2200      	movs	r2, #0
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <MX_ADC2_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001034:	4820      	ldr	r0, [pc, #128]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8001036:	f002 ff33 	bl	8003ea0 <HAL_ADC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001040:	f000 ff76 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_ADC2_Init+0x100>)
 8001046:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001048:	2306      	movs	r3, #6
 800104a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800104c:	2302      	movs	r3, #2
 800104e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001050:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001054:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001056:	2304      	movs	r3, #4
 8001058:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_ADC2_Init+0xf8>)
 800106a:	f003 fc51 	bl	8004910 <HAL_ADC_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001074:	f000 ff5c 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_ADC2_Init+0x104>)
 800107a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800107c:	230c      	movs	r3, #12
 800107e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_ADC2_Init+0xf8>)
 8001086:	f003 fc43 	bl	8004910 <HAL_ADC_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8001090:	f000 ff4e 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_ADC2_Init+0x108>)
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001098:	2312      	movs	r3, #18
 800109a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_ADC2_Init+0xf8>)
 80010a2:	f003 fc35 	bl	8004910 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80010ac:	f000 ff40 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	240011fc 	.word	0x240011fc
 80010bc:	40022100 	.word	0x40022100
 80010c0:	2a000400 	.word	0x2a000400
 80010c4:	2e300800 	.word	0x2e300800
 80010c8:	3ef08000 	.word	0x3ef08000

080010cc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2224      	movs	r2, #36	; 0x24
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f012 fa5f 	bl	801359c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <MX_ADC3_Init+0xf4>)
 80010e0:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <MX_ADC3_Init+0xf8>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <MX_ADC3_Init+0xf4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <MX_ADC3_Init+0xf4>)
 80010ec:	2208      	movs	r2, #8
 80010ee:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <MX_ADC3_Init+0xf4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <MX_ADC3_Init+0xf4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <MX_ADC3_Init+0xf4>)
 80010fe:	2204      	movs	r2, #4
 8001100:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <MX_ADC3_Init+0xf4>)
 8001104:	2200      	movs	r2, #0
 8001106:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MX_ADC3_Init+0xf4>)
 800110a:	2201      	movs	r2, #1
 800110c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <MX_ADC3_Init+0xf4>)
 8001110:	2201      	movs	r2, #1
 8001112:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <MX_ADC3_Init+0xf4>)
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MX_ADC3_Init+0xf4>)
 800111e:	2200      	movs	r2, #0
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <MX_ADC3_Init+0xf4>)
 8001124:	2200      	movs	r2, #0
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <MX_ADC3_Init+0xf4>)
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <MX_ADC3_Init+0xf4>)
 8001132:	2200      	movs	r2, #0
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <MX_ADC3_Init+0xf4>)
 8001138:	2200      	movs	r2, #0
 800113a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <MX_ADC3_Init+0xf4>)
 800113e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MX_ADC3_Init+0xf4>)
 8001146:	2200      	movs	r2, #0
 8001148:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = ENABLE;
 800114a:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_ADC3_Init+0xf4>)
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.Ratio = 16;
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <MX_ADC3_Init+0xf4>)
 8001154:	2210      	movs	r2, #16
 8001156:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_ADC3_Init+0xf4>)
 800115a:	22a0      	movs	r2, #160	; 0xa0
 800115c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_ADC3_Init+0xf4>)
 8001160:	2200      	movs	r2, #0
 8001162:	651a      	str	r2, [r3, #80]	; 0x50
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_ADC3_Init+0xf4>)
 8001166:	2201      	movs	r2, #1
 8001168:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800116a:	4815      	ldr	r0, [pc, #84]	; (80011c0 <MX_ADC3_Init+0xf4>)
 800116c:	f002 fe98 	bl	8003ea0 <HAL_ADC_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8001176:	f000 fedb 	bl	8001f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_ADC3_Init+0xfc>)
 800117c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800117e:	2306      	movs	r3, #6
 8001180:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 8001182:	2305      	movs	r3, #5
 8001184:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001186:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800118a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800118c:	2304      	movs	r3, #4
 800118e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_ADC3_Init+0xf4>)
 80011aa:	f003 fbb1 	bl	8004910 <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 80011b4:	f000 febc 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2400126c 	.word	0x2400126c
 80011c4:	58026000 	.word	0x58026000
 80011c8:	04300002 	.word	0x04300002

080011cc <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_CORDIC_Init+0x20>)
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <MX_CORDIC_Init+0x24>)
 80011d4:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_CORDIC_Init+0x20>)
 80011d8:	f004 fb76 	bl	80058c8 <HAL_CORDIC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80011e2:	f000 fea5 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	24001354 	.word	0x24001354
 80011f0:	48024400 	.word	0x48024400

080011f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80011f8:	4ba0      	ldr	r3, [pc, #640]	; (800147c <MX_DFSDM1_Init+0x288>)
 80011fa:	4aa1      	ldr	r2, [pc, #644]	; (8001480 <MX_DFSDM1_Init+0x28c>)
 80011fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80011fe:	4b9f      	ldr	r3, [pc, #636]	; (800147c <MX_DFSDM1_Init+0x288>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8001204:	4b9d      	ldr	r3, [pc, #628]	; (800147c <MX_DFSDM1_Init+0x288>)
 8001206:	2200      	movs	r2, #0
 8001208:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 800120a:	4b9c      	ldr	r3, [pc, #624]	; (800147c <MX_DFSDM1_Init+0x288>)
 800120c:	2200      	movs	r2, #0
 800120e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001210:	4b9a      	ldr	r3, [pc, #616]	; (800147c <MX_DFSDM1_Init+0x288>)
 8001212:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001216:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 8001218:	4b98      	ldr	r3, [pc, #608]	; (800147c <MX_DFSDM1_Init+0x288>)
 800121a:	2220      	movs	r2, #32
 800121c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800121e:	4b97      	ldr	r3, [pc, #604]	; (800147c <MX_DFSDM1_Init+0x288>)
 8001220:	2201      	movs	r2, #1
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001224:	4895      	ldr	r0, [pc, #596]	; (800147c <MX_DFSDM1_Init+0x288>)
 8001226:	f004 fd59 	bl	8005cdc <HAL_DFSDM_FilterInit>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8001230:	f000 fe7e 	bl	8001f30 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8001234:	4b93      	ldr	r3, [pc, #588]	; (8001484 <MX_DFSDM1_Init+0x290>)
 8001236:	4a94      	ldr	r2, [pc, #592]	; (8001488 <MX_DFSDM1_Init+0x294>)
 8001238:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800123a:	4b92      	ldr	r3, [pc, #584]	; (8001484 <MX_DFSDM1_Init+0x290>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = DISABLE;
 8001240:	4b90      	ldr	r3, [pc, #576]	; (8001484 <MX_DFSDM1_Init+0x290>)
 8001242:	2200      	movs	r2, #0
 8001244:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 8001246:	4b8f      	ldr	r3, [pc, #572]	; (8001484 <MX_DFSDM1_Init+0x290>)
 8001248:	2200      	movs	r2, #0
 800124a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800124c:	4b8d      	ldr	r3, [pc, #564]	; (8001484 <MX_DFSDM1_Init+0x290>)
 800124e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001252:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 32;
 8001254:	4b8b      	ldr	r3, [pc, #556]	; (8001484 <MX_DFSDM1_Init+0x290>)
 8001256:	2220      	movs	r2, #32
 8001258:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 800125a:	4b8a      	ldr	r3, [pc, #552]	; (8001484 <MX_DFSDM1_Init+0x290>)
 800125c:	2201      	movs	r2, #1
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8001260:	4888      	ldr	r0, [pc, #544]	; (8001484 <MX_DFSDM1_Init+0x290>)
 8001262:	f004 fd3b 	bl	8005cdc <HAL_DFSDM_FilterInit>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_DFSDM1_Init+0x7c>
  {
    Error_Handler();
 800126c:	f000 fe60 	bl	8001f30 <Error_Handler>
  }
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 8001270:	4b86      	ldr	r3, [pc, #536]	; (800148c <MX_DFSDM1_Init+0x298>)
 8001272:	4a87      	ldr	r2, [pc, #540]	; (8001490 <MX_DFSDM1_Init+0x29c>)
 8001274:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001276:	4b85      	ldr	r3, [pc, #532]	; (800148c <MX_DFSDM1_Init+0x298>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter2.Init.RegularParam.FastMode = DISABLE;
 800127c:	4b83      	ldr	r3, [pc, #524]	; (800148c <MX_DFSDM1_Init+0x298>)
 800127e:	2200      	movs	r2, #0
 8001280:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter2.Init.RegularParam.DmaMode = DISABLE;
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <MX_DFSDM1_Init+0x298>)
 8001284:	2200      	movs	r2, #0
 8001286:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001288:	4b80      	ldr	r3, [pc, #512]	; (800148c <MX_DFSDM1_Init+0x298>)
 800128a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800128e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 32;
 8001290:	4b7e      	ldr	r3, [pc, #504]	; (800148c <MX_DFSDM1_Init+0x298>)
 8001292:	2220      	movs	r2, #32
 8001294:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
 8001296:	4b7d      	ldr	r3, [pc, #500]	; (800148c <MX_DFSDM1_Init+0x298>)
 8001298:	2201      	movs	r2, #1
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 800129c:	487b      	ldr	r0, [pc, #492]	; (800148c <MX_DFSDM1_Init+0x298>)
 800129e:	f004 fd1d 	bl	8005cdc <HAL_DFSDM_FilterInit>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_DFSDM1_Init+0xb8>
  {
    Error_Handler();
 80012a8:	f000 fe42 	bl	8001f30 <Error_Handler>
  }
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
 80012ac:	4b79      	ldr	r3, [pc, #484]	; (8001494 <MX_DFSDM1_Init+0x2a0>)
 80012ae:	4a7a      	ldr	r2, [pc, #488]	; (8001498 <MX_DFSDM1_Init+0x2a4>)
 80012b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter3.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80012b2:	4b78      	ldr	r3, [pc, #480]	; (8001494 <MX_DFSDM1_Init+0x2a0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter3.Init.RegularParam.FastMode = DISABLE;
 80012b8:	4b76      	ldr	r3, [pc, #472]	; (8001494 <MX_DFSDM1_Init+0x2a0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter3.Init.RegularParam.DmaMode = DISABLE;
 80012be:	4b75      	ldr	r3, [pc, #468]	; (8001494 <MX_DFSDM1_Init+0x2a0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter3.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80012c4:	4b73      	ldr	r3, [pc, #460]	; (8001494 <MX_DFSDM1_Init+0x2a0>)
 80012c6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80012ca:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter3.Init.FilterParam.Oversampling = 32;
 80012cc:	4b71      	ldr	r3, [pc, #452]	; (8001494 <MX_DFSDM1_Init+0x2a0>)
 80012ce:	2220      	movs	r2, #32
 80012d0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter3.Init.FilterParam.IntOversampling = 1;
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <MX_DFSDM1_Init+0x2a0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter3) != HAL_OK)
 80012d8:	486e      	ldr	r0, [pc, #440]	; (8001494 <MX_DFSDM1_Init+0x2a0>)
 80012da:	f004 fcff 	bl	8005cdc <HAL_DFSDM_FilterInit>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_DFSDM1_Init+0xf4>
  {
    Error_Handler();
 80012e4:	f000 fe24 	bl	8001f30 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80012e8:	4b6c      	ldr	r3, [pc, #432]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 80012ea:	4a6d      	ldr	r2, [pc, #436]	; (80014a0 <MX_DFSDM1_Init+0x2ac>)
 80012ec:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = DISABLE;
 80012ee:	4b6b      	ldr	r3, [pc, #428]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80012f4:	4b69      	ldr	r3, [pc, #420]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80012fa:	4b68      	ldr	r3, [pc, #416]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001300:	4b66      	ldr	r3, [pc, #408]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001306:	4b65      	ldr	r3, [pc, #404]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800130c:	4b63      	ldr	r3, [pc, #396]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001312:	4b62      	ldr	r3, [pc, #392]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001318:	4b60      	ldr	r3, [pc, #384]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001324:	4b5d      	ldr	r3, [pc, #372]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 8001326:	2201      	movs	r2, #1
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 800132c:	2200      	movs	r2, #0
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001330:	4b5a      	ldr	r3, [pc, #360]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 8001332:	2200      	movs	r2, #0
 8001334:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001336:	4859      	ldr	r0, [pc, #356]	; (800149c <MX_DFSDM1_Init+0x2a8>)
 8001338:	f004 fc08 	bl	8005b4c <HAL_DFSDM_ChannelInit>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_DFSDM1_Init+0x152>
  {
    Error_Handler();
 8001342:	f000 fdf5 	bl	8001f30 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001346:	4b57      	ldr	r3, [pc, #348]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 8001348:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <MX_DFSDM1_Init+0x2b4>)
 800134a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = DISABLE;
 800134c:	4b55      	ldr	r3, [pc, #340]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 800134e:	2200      	movs	r2, #0
 8001350:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001352:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001358:	4b52      	ldr	r3, [pc, #328]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 800135a:	2202      	movs	r2, #2
 800135c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800135e:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001364:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800136a:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001376:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800137c:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001382:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 8001384:	2201      	movs	r2, #1
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001388:	4b46      	ldr	r3, [pc, #280]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 800138a:	2200      	movs	r2, #0
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800138e:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001394:	4843      	ldr	r0, [pc, #268]	; (80014a4 <MX_DFSDM1_Init+0x2b0>)
 8001396:	f004 fbd9 	bl	8005b4c <HAL_DFSDM_ChannelInit>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_DFSDM1_Init+0x1b0>
  {
    Error_Handler();
 80013a0:	f000 fdc6 	bl	8001f30 <Error_Handler>
  }
  hdfsdm1_channel4.Instance = DFSDM1_Channel4;
 80013a4:	4b41      	ldr	r3, [pc, #260]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013a6:	4a42      	ldr	r2, [pc, #264]	; (80014b0 <MX_DFSDM1_Init+0x2bc>)
 80013a8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel4.Init.OutputClock.Activation = DISABLE;
 80013aa:	4b40      	ldr	r3, [pc, #256]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel4.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80013b0:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel4.Init.OutputClock.Divider = 2;
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013b8:	2202      	movs	r2, #2
 80013ba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel4.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80013bc:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel4.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80013c2:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel4.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel4.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel4.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel4.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel4.Init.Awd.Oversampling = 1;
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel4.Init.Offset = 0;
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel4.Init.RightBitShift = 0x00;
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel4) != HAL_OK)
 80013f2:	482e      	ldr	r0, [pc, #184]	; (80014ac <MX_DFSDM1_Init+0x2b8>)
 80013f4:	f004 fbaa 	bl	8005b4c <HAL_DFSDM_ChannelInit>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_DFSDM1_Init+0x20e>
  {
    Error_Handler();
 80013fe:	f000 fd97 	bl	8001f30 <Error_Handler>
  }
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 8001402:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 8001404:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <MX_DFSDM1_Init+0x2c4>)
 8001406:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = DISABLE;
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 800140a:	2200      	movs	r2, #0
 800140c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 2;
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 8001416:	2202      	movs	r2, #2
 8001418:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001426:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 8001440:	2201      	movs	r2, #1
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 8001446:	2200      	movs	r2, #0
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 8001450:	4818      	ldr	r0, [pc, #96]	; (80014b4 <MX_DFSDM1_Init+0x2c0>)
 8001452:	f004 fb7b 	bl	8005b4c <HAL_DFSDM_ChannelInit>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DFSDM1_Init+0x26c>
  {
    Error_Handler();
 800145c:	f000 fd68 	bl	8001f30 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001460:	2201      	movs	r2, #1
 8001462:	4916      	ldr	r1, [pc, #88]	; (80014bc <MX_DFSDM1_Init+0x2c8>)
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_DFSDM1_Init+0x288>)
 8001466:	f004 fd15 	bl	8005e94 <HAL_DFSDM_FilterConfigRegChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_DFSDM1_Init+0x280>
  {
    Error_Handler();
 8001470:	f000 fd5e 	bl	8001f30 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001474:	2201      	movs	r2, #1
 8001476:	4912      	ldr	r1, [pc, #72]	; (80014c0 <MX_DFSDM1_Init+0x2cc>)
 8001478:	e024      	b.n	80014c4 <MX_DFSDM1_Init+0x2d0>
 800147a:	bf00      	nop
 800147c:	2400137c 	.word	0x2400137c
 8001480:	40017900 	.word	0x40017900
 8001484:	240013d0 	.word	0x240013d0
 8001488:	40017980 	.word	0x40017980
 800148c:	24001424 	.word	0x24001424
 8001490:	40017a00 	.word	0x40017a00
 8001494:	24001478 	.word	0x24001478
 8001498:	40017a80 	.word	0x40017a80
 800149c:	240014cc 	.word	0x240014cc
 80014a0:	40017820 	.word	0x40017820
 80014a4:	24001504 	.word	0x24001504
 80014a8:	40017840 	.word	0x40017840
 80014ac:	2400153c 	.word	0x2400153c
 80014b0:	40017880 	.word	0x40017880
 80014b4:	24001574 	.word	0x24001574
 80014b8:	400178a0 	.word	0x400178a0
 80014bc:	00010002 	.word	0x00010002
 80014c0:	00020004 	.word	0x00020004
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <MX_DFSDM1_Init+0x30c>)
 80014c6:	f004 fce5 	bl	8005e94 <HAL_DFSDM_FilterConfigRegChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_DFSDM1_Init+0x2e0>
  {
    Error_Handler();
 80014d0:	f000 fd2e 	bl	8001f30 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_4, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80014d4:	2201      	movs	r2, #1
 80014d6:	490b      	ldr	r1, [pc, #44]	; (8001504 <MX_DFSDM1_Init+0x310>)
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <MX_DFSDM1_Init+0x314>)
 80014da:	f004 fcdb 	bl	8005e94 <HAL_DFSDM_FilterConfigRegChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_DFSDM1_Init+0x2f4>
  {
    Error_Handler();
 80014e4:	f000 fd24 	bl	8001f30 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter3, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80014e8:	2201      	movs	r2, #1
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <MX_DFSDM1_Init+0x318>)
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <MX_DFSDM1_Init+0x31c>)
 80014ee:	f004 fcd1 	bl	8005e94 <HAL_DFSDM_FilterConfigRegChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_DFSDM1_Init+0x308>
  {
    Error_Handler();
 80014f8:	f000 fd1a 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	240013d0 	.word	0x240013d0
 8001504:	00040010 	.word	0x00040010
 8001508:	24001424 	.word	0x24001424
 800150c:	00050020 	.word	0x00050020
 8001510:	24001478 	.word	0x24001478

08001514 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800151a:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <MX_FDCAN1_Init+0xc4>)
 800151c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800151e:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001524:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800152c:	2200      	movs	r2, #0
 800152e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001532:	2200      	movs	r2, #0
 8001534:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001538:	2200      	movs	r2, #0
 800153a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800153e:	2201      	movs	r2, #1
 8001540:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001544:	2201      	movs	r2, #1
 8001546:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800154a:	2202      	movs	r2, #2
 800154c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001550:	2202      	movs	r2, #2
 8001552:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001556:	2201      	movs	r2, #1
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800155c:	2201      	movs	r2, #1
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001562:	2201      	movs	r2, #1
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001568:	2201      	movs	r2, #1
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800156e:	2200      	movs	r2, #0
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001574:	2200      	movs	r2, #0
 8001576:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800157a:	2200      	movs	r2, #0
 800157c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001580:	2200      	movs	r2, #0
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001586:	2204      	movs	r2, #4
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800158c:	2200      	movs	r2, #0
 800158e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001592:	2204      	movs	r2, #4
 8001594:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001598:	2200      	movs	r2, #0
 800159a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800159e:	2204      	movs	r2, #4
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015bc:	2204      	movs	r2, #4
 80015be:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015c2:	f006 fa49 	bl	8007a58 <HAL_FDCAN_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80015cc:	f000 fcb0 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	240015ac 	.word	0x240015ac
 80015d8:	4000a000 	.word	0x4000a000

080015dc <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_FMAC_Init+0x20>)
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <MX_FMAC_Init+0x24>)
 80015e4:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_FMAC_Init+0x20>)
 80015e8:	f006 fd9a 	bl	8008120 <HAL_FMAC_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80015f2:	f000 fc9d 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2400164c 	.word	0x2400164c
 8001600:	48024000 	.word	0x48024000

08001604 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <MX_SPI2_Init+0xa8>)
 800160a:	4a29      	ldr	r2, [pc, #164]	; (80016b0 <MX_SPI2_Init+0xac>)
 800160c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001610:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001614:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001616:	4b25      	ldr	r3, [pc, #148]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <MX_SPI2_Init+0xa8>)
 800161e:	220f      	movs	r2, #15
 8001620:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <MX_SPI2_Init+0xa8>)
 800162a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800162e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001632:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001636:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_SPI2_Init+0xa8>)
 800163a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800163e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_SPI2_Init+0xa8>)
 800164e:	2200      	movs	r2, #0
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001654:	2200      	movs	r2, #0
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_SPI2_Init+0xa8>)
 800165a:	2200      	movs	r2, #0
 800165c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001660:	2200      	movs	r2, #0
 8001662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001666:	2200      	movs	r2, #0
 8001668:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_SPI2_Init+0xa8>)
 800166c:	2200      	movs	r2, #0
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001678:	2200      	movs	r2, #0
 800167a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_SPI2_Init+0xa8>)
 800167e:	2200      	movs	r2, #0
 8001680:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_SPI2_Init+0xa8>)
 800168a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800168e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001692:	2200      	movs	r2, #0
 8001694:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_SPI2_Init+0xa8>)
 8001698:	f00b fa72 	bl	800cb80 <HAL_SPI_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80016a2:	f000 fc45 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	24001684 	.word	0x24001684
 80016b0:	40003800 	.word	0x40003800

080016b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016b8:	4b28      	ldr	r3, [pc, #160]	; (800175c <MX_SPI3_Init+0xa8>)
 80016ba:	4a29      	ldr	r2, [pc, #164]	; (8001760 <MX_SPI3_Init+0xac>)
 80016bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <MX_SPI3_Init+0xa8>)
 80016c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016c6:	4b25      	ldr	r3, [pc, #148]	; (800175c <MX_SPI3_Init+0xa8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <MX_SPI3_Init+0xa8>)
 80016ce:	220f      	movs	r2, #15
 80016d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <MX_SPI3_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <MX_SPI3_Init+0xa8>)
 80016da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_SPI3_Init+0xa8>)
 80016e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_SPI3_Init+0xa8>)
 80016ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016ee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_SPI3_Init+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <MX_SPI3_Init+0xa8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_SPI3_Init+0xa8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_SPI3_Init+0xa8>)
 8001704:	2200      	movs	r2, #0
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_SPI3_Init+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_SPI3_Init+0xa8>)
 8001710:	2200      	movs	r2, #0
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_SPI3_Init+0xa8>)
 8001716:	2200      	movs	r2, #0
 8001718:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_SPI3_Init+0xa8>)
 800171c:	2200      	movs	r2, #0
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_SPI3_Init+0xa8>)
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <MX_SPI3_Init+0xa8>)
 8001728:	2200      	movs	r2, #0
 800172a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_SPI3_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_SPI3_Init+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_SPI3_Init+0xa8>)
 800173a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_SPI3_Init+0xa8>)
 8001742:	2200      	movs	r2, #0
 8001744:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_SPI3_Init+0xa8>)
 8001748:	f00b fa1a 	bl	800cb80 <HAL_SPI_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001752:	f000 fbed 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2400170c 	.word	0x2400170c
 8001760:	40003c00 	.word	0x40003c00

08001764 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <MX_SPI4_Init+0xac>)
 800176a:	4a2a      	ldr	r2, [pc, #168]	; (8001814 <MX_SPI4_Init+0xb0>)
 800176c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <MX_SPI4_Init+0xac>)
 8001770:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001774:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <MX_SPI4_Init+0xac>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <MX_SPI4_Init+0xac>)
 800177e:	220f      	movs	r2, #15
 8001780:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <MX_SPI4_Init+0xac>)
 8001784:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001788:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_SPI4_Init+0xac>)
 800178c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001790:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_SPI4_Init+0xac>)
 8001794:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001798:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_SPI4_Init+0xac>)
 800179c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017a0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_SPI4_Init+0xac>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_SPI4_Init+0xac>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_SPI4_Init+0xac>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_SPI4_Init+0xac>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_SPI4_Init+0xac>)
 80017bc:	2200      	movs	r2, #0
 80017be:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_SPI4_Init+0xac>)
 80017c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_SPI4_Init+0xac>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <MX_SPI4_Init+0xac>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_SPI4_Init+0xac>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <MX_SPI4_Init+0xac>)
 80017dc:	2200      	movs	r2, #0
 80017de:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_SPI4_Init+0xac>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <MX_SPI4_Init+0xac>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_SPI4_Init+0xac>)
 80017ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_SPI4_Init+0xac>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_SPI4_Init+0xac>)
 80017fc:	f00b f9c0 	bl	800cb80 <HAL_SPI_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_SPI4_Init+0xa6>
  {
    Error_Handler();
 8001806:	f000 fb93 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	24001794 	.word	0x24001794
 8001814:	40013400 	.word	0x40013400

08001818 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <MX_SPI6_Init+0xa8>)
 800181e:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <MX_SPI6_Init+0xac>)
 8001820:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001824:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001828:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <MX_SPI6_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001832:	220f      	movs	r2, #15
 8001834:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183c:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001844:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001848:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800184c:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001854:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_SPI6_Init+0xa8>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001864:	2200      	movs	r2, #0
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_SPI6_Init+0xa8>)
 800186a:	2200      	movs	r2, #0
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001870:	2200      	movs	r2, #0
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800187a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_SPI6_Init+0xa8>)
 800187e:	2200      	movs	r2, #0
 8001880:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001884:	2200      	movs	r2, #0
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <MX_SPI6_Init+0xa8>)
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001890:	2200      	movs	r2, #0
 8001892:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <MX_SPI6_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_SPI6_Init+0xa8>)
 800189c:	2200      	movs	r2, #0
 800189e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <MX_SPI6_Init+0xa8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_SPI6_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_SPI6_Init+0xa8>)
 80018ae:	f00b f967 	bl	800cb80 <HAL_SPI_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_SPI6_Init+0xa4>
  {
    Error_Handler();
 80018b8:	f000 fb3a 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2400181c 	.word	0x2400181c
 80018c4:	58001400 	.word	0x58001400

080018c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b09c      	sub	sp, #112	; 0x70
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2234      	movs	r2, #52	; 0x34
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f011 fe4a 	bl	801359c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001908:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <MX_TIM1_Init+0x180>)
 800190a:	4a50      	ldr	r2, [pc, #320]	; (8001a4c <MX_TIM1_Init+0x184>)
 800190c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800190e:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <MX_TIM1_Init+0x180>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <MX_TIM1_Init+0x180>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <MX_TIM1_Init+0x180>)
 800191c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001920:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <MX_TIM1_Init+0x180>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <MX_TIM1_Init+0x180>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <MX_TIM1_Init+0x180>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001934:	4844      	ldr	r0, [pc, #272]	; (8001a48 <MX_TIM1_Init+0x180>)
 8001936:	f00b ff2c 	bl	800d792 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001940:	f000 faf6 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800194a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800194e:	4619      	mov	r1, r3
 8001950:	483d      	ldr	r0, [pc, #244]	; (8001a48 <MX_TIM1_Init+0x180>)
 8001952:	f00c fd05 	bl	800e360 <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800195c:	f000 fae8 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001960:	4839      	ldr	r0, [pc, #228]	; (8001a48 <MX_TIM1_Init+0x180>)
 8001962:	f00c f8d2 	bl	800db0a <HAL_TIM_PWM_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800196c:	f000 fae0 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800197c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001980:	4619      	mov	r1, r3
 8001982:	4831      	ldr	r0, [pc, #196]	; (8001a48 <MX_TIM1_Init+0x180>)
 8001984:	f00d fa56 	bl	800ee34 <HAL_TIMEx_MasterConfigSynchronization>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800198e:	f000 facf 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001992:	2360      	movs	r3, #96	; 0x60
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199e:	2300      	movs	r3, #0
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4824      	ldr	r0, [pc, #144]	; (8001a48 <MX_TIM1_Init+0x180>)
 80019b8:	f00c fbbe 	bl	800e138 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019c2:	f000 fab5 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ca:	2204      	movs	r2, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	481e      	ldr	r0, [pc, #120]	; (8001a48 <MX_TIM1_Init+0x180>)
 80019d0:	f00c fbb2 	bl	800e138 <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80019da:	f000 faa9 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e2:	2208      	movs	r2, #8
 80019e4:	4619      	mov	r1, r3
 80019e6:	4818      	ldr	r0, [pc, #96]	; (8001a48 <MX_TIM1_Init+0x180>)
 80019e8:	f00c fba6 	bl	800e138 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80019f2:	f000 fa9d 	bl	8001f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MX_TIM1_Init+0x180>)
 8001a2c:	f00d fa9e 	bl	800ef6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001a36:	f000 fa7b 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM1_Init+0x180>)
 8001a3c:	f001 fc2e 	bl	800329c <HAL_TIM_MspPostInit>

}
 8001a40:	bf00      	nop
 8001a42:	3770      	adds	r7, #112	; 0x70
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	240018a4 	.word	0x240018a4
 8001a4c:	40010000 	.word	0x40010000

08001a50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_TIM2_Init+0x94>)
 8001a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_TIM2_Init+0x94>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <MX_TIM2_Init+0x94>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 655350;
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_TIM2_Init+0x94>)
 8001a84:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <MX_TIM2_Init+0x98>)
 8001a86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_TIM2_Init+0x94>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_TIM2_Init+0x94>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a94:	4813      	ldr	r0, [pc, #76]	; (8001ae4 <MX_TIM2_Init+0x94>)
 8001a96:	f00b fe7c 	bl	800d792 <HAL_TIM_Base_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001aa0:	f000 fa46 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <MX_TIM2_Init+0x94>)
 8001ab2:	f00c fc55 	bl	800e360 <HAL_TIM_ConfigClockSource>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001abc:	f000 fa38 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_TIM2_Init+0x94>)
 8001ace:	f00d f9b1 	bl	800ee34 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ad8:	f000 fa2a 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	240018f0 	.word	0x240018f0
 8001ae8:	0009fff6 	.word	0x0009fff6

08001aec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	; 0x38
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	615a      	str	r2, [r3, #20]
 8001b1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001b20:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <MX_TIM4_Init+0xec>)
 8001b22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 27500;
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001b26:	f646 326c 	movw	r2, #27500	; 0x6b6c
 8001b2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001b34:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b46:	4823      	ldr	r0, [pc, #140]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001b48:	f00b fe23 	bl	800d792 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001b52:	f000 f9ed 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b60:	4619      	mov	r1, r3
 8001b62:	481c      	ldr	r0, [pc, #112]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001b64:	f00c fbfc 	bl	800e360 <HAL_TIM_ConfigClockSource>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8001b6e:	f000 f9df 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b72:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001b74:	f00b ffc9 	bl	800db0a <HAL_TIM_PWM_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001b7e:	f000 f9d7 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001b92:	f00d f94f 	bl	800ee34 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001b9c:	f000 f9c8 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba0:	2360      	movs	r3, #96	; 0x60
 8001ba2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001bb8:	f00c fabe 	bl	800e138 <HAL_TIM_PWM_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001bc2:	f000 f9b5 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <MX_TIM4_Init+0xe8>)
 8001bc8:	f001 fb68 	bl	800329c <HAL_TIM_MspPostInit>

}
 8001bcc:	bf00      	nop
 8001bce:	3738      	adds	r7, #56	; 0x38
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2400193c 	.word	0x2400193c
 8001bd8:	40000800 	.word	0x40000800

08001bdc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b09c      	sub	sp, #112	; 0x70
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	615a      	str	r2, [r3, #20]
 8001c0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2234      	movs	r2, #52	; 0x34
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f011 fcc0 	bl	801359c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c1c:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c1e:	4a55      	ldr	r2, [pc, #340]	; (8001d74 <MX_TIM8_Init+0x198>)
 8001c20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c22:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c28:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001c2e:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c36:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b4b      	ldr	r3, [pc, #300]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c48:	4849      	ldr	r0, [pc, #292]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c4a:	f00b fda2 	bl	800d792 <HAL_TIM_Base_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001c54:	f000 f96c 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c62:	4619      	mov	r1, r3
 8001c64:	4842      	ldr	r0, [pc, #264]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c66:	f00c fb7b 	bl	800e360 <HAL_TIM_ConfigClockSource>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001c70:	f000 f95e 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c74:	483e      	ldr	r0, [pc, #248]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c76:	f00b ff48 	bl	800db0a <HAL_TIM_PWM_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001c80:	f000 f956 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001c84:	483a      	ldr	r0, [pc, #232]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001c86:	f00b fedf 	bl	800da48 <HAL_TIM_OC_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001c90:	f000 f94e 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ca0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4832      	ldr	r0, [pc, #200]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001ca8:	f00d f8c4 	bl	800ee34 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8001cb2:	f000 f93d 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb6:	2360      	movs	r3, #96	; 0x60
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4825      	ldr	r0, [pc, #148]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001cdc:	f00c fa2c 	bl	800e138 <HAL_TIM_PWM_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001ce6:	f000 f923 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481f      	ldr	r0, [pc, #124]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001cf4:	f00c fa20 	bl	800e138 <HAL_TIM_PWM_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001cfe:	f000 f917 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4818      	ldr	r0, [pc, #96]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001d10:	f00c f998 	bl	800e044 <HAL_TIM_OC_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001d1a:	f000 f909 	bl	8001f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4807      	ldr	r0, [pc, #28]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001d54:	f00d f90a 	bl	800ef6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8001d5e:	f000 f8e7 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d62:	4803      	ldr	r0, [pc, #12]	; (8001d70 <MX_TIM8_Init+0x194>)
 8001d64:	f001 fa9a 	bl	800329c <HAL_TIM_MspPostInit>

}
 8001d68:	bf00      	nop
 8001d6a:	3770      	adds	r7, #112	; 0x70
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	24001988 	.word	0x24001988
 8001d74:	40010400 	.word	0x40010400

08001d78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <MX_DMA_Init+0x3c>)
 8001d80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <MX_DMA_Init+0x3c>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_DMA_Init+0x3c>)
 8001d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	200c      	movs	r0, #12
 8001da2:	f003 fe9e 	bl	8005ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001da6:	200c      	movs	r0, #12
 8001da8:	f003 feb5 	bl	8005b16 <HAL_NVIC_EnableIRQ>

}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	58024400 	.word	0x58024400

08001db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	; 0x30
 8001dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dce:	4b54      	ldr	r3, [pc, #336]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dde:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dec:	4b4c      	ldr	r3, [pc, #304]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	4a4b      	ldr	r2, [pc, #300]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dfc:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0a:	4b45      	ldr	r3, [pc, #276]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e10:	4a43      	ldr	r2, [pc, #268]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2e:	4a3c      	ldr	r2, [pc, #240]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e38:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e56:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <MX_GPIO_Init+0x168>)
 8001e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FAULT_LED_Pin|BRD_EN_Pin, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2106      	movs	r1, #6
 8001e86:	4827      	ldr	r0, [pc, #156]	; (8001f24 <MX_GPIO_Init+0x16c>)
 8001e88:	f006 fb9e 	bl	80085c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DRV1_EN_Pin|INV2_EN_Pin|DRV2_EN_Pin, GPIO_PIN_RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f248 2108 	movw	r1, #33288	; 0x8208
 8001e92:	4825      	ldr	r0, [pc, #148]	; (8001f28 <MX_GPIO_Init+0x170>)
 8001e94:	f006 fb98 	bl	80085c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INV1_EN_GPIO_Port, INV1_EN_Pin, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e9e:	4823      	ldr	r0, [pc, #140]	; (8001f2c <MX_GPIO_Init+0x174>)
 8001ea0:	f006 fb92 	bl	80085c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FAULT_LED_Pin BRD_EN_Pin */
  GPIO_InitStruct.Pin = FAULT_LED_Pin|BRD_EN_Pin;
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	481a      	ldr	r0, [pc, #104]	; (8001f24 <MX_GPIO_Init+0x16c>)
 8001ebc:	f006 f9dc 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAULT1_Pin nFault2_Pin */
  GPIO_InitStruct.Pin = FAULT1_Pin|nFault2_Pin;
 8001ec0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4814      	ldr	r0, [pc, #80]	; (8001f28 <MX_GPIO_Init+0x170>)
 8001ed6:	f006 f9cf 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV1_EN_Pin INV2_EN_Pin DRV2_EN_Pin */
  GPIO_InitStruct.Pin = DRV1_EN_Pin|INV2_EN_Pin|DRV2_EN_Pin;
 8001eda:	f248 2308 	movw	r3, #33288	; 0x8208
 8001ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480d      	ldr	r0, [pc, #52]	; (8001f28 <MX_GPIO_Init+0x170>)
 8001ef4:	f006 f9c0 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pin : INV1_EN_Pin */
  GPIO_InitStruct.Pin = INV1_EN_Pin;
 8001ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(INV1_EN_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4806      	ldr	r0, [pc, #24]	; (8001f2c <MX_GPIO_Init+0x174>)
 8001f12:	f006 f9b1 	bl	8008278 <HAL_GPIO_Init>

}
 8001f16:	bf00      	nop
 8001f18:	3730      	adds	r7, #48	; 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	58024400 	.word	0x58024400
 8001f24:	58020000 	.word	0x58020000
 8001f28:	58020c00 	.word	0x58020c00
 8001f2c:	58020800 	.word	0x58020800

08001f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f34:	b672      	cpsid	i
}
 8001f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	4801      	ldr	r0, [pc, #4]	; (8001f44 <Error_Handler+0x14>)
 8001f3e:	f006 fb43 	bl	80085c8 <HAL_GPIO_WritePin>
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <Error_Handler+0x12>
 8001f44:	58020000 	.word	0x58020000

08001f48 <get_pos_offset>:

/*********************************************************************
 * Functions Implimentation
 * ******************************************************************/

SENSOR_OFFSET_E get_pos_offset(TIM_TypeDef *timer, SPI_HandleTypeDef *encoder_spi){
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b0ef      	sub	sp, #444	; 0x1bc
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f52:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001f56:	6018      	str	r0, [r3, #0]
 8001f58:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f5c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001f60:	6019      	str	r1, [r3, #0]
 8001f62:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f66:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f6a:	601a      	str	r2, [r3, #0]
	SENSOR_OFFSET_E ret_val;
	int Va, Vb, Vc, min_val;
	int32_t tim_period = timer->ARR;
 8001f6c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	uint32_t samples = LOOPS_TO_RUN * NUMBER_OF_STEPS_PER_LOOP;
 8001f7c:	231e      	movs	r3, #30
 8001f7e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	float positions_forward[LOOPS_TO_RUN][NUMBER_OF_STEPS_PER_LOOP];
	float positions_backwards[LOOPS_TO_RUN][NUMBER_OF_STEPS_PER_LOOP];
	int32_t locations[NUMBER_OF_STEPS_PER_LOOP];
	float avg_pos[NUMBER_OF_STEPS_PER_LOOP] = {0};
 8001f82:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	2328      	movs	r3, #40	; 0x28
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2100      	movs	r1, #0
 8001f92:	f011 fb03 	bl	801359c <memset>
	uint16_t position;
	int request_pos = 0xffff;
 8001f96:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f9a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa2:	601a      	str	r2, [r3, #0]

	for(int x=0; x < NUMBER_OF_STEPS_PER_LOOP; x++){
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001faa:	e015      	b.n	8001fd8 <get_pos_offset+0x90>
		locations[x] = (LOOP_SIZE * x) / NUMBER_OF_STEPS_PER_LOOP;
 8001fac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fb0:	029b      	lsls	r3, r3, #10
 8001fb2:	4a79      	ldr	r2, [pc, #484]	; (8002198 <get_pos_offset+0x250>)
 8001fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb8:	1092      	asrs	r2, r2, #2
 8001fba:	17db      	asrs	r3, r3, #31
 8001fbc:	1ad1      	subs	r1, r2, r3
 8001fbe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001fc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fc6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int x=0; x < NUMBER_OF_STEPS_PER_LOOP; x++){
 8001fce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001fd8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fdc:	2b09      	cmp	r3, #9
 8001fde:	dde5      	ble.n	8001fac <get_pos_offset+0x64>
	}

	for(int32_t loop_cnt=0; loop_cnt < LOOPS_TO_RUN; loop_cnt++){
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001fe6:	e0b1      	b.n	800214c <get_pos_offset+0x204>
		for(int32_t step_cnt=0; step_cnt < NUMBER_OF_STEPS_PER_LOOP; step_cnt++){
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fee:	e0a3      	b.n	8002138 <get_pos_offset+0x1f0>
			inv_parkclark(&Va, &Vb, &Vc, locations[step_cnt], POS_OFFSET_TEST_V, 0);
 8001ff0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001ff4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ff8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002004:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8002008:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 800200c:	2400      	movs	r4, #0
 800200e:	9401      	str	r4, [sp, #4]
 8002010:	f240 24ee 	movw	r4, #750	; 0x2ee
 8002014:	9400      	str	r4, [sp, #0]
 8002016:	f7fe f9d3 	bl	80003c0 <inv_parkclark>
			min_val = find_min_voltage(Va, Vb, Vc);
 800201a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800201e:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8002022:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa92 	bl	8000550 <find_min_voltage>
 800202c:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
			Va -= min_val;
 8002030:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002034:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
			Vb -= min_val;
 800203e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002042:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			Vc -= min_val;
 800204c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002050:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			timer->CCR1 = (Va*tim_period)/DC_BUS_V;
 800205a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800205e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	4a4d      	ldr	r2, [pc, #308]	; (800219c <get_pos_offset+0x254>)
 8002068:	fb82 1203 	smull	r1, r2, r2, r3
 800206c:	1352      	asrs	r2, r2, #13
 800206e:	17db      	asrs	r3, r3, #31
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	461a      	mov	r2, r3
 8002074:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002078:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	635a      	str	r2, [r3, #52]	; 0x34
			timer->CCR2 = (Vb*tim_period)/DC_BUS_V;
 8002080:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002084:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	4a43      	ldr	r2, [pc, #268]	; (800219c <get_pos_offset+0x254>)
 800208e:	fb82 1203 	smull	r1, r2, r2, r3
 8002092:	1352      	asrs	r2, r2, #13
 8002094:	17db      	asrs	r3, r3, #31
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	461a      	mov	r2, r3
 800209a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800209e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
			timer->CCR3 = (Vc*tim_period)/DC_BUS_V;
 80020a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80020aa:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	4a3a      	ldr	r2, [pc, #232]	; (800219c <get_pos_offset+0x254>)
 80020b4:	fb82 1203 	smull	r1, r2, r2, r3
 80020b8:	1352      	asrs	r2, r2, #13
 80020ba:	17db      	asrs	r3, r3, #31
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80020c4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(WAIT_TIME);
 80020cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020d0:	f001 fbb0 	bl	8003834 <HAL_Delay>
			HAL_SPI_TransmitReceive(encoder_spi, (uint8_t*) &request_pos, (uint8_t*) &position, 1, 100);
 80020d4:	f107 0216 	add.w	r2, r7, #22
 80020d8:	f107 0110 	add.w	r1, r7, #16
 80020dc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80020e0:	f5a3 70d6 	sub.w	r0, r3, #428	; 0x1ac
 80020e4:	2364      	movs	r3, #100	; 0x64
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	6800      	ldr	r0, [r0, #0]
 80020ec:	f00b f840 	bl	800d170 <HAL_SPI_TransmitReceive>
			positions_forward[loop_cnt][step_cnt] = (position >> 4) * 0.087890625f;
 80020f0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80020f4:	f5a3 73cd 	sub.w	r3, r3, #410	; 0x19a
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80021a0 <get_pos_offset+0x258>
 800210a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8002126:	443b      	add	r3, r7
 8002128:	3bd0      	subs	r3, #208	; 0xd0
 800212a:	edc3 7a00 	vstr	s15, [r3]
		for(int32_t step_cnt=0; step_cnt < NUMBER_OF_STEPS_PER_LOOP; step_cnt++){
 800212e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002132:	3301      	adds	r3, #1
 8002134:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002138:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800213c:	2b09      	cmp	r3, #9
 800213e:	f77f af57 	ble.w	8001ff0 <get_pos_offset+0xa8>
	for(int32_t loop_cnt=0; loop_cnt < LOOPS_TO_RUN; loop_cnt++){
 8002142:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002146:	3301      	adds	r3, #1
 8002148:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800214c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002150:	2b02      	cmp	r3, #2
 8002152:	f77f af49 	ble.w	8001fe8 <get_pos_offset+0xa0>
		}
	}
	timer->CCR1 = 0;
 8002156:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800215a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	635a      	str	r2, [r3, #52]	; 0x34
	timer->CCR2 = 0;
 8002164:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002168:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	639a      	str	r2, [r3, #56]	; 0x38
	timer->CCR3 = 0;
 8002172:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002176:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2200      	movs	r2, #0
 800217e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(1000);
 8002180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002184:	f001 fb56 	bl	8003834 <HAL_Delay>
	for(int32_t loop_cnt=0; loop_cnt < LOOPS_TO_RUN; loop_cnt++){
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800218e:	e0b8      	b.n	8002302 <get_pos_offset+0x3ba>
		for(int32_t step_cnt = NUMBER_OF_STEPS_PER_LOOP - 1; step_cnt >= 0; step_cnt -= 1){
 8002190:	2309      	movs	r3, #9
 8002192:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002196:	e0aa      	b.n	80022ee <get_pos_offset+0x3a6>
 8002198:	66666667 	.word	0x66666667
 800219c:	45e7b273 	.word	0x45e7b273
 80021a0:	3db40000 	.word	0x3db40000
			inv_parkclark(&Va, &Vb, &Vc, locations[step_cnt], POS_OFFSET_TEST_V, 0);
 80021a4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80021a8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021ac:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80021b8:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 80021bc:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 80021c0:	2400      	movs	r4, #0
 80021c2:	9401      	str	r4, [sp, #4]
 80021c4:	f240 24ee 	movw	r4, #750	; 0x2ee
 80021c8:	9400      	str	r4, [sp, #0]
 80021ca:	f7fe f8f9 	bl	80003c0 <inv_parkclark>
			min_val = find_min_voltage(Va, Vb, Vc);
 80021ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021d2:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80021d6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f9b8 	bl	8000550 <find_min_voltage>
 80021e0:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
			Va -= min_val;
 80021e4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80021e8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
			Vb -= min_val;
 80021f2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80021f6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			Vc -= min_val;
 8002200:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002204:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			timer->CCR1 = (Va*tim_period)/DC_BUS_V;
 800220e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002212:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	4ad9      	ldr	r2, [pc, #868]	; (8002580 <get_pos_offset+0x638>)
 800221c:	fb82 1203 	smull	r1, r2, r2, r3
 8002220:	1352      	asrs	r2, r2, #13
 8002222:	17db      	asrs	r3, r3, #31
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	461a      	mov	r2, r3
 8002228:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800222c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	635a      	str	r2, [r3, #52]	; 0x34
			timer->CCR2 = (Vb*tim_period)/DC_BUS_V;
 8002234:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002238:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	4acf      	ldr	r2, [pc, #828]	; (8002580 <get_pos_offset+0x638>)
 8002242:	fb82 1203 	smull	r1, r2, r2, r3
 8002246:	1352      	asrs	r2, r2, #13
 8002248:	17db      	asrs	r3, r3, #31
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	461a      	mov	r2, r3
 800224e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002252:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
			timer->CCR3 = (Vc*tim_period)/DC_BUS_V;
 800225a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800225e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	4ac6      	ldr	r2, [pc, #792]	; (8002580 <get_pos_offset+0x638>)
 8002268:	fb82 1203 	smull	r1, r2, r2, r3
 800226c:	1352      	asrs	r2, r2, #13
 800226e:	17db      	asrs	r3, r3, #31
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	461a      	mov	r2, r3
 8002274:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002278:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(WAIT_TIME);
 8002280:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002284:	f001 fad6 	bl	8003834 <HAL_Delay>
			HAL_SPI_TransmitReceive(encoder_spi, (uint8_t*) &request_pos, (uint8_t*) &position, 1, 100);
 8002288:	f107 0216 	add.w	r2, r7, #22
 800228c:	f107 0110 	add.w	r1, r7, #16
 8002290:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002294:	f5a3 70d6 	sub.w	r0, r3, #428	; 0x1ac
 8002298:	2364      	movs	r3, #100	; 0x64
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2301      	movs	r3, #1
 800229e:	6800      	ldr	r0, [r0, #0]
 80022a0:	f00a ff66 	bl	800d170 <HAL_SPI_TransmitReceive>
			positions_backwards[loop_cnt][step_cnt] = (position >> 4) * 0.087890625f;
 80022a4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80022a8:	f5a3 73cd 	sub.w	r3, r3, #410	; 0x19a
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ba:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8002584 <get_pos_offset+0x63c>
 80022be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80022c6:	f5a3 71a4 	sub.w	r1, r3, #328	; 0x148
 80022ca:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	edc3 7a00 	vstr	s15, [r3]
		for(int32_t step_cnt = NUMBER_OF_STEPS_PER_LOOP - 1; step_cnt >= 0; step_cnt -= 1){
 80022e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80022e8:	3b01      	subs	r3, #1
 80022ea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80022ee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f6bf af56 	bge.w	80021a4 <get_pos_offset+0x25c>
	for(int32_t loop_cnt=0; loop_cnt < LOOPS_TO_RUN; loop_cnt++){
 80022f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022fc:	3301      	adds	r3, #1
 80022fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002302:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002306:	2b02      	cmp	r3, #2
 8002308:	f77f af42 	ble.w	8002190 <get_pos_offset+0x248>
		}
	}
	timer->CCR1 = 0;
 800230c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002310:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2200      	movs	r2, #0
 8002318:	635a      	str	r2, [r3, #52]	; 0x34
	timer->CCR2 = 0;
 800231a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800231e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	639a      	str	r2, [r3, #56]	; 0x38
	timer->CCR3 = 0;
 8002328:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800232c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(1000);
 8002336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800233a:	f001 fa7b 	bl	8003834 <HAL_Delay>

	//Lets do a bunch of math (Kill me)
	ret_val.sign = 1;
 800233e:	2301      	movs	r3, #1
 8002340:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	ret_val.pole_pairs = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	ret_val.fixedpt_offset = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	float offset_mdeg = 0.0f;
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float step_size_mech = positions_forward[0][1] - positions_forward[0][0];
 8002358:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 800235c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002364:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198

	if(fabs(step_size_mech) > E_DEGREE_CHANGE_IN_STEP*2){
 8002368:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800236c:	eef0 7ae7 	vabs.f32	s15, s15
 8002370:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8002588 <get_pos_offset+0x640>
 8002374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237c:	dd17      	ble.n	80023ae <get_pos_offset+0x466>
		if(step_size_mech < 0){
 800237e:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8002382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	d508      	bpl.n	800239e <get_pos_offset+0x456>
		step_size_mech += 360;
 800238c:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8002390:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002598 <get_pos_offset+0x650>
 8002394:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002398:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
 800239c:	e007      	b.n	80023ae <get_pos_offset+0x466>
		}else{
		step_size_mech -= 360;
 800239e:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 80023a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002598 <get_pos_offset+0x650>
 80023a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023aa:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
		}
	}
	if(step_size_mech < 0){
 80023ae:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 80023b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	d509      	bpl.n	80023d0 <get_pos_offset+0x488>
		step_size_mech=-step_size_mech;
 80023bc:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 80023c0:	eef1 7a67 	vneg.f32	s15, s15
 80023c4:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
		ret_val.sign=-1;
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
 80023cc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	}
	ret_val.pole_pairs = (int)E_DEGREE_CHANGE_IN_STEP/step_size_mech+0.5;
 80023d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800258c <get_pos_offset+0x644>
 80023d4:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 80023d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023e0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80023e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023e8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80023ec:	ee17 3a90 	vmov	r3, s15
 80023f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	float mech_degrees_in_loop = E_DEGREE_CHANGE_IN_LOOP/ret_val.pole_pairs;
 80023f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002400:	eddf 6a65 	vldr	s13, [pc, #404]	; 8002598 <get_pos_offset+0x650>
 8002404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002408:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
	for(int32_t loop_cnt=0; loop_cnt < LOOPS_TO_RUN; loop_cnt++){
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002412:	e082      	b.n	800251a <get_pos_offset+0x5d2>
		for(int32_t step_cnt=0; step_cnt < NUMBER_OF_STEPS_PER_LOOP; step_cnt++){
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800241a:	e075      	b.n	8002508 <get_pos_offset+0x5c0>
			avg_pos[step_cnt] += fmod(positions_forward[loop_cnt][step_cnt],mech_degrees_in_loop);
 800241c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8002434:	443b      	add	r3, r7
 8002436:	3bd0      	subs	r3, #208	; 0xd0
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002440:	edd7 6a5d 	vldr	s13, [r7, #372]	; 0x174
 8002444:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002448:	eeb0 1b46 	vmov.f64	d1, d6
 800244c:	eeb0 0b47 	vmov.f64	d0, d7
 8002450:	f010 ff36 	bl	80132c0 <fmod>
 8002454:	eeb0 6b40 	vmov.f64	d6, d0
 8002458:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800245c:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8002460:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002470:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002474:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002478:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800247c:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8002480:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	edc3 7a00 	vstr	s15, [r3]
			avg_pos[step_cnt] += fmod(positions_backwards[loop_cnt][step_cnt],mech_degrees_in_loop);
 800248c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002490:	f5a3 71a4 	sub.w	r1, r3, #328	; 0x148
 8002494:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024b2:	edd7 6a5d 	vldr	s13, [r7, #372]	; 0x174
 80024b6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80024ba:	eeb0 1b46 	vmov.f64	d1, d6
 80024be:	eeb0 0b47 	vmov.f64	d0, d7
 80024c2:	f010 fefd 	bl	80132c0 <fmod>
 80024c6:	eeb0 6b40 	vmov.f64	d6, d0
 80024ca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80024ce:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80024d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024ea:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80024ee:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80024f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	edc3 7a00 	vstr	s15, [r3]
		for(int32_t step_cnt=0; step_cnt < NUMBER_OF_STEPS_PER_LOOP; step_cnt++){
 80024fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002502:	3301      	adds	r3, #1
 8002504:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002508:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800250c:	2b09      	cmp	r3, #9
 800250e:	dd85      	ble.n	800241c <get_pos_offset+0x4d4>
	for(int32_t loop_cnt=0; loop_cnt < LOOPS_TO_RUN; loop_cnt++){
 8002510:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002514:	3301      	adds	r3, #1
 8002516:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800251a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800251e:	2b02      	cmp	r3, #2
 8002520:	f77f af78 	ble.w	8002414 <get_pos_offset+0x4cc>
		}
	}
	for(int32_t step_cnt=0; step_cnt < NUMBER_OF_STEPS_PER_LOOP; step_cnt++){
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800252a:	e01c      	b.n	8002566 <get_pos_offset+0x61e>
		avg_pos[step_cnt] /= LOOPS_TO_RUN*2;
 800252c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002530:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8002534:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002544:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002548:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800254c:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8002550:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	edc3 7a00 	vstr	s15, [r3]
	for(int32_t step_cnt=0; step_cnt < NUMBER_OF_STEPS_PER_LOOP; step_cnt++){
 800255c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002560:	3301      	adds	r3, #1
 8002562:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002566:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800256a:	2b09      	cmp	r3, #9
 800256c:	ddde      	ble.n	800252c <get_pos_offset+0x5e4>
	}
	float normalized_offset =0;
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for(int32_t idx=0; idx < NUMBER_OF_STEPS_PER_LOOP; idx++){
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800257c:	e04d      	b.n	800261a <get_pos_offset+0x6d2>
 800257e:	bf00      	nop
 8002580:	45e7b273 	.word	0x45e7b273
 8002584:	3db40000 	.word	0x3db40000
 8002588:	42900000 	.word	0x42900000
 800258c:	42100000 	.word	0x42100000
 8002590:	42b40000 	.word	0x42b40000
 8002594:	44800000 	.word	0x44800000
 8002598:	43b40000 	.word	0x43b40000
		normalized_offset += fmod(avg_pos[idx] - ret_val.sign * mech_degrees_in_loop * idx / NUMBER_OF_STEPS_PER_LOOP, mech_degrees_in_loop);
 800259c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80025a0:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80025a4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	ed93 7a00 	vldr	s14, [r3]
 80025b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025bc:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 80025c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025c4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025d4:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80025d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025e4:	edd7 6a5d 	vldr	s13, [r7, #372]	; 0x174
 80025e8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80025ec:	eeb0 1b46 	vmov.f64	d1, d6
 80025f0:	eeb0 0b47 	vmov.f64	d0, d7
 80025f4:	f010 fe64 	bl	80132c0 <fmod>
 80025f8:	eeb0 6b40 	vmov.f64	d6, d0
 80025fc:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002600:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002604:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002608:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800260c:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
	for(int32_t idx=0; idx < NUMBER_OF_STEPS_PER_LOOP; idx++){
 8002610:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002614:	3301      	adds	r3, #1
 8002616:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800261a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800261e:	2b09      	cmp	r3, #9
 8002620:	ddbc      	ble.n	800259c <get_pos_offset+0x654>
	}
	normalized_offset /= NUMBER_OF_STEPS_PER_LOOP;
 8002622:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 8002626:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800262a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800262e:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
	offset_mdeg = ZERO_POS / ret_val.pole_pairs - normalized_offset;
 8002632:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263e:	ed5f 6a2c 	vldr	s13, [pc, #-176]	; 8002590 <get_pos_offset+0x648>
 8002642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002646:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800264a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264e:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
	ret_val.fixedpt_offset = (int)(LOOP_SIZE * offset_mdeg / E_DEGREE_CHANGE_IN_LOOP + ret_val.sign * 0.5);
 8002652:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 8002656:	ed1f 7a31 	vldr	s14, [pc, #-196]	; 8002594 <get_pos_offset+0x64c>
 800265a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800265e:	ed5f 6a32 	vldr	s13, [pc, #-200]	; 8002598 <get_pos_offset+0x650>
 8002662:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002666:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800266a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002676:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800267a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800267e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002682:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002686:	ee17 3a90 	vmov	r3, s15
 800268a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	return(ret_val);
 800268e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002692:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461c      	mov	r4, r3
 800269a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800269e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80026a6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80026aa:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd90      	pop	{r4, r7, pc}

080026b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_MspInit+0x5c>)
 80026c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026c4:	4a13      	ldr	r2, [pc, #76]	; (8002714 <HAL_MspInit+0x5c>)
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_MspInit+0x5c>)
 80026d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_MspInit+0x5c>)
 80026de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <HAL_MspInit+0x5c>)
 80026e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_MspInit+0x5c>)
 80026ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 80026fa:	2010      	movs	r0, #16
 80026fc:	f001 f8be 	bl	800387c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002700:	f001 f8e4 	bl	80038cc <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002704:	2000      	movs	r0, #0
 8002706:	f001 f8cd 	bl	80038a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	58024400 	.word	0x58024400

08002718 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0be      	sub	sp, #248	; 0xf8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002730:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002734:	22b4      	movs	r2, #180	; 0xb4
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f010 ff2f 	bl	801359c <memset>
  if(hadc->Instance==ADC1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4ac0      	ldr	r2, [pc, #768]	; (8002a44 <HAL_ADC_MspInit+0x32c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	f040 808c 	bne.w	8002862 <HAL_ADC_MspInit+0x14a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800274a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002758:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800275c:	4618      	mov	r0, r3
 800275e:	f008 f97b 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8002768:	f7ff fbe2 	bl	8001f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800276c:	4bb6      	ldr	r3, [pc, #728]	; (8002a48 <HAL_ADC_MspInit+0x330>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	4ab5      	ldr	r2, [pc, #724]	; (8002a48 <HAL_ADC_MspInit+0x330>)
 8002774:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002776:	4bb4      	ldr	r3, [pc, #720]	; (8002a48 <HAL_ADC_MspInit+0x330>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10e      	bne.n	800279c <HAL_ADC_MspInit+0x84>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800277e:	4bb3      	ldr	r3, [pc, #716]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 8002780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002784:	4ab1      	ldr	r2, [pc, #708]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 8002786:	f043 0320 	orr.w	r3, r3, #32
 800278a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800278e:	4baf      	ldr	r3, [pc, #700]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 8002790:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	4bab      	ldr	r3, [pc, #684]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a2:	4aaa      	ldr	r2, [pc, #680]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ac:	4ba7      	ldr	r3, [pc, #668]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ba:	4ba4      	ldr	r3, [pc, #656]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80027bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c0:	4aa2      	ldr	r2, [pc, #648]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ca:	4ba0      	ldr	r3, [pc, #640]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80027cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d8:	4b9c      	ldr	r3, [pc, #624]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027de:	4a9b      	ldr	r2, [pc, #620]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e8:	4b98      	ldr	r3, [pc, #608]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80027ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	6a3b      	ldr	r3, [r7, #32]
    PA0     ------> ADC1_INP16
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027fc:	2303      	movs	r3, #3
 80027fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800280c:	4619      	mov	r1, r3
 800280e:	4890      	ldr	r0, [pc, #576]	; (8002a50 <HAL_ADC_MspInit+0x338>)
 8002810:	f005 fd32 	bl	8008278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002814:	2330      	movs	r3, #48	; 0x30
 8002816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800281a:	2303      	movs	r3, #3
 800281c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002826:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800282a:	4619      	mov	r1, r3
 800282c:	4889      	ldr	r0, [pc, #548]	; (8002a54 <HAL_ADC_MspInit+0x33c>)
 800282e:	f005 fd23 	bl	8008278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002832:	2301      	movs	r3, #1
 8002834:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002838:	2303      	movs	r3, #3
 800283a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002848:	4619      	mov	r1, r3
 800284a:	4883      	ldr	r0, [pc, #524]	; (8002a58 <HAL_ADC_MspInit+0x340>)
 800284c:	f005 fd14 	bl	8008278 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	2012      	movs	r0, #18
 8002856:	f003 f944 	bl	8005ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800285a:	2012      	movs	r0, #18
 800285c:	f003 f95b 	bl	8005b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002860:	e0ec      	b.n	8002a3c <HAL_ADC_MspInit+0x324>
  else if(hadc->Instance==ADC2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a7d      	ldr	r2, [pc, #500]	; (8002a5c <HAL_ADC_MspInit+0x344>)
 8002868:	4293      	cmp	r3, r2
 800286a:	f040 809f 	bne.w	80029ac <HAL_ADC_MspInit+0x294>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800286e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800287c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002880:	4618      	mov	r0, r3
 8002882:	f008 f8e9 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_ADC_MspInit+0x178>
      Error_Handler();
 800288c:	f7ff fb50 	bl	8001f30 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002890:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_ADC_MspInit+0x330>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	4a6c      	ldr	r2, [pc, #432]	; (8002a48 <HAL_ADC_MspInit+0x330>)
 8002898:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800289a:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <HAL_ADC_MspInit+0x330>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d10e      	bne.n	80028c0 <HAL_ADC_MspInit+0x1a8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80028a2:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80028a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028a8:	4a68      	ldr	r2, [pc, #416]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80028aa:	f043 0320 	orr.w	r3, r3, #32
 80028ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028b2:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80028b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c0:	4b62      	ldr	r3, [pc, #392]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80028c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c6:	4a61      	ldr	r2, [pc, #388]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028d0:	4b5e      	ldr	r3, [pc, #376]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80028d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	4b5b      	ldr	r3, [pc, #364]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80028e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e4:	4a59      	ldr	r2, [pc, #356]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ee:	4b57      	ldr	r3, [pc, #348]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80028f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002902:	2303      	movs	r3, #3
 8002904:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002912:	4619      	mov	r1, r3
 8002914:	484f      	ldr	r0, [pc, #316]	; (8002a54 <HAL_ADC_MspInit+0x33c>)
 8002916:	f005 fcaf 	bl	8008278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800291a:	2308      	movs	r3, #8
 800291c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002920:	2303      	movs	r3, #3
 8002922:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002930:	4619      	mov	r1, r3
 8002932:	4847      	ldr	r0, [pc, #284]	; (8002a50 <HAL_ADC_MspInit+0x338>)
 8002934:	f005 fca0 	bl	8008278 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8002938:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 800293a:	4a4a      	ldr	r2, [pc, #296]	; (8002a64 <HAL_ADC_MspInit+0x34c>)
 800293c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800293e:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 8002940:	220a      	movs	r2, #10
 8002942:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002944:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800294a:	4b45      	ldr	r3, [pc, #276]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002950:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 8002952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002956:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002958:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 800295a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800295e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002960:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 8002962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002966:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002968:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 800296a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002970:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 8002972:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002976:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002978:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 800297a:	2200      	movs	r2, #0
 800297c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800297e:	4838      	ldr	r0, [pc, #224]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 8002980:	f003 fbaa 	bl	80060d8 <HAL_DMA_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800298a:	f7ff fad1 	bl	8001f30 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a33      	ldr	r2, [pc, #204]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 8002992:	659a      	str	r2, [r3, #88]	; 0x58
 8002994:	4a32      	ldr	r2, [pc, #200]	; (8002a60 <HAL_ADC_MspInit+0x348>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2100      	movs	r1, #0
 800299e:	2012      	movs	r0, #18
 80029a0:	f003 f89f 	bl	8005ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80029a4:	2012      	movs	r0, #18
 80029a6:	f003 f8b6 	bl	8005b16 <HAL_NVIC_EnableIRQ>
}
 80029aa:	e047      	b.n	8002a3c <HAL_ADC_MspInit+0x324>
  else if(hadc->Instance==ADC3)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2d      	ldr	r2, [pc, #180]	; (8002a68 <HAL_ADC_MspInit+0x350>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d142      	bne.n	8002a3c <HAL_ADC_MspInit+0x324>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80029bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029c8:	4618      	mov	r0, r3
 80029ca:	f008 f845 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_ADC_MspInit+0x2c0>
      Error_Handler();
 80029d4:	f7ff faac 	bl	8001f30 <Error_Handler>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80029da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029de:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80029e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e8:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_ADC_MspInit+0x334>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002a14:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002a18:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002a1c:	f000 ff7a 	bl	8003914 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002a20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002a24:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a28:	f000 ff74 	bl	8003914 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2100      	movs	r1, #0
 8002a30:	207f      	movs	r0, #127	; 0x7f
 8002a32:	f003 f856 	bl	8005ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002a36:	207f      	movs	r0, #127	; 0x7f
 8002a38:	f003 f86d 	bl	8005b16 <HAL_NVIC_EnableIRQ>
}
 8002a3c:	bf00      	nop
 8002a3e:	37f8      	adds	r7, #248	; 0xf8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40022000 	.word	0x40022000
 8002a48:	240019e4 	.word	0x240019e4
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	58020000 	.word	0x58020000
 8002a54:	58020800 	.word	0x58020800
 8002a58:	58020400 	.word	0x58020400
 8002a5c:	40022100 	.word	0x40022100
 8002a60:	240012dc 	.word	0x240012dc
 8002a64:	40020028 	.word	0x40020028
 8002a68:	58026000 	.word	0x58026000

08002a6c <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <HAL_CORDIC_MspInit+0x3c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10e      	bne.n	8002a9c <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_CORDIC_MspInit+0x40>)
 8002a80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002a84:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_CORDIC_MspInit+0x40>)
 8002a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_CORDIC_MspInit+0x40>)
 8002a90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	48024400 	.word	0x48024400
 8002aac:	58024400 	.word	0x58024400

08002ab0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b0b8      	sub	sp, #224	; 0xe0
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ac8:	f107 0318 	add.w	r3, r7, #24
 8002acc:	22b4      	movs	r2, #180	; 0xb4
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f010 fd63 	bl	801359c <memset>
  if(DFSDM1_Init == 0)
 8002ad6:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <HAL_DFSDM_FilterMspInit+0x14c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 808a 	bne.w	8002bf4 <HAL_DFSDM_FilterMspInit+0x144>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002ae0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ae4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aea:	f107 0318 	add.w	r3, r7, #24
 8002aee:	4618      	mov	r0, r3
 8002af0:	f007 ffb2 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8002afa:	f7ff fa19 	bl	8001f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002afe:	4b40      	ldr	r3, [pc, #256]	; (8002c00 <HAL_DFSDM_FilterMspInit+0x150>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3301      	adds	r3, #1
 8002b04:	4a3e      	ldr	r2, [pc, #248]	; (8002c00 <HAL_DFSDM_FilterMspInit+0x150>)
 8002b06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8002b08:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_DFSDM_FilterMspInit+0x150>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10e      	bne.n	8002b2e <HAL_DFSDM_FilterMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002b10:	4b3c      	ldr	r3, [pc, #240]	; (8002c04 <HAL_DFSDM_FilterMspInit+0x154>)
 8002b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b16:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <HAL_DFSDM_FilterMspInit+0x154>)
 8002b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b20:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_DFSDM_FilterMspInit+0x154>)
 8002b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <HAL_DFSDM_FilterMspInit+0x154>)
 8002b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b34:	4a33      	ldr	r2, [pc, #204]	; (8002c04 <HAL_DFSDM_FilterMspInit+0x154>)
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_DFSDM_FilterMspInit+0x154>)
 8002b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_DFSDM_FilterMspInit+0x154>)
 8002b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b52:	4a2c      	ldr	r2, [pc, #176]	; (8002c04 <HAL_DFSDM_FilterMspInit+0x154>)
 8002b54:	f043 0310 	orr.w	r3, r3, #16
 8002b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b5c:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_DFSDM_FilterMspInit+0x154>)
 8002b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    PE10     ------> DFSDM1_DATIN4
    PE11     ------> DFSDM1_CKIN4
    PE12     ------> DFSDM1_DATIN5
    PE13     ------> DFSDM1_CKIN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002b82:	2306      	movs	r3, #6
 8002b84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	481e      	ldr	r0, [pc, #120]	; (8002c08 <HAL_DFSDM_FilterMspInit+0x158>)
 8002b90:	f005 fb72 	bl	8008278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b94:	2304      	movs	r3, #4
 8002b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 8002bac:	2304      	movs	r3, #4
 8002bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4813      	ldr	r0, [pc, #76]	; (8002c08 <HAL_DFSDM_FilterMspInit+0x158>)
 8002bba:	f005 fb5d 	bl	8008278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 8002bbe:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 8002bc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002be2:	4619      	mov	r1, r3
 8002be4:	4809      	ldr	r0, [pc, #36]	; (8002c0c <HAL_DFSDM_FilterMspInit+0x15c>)
 8002be6:	f005 fb47 	bl	8008278 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_DFSDM_FilterMspInit+0x14c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4a02      	ldr	r2, [pc, #8]	; (8002bfc <HAL_DFSDM_FilterMspInit+0x14c>)
 8002bf2:	6013      	str	r3, [r2, #0]
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	37e0      	adds	r7, #224	; 0xe0
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	240019ec 	.word	0x240019ec
 8002c00:	240019e8 	.word	0x240019e8
 8002c04:	58024400 	.word	0x58024400
 8002c08:	58020400 	.word	0x58020400
 8002c0c:	58021000 	.word	0x58021000

08002c10 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0b8      	sub	sp, #224	; 0xe0
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c28:	f107 0318 	add.w	r3, r7, #24
 8002c2c:	22b4      	movs	r2, #180	; 0xb4
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f010 fcb3 	bl	801359c <memset>
  if(DFSDM1_Init == 0)
 8002c36:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <HAL_DFSDM_ChannelMspInit+0x14c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 808a 	bne.w	8002d54 <HAL_DFSDM_ChannelMspInit+0x144>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002c40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8002c46:	2300      	movs	r3, #0
 8002c48:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4a:	f107 0318 	add.w	r3, r7, #24
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f007 ff02 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002c5a:	f7ff f969 	bl	8001f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002c5e:	4b40      	ldr	r3, [pc, #256]	; (8002d60 <HAL_DFSDM_ChannelMspInit+0x150>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	4a3e      	ldr	r2, [pc, #248]	; (8002d60 <HAL_DFSDM_ChannelMspInit+0x150>)
 8002c66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8002c68:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_DFSDM_ChannelMspInit+0x150>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10e      	bne.n	8002c8e <HAL_DFSDM_ChannelMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002c70:	4b3c      	ldr	r3, [pc, #240]	; (8002d64 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c76:	4a3b      	ldr	r2, [pc, #236]	; (8002d64 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c80:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8e:	4b35      	ldr	r3, [pc, #212]	; (8002d64 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c94:	4a33      	ldr	r2, [pc, #204]	; (8002d64 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002c96:	f043 0302 	orr.w	r3, r3, #2
 8002c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c9e:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cac:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb2:	4a2c      	ldr	r2, [pc, #176]	; (8002d64 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002cb4:	f043 0310 	orr.w	r3, r3, #16
 8002cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    PE10     ------> DFSDM1_DATIN4
    PE11     ------> DFSDM1_CKIN4
    PE12     ------> DFSDM1_DATIN5
    PE13     ------> DFSDM1_CKIN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cec:	4619      	mov	r1, r3
 8002cee:	481e      	ldr	r0, [pc, #120]	; (8002d68 <HAL_DFSDM_ChannelMspInit+0x158>)
 8002cf0:	f005 fac2 	bl	8008278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d16:	4619      	mov	r1, r3
 8002d18:	4813      	ldr	r0, [pc, #76]	; (8002d68 <HAL_DFSDM_ChannelMspInit+0x158>)
 8002d1a:	f005 faad 	bl	8008278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 8002d1e:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 8002d22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d26:	2302      	movs	r3, #2
 8002d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d42:	4619      	mov	r1, r3
 8002d44:	4809      	ldr	r0, [pc, #36]	; (8002d6c <HAL_DFSDM_ChannelMspInit+0x15c>)
 8002d46:	f005 fa97 	bl	8008278 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <HAL_DFSDM_ChannelMspInit+0x14c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	4a02      	ldr	r2, [pc, #8]	; (8002d5c <HAL_DFSDM_ChannelMspInit+0x14c>)
 8002d52:	6013      	str	r3, [r2, #0]
  }

}
 8002d54:	bf00      	nop
 8002d56:	37e0      	adds	r7, #224	; 0xe0
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	240019ec 	.word	0x240019ec
 8002d60:	240019e8 	.word	0x240019e8
 8002d64:	58024400 	.word	0x58024400
 8002d68:	58020400 	.word	0x58020400
 8002d6c:	58021000 	.word	0x58021000

08002d70 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b0b6      	sub	sp, #216	; 0xd8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	22b4      	movs	r2, #180	; 0xb4
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f010 fc03 	bl	801359c <memset>
  if(hfdcan->Instance==FDCAN1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <HAL_FDCAN_MspInit+0xbc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d141      	bne.n	8002e24 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002daa:	f107 0310 	add.w	r3, r7, #16
 8002dae:	4618      	mov	r0, r3
 8002db0:	f007 fe52 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 8002dba:	f7ff f8b9 	bl	8001f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <HAL_FDCAN_MspInit+0xc0>)
 8002dc0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002dc4:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <HAL_FDCAN_MspInit+0xc0>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002dce:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_FDCAN_MspInit+0xc0>)
 8002dd0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_FDCAN_MspInit+0xc0>)
 8002dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de2:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <HAL_FDCAN_MspInit+0xc0>)
 8002de4:	f043 0308 	orr.w	r3, r3, #8
 8002de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_FDCAN_MspInit+0xc0>)
 8002dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002e12:	2309      	movs	r3, #9
 8002e14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4805      	ldr	r0, [pc, #20]	; (8002e34 <HAL_FDCAN_MspInit+0xc4>)
 8002e20:	f005 fa2a 	bl	8008278 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002e24:	bf00      	nop
 8002e26:	37d8      	adds	r7, #216	; 0xd8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	4000a000 	.word	0x4000a000
 8002e30:	58024400 	.word	0x58024400
 8002e34:	58020c00 	.word	0x58020c00

08002e38 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <HAL_FMAC_MspInit+0x3c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10e      	bne.n	8002e68 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_FMAC_MspInit+0x40>)
 8002e4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e50:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <HAL_FMAC_MspInit+0x40>)
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e56:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_FMAC_MspInit+0x40>)
 8002e5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	48024000 	.word	0x48024000
 8002e78:	58024400 	.word	0x58024400

08002e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0be      	sub	sp, #248	; 0xf8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e98:	22b4      	movs	r2, #180	; 0xb4
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f010 fb7d 	bl	801359c <memset>
  if(hspi->Instance==SPI2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4abe      	ldr	r2, [pc, #760]	; (80031a0 <HAL_SPI_MspInit+0x324>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d15b      	bne.n	8002f64 <HAL_SPI_MspInit+0xe8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002eb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f007 fdca 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
 8002eca:	f7ff f831 	bl	8001f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ece:	4bb5      	ldr	r3, [pc, #724]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed4:	4ab3      	ldr	r2, [pc, #716]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ede:	4bb1      	ldr	r3, [pc, #708]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eec:	4bad      	ldr	r3, [pc, #692]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef2:	4aac      	ldr	r2, [pc, #688]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002efc:	4ba9      	ldr	r3, [pc, #676]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002f0a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f24:	2305      	movs	r3, #5
 8002f26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f2e:	4619      	mov	r1, r3
 8002f30:	489d      	ldr	r0, [pc, #628]	; (80031a8 <HAL_SPI_MspInit+0x32c>)
 8002f32:	f005 f9a1 	bl	8008278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f50:	2305      	movs	r3, #5
 8002f52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4892      	ldr	r0, [pc, #584]	; (80031a8 <HAL_SPI_MspInit+0x32c>)
 8002f5e:	f005 f98b 	bl	8008278 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8002f62:	e119      	b.n	8003198 <HAL_SPI_MspInit+0x31c>
  else if(hspi->Instance==SPI3)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a90      	ldr	r2, [pc, #576]	; (80031ac <HAL_SPI_MspInit+0x330>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	f040 8081 	bne.w	8003072 <HAL_SPI_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002f76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f82:	4618      	mov	r0, r3
 8002f84:	f007 fd68 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_SPI_MspInit+0x116>
      Error_Handler();
 8002f8e:	f7fe ffcf 	bl	8001f30 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f92:	4b84      	ldr	r3, [pc, #528]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f98:	4a82      	ldr	r2, [pc, #520]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fa2:	4b80      	ldr	r3, [pc, #512]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb0:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb6:	4a7b      	ldr	r2, [pc, #492]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fc0:	4b78      	ldr	r3, [pc, #480]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	623b      	str	r3, [r7, #32]
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fce:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd4:	4a73      	ldr	r2, [pc, #460]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002fd6:	f043 0304 	orr.w	r3, r3, #4
 8002fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fde:	4b71      	ldr	r3, [pc, #452]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8002fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003006:	2306      	movs	r3, #6
 8003008:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003010:	4619      	mov	r1, r3
 8003012:	4867      	ldr	r0, [pc, #412]	; (80031b0 <HAL_SPI_MspInit+0x334>)
 8003014:	f005 f930 	bl	8008278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003018:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800301c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	2302      	movs	r3, #2
 8003022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003032:	2306      	movs	r3, #6
 8003034:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003038:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800303c:	4619      	mov	r1, r3
 800303e:	485d      	ldr	r0, [pc, #372]	; (80031b4 <HAL_SPI_MspInit+0x338>)
 8003040:	f005 f91a 	bl	8008278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003044:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003048:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003052:	2301      	movs	r3, #1
 8003054:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800305e:	2306      	movs	r3, #6
 8003060:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003064:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003068:	4619      	mov	r1, r3
 800306a:	4852      	ldr	r0, [pc, #328]	; (80031b4 <HAL_SPI_MspInit+0x338>)
 800306c:	f005 f904 	bl	8008278 <HAL_GPIO_Init>
}
 8003070:	e092      	b.n	8003198 <HAL_SPI_MspInit+0x31c>
  else if(hspi->Instance==SPI4)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_SPI_MspInit+0x33c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d144      	bne.n	8003106 <HAL_SPI_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800307c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003080:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_CSI;
 8003082:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800308a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800308e:	4618      	mov	r0, r3
 8003090:	f007 fce2 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800309a:	f7fe ff49 	bl	8001f30 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 80030a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030a4:	4a3f      	ldr	r2, [pc, #252]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 80030a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 80030b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030bc:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 80030be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c2:	4a38      	ldr	r2, [pc, #224]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 80030c4:	f043 0310 	orr.w	r3, r3, #16
 80030c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 80030ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80030da:	2374      	movs	r3, #116	; 0x74
 80030dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80030f2:	2305      	movs	r3, #5
 80030f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030fc:	4619      	mov	r1, r3
 80030fe:	482f      	ldr	r0, [pc, #188]	; (80031bc <HAL_SPI_MspInit+0x340>)
 8003100:	f005 f8ba 	bl	8008278 <HAL_GPIO_Init>
}
 8003104:	e048      	b.n	8003198 <HAL_SPI_MspInit+0x31c>
  else if(hspi->Instance==SPI6)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2d      	ldr	r2, [pc, #180]	; (80031c0 <HAL_SPI_MspInit+0x344>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d143      	bne.n	8003198 <HAL_SPI_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8003110:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_CSI;
 8003116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800311a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800311e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003122:	4618      	mov	r0, r3
 8003124:	f007 fc98 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_SPI_MspInit+0x2b6>
      Error_Handler();
 800312e:	f7fe feff 	bl	8001f30 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8003134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003138:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 800313a:	f043 0320 	orr.w	r3, r3, #32
 800313e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8003144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8003152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003160:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_SPI_MspInit+0x328>)
 8003162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800316e:	23f0      	movs	r3, #240	; 0xf0
 8003170:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2302      	movs	r3, #2
 8003176:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8003186:	2308      	movs	r3, #8
 8003188:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003190:	4619      	mov	r1, r3
 8003192:	4807      	ldr	r0, [pc, #28]	; (80031b0 <HAL_SPI_MspInit+0x334>)
 8003194:	f005 f870 	bl	8008278 <HAL_GPIO_Init>
}
 8003198:	bf00      	nop
 800319a:	37f8      	adds	r7, #248	; 0xf8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40003800 	.word	0x40003800
 80031a4:	58024400 	.word	0x58024400
 80031a8:	58020400 	.word	0x58020400
 80031ac:	40003c00 	.word	0x40003c00
 80031b0:	58020000 	.word	0x58020000
 80031b4:	58020800 	.word	0x58020800
 80031b8:	40013400 	.word	0x40013400
 80031bc:	58021000 	.word	0x58021000
 80031c0:	58001400 	.word	0x58001400

080031c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2e      	ldr	r2, [pc, #184]	; (800328c <HAL_TIM_Base_MspInit+0xc8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10f      	bne.n	80031f6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031d6:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 80031d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031dc:	4a2c      	ldr	r2, [pc, #176]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031e6:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 80031e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80031f4:	e045      	b.n	8003282 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d117      	bne.n	8003230 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003200:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 8003202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003206:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003210:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 8003212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	201c      	movs	r0, #28
 8003224:	f002 fc5d 	bl	8005ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003228:	201c      	movs	r0, #28
 800322a:	f002 fc74 	bl	8005b16 <HAL_NVIC_EnableIRQ>
}
 800322e:	e028      	b.n	8003282 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM4)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a17      	ldr	r2, [pc, #92]	; (8003294 <HAL_TIM_Base_MspInit+0xd0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d10f      	bne.n	800325a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 800323c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 800324c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	e013      	b.n	8003282 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <HAL_TIM_Base_MspInit+0xd4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d10e      	bne.n	8003282 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 8003266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_TIM_Base_MspInit+0xcc>)
 8003276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40010000 	.word	0x40010000
 8003290:	58024400 	.word	0x58024400
 8003294:	40000800 	.word	0x40000800
 8003298:	40010400 	.word	0x40010400

0800329c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a39      	ldr	r2, [pc, #228]	; (80033a0 <HAL_TIM_MspPostInit+0x104>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d120      	bne.n	8003300 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032be:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_TIM_MspPostInit+0x108>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c4:	4a37      	ldr	r2, [pc, #220]	; (80033a4 <HAL_TIM_MspPostInit+0x108>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ce:	4b35      	ldr	r3, [pc, #212]	; (80033a4 <HAL_TIM_MspPostInit+0x108>)
 80032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80032dc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ea:	2300      	movs	r3, #0
 80032ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f2:	f107 0314 	add.w	r3, r7, #20
 80032f6:	4619      	mov	r1, r3
 80032f8:	482b      	ldr	r0, [pc, #172]	; (80033a8 <HAL_TIM_MspPostInit+0x10c>)
 80032fa:	f004 ffbd 	bl	8008278 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80032fe:	e04a      	b.n	8003396 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a29      	ldr	r2, [pc, #164]	; (80033ac <HAL_TIM_MspPostInit+0x110>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d120      	bne.n	800334c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800330a:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <HAL_TIM_MspPostInit+0x108>)
 800330c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003310:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <HAL_TIM_MspPostInit+0x108>)
 8003312:	f043 0308 	orr.w	r3, r3, #8
 8003316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_TIM_MspPostInit+0x108>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800333a:	2302      	movs	r3, #2
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	4619      	mov	r1, r3
 8003344:	481a      	ldr	r0, [pc, #104]	; (80033b0 <HAL_TIM_MspPostInit+0x114>)
 8003346:	f004 ff97 	bl	8008278 <HAL_GPIO_Init>
}
 800334a:	e024      	b.n	8003396 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM8)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <HAL_TIM_MspPostInit+0x118>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d11f      	bne.n	8003396 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_TIM_MspPostInit+0x108>)
 8003358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335c:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <HAL_TIM_MspPostInit+0x108>)
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_TIM_MspPostInit+0x108>)
 8003368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003374:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003386:	2303      	movs	r3, #3
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	4619      	mov	r1, r3
 8003390:	4809      	ldr	r0, [pc, #36]	; (80033b8 <HAL_TIM_MspPostInit+0x11c>)
 8003392:	f004 ff71 	bl	8008278 <HAL_GPIO_Init>
}
 8003396:	bf00      	nop
 8003398:	3728      	adds	r7, #40	; 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40010000 	.word	0x40010000
 80033a4:	58024400 	.word	0x58024400
 80033a8:	58020000 	.word	0x58020000
 80033ac:	40000800 	.word	0x40000800
 80033b0:	58020c00 	.word	0x58020c00
 80033b4:	40010400 	.word	0x40010400
 80033b8:	58020800 	.word	0x58020800

080033bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033c0:	e7fe      	b.n	80033c0 <NMI_Handler+0x4>

080033c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//SCB->CFSR
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c6:	e7fe      	b.n	80033c6 <HardFault_Handler+0x4>

080033c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <MemManage_Handler+0x4>

080033ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d2:	e7fe      	b.n	80033d2 <BusFault_Handler+0x4>

080033d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <UsageFault_Handler+0x4>

080033da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003408:	f000 f9f4 	bl	80037f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}

08003410 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <DMA1_Stream1_IRQHandler+0x10>)
 8003416:	f003 f9b9 	bl	800678c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	240012dc 	.word	0x240012dc

08003424 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003428:	4803      	ldr	r0, [pc, #12]	; (8003438 <ADC_IRQHandler+0x14>)
 800342a:	f001 f819 	bl	8004460 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800342e:	4803      	ldr	r0, [pc, #12]	; (800343c <ADC_IRQHandler+0x18>)
 8003430:	f001 f816 	bl	8004460 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	2400118c 	.word	0x2400118c
 800343c:	240011fc 	.word	0x240011fc

08003440 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <TIM2_IRQHandler+0x10>)
 8003446:	f00a fcdd 	bl	800de04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	240018f0 	.word	0x240018f0

08003454 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <OTG_HS_IRQHandler+0x10>)
 800345a:	f005 fa25 	bl	80088a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	24002efc 	.word	0x24002efc

08003468 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800346c:	4802      	ldr	r0, [pc, #8]	; (8003478 <ADC3_IRQHandler+0x10>)
 800346e:	f000 fff7 	bl	8004460 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	2400126c 	.word	0x2400126c

0800347c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e00a      	b.n	80034a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800348e:	f3af 8000 	nop.w
 8003492:	4601      	mov	r1, r0
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	60ba      	str	r2, [r7, #8]
 800349a:	b2ca      	uxtb	r2, r1
 800349c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3301      	adds	r3, #1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	dbf0      	blt.n	800348e <_read+0x12>
	}

return len;
 80034ac:	687b      	ldr	r3, [r7, #4]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e009      	b.n	80034dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	60ba      	str	r2, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3301      	adds	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	dbf1      	blt.n	80034c8 <_write+0x12>
	}
	return len;
 80034e4:	687b      	ldr	r3, [r7, #4]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_close>:

int _close(int file)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
	return -1;
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003516:	605a      	str	r2, [r3, #4]
	return 0;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <_isatty>:

int _isatty(int file)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
	return 1;
 800352e:	2301      	movs	r3, #1
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
	return 0;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <_sbrk+0x5c>)
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <_sbrk+0x60>)
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <_sbrk+0x64>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <_sbrk+0x64>)
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <_sbrk+0x68>)
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <_sbrk+0x64>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	429a      	cmp	r2, r3
 8003586:	d207      	bcs.n	8003598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003588:	f00f ffd0 	bl	801352c <__errno>
 800358c:	4603      	mov	r3, r0
 800358e:	220c      	movs	r2, #12
 8003590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	e009      	b.n	80035ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <_sbrk+0x64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <_sbrk+0x64>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <_sbrk+0x64>)
 80035a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	24050000 	.word	0x24050000
 80035b8:	00000400 	.word	0x00000400
 80035bc:	240019f0 	.word	0x240019f0
 80035c0:	24003638 	.word	0x24003638

080035c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035c8:	4b34      	ldr	r3, [pc, #208]	; (800369c <SystemInit+0xd8>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	4a33      	ldr	r2, [pc, #204]	; (800369c <SystemInit+0xd8>)
 80035d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035d8:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <SystemInit+0xdc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	2b06      	cmp	r3, #6
 80035e2:	d807      	bhi.n	80035f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035e4:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <SystemInit+0xdc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 030f 	bic.w	r3, r3, #15
 80035ec:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <SystemInit+0xdc>)
 80035ee:	f043 0307 	orr.w	r3, r3, #7
 80035f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80035f4:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <SystemInit+0xe0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <SystemInit+0xe0>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003600:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <SystemInit+0xe0>)
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <SystemInit+0xe0>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4926      	ldr	r1, [pc, #152]	; (80036a4 <SystemInit+0xe0>)
 800360c:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <SystemInit+0xe4>)
 800360e:	4013      	ands	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <SystemInit+0xdc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <SystemInit+0xdc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 030f 	bic.w	r3, r3, #15
 8003626:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <SystemInit+0xdc>)
 8003628:	f043 0307 	orr.w	r3, r3, #7
 800362c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <SystemInit+0xe0>)
 8003630:	2200      	movs	r2, #0
 8003632:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <SystemInit+0xe0>)
 8003636:	2200      	movs	r2, #0
 8003638:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800363a:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <SystemInit+0xe0>)
 800363c:	2200      	movs	r2, #0
 800363e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <SystemInit+0xe0>)
 8003642:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <SystemInit+0xe8>)
 8003644:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003646:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <SystemInit+0xe0>)
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <SystemInit+0xec>)
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <SystemInit+0xe0>)
 800364e:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <SystemInit+0xf0>)
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <SystemInit+0xe0>)
 8003654:	2200      	movs	r2, #0
 8003656:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <SystemInit+0xe0>)
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <SystemInit+0xf0>)
 800365c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800365e:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <SystemInit+0xe0>)
 8003660:	2200      	movs	r2, #0
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <SystemInit+0xe0>)
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <SystemInit+0xf0>)
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800366a:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <SystemInit+0xe0>)
 800366c:	2200      	movs	r2, #0
 800366e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <SystemInit+0xe0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <SystemInit+0xe0>)
 8003676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <SystemInit+0xe0>)
 800367e:	2200      	movs	r2, #0
 8003680:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <SystemInit+0xf4>)
 8003684:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003688:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800368a:	4b04      	ldr	r3, [pc, #16]	; (800369c <SystemInit+0xd8>)
 800368c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003690:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003692:	bf00      	nop
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00
 80036a0:	52002000 	.word	0x52002000
 80036a4:	58024400 	.word	0x58024400
 80036a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80036ac:	02020200 	.word	0x02020200
 80036b0:	01ff0000 	.word	0x01ff0000
 80036b4:	01010280 	.word	0x01010280
 80036b8:	52004000 	.word	0x52004000

080036bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80036bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036c0:	f7ff ff80 	bl	80035c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036c4:	480c      	ldr	r0, [pc, #48]	; (80036f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036c6:	490d      	ldr	r1, [pc, #52]	; (80036fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036cc:	e002      	b.n	80036d4 <LoopCopyDataInit>

080036ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036d2:	3304      	adds	r3, #4

080036d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d8:	d3f9      	bcc.n	80036ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036dc:	4c0a      	ldr	r4, [pc, #40]	; (8003708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e0:	e001      	b.n	80036e6 <LoopFillZerobss>

080036e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e4:	3204      	adds	r2, #4

080036e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e8:	d3fb      	bcc.n	80036e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ea:	f00f ff25 	bl	8013538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ee:	f7fd f8e5 	bl	80008bc <main>
  bx  lr
 80036f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036f4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80036f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80036fc:	24001170 	.word	0x24001170
  ldr r2, =_sidata
 8003700:	08014758 	.word	0x08014758
  ldr r2, =_sbss
 8003704:	24001170 	.word	0x24001170
  ldr r4, =_ebss
 8003708:	24003638 	.word	0x24003638

0800370c <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800370c:	e7fe      	b.n	800370c <BDMA_Channel0_IRQHandler>
	...

08003710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003716:	2003      	movs	r0, #3
 8003718:	f002 f9d8 	bl	8005acc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800371c:	f006 fff2 	bl	800a704 <HAL_RCC_GetSysClockFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_Init+0x68>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	4913      	ldr	r1, [pc, #76]	; (800377c <HAL_Init+0x6c>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
 8003738:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800373a:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_Init+0x68>)
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	4a0e      	ldr	r2, [pc, #56]	; (800377c <HAL_Init+0x6c>)
 8003744:	5cd3      	ldrb	r3, [r2, r3]
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <HAL_Init+0x70>)
 8003752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003754:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <HAL_Init+0x74>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800375a:	200f      	movs	r0, #15
 800375c:	f000 f814 	bl	8003788 <HAL_InitTick>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e002      	b.n	8003770 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800376a:	f7fe ffa5 	bl	80026b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	58024400 	.word	0x58024400
 800377c:	0801468c 	.word	0x0801468c
 8003780:	24001010 	.word	0x24001010
 8003784:	2400100c 	.word	0x2400100c

08003788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_InitTick+0x60>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e021      	b.n	80037e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800379c:	4b13      	ldr	r3, [pc, #76]	; (80037ec <HAL_InitTick+0x64>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_InitTick+0x60>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	4619      	mov	r1, r3
 80037a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 f9bd 	bl	8005b32 <HAL_SYSTICK_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e00e      	b.n	80037e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b0f      	cmp	r3, #15
 80037c6:	d80a      	bhi.n	80037de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037c8:	2200      	movs	r2, #0
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	f002 f987 	bl	8005ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037d4:	4a06      	ldr	r2, [pc, #24]	; (80037f0 <HAL_InitTick+0x68>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	24001018 	.word	0x24001018
 80037ec:	2400100c 	.word	0x2400100c
 80037f0:	24001014 	.word	0x24001014

080037f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_IncTick+0x20>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_IncTick+0x24>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4413      	add	r3, r2
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_IncTick+0x24>)
 8003806:	6013      	str	r3, [r2, #0]
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	24001018 	.word	0x24001018
 8003818:	240019f4 	.word	0x240019f4

0800381c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return uwTick;
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <HAL_GetTick+0x14>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	240019f4 	.word	0x240019f4

08003834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800383c:	f7ff ffee 	bl	800381c <HAL_GetTick>
 8003840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d005      	beq.n	800385a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <HAL_Delay+0x44>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800385a:	bf00      	nop
 800385c:	f7ff ffde 	bl	800381c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	429a      	cmp	r2, r3
 800386a:	d8f7      	bhi.n	800385c <HAL_Delay+0x28>
  {
  }
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	24001018 	.word	0x24001018

0800387c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800388c:	4904      	ldr	r1, [pc, #16]	; (80038a0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	58003c00 	.word	0x58003c00

080038a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 0202 	bic.w	r2, r3, #2
 80038b4:	4904      	ldr	r1, [pc, #16]	; (80038c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	58003c00 	.word	0x58003c00

080038cc <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038de:	f7ff ff9d 	bl	800381c <HAL_GetTick>
 80038e2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80038e4:	e008      	b.n	80038f8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80038e6:	f7ff ff99 	bl	800381c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b0a      	cmp	r3, #10
 80038f2:	d901      	bls.n	80038f8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e006      	b.n	8003906 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	58003c00 	.word	0x58003c00

08003914 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800391e:	4b07      	ldr	r3, [pc, #28]	; (800393c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	43db      	mvns	r3, r3
 8003926:	401a      	ands	r2, r3
 8003928:	4904      	ldr	r1, [pc, #16]	; (800393c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	58000400 	.word	0x58000400

08003940 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	609a      	str	r2, [r3, #8]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	609a      	str	r2, [r3, #8]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3360      	adds	r3, #96	; 0x60
 80039ba:	461a      	mov	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <LL_ADC_SetOffset+0x60>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10b      	bne.n	80039e4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80039e2:	e00b      	b.n	80039fc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	430b      	orrs	r3, r1
 80039f6:	431a      	orrs	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	601a      	str	r2, [r3, #0]
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	58026000 	.word	0x58026000

08003a0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3360      	adds	r3, #96	; 0x60
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	611a      	str	r2, [r3, #16]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3360      	adds	r3, #96	; 0x60
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	601a      	str	r2, [r3, #0]
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	58026000 	.word	0x58026000

08003ab0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <LL_ADC_SetOffsetSaturation+0x40>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10e      	bne.n	8003ae2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3360      	adds	r3, #96	; 0x60
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	58026000 	.word	0x58026000

08003af4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a0c      	ldr	r2, [pc, #48]	; (8003b34 <LL_ADC_SetOffsetSign+0x40>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10e      	bne.n	8003b26 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3360      	adds	r3, #96	; 0x60
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	58026000 	.word	0x58026000

08003b38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3360      	adds	r3, #96	; 0x60
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a0c      	ldr	r2, [pc, #48]	; (8003b88 <LL_ADC_SetOffsetState+0x50>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003b6a:	e007      	b.n	8003b7c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	601a      	str	r2, [r3, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	58026000 	.word	0x58026000

08003b8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b087      	sub	sp, #28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3330      	adds	r3, #48	; 0x30
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	4413      	add	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	211f      	movs	r1, #31
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	43db      	mvns	r3, r3
 8003be4:	401a      	ands	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	0e9b      	lsrs	r3, r3, #26
 8003bea:	f003 011f 	and.w	r1, r3, #31
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3314      	adds	r3, #20
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	0e5b      	lsrs	r3, r3, #25
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	4413      	add	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	0d1b      	lsrs	r3, r3, #20
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2107      	movs	r1, #7
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	401a      	ands	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	0d1b      	lsrs	r3, r3, #20
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	431a      	orrs	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a1a      	ldr	r2, [pc, #104]	; (8003d00 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d115      	bne.n	8003cc8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	401a      	ands	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0318 	and.w	r3, r3, #24
 8003cb2:	4914      	ldr	r1, [pc, #80]	; (8003d04 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003cb4:	40d9      	lsrs	r1, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	400b      	ands	r3, r1
 8003cba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003cc6:	e014      	b.n	8003cf2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f003 0318 	and.w	r3, r3, #24
 8003cde:	4909      	ldr	r1, [pc, #36]	; (8003d04 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003ce0:	40d9      	lsrs	r1, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	400b      	ands	r3, r1
 8003ce6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cea:	431a      	orrs	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	58026000 	.word	0x58026000
 8003d04:	000fffff 	.word	0x000fffff

08003d08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 031f 	and.w	r3, r3, #31
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6093      	str	r3, [r2, #8]
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	5fffffc0 	.word	0x5fffffc0

08003d64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d78:	d101      	bne.n	8003d7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	6fffffc0 	.word	0x6fffffc0

08003db4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dc8:	d101      	bne.n	8003dce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <LL_ADC_Enable+0x24>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	7fffffc0 	.word	0x7fffffc0

08003e04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <LL_ADC_IsEnabled+0x18>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <LL_ADC_IsEnabled+0x1a>
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <LL_ADC_REG_StartConversion+0x24>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	7fffffc0 	.word	0x7fffffc0

08003e54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d101      	bne.n	8003e6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d101      	bne.n	8003e92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1ee      	b.n	8004298 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d109      	bne.n	8003edc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fe fc25 	bl	8002718 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff ff3f 	bl	8003d64 <LL_ADC_IsDeepPowerDownEnabled>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff25 	bl	8003d40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff ff5a 	bl	8003db4 <LL_ADC_IsInternalRegulatorEnabled>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d114      	bne.n	8003f30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff ff3e 	bl	8003d8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f10:	4b8e      	ldr	r3, [pc, #568]	; (800414c <HAL_ADC_Init+0x2ac>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	4a8e      	ldr	r2, [pc, #568]	; (8004150 <HAL_ADC_Init+0x2b0>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f22:	e002      	b.n	8003f2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f9      	bne.n	8003f24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff3d 	bl	8003db4 <LL_ADC_IsInternalRegulatorEnabled>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10d      	bne.n	8003f5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f44:	f043 0210 	orr.w	r2, r3, #16
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f50:	f043 0201 	orr.w	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff77 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 8003f66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f040 8188 	bne.w	8004286 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f040 8184 	bne.w	8004286 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff ff36 	bl	8003e04 <LL_ADC_IsEnabled>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d136      	bne.n	800400c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a6c      	ldr	r2, [pc, #432]	; (8004154 <HAL_ADC_Init+0x2b4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_ADC_Init+0x112>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a6a      	ldr	r2, [pc, #424]	; (8004158 <HAL_ADC_Init+0x2b8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_ADC_Init+0x130>
 8003fb2:	4868      	ldr	r0, [pc, #416]	; (8004154 <HAL_ADC_Init+0x2b4>)
 8003fb4:	f7ff ff26 	bl	8003e04 <LL_ADC_IsEnabled>
 8003fb8:	4604      	mov	r4, r0
 8003fba:	4867      	ldr	r0, [pc, #412]	; (8004158 <HAL_ADC_Init+0x2b8>)
 8003fbc:	f7ff ff22 	bl	8003e04 <LL_ADC_IsEnabled>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4323      	orrs	r3, r4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e008      	b.n	8003fe2 <HAL_ADC_Init+0x142>
 8003fd0:	4862      	ldr	r0, [pc, #392]	; (800415c <HAL_ADC_Init+0x2bc>)
 8003fd2:	f7ff ff17 	bl	8003e04 <LL_ADC_IsEnabled>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d012      	beq.n	800400c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a5a      	ldr	r2, [pc, #360]	; (8004154 <HAL_ADC_Init+0x2b4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_ADC_Init+0x15a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a58      	ldr	r2, [pc, #352]	; (8004158 <HAL_ADC_Init+0x2b8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_ADC_Init+0x15e>
 8003ffa:	4a59      	ldr	r2, [pc, #356]	; (8004160 <HAL_ADC_Init+0x2c0>)
 8003ffc:	e000      	b.n	8004000 <HAL_ADC_Init+0x160>
 8003ffe:	4a59      	ldr	r2, [pc, #356]	; (8004164 <HAL_ADC_Init+0x2c4>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f7ff fc9a 	bl	8003940 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a52      	ldr	r2, [pc, #328]	; (800415c <HAL_ADC_Init+0x2bc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d129      	bne.n	800406a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7e5b      	ldrb	r3, [r3, #25]
 800401a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004020:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004026:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d013      	beq.n	8004058 <HAL_ADC_Init+0x1b8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d00d      	beq.n	8004054 <HAL_ADC_Init+0x1b4>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b1c      	cmp	r3, #28
 800403e:	d007      	beq.n	8004050 <HAL_ADC_Init+0x1b0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b18      	cmp	r3, #24
 8004046:	d101      	bne.n	800404c <HAL_ADC_Init+0x1ac>
 8004048:	2318      	movs	r3, #24
 800404a:	e006      	b.n	800405a <HAL_ADC_Init+0x1ba>
 800404c:	2300      	movs	r3, #0
 800404e:	e004      	b.n	800405a <HAL_ADC_Init+0x1ba>
 8004050:	2310      	movs	r3, #16
 8004052:	e002      	b.n	800405a <HAL_ADC_Init+0x1ba>
 8004054:	2308      	movs	r3, #8
 8004056:	e000      	b.n	800405a <HAL_ADC_Init+0x1ba>
 8004058:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800405a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004062:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	e00e      	b.n	8004088 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7e5b      	ldrb	r3, [r3, #25]
 800406e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004074:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800407a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004082:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d106      	bne.n	80040a0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	3b01      	subs	r3, #1
 8004098:	045b      	lsls	r3, r3, #17
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d009      	beq.n	80040bc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a26      	ldr	r2, [pc, #152]	; (800415c <HAL_ADC_Init+0x2bc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d115      	bne.n	80040f2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	4b26      	ldr	r3, [pc, #152]	; (8004168 <HAL_ADC_Init+0x2c8>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	69b9      	ldr	r1, [r7, #24]
 80040d6:	430b      	orrs	r3, r1
 80040d8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	611a      	str	r2, [r3, #16]
 80040f0:	e009      	b.n	8004106 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	4b1c      	ldr	r3, [pc, #112]	; (800416c <HAL_ADC_Init+0x2cc>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	69b9      	ldr	r1, [r7, #24]
 8004102:	430b      	orrs	r3, r1
 8004104:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fea2 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 8004110:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff feaf 	bl	8003e7a <LL_ADC_INJ_IsConversionOngoing>
 800411c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 808e 	bne.w	8004242 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 808a 	bne.w	8004242 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a0a      	ldr	r2, [pc, #40]	; (800415c <HAL_ADC_Init+0x2bc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d11b      	bne.n	8004170 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	7e1b      	ldrb	r3, [r3, #24]
 800413c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004144:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	e018      	b.n	800417e <HAL_ADC_Init+0x2de>
 800414c:	2400100c 	.word	0x2400100c
 8004150:	053e2d63 	.word	0x053e2d63
 8004154:	40022000 	.word	0x40022000
 8004158:	40022100 	.word	0x40022100
 800415c:	58026000 	.word	0x58026000
 8004160:	40022300 	.word	0x40022300
 8004164:	58026300 	.word	0x58026300
 8004168:	fff04007 	.word	0xfff04007
 800416c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7e1b      	ldrb	r3, [r3, #24]
 8004174:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	4b46      	ldr	r3, [pc, #280]	; (80042a0 <HAL_ADC_Init+0x400>)
 8004186:	4013      	ands	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	430b      	orrs	r3, r1
 8004190:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004198:	2b01      	cmp	r3, #1
 800419a:	d137      	bne.n	800420c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a3f      	ldr	r2, [pc, #252]	; (80042a4 <HAL_ADC_Init+0x404>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d116      	bne.n	80041da <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <HAL_ADC_Init+0x408>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041be:	4311      	orrs	r1, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041c4:	4311      	orrs	r1, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041ca:	430a      	orrs	r2, r1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	611a      	str	r2, [r3, #16]
 80041d8:	e020      	b.n	800421c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	4b32      	ldr	r3, [pc, #200]	; (80042ac <HAL_ADC_Init+0x40c>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041e8:	3a01      	subs	r2, #1
 80041ea:	0411      	lsls	r1, r2, #16
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041f0:	4311      	orrs	r1, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041f6:	4311      	orrs	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041fc:	430a      	orrs	r2, r1
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	611a      	str	r2, [r3, #16]
 800420a:	e007      	b.n	800421c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <HAL_ADC_Init+0x404>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d002      	beq.n	8004242 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f001 f91d 	bl	800547c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d10c      	bne.n	8004264 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	f023 010f 	bic.w	r1, r3, #15
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	1e5a      	subs	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
 8004262:	e007      	b.n	8004274 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 020f 	bic.w	r2, r2, #15
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004278:	f023 0303 	bic.w	r3, r3, #3
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	661a      	str	r2, [r3, #96]	; 0x60
 8004284:	e007      	b.n	8004296 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428a:	f043 0210 	orr.w	r2, r3, #16
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004296:	7ffb      	ldrb	r3, [r7, #31]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3724      	adds	r7, #36	; 0x24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}
 80042a0:	ffffbffc 	.word	0xffffbffc
 80042a4:	58026000 	.word	0x58026000
 80042a8:	fc00f81f 	.word	0xfc00f81f
 80042ac:	fc00f81e 	.word	0xfc00f81e

080042b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a5c      	ldr	r2, [pc, #368]	; (8004430 <HAL_ADC_Start+0x180>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_ADC_Start+0x1c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a5b      	ldr	r2, [pc, #364]	; (8004434 <HAL_ADC_Start+0x184>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_Start+0x20>
 80042cc:	4b5a      	ldr	r3, [pc, #360]	; (8004438 <HAL_ADC_Start+0x188>)
 80042ce:	e000      	b.n	80042d2 <HAL_ADC_Start+0x22>
 80042d0:	4b5a      	ldr	r3, [pc, #360]	; (800443c <HAL_ADC_Start+0x18c>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fd18 	bl	8003d08 <LL_ADC_GetMultimode>
 80042d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fdb8 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f040 809a 	bne.w	8004420 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_Start+0x4a>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e095      	b.n	8004426 <HAL_ADC_Start+0x176>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 f830 	bl	8005368 <ADC_Enable>
 8004308:	4603      	mov	r3, r0
 800430a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 8081 	bne.w	8004416 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004318:	4b49      	ldr	r3, [pc, #292]	; (8004440 <HAL_ADC_Start+0x190>)
 800431a:	4013      	ands	r3, r2
 800431c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a42      	ldr	r2, [pc, #264]	; (8004434 <HAL_ADC_Start+0x184>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d002      	beq.n	8004334 <HAL_ADC_Start+0x84>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	e000      	b.n	8004336 <HAL_ADC_Start+0x86>
 8004334:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <HAL_ADC_Start+0x180>)
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	4293      	cmp	r3, r2
 800433c:	d002      	beq.n	8004344 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004348:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435c:	d106      	bne.n	800436c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004362:	f023 0206 	bic.w	r2, r3, #6
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	665a      	str	r2, [r3, #100]	; 0x64
 800436a:	e002      	b.n	8004372 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	221c      	movs	r2, #28
 8004378:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a2b      	ldr	r2, [pc, #172]	; (8004434 <HAL_ADC_Start+0x184>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d002      	beq.n	8004392 <HAL_ADC_Start+0xe2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	e000      	b.n	8004394 <HAL_ADC_Start+0xe4>
 8004392:	4b27      	ldr	r3, [pc, #156]	; (8004430 <HAL_ADC_Start+0x180>)
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	4293      	cmp	r3, r2
 800439a:	d008      	beq.n	80043ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d002      	beq.n	80043ae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b09      	cmp	r3, #9
 80043ac:	d114      	bne.n	80043d8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fd2b 	bl	8003e2c <LL_ADC_REG_StartConversion>
 80043d6:	e025      	b.n	8004424 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a12      	ldr	r2, [pc, #72]	; (8004434 <HAL_ADC_Start+0x184>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d002      	beq.n	80043f4 <HAL_ADC_Start+0x144>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	e000      	b.n	80043f6 <HAL_ADC_Start+0x146>
 80043f4:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <HAL_ADC_Start+0x180>)
 80043f6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00f      	beq.n	8004424 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800440c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	661a      	str	r2, [r3, #96]	; 0x60
 8004414:	e006      	b.n	8004424 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800441e:	e001      	b.n	8004424 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004420:	2302      	movs	r3, #2
 8004422:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004424:	7dfb      	ldrb	r3, [r7, #23]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40022000 	.word	0x40022000
 8004434:	40022100 	.word	0x40022100
 8004438:	40022300 	.word	0x40022300
 800443c:	58026300 	.word	0x58026300
 8004440:	fffff0fe 	.word	0xfffff0fe

08004444 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
	...

08004460 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004468:	2300      	movs	r3, #0
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a87      	ldr	r2, [pc, #540]	; (80046a0 <HAL_ADC_IRQHandler+0x240>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_ADC_IRQHandler+0x30>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a86      	ldr	r2, [pc, #536]	; (80046a4 <HAL_ADC_IRQHandler+0x244>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d101      	bne.n	8004494 <HAL_ADC_IRQHandler+0x34>
 8004490:	4b85      	ldr	r3, [pc, #532]	; (80046a8 <HAL_ADC_IRQHandler+0x248>)
 8004492:	e000      	b.n	8004496 <HAL_ADC_IRQHandler+0x36>
 8004494:	4b85      	ldr	r3, [pc, #532]	; (80046ac <HAL_ADC_IRQHandler+0x24c>)
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fc36 	bl	8003d08 <LL_ADC_GetMultimode>
 800449c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d017      	beq.n	80044d8 <HAL_ADC_IRQHandler+0x78>
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d012      	beq.n	80044d8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f001 f910 	bl	80056f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2202      	movs	r2, #2
 80044d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <HAL_ADC_IRQHandler+0x8c>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8083 	beq.w	80045fe <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d07d      	beq.n	80045fe <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d105      	bne.n	800451a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004512:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fb34 	bl	8003b8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d062      	beq.n	80045f0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a5d      	ldr	r2, [pc, #372]	; (80046a4 <HAL_ADC_IRQHandler+0x244>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d002      	beq.n	800453a <HAL_ADC_IRQHandler+0xda>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	e000      	b.n	800453c <HAL_ADC_IRQHandler+0xdc>
 800453a:	4b59      	ldr	r3, [pc, #356]	; (80046a0 <HAL_ADC_IRQHandler+0x240>)
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	4293      	cmp	r3, r2
 8004542:	d008      	beq.n	8004556 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d002      	beq.n	8004556 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b09      	cmp	r3, #9
 8004554:	d104      	bne.n	8004560 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	623b      	str	r3, [r7, #32]
 800455e:	e00c      	b.n	800457a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a4f      	ldr	r2, [pc, #316]	; (80046a4 <HAL_ADC_IRQHandler+0x244>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d002      	beq.n	8004570 <HAL_ADC_IRQHandler+0x110>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	e000      	b.n	8004572 <HAL_ADC_IRQHandler+0x112>
 8004570:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <HAL_ADC_IRQHandler+0x240>)
 8004572:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d135      	bne.n	80045f0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b08      	cmp	r3, #8
 8004590:	d12e      	bne.n	80045f0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fc5c 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d11a      	bne.n	80045d8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 020c 	bic.w	r2, r2, #12
 80045b0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d112      	bne.n	80045f0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	661a      	str	r2, [r3, #96]	; 0x60
 80045d6:	e00b      	b.n	80045f0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045dc:	f043 0210 	orr.w	r2, r3, #16
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e8:	f043 0201 	orr.w	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f96f 	bl	80048d4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	220c      	movs	r2, #12
 80045fc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <HAL_ADC_IRQHandler+0x1b2>
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10b      	bne.n	800462a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80a0 	beq.w	800475e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 809a 	beq.w	800475e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fadf 	bl	8003c0a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800464c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff fa9a 	bl	8003b8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004658:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <HAL_ADC_IRQHandler+0x244>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d002      	beq.n	800466a <HAL_ADC_IRQHandler+0x20a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	e000      	b.n	800466c <HAL_ADC_IRQHandler+0x20c>
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <HAL_ADC_IRQHandler+0x240>)
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	4293      	cmp	r3, r2
 8004672:	d008      	beq.n	8004686 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b06      	cmp	r3, #6
 800467e:	d002      	beq.n	8004686 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b07      	cmp	r3, #7
 8004684:	d104      	bne.n	8004690 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	623b      	str	r3, [r7, #32]
 800468e:	e014      	b.n	80046ba <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a03      	ldr	r2, [pc, #12]	; (80046a4 <HAL_ADC_IRQHandler+0x244>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00a      	beq.n	80046b0 <HAL_ADC_IRQHandler+0x250>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	e008      	b.n	80046b2 <HAL_ADC_IRQHandler+0x252>
 80046a0:	40022000 	.word	0x40022000
 80046a4:	40022100 	.word	0x40022100
 80046a8:	40022300 	.word	0x40022300
 80046ac:	58026300 	.word	0x58026300
 80046b0:	4b84      	ldr	r3, [pc, #528]	; (80048c4 <HAL_ADC_IRQHandler+0x464>)
 80046b2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d047      	beq.n	8004750 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <HAL_ADC_IRQHandler+0x27a>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d03f      	beq.n	8004750 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d13a      	bne.n	8004750 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	d133      	bne.n	8004750 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d12e      	bne.n	8004750 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fbbf 	bl	8003e7a <LL_ADC_INJ_IsConversionOngoing>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11a      	bne.n	8004738 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004710:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d112      	bne.n	8004750 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472e:	f043 0201 	orr.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	661a      	str	r2, [r3, #96]	; 0x60
 8004736:	e00b      	b.n	8004750 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473c:	f043 0210 	orr.w	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 ffa5 	bl	80056a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2260      	movs	r2, #96	; 0x60
 800475c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d011      	beq.n	800478c <HAL_ADC_IRQHandler+0x32c>
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8b2 	bl	80048e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2280      	movs	r2, #128	; 0x80
 800478a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d012      	beq.n	80047bc <HAL_ADC_IRQHandler+0x35c>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00d      	beq.n	80047bc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 ff8b 	bl	80056c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d012      	beq.n	80047ec <HAL_ADC_IRQHandler+0x38c>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00d      	beq.n	80047ec <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 ff7d 	bl	80056dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d043      	beq.n	800487e <HAL_ADC_IRQHandler+0x41e>
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d03e      	beq.n	800487e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004808:	2301      	movs	r3, #1
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
 800480c:	e021      	b.n	8004852 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d015      	beq.n	8004840 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a2a      	ldr	r2, [pc, #168]	; (80048c4 <HAL_ADC_IRQHandler+0x464>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <HAL_ADC_IRQHandler+0x3c8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <HAL_ADC_IRQHandler+0x468>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d101      	bne.n	800482c <HAL_ADC_IRQHandler+0x3cc>
 8004828:	4b28      	ldr	r3, [pc, #160]	; (80048cc <HAL_ADC_IRQHandler+0x46c>)
 800482a:	e000      	b.n	800482e <HAL_ADC_IRQHandler+0x3ce>
 800482c:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_ADC_IRQHandler+0x470>)
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fa78 	bl	8003d24 <LL_ADC_GetMultiDMATransfer>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800483a:	2301      	movs	r3, #1
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	e008      	b.n	8004852 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800484e:	2301      	movs	r3, #1
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10e      	bne.n	8004876 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004868:	f043 0202 	orr.w	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f843 	bl	80048fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2210      	movs	r2, #16
 800487c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d018      	beq.n	80048ba <HAL_ADC_IRQHandler+0x45a>
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488e:	2b00      	cmp	r3, #0
 8004890:	d013      	beq.n	80048ba <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004896:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048a2:	f043 0208 	orr.w	r2, r3, #8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048b2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fefd 	bl	80056b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80048ba:	bf00      	nop
 80048bc:	3728      	adds	r7, #40	; 0x28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40022000 	.word	0x40022000
 80048c8:	40022100 	.word	0x40022100
 80048cc:	40022300 	.word	0x40022300
 80048d0:	58026300 	.word	0x58026300

080048d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004910:	b590      	push	{r4, r7, lr}
 8004912:	b0b9      	sub	sp, #228	; 0xe4
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800492a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4aa9      	ldr	r2, [pc, #676]	; (8004bd8 <HAL_ADC_ConfigChannel+0x2c8>)
 8004932:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800493a:	2b01      	cmp	r3, #1
 800493c:	d102      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x34>
 800493e:	2302      	movs	r3, #2
 8004940:	f000 bcfa 	b.w	8005338 <HAL_ADC_ConfigChannel+0xa28>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fa7f 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 84de 	bne.w	800531a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a9e      	ldr	r2, [pc, #632]	; (8004bdc <HAL_ADC_ConfigChannel+0x2cc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d033      	beq.n	80049d0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004970:	2b00      	cmp	r3, #0
 8004972:	d108      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x76>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	0e9b      	lsrs	r3, r3, #26
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	2201      	movs	r2, #1
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	e01d      	b.n	80049c2 <HAL_ADC_ConfigChannel+0xb2>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800499a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800499e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80049a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80049aa:	2320      	movs	r3, #32
 80049ac:	e004      	b.n	80049b8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80049ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	2201      	movs	r2, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	69d1      	ldr	r1, [r2, #28]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	430b      	orrs	r3, r1
 80049ce:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	f7ff f8e8 	bl	8003bb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fa34 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 80049ec:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fa40 	bl	8003e7a <LL_ADC_INJ_IsConversionOngoing>
 80049fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f040 8270 	bne.w	8004ee8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 826b 	bne.w	8004ee8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f7ff f906 	bl	8003c30 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a6c      	ldr	r2, [pc, #432]	; (8004bdc <HAL_ADC_ConfigChannel+0x2cc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d10d      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	08db      	lsrs	r3, r3, #3
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a48:	e032      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a4a:	4b65      	ldr	r3, [pc, #404]	; (8004be0 <HAL_ADC_ConfigChannel+0x2d0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a56:	d10b      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x160>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	e01d      	b.n	8004aac <HAL_ADC_ConfigChannel+0x19c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10b      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x186>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	089b      	lsrs	r3, r3, #2
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	e00a      	b.n	8004aac <HAL_ADC_ConfigChannel+0x19c>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d048      	beq.n	8004b4a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	6919      	ldr	r1, [r3, #16]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ac8:	f7fe ff6e 	bl	80039a8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a42      	ldr	r2, [pc, #264]	; (8004bdc <HAL_ADC_ConfigChannel+0x2cc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d119      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6919      	ldr	r1, [r3, #16]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f7ff f806 	bl	8003af4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6919      	ldr	r1, [r3, #16]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d102      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x1f0>
 8004afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004afe:	e000      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x1f2>
 8004b00:	2300      	movs	r3, #0
 8004b02:	461a      	mov	r2, r3
 8004b04:	f7fe ffd4 	bl	8003ab0 <LL_ADC_SetOffsetSaturation>
 8004b08:	e1ee      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6919      	ldr	r1, [r3, #16]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d102      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x212>
 8004b1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b20:	e000      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x214>
 8004b22:	2300      	movs	r3, #0
 8004b24:	461a      	mov	r2, r3
 8004b26:	f7fe ffa1 	bl	8003a6c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6919      	ldr	r1, [r3, #16]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	7e1b      	ldrb	r3, [r3, #24]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d102      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x230>
 8004b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b3e:	e000      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x232>
 8004b40:	2300      	movs	r3, #0
 8004b42:	461a      	mov	r2, r3
 8004b44:	f7fe ff78 	bl	8003a38 <LL_ADC_SetDataRightShift>
 8004b48:	e1ce      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a23      	ldr	r2, [pc, #140]	; (8004bdc <HAL_ADC_ConfigChannel+0x2cc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	f040 8181 	bne.w	8004e58 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fe ff55 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <HAL_ADC_ConfigChannel+0x272>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe ff4a 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	0e9b      	lsrs	r3, r3, #26
 8004b7c:	f003 021f 	and.w	r2, r3, #31
 8004b80:	e01e      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x2b0>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2100      	movs	r1, #0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe ff3f 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b98:	fa93 f3a3 	rbit	r3, r3
 8004b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004ba0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004ba8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	e004      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004bb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bb8:	fab3 f383 	clz	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x2d4>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	0e9b      	lsrs	r3, r3, #26
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	e01e      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x306>
 8004bd8:	47ff0000 	.word	0x47ff0000
 8004bdc:	58026000 	.word	0x58026000
 8004be0:	5c001000 	.word	0x5c001000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bf0:	fa93 f3a3 	rbit	r3, r3
 8004bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004c00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004c08:	2320      	movs	r3, #32
 8004c0a:	e004      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c10:	fab3 f383 	clz	r3, r3
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d106      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2100      	movs	r1, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe ff88 	bl	8003b38 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe feec 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x344>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe fee1 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	0e9b      	lsrs	r3, r3, #26
 8004c4e:	f003 021f 	and.w	r2, r3, #31
 8004c52:	e01e      	b.n	8004c92 <HAL_ADC_ConfigChannel+0x382>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2101      	movs	r1, #1
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe fed6 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c6a:	fa93 f3a3 	rbit	r3, r3
 8004c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004c72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004c7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004c82:	2320      	movs	r3, #32
 8004c84:	e004      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d105      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x39a>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	0e9b      	lsrs	r3, r3, #26
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	e018      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x3cc>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004cc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004cce:	2320      	movs	r3, #32
 8004cd0:	e004      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d106      	bne.n	8004cee <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fe ff25 	bl	8003b38 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fe fe89 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x40a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2102      	movs	r1, #2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe fe7e 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004d10:	4603      	mov	r3, r0
 8004d12:	0e9b      	lsrs	r3, r3, #26
 8004d14:	f003 021f 	and.w	r2, r3, #31
 8004d18:	e01e      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x448>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2102      	movs	r1, #2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe fe73 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d30:	fa93 f3a3 	rbit	r3, r3
 8004d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004d48:	2320      	movs	r3, #32
 8004d4a:	e004      	b.n	8004d56 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x460>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0e9b      	lsrs	r3, r3, #26
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	e014      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x48a>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	e004      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d94:	fab3 f383 	clz	r3, r3
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d106      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	2102      	movs	r1, #2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fec6 	bl	8003b38 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2103      	movs	r1, #3
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fe2a 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x4c8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2103      	movs	r1, #3
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe fe1f 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	0e9b      	lsrs	r3, r3, #26
 8004dd2:	f003 021f 	and.w	r2, r3, #31
 8004dd6:	e017      	b.n	8004e08 <HAL_ADC_ConfigChannel+0x4f8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2103      	movs	r1, #3
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fe14 	bl	8003a0c <LL_ADC_GetOffsetChannel>
 8004de4:	4603      	mov	r3, r0
 8004de6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dea:	fa93 f3a3 	rbit	r3, r3
 8004dee:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004dfa:	2320      	movs	r3, #32
 8004dfc:	e003      	b.n	8004e06 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e00:	fab3 f383 	clz	r3, r3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x510>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0e9b      	lsrs	r3, r3, #26
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	e011      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x534>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e28:	fa93 f3a3 	rbit	r3, r3
 8004e2c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e30:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004e38:	2320      	movs	r3, #32
 8004e3a:	e003      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e3e:	fab3 f383 	clz	r3, r3
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d14f      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2103      	movs	r1, #3
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe fe71 	bl	8003b38 <LL_ADC_SetOffsetState>
 8004e56:	e047      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	069b      	lsls	r3, r3, #26
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d107      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e7a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	069b      	lsls	r3, r3, #26
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d107      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e9e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	069b      	lsls	r3, r3, #26
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d107      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ec2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	069b      	lsls	r3, r3, #26
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d107      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ee6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe ff89 	bl	8003e04 <LL_ADC_IsEnabled>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 8219 	bne.w	800532c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6819      	ldr	r1, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f7fe febe 	bl	8003c88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4aa1      	ldr	r2, [pc, #644]	; (8005198 <HAL_ADC_ConfigChannel+0x888>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	f040 812e 	bne.w	8005174 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x630>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	0e9b      	lsrs	r3, r3, #26
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	bf94      	ite	ls
 8004f38:	2301      	movls	r3, #1
 8004f3a:	2300      	movhi	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e019      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x664>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f48:	fa93 f3a3 	rbit	r3, r3
 8004f4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004f58:	2320      	movs	r3, #32
 8004f5a:	e003      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f5e:	fab3 f383 	clz	r3, r3
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	3301      	adds	r3, #1
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2b09      	cmp	r3, #9
 8004f6c:	bf94      	ite	ls
 8004f6e:	2301      	movls	r3, #1
 8004f70:	2300      	movhi	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d079      	beq.n	800506c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x684>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	0e9b      	lsrs	r3, r3, #26
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	069b      	lsls	r3, r3, #26
 8004f8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f92:	e015      	b.n	8004fc0 <HAL_ADC_ConfigChannel+0x6b0>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9c:	fa93 f3a3 	rbit	r3, r3
 8004fa0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004fac:	2320      	movs	r3, #32
 8004fae:	e003      	b.n	8004fb8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb2:	fab3 f383 	clz	r3, r3
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	3301      	adds	r3, #1
 8004fba:	069b      	lsls	r3, r3, #26
 8004fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x6d0>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	0e9b      	lsrs	r3, r3, #26
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2101      	movs	r1, #1
 8004fda:	fa01 f303 	lsl.w	r3, r1, r3
 8004fde:	e017      	b.n	8005010 <HAL_ADC_ConfigChannel+0x700>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe8:	fa93 f3a3 	rbit	r3, r3
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	e003      	b.n	8005004 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffe:	fab3 f383 	clz	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	3301      	adds	r3, #1
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2101      	movs	r1, #1
 800500c:	fa01 f303 	lsl.w	r3, r1, r3
 8005010:	ea42 0103 	orr.w	r1, r2, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x726>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	0e9b      	lsrs	r3, r3, #26
 8005026:	3301      	adds	r3, #1
 8005028:	f003 021f 	and.w	r2, r3, #31
 800502c:	4613      	mov	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4413      	add	r3, r2
 8005032:	051b      	lsls	r3, r3, #20
 8005034:	e018      	b.n	8005068 <HAL_ADC_ConfigChannel+0x758>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503e:	fa93 f3a3 	rbit	r3, r3
 8005042:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800504e:	2320      	movs	r3, #32
 8005050:	e003      	b.n	800505a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	fab3 f383 	clz	r3, r3
 8005058:	b2db      	uxtb	r3, r3
 800505a:	3301      	adds	r3, #1
 800505c:	f003 021f 	and.w	r2, r3, #31
 8005060:	4613      	mov	r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4413      	add	r3, r2
 8005066:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005068:	430b      	orrs	r3, r1
 800506a:	e07e      	b.n	800516a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005074:	2b00      	cmp	r3, #0
 8005076:	d107      	bne.n	8005088 <HAL_ADC_ConfigChannel+0x778>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	0e9b      	lsrs	r3, r3, #26
 800507e:	3301      	adds	r3, #1
 8005080:	069b      	lsls	r3, r3, #26
 8005082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005086:	e015      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x7a4>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	fa93 f3a3 	rbit	r3, r3
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80050a0:	2320      	movs	r3, #32
 80050a2:	e003      	b.n	80050ac <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	fab3 f383 	clz	r3, r3
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	3301      	adds	r3, #1
 80050ae:	069b      	lsls	r3, r3, #26
 80050b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d109      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x7c4>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	0e9b      	lsrs	r3, r3, #26
 80050c6:	3301      	adds	r3, #1
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2101      	movs	r1, #1
 80050ce:	fa01 f303 	lsl.w	r3, r1, r3
 80050d2:	e017      	b.n	8005104 <HAL_ADC_ConfigChannel+0x7f4>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	fa93 f3a3 	rbit	r3, r3
 80050e0:	61bb      	str	r3, [r7, #24]
  return result;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80050ec:	2320      	movs	r3, #32
 80050ee:	e003      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	fab3 f383 	clz	r3, r3
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	3301      	adds	r3, #1
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2101      	movs	r1, #1
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	ea42 0103 	orr.w	r1, r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10d      	bne.n	8005130 <HAL_ADC_ConfigChannel+0x820>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	0e9b      	lsrs	r3, r3, #26
 800511a:	3301      	adds	r3, #1
 800511c:	f003 021f 	and.w	r2, r3, #31
 8005120:	4613      	mov	r3, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4413      	add	r3, r2
 8005126:	3b1e      	subs	r3, #30
 8005128:	051b      	lsls	r3, r3, #20
 800512a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800512e:	e01b      	b.n	8005168 <HAL_ADC_ConfigChannel+0x858>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	fa93 f3a3 	rbit	r3, r3
 800513c:	60fb      	str	r3, [r7, #12]
  return result;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005148:	2320      	movs	r3, #32
 800514a:	e003      	b.n	8005154 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	3301      	adds	r3, #1
 8005156:	f003 021f 	and.w	r2, r3, #31
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	3b1e      	subs	r3, #30
 8005162:	051b      	lsls	r3, r3, #20
 8005164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005168:	430b      	orrs	r3, r1
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	6892      	ldr	r2, [r2, #8]
 800516e:	4619      	mov	r1, r3
 8005170:	f7fe fd5e 	bl	8003c30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f280 80d7 	bge.w	800532c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a06      	ldr	r2, [pc, #24]	; (800519c <HAL_ADC_ConfigChannel+0x88c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d004      	beq.n	8005192 <HAL_ADC_ConfigChannel+0x882>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <HAL_ADC_ConfigChannel+0x890>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10a      	bne.n	80051a8 <HAL_ADC_ConfigChannel+0x898>
 8005192:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <HAL_ADC_ConfigChannel+0x894>)
 8005194:	e009      	b.n	80051aa <HAL_ADC_ConfigChannel+0x89a>
 8005196:	bf00      	nop
 8005198:	47ff0000 	.word	0x47ff0000
 800519c:	40022000 	.word	0x40022000
 80051a0:	40022100 	.word	0x40022100
 80051a4:	40022300 	.word	0x40022300
 80051a8:	4b65      	ldr	r3, [pc, #404]	; (8005340 <HAL_ADC_ConfigChannel+0xa30>)
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fe fbee 	bl	800398c <LL_ADC_GetCommonPathInternalCh>
 80051b0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a62      	ldr	r2, [pc, #392]	; (8005344 <HAL_ADC_ConfigChannel+0xa34>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <HAL_ADC_ConfigChannel+0x8b8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a61      	ldr	r2, [pc, #388]	; (8005348 <HAL_ADC_ConfigChannel+0xa38>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10e      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x8d6>
 80051c8:	485e      	ldr	r0, [pc, #376]	; (8005344 <HAL_ADC_ConfigChannel+0xa34>)
 80051ca:	f7fe fe1b 	bl	8003e04 <LL_ADC_IsEnabled>
 80051ce:	4604      	mov	r4, r0
 80051d0:	485d      	ldr	r0, [pc, #372]	; (8005348 <HAL_ADC_ConfigChannel+0xa38>)
 80051d2:	f7fe fe17 	bl	8003e04 <LL_ADC_IsEnabled>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4323      	orrs	r3, r4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	e008      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x8e8>
 80051e6:	4859      	ldr	r0, [pc, #356]	; (800534c <HAL_ADC_ConfigChannel+0xa3c>)
 80051e8:	f7fe fe0c 	bl	8003e04 <LL_ADC_IsEnabled>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8084 	beq.w	8005306 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a53      	ldr	r2, [pc, #332]	; (8005350 <HAL_ADC_ConfigChannel+0xa40>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d132      	bne.n	800526e <HAL_ADC_ConfigChannel+0x95e>
 8005208:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800520c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d12c      	bne.n	800526e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a4c      	ldr	r2, [pc, #304]	; (800534c <HAL_ADC_ConfigChannel+0xa3c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	f040 8086 	bne.w	800532c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a47      	ldr	r2, [pc, #284]	; (8005344 <HAL_ADC_ConfigChannel+0xa34>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_ADC_ConfigChannel+0x924>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a46      	ldr	r2, [pc, #280]	; (8005348 <HAL_ADC_ConfigChannel+0xa38>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_ADC_ConfigChannel+0x928>
 8005234:	4a47      	ldr	r2, [pc, #284]	; (8005354 <HAL_ADC_ConfigChannel+0xa44>)
 8005236:	e000      	b.n	800523a <HAL_ADC_ConfigChannel+0x92a>
 8005238:	4a41      	ldr	r2, [pc, #260]	; (8005340 <HAL_ADC_ConfigChannel+0xa30>)
 800523a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800523e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f7fe fb8e 	bl	8003966 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800524a:	4b43      	ldr	r3, [pc, #268]	; (8005358 <HAL_ADC_ConfigChannel+0xa48>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	099b      	lsrs	r3, r3, #6
 8005250:	4a42      	ldr	r2, [pc, #264]	; (800535c <HAL_ADC_ConfigChannel+0xa4c>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	3301      	adds	r3, #1
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800525e:	e002      	b.n	8005266 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	3b01      	subs	r3, #1
 8005264:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f9      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800526c:	e05e      	b.n	800532c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a3b      	ldr	r2, [pc, #236]	; (8005360 <HAL_ADC_ConfigChannel+0xa50>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d120      	bne.n	80052ba <HAL_ADC_ConfigChannel+0x9aa>
 8005278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800527c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d11a      	bne.n	80052ba <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a30      	ldr	r2, [pc, #192]	; (800534c <HAL_ADC_ConfigChannel+0xa3c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d14e      	bne.n	800532c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a2c      	ldr	r2, [pc, #176]	; (8005344 <HAL_ADC_ConfigChannel+0xa34>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_ADC_ConfigChannel+0x992>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <HAL_ADC_ConfigChannel+0xa38>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d101      	bne.n	80052a6 <HAL_ADC_ConfigChannel+0x996>
 80052a2:	4a2c      	ldr	r2, [pc, #176]	; (8005354 <HAL_ADC_ConfigChannel+0xa44>)
 80052a4:	e000      	b.n	80052a8 <HAL_ADC_ConfigChannel+0x998>
 80052a6:	4a26      	ldr	r2, [pc, #152]	; (8005340 <HAL_ADC_ConfigChannel+0xa30>)
 80052a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f7fe fb57 	bl	8003966 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052b8:	e038      	b.n	800532c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a29      	ldr	r2, [pc, #164]	; (8005364 <HAL_ADC_ConfigChannel+0xa54>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d133      	bne.n	800532c <HAL_ADC_ConfigChannel+0xa1c>
 80052c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d12d      	bne.n	800532c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1d      	ldr	r2, [pc, #116]	; (800534c <HAL_ADC_ConfigChannel+0xa3c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d128      	bne.n	800532c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a19      	ldr	r2, [pc, #100]	; (8005344 <HAL_ADC_ConfigChannel+0xa34>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_ADC_ConfigChannel+0x9de>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a17      	ldr	r2, [pc, #92]	; (8005348 <HAL_ADC_ConfigChannel+0xa38>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x9e2>
 80052ee:	4a19      	ldr	r2, [pc, #100]	; (8005354 <HAL_ADC_ConfigChannel+0xa44>)
 80052f0:	e000      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x9e4>
 80052f2:	4a13      	ldr	r2, [pc, #76]	; (8005340 <HAL_ADC_ConfigChannel+0xa30>)
 80052f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f7fe fb31 	bl	8003966 <LL_ADC_SetCommonPathInternalCh>
 8005304:	e012      	b.n	800532c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005318:	e008      	b.n	800532c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005334:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005338:	4618      	mov	r0, r3
 800533a:	37e4      	adds	r7, #228	; 0xe4
 800533c:	46bd      	mov	sp, r7
 800533e:	bd90      	pop	{r4, r7, pc}
 8005340:	58026300 	.word	0x58026300
 8005344:	40022000 	.word	0x40022000
 8005348:	40022100 	.word	0x40022100
 800534c:	58026000 	.word	0x58026000
 8005350:	c7520000 	.word	0xc7520000
 8005354:	40022300 	.word	0x40022300
 8005358:	2400100c 	.word	0x2400100c
 800535c:	053e2d63 	.word	0x053e2d63
 8005360:	c3210000 	.word	0xc3210000
 8005364:	cb840000 	.word	0xcb840000

08005368 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7fe fd45 	bl	8003e04 <LL_ADC_IsEnabled>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d16e      	bne.n	800545e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	4b38      	ldr	r3, [pc, #224]	; (8005468 <ADC_Enable+0x100>)
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00d      	beq.n	80053aa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005392:	f043 0210 	orr.w	r2, r3, #16
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800539e:	f043 0201 	orr.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e05a      	b.n	8005460 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fe fd14 	bl	8003ddc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80053b4:	f7fe fa32 	bl	800381c <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2b      	ldr	r2, [pc, #172]	; (800546c <ADC_Enable+0x104>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <ADC_Enable+0x66>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a29      	ldr	r2, [pc, #164]	; (8005470 <ADC_Enable+0x108>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d101      	bne.n	80053d2 <ADC_Enable+0x6a>
 80053ce:	4b29      	ldr	r3, [pc, #164]	; (8005474 <ADC_Enable+0x10c>)
 80053d0:	e000      	b.n	80053d4 <ADC_Enable+0x6c>
 80053d2:	4b29      	ldr	r3, [pc, #164]	; (8005478 <ADC_Enable+0x110>)
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe fc97 	bl	8003d08 <LL_ADC_GetMultimode>
 80053da:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a23      	ldr	r2, [pc, #140]	; (8005470 <ADC_Enable+0x108>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d002      	beq.n	80053ec <ADC_Enable+0x84>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	e000      	b.n	80053ee <ADC_Enable+0x86>
 80053ec:	4b1f      	ldr	r3, [pc, #124]	; (800546c <ADC_Enable+0x104>)
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6812      	ldr	r2, [r2, #0]
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d02c      	beq.n	8005450 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d130      	bne.n	800545e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053fc:	e028      	b.n	8005450 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fcfe 	bl	8003e04 <LL_ADC_IsEnabled>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe fce2 	bl	8003ddc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005418:	f7fe fa00 	bl	800381c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d914      	bls.n	8005450 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d00d      	beq.n	8005450 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	f043 0210 	orr.w	r2, r3, #16
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005444:	f043 0201 	orr.w	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e007      	b.n	8005460 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d1cf      	bne.n	80053fe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	8000003f 	.word	0x8000003f
 800546c:	40022000 	.word	0x40022000
 8005470:	40022100 	.word	0x40022100
 8005474:	40022300 	.word	0x40022300
 8005478:	58026300 	.word	0x58026300

0800547c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6b      	ldr	r2, [pc, #428]	; (8005638 <ADC_ConfigureBoostMode+0x1bc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <ADC_ConfigureBoostMode+0x1c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6a      	ldr	r2, [pc, #424]	; (800563c <ADC_ConfigureBoostMode+0x1c0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d109      	bne.n	80054ac <ADC_ConfigureBoostMode+0x30>
 8005498:	4b69      	ldr	r3, [pc, #420]	; (8005640 <ADC_ConfigureBoostMode+0x1c4>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	e008      	b.n	80054be <ADC_ConfigureBoostMode+0x42>
 80054ac:	4b65      	ldr	r3, [pc, #404]	; (8005644 <ADC_ConfigureBoostMode+0x1c8>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01c      	beq.n	80054fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80054c2:	f005 fa99 	bl	800a9f8 <HAL_RCC_GetHCLKFreq>
 80054c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054d0:	d010      	beq.n	80054f4 <ADC_ConfigureBoostMode+0x78>
 80054d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054d6:	d871      	bhi.n	80055bc <ADC_ConfigureBoostMode+0x140>
 80054d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054dc:	d002      	beq.n	80054e4 <ADC_ConfigureBoostMode+0x68>
 80054de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054e2:	d16b      	bne.n	80055bc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	60fb      	str	r3, [r7, #12]
        break;
 80054f2:	e066      	b.n	80055c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	60fb      	str	r3, [r7, #12]
        break;
 80054fa:	e062      	b.n	80055c2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80054fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005500:	f006 f9a4 	bl	800b84c <HAL_RCCEx_GetPeriphCLKFreq>
 8005504:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800550e:	d051      	beq.n	80055b4 <ADC_ConfigureBoostMode+0x138>
 8005510:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005514:	d854      	bhi.n	80055c0 <ADC_ConfigureBoostMode+0x144>
 8005516:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800551a:	d047      	beq.n	80055ac <ADC_ConfigureBoostMode+0x130>
 800551c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005520:	d84e      	bhi.n	80055c0 <ADC_ConfigureBoostMode+0x144>
 8005522:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005526:	d03d      	beq.n	80055a4 <ADC_ConfigureBoostMode+0x128>
 8005528:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800552c:	d848      	bhi.n	80055c0 <ADC_ConfigureBoostMode+0x144>
 800552e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005532:	d033      	beq.n	800559c <ADC_ConfigureBoostMode+0x120>
 8005534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005538:	d842      	bhi.n	80055c0 <ADC_ConfigureBoostMode+0x144>
 800553a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800553e:	d029      	beq.n	8005594 <ADC_ConfigureBoostMode+0x118>
 8005540:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005544:	d83c      	bhi.n	80055c0 <ADC_ConfigureBoostMode+0x144>
 8005546:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800554a:	d01a      	beq.n	8005582 <ADC_ConfigureBoostMode+0x106>
 800554c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005550:	d836      	bhi.n	80055c0 <ADC_ConfigureBoostMode+0x144>
 8005552:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005556:	d014      	beq.n	8005582 <ADC_ConfigureBoostMode+0x106>
 8005558:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800555c:	d830      	bhi.n	80055c0 <ADC_ConfigureBoostMode+0x144>
 800555e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005562:	d00e      	beq.n	8005582 <ADC_ConfigureBoostMode+0x106>
 8005564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005568:	d82a      	bhi.n	80055c0 <ADC_ConfigureBoostMode+0x144>
 800556a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800556e:	d008      	beq.n	8005582 <ADC_ConfigureBoostMode+0x106>
 8005570:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005574:	d824      	bhi.n	80055c0 <ADC_ConfigureBoostMode+0x144>
 8005576:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800557a:	d002      	beq.n	8005582 <ADC_ConfigureBoostMode+0x106>
 800557c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005580:	d11e      	bne.n	80055c0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	0c9b      	lsrs	r3, r3, #18
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	60fb      	str	r3, [r7, #12]
        break;
 8005592:	e016      	b.n	80055c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	60fb      	str	r3, [r7, #12]
        break;
 800559a:	e012      	b.n	80055c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	60fb      	str	r3, [r7, #12]
        break;
 80055a2:	e00e      	b.n	80055c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	60fb      	str	r3, [r7, #12]
        break;
 80055aa:	e00a      	b.n	80055c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	09db      	lsrs	r3, r3, #7
 80055b0:	60fb      	str	r3, [r7, #12]
        break;
 80055b2:	e006      	b.n	80055c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	60fb      	str	r3, [r7, #12]
        break;
 80055ba:	e002      	b.n	80055c2 <ADC_ConfigureBoostMode+0x146>
        break;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80055c0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4a1f      	ldr	r2, [pc, #124]	; (8005648 <ADC_ConfigureBoostMode+0x1cc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d808      	bhi.n	80055e2 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055de:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80055e0:	e025      	b.n	800562e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <ADC_ConfigureBoostMode+0x1d0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d80a      	bhi.n	8005600 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055fc:	609a      	str	r2, [r3, #8]
}
 80055fe:	e016      	b.n	800562e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4a13      	ldr	r2, [pc, #76]	; (8005650 <ADC_ConfigureBoostMode+0x1d4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d80a      	bhi.n	800561e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561a:	609a      	str	r2, [r3, #8]
}
 800561c:	e007      	b.n	800562e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800562c:	609a      	str	r2, [r3, #8]
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40022000 	.word	0x40022000
 800563c:	40022100 	.word	0x40022100
 8005640:	40022300 	.word	0x40022300
 8005644:	58026300 	.word	0x58026300
 8005648:	005f5e10 	.word	0x005f5e10
 800564c:	00bebc20 	.word	0x00bebc20
 8005650:	017d7840 	.word	0x017d7840

08005654 <LL_ADC_IsEnabled>:
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <LL_ADC_IsEnabled+0x18>
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <LL_ADC_IsEnabled+0x1a>
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <LL_ADC_REG_IsConversionOngoing>:
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b04      	cmp	r3, #4
 800568c:	d101      	bne.n	8005692 <LL_ADC_REG_IsConversionOngoing+0x18>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005704:	b590      	push	{r4, r7, lr}
 8005706:	b0a3      	sub	sp, #140	; 0x8c
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800571e:	2302      	movs	r3, #2
 8005720:	e0c1      	b.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800572a:	2300      	movs	r3, #0
 800572c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800572e:	2300      	movs	r3, #0
 8005730:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a5e      	ldr	r2, [pc, #376]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d102      	bne.n	8005742 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800573c:	4b5d      	ldr	r3, [pc, #372]	; (80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e001      	b.n	8005746 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0a0      	b.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff ff87 	bl	800567a <LL_ADC_REG_IsConversionOngoing>
 800576c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff ff80 	bl	800567a <LL_ADC_REG_IsConversionOngoing>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	f040 8081 	bne.w	8005884 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005782:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005786:	2b00      	cmp	r3, #0
 8005788:	d17c      	bne.n	8005884 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a48      	ldr	r2, [pc, #288]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a46      	ldr	r2, [pc, #280]	; (80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d101      	bne.n	80057a2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800579e:	4b46      	ldr	r3, [pc, #280]	; (80058b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80057a0:	e000      	b.n	80057a4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80057a2:	4b46      	ldr	r3, [pc, #280]	; (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80057a4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d039      	beq.n	8005822 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80057ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a3a      	ldr	r2, [pc, #232]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a39      	ldr	r2, [pc, #228]	; (80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d10e      	bne.n	80057f2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80057d4:	4836      	ldr	r0, [pc, #216]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80057d6:	f7ff ff3d 	bl	8005654 <LL_ADC_IsEnabled>
 80057da:	4604      	mov	r4, r0
 80057dc:	4835      	ldr	r0, [pc, #212]	; (80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80057de:	f7ff ff39 	bl	8005654 <LL_ADC_IsEnabled>
 80057e2:	4603      	mov	r3, r0
 80057e4:	4323      	orrs	r3, r4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	e008      	b.n	8005804 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80057f2:	4833      	ldr	r0, [pc, #204]	; (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80057f4:	f7ff ff2e 	bl	8005654 <LL_ADC_IsEnabled>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bf0c      	ite	eq
 80057fe:	2301      	moveq	r3, #1
 8005800:	2300      	movne	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d047      	beq.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005808:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	4b2d      	ldr	r3, [pc, #180]	; (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800580e:	4013      	ands	r3, r2
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	6811      	ldr	r1, [r2, #0]
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	6892      	ldr	r2, [r2, #8]
 8005818:	430a      	orrs	r2, r1
 800581a:	431a      	orrs	r2, r3
 800581c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800581e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005820:	e03a      	b.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005822:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800582a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800582c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1d      	ldr	r2, [pc, #116]	; (80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10e      	bne.n	8005860 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005842:	481b      	ldr	r0, [pc, #108]	; (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005844:	f7ff ff06 	bl	8005654 <LL_ADC_IsEnabled>
 8005848:	4604      	mov	r4, r0
 800584a:	481a      	ldr	r0, [pc, #104]	; (80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800584c:	f7ff ff02 	bl	8005654 <LL_ADC_IsEnabled>
 8005850:	4603      	mov	r3, r0
 8005852:	4323      	orrs	r3, r4
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	e008      	b.n	8005872 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005860:	4817      	ldr	r0, [pc, #92]	; (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005862:	f7ff fef7 	bl	8005654 <LL_ADC_IsEnabled>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	bf0c      	ite	eq
 800586c:	2301      	moveq	r3, #1
 800586e:	2300      	movne	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d010      	beq.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800587c:	4013      	ands	r3, r2
 800587e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005880:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005882:	e009      	b.n	8005898 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005896:	e000      	b.n	800589a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005898:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80058a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	378c      	adds	r7, #140	; 0x8c
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd90      	pop	{r4, r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40022000 	.word	0x40022000
 80058b4:	40022100 	.word	0x40022100
 80058b8:	40022300 	.word	0x40022300
 80058bc:	58026300 	.word	0x58026300
 80058c0:	58026000 	.word	0x58026000
 80058c4:	fffff0e0 	.word	0xfffff0e0

080058c8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e023      	b.n	8005922 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fd f8bc 	bl	8002a6c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <__NVIC_SetPriorityGrouping>:
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <__NVIC_SetPriorityGrouping+0x40>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005948:	4013      	ands	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <__NVIC_SetPriorityGrouping+0x44>)
 8005956:	4313      	orrs	r3, r2
 8005958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800595a:	4a04      	ldr	r2, [pc, #16]	; (800596c <__NVIC_SetPriorityGrouping+0x40>)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	60d3      	str	r3, [r2, #12]
}
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	e000ed00 	.word	0xe000ed00
 8005970:	05fa0000 	.word	0x05fa0000

08005974 <__NVIC_GetPriorityGrouping>:
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005978:	4b04      	ldr	r3, [pc, #16]	; (800598c <__NVIC_GetPriorityGrouping+0x18>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	0a1b      	lsrs	r3, r3, #8
 800597e:	f003 0307 	and.w	r3, r3, #7
}
 8005982:	4618      	mov	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	e000ed00 	.word	0xe000ed00

08005990 <__NVIC_EnableIRQ>:
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800599a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	db0b      	blt.n	80059ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	f003 021f 	and.w	r2, r3, #31
 80059a8:	4907      	ldr	r1, [pc, #28]	; (80059c8 <__NVIC_EnableIRQ+0x38>)
 80059aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	2001      	movs	r0, #1
 80059b2:	fa00 f202 	lsl.w	r2, r0, r2
 80059b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	e000e100 	.word	0xe000e100

080059cc <__NVIC_SetPriority>:
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4603      	mov	r3, r0
 80059d4:	6039      	str	r1, [r7, #0]
 80059d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	db0a      	blt.n	80059f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	490c      	ldr	r1, [pc, #48]	; (8005a18 <__NVIC_SetPriority+0x4c>)
 80059e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ea:	0112      	lsls	r2, r2, #4
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	440b      	add	r3, r1
 80059f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059f4:	e00a      	b.n	8005a0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	4908      	ldr	r1, [pc, #32]	; (8005a1c <__NVIC_SetPriority+0x50>)
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	3b04      	subs	r3, #4
 8005a04:	0112      	lsls	r2, r2, #4
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	440b      	add	r3, r1
 8005a0a:	761a      	strb	r2, [r3, #24]
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	e000e100 	.word	0xe000e100
 8005a1c:	e000ed00 	.word	0xe000ed00

08005a20 <NVIC_EncodePriority>:
{
 8005a20:	b480      	push	{r7}
 8005a22:	b089      	sub	sp, #36	; 0x24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f1c3 0307 	rsb	r3, r3, #7
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	bf28      	it	cs
 8005a3e:	2304      	movcs	r3, #4
 8005a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3304      	adds	r3, #4
 8005a46:	2b06      	cmp	r3, #6
 8005a48:	d902      	bls.n	8005a50 <NVIC_EncodePriority+0x30>
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	3b03      	subs	r3, #3
 8005a4e:	e000      	b.n	8005a52 <NVIC_EncodePriority+0x32>
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a54:	f04f 32ff 	mov.w	r2, #4294967295
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	43da      	mvns	r2, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	401a      	ands	r2, r3
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a68:	f04f 31ff 	mov.w	r1, #4294967295
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a72:	43d9      	mvns	r1, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a78:	4313      	orrs	r3, r2
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3724      	adds	r7, #36	; 0x24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a98:	d301      	bcc.n	8005a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e00f      	b.n	8005abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ac8 <SysTick_Config+0x40>)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005aa6:	210f      	movs	r1, #15
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	f7ff ff8e 	bl	80059cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <SysTick_Config+0x40>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ab6:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <SysTick_Config+0x40>)
 8005ab8:	2207      	movs	r2, #7
 8005aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	e000e010 	.word	0xe000e010

08005acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff ff29 	bl	800592c <__NVIC_SetPriorityGrouping>
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b086      	sub	sp, #24
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	4603      	mov	r3, r0
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005af0:	f7ff ff40 	bl	8005974 <__NVIC_GetPriorityGrouping>
 8005af4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	6978      	ldr	r0, [r7, #20]
 8005afc:	f7ff ff90 	bl	8005a20 <NVIC_EncodePriority>
 8005b00:	4602      	mov	r2, r0
 8005b02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff ff5f 	bl	80059cc <__NVIC_SetPriority>
}
 8005b0e:	bf00      	nop
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff ff33 	bl	8005990 <__NVIC_EnableIRQ>
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff ffa4 	bl	8005a88 <SysTick_Config>
 8005b40:	4603      	mov	r3, r0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e0b4      	b.n	8005cc8 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8005b5e:	4b5c      	ldr	r3, [pc, #368]	; (8005cd0 <HAL_DFSDM_ChannelInit+0x184>)
 8005b60:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8005b62:	4b5c      	ldr	r3, [pc, #368]	; (8005cd4 <HAL_DFSDM_ChannelInit+0x188>)
 8005b64:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8005b66:	4b5c      	ldr	r3, [pc, #368]	; (8005cd8 <HAL_DFSDM_ChannelInit+0x18c>)
 8005b68:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fa10 	bl	8005f94 <DFSDM_GetChannelFromInstance>
 8005b74:	4603      	mov	r3, r0
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e0a0      	b.n	8005cc8 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fd f842 	bl	8002c10 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d125      	bne.n	8005bea <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	791b      	ldrb	r3, [r3, #4]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d108      	bne.n	8005bde <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	041b      	lsls	r3, r3, #16
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8005bf8:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6819      	ldr	r1, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005c08:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005c0e:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 020f 	bic.w	r2, r2, #15
 8005c26:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6819      	ldr	r1, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8005c4e:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6899      	ldr	r1, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f002 0207 	and.w	r2, r2, #7
 8005c7a:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6859      	ldr	r1, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 f96d 	bl	8005f94 <DFSDM_GetChannelFromInstance>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	240019f8 	.word	0x240019f8
 8005cd4:	240019fc 	.word	0x240019fc
 8005cd8:	40017800 	.word	0x40017800

08005cdc <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e0c8      	b.n	8005e80 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 8005cee:	4b66      	ldr	r3, [pc, #408]	; (8005e88 <HAL_DFSDM_FilterInit+0x1ac>)
 8005cf0:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d109      	bne.n	8005d10 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d003      	beq.n	8005d0c <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0b7      	b.n	8005e80 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7fc fec1 	bl	8002ab0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005d3c:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	7a1b      	ldrb	r3, [r3, #8]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d108      	bne.n	8005d58 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	e007      	b.n	8005d68 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005d66:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	7a5b      	ldrb	r3, [r3, #9]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d108      	bne.n	8005d82 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	e007      	b.n	8005d92 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005d90:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6819      	ldr	r1, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <HAL_DFSDM_FilterInit+0x1b0>)
 8005d9e:	400b      	ands	r3, r1
 8005da0:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d108      	bne.n	8005dbc <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6819      	ldr	r1, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695a      	ldr	r2, [r3, #20]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7c1b      	ldrb	r3, [r3, #16]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d108      	bne.n	8005dd6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0210 	orr.w	r2, r2, #16
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	e007      	b.n	8005de6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0210 	bic.w	r2, r2, #16
 8005de4:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	7c5b      	ldrb	r3, [r3, #17]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d108      	bne.n	8005e00 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0220 	orr.w	r2, r2, #32
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e007      	b.n	8005e10 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0220 	bic.w	r2, r2, #32
 8005e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6959      	ldr	r1, [r3, #20]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <HAL_DFSDM_FilterInit+0x1b4>)
 8005e1c:	400b      	ands	r3, r1
 8005e1e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6959      	ldr	r1, [r3, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005e32:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8005e3a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	7c1a      	ldrb	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0201 	orr.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40017900 	.word	0x40017900
 8005e8c:	ffff80f7 	.word	0xffff80f7
 8005e90:	1c00ff00 	.word	0x1c00ff00

08005e94 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d02c      	beq.n	8005f08 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8005eb4:	2bff      	cmp	r3, #255	; 0xff
 8005eb6:	d027      	beq.n	8005f08 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b16      	ldr	r3, [pc, #88]	; (8005f1c <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8005ec4:	400b      	ands	r3, r1
 8005ec6:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d10d      	bne.n	8005eea <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	431a      	orrs	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	e00a      	b.n	8005f00 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	631a      	str	r2, [r3, #48]	; 0x30
 8005f06:	e001      	b.n	8005f0c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	f8fbffff 	.word	0xf8fbffff

08005f20 <HAL_DFSDM_FilterRegularStart>:
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d004      	beq.n	8005f40 <HAL_DFSDM_FilterRegularStart+0x20>
      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d103      	bne.n	8005f48 <HAL_DFSDM_FilterRegularStart+0x28>
  {
    /* Start regular conversion */
    DFSDM_RegConvStart(hdfsdm_filter);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f873 	bl	800602c <DFSDM_RegConvStart>
 8005f46:	e001      	b.n	8005f4c <HAL_DFSDM_FilterRegularStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0207 	and.w	r2, r3, #7
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f78:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	da00      	bge.n	8005f82 <HAL_DFSDM_FilterGetRegularValue+0x2c>
 8005f80:	33ff      	adds	r3, #255	; 0xff
 8005f82:	121b      	asrs	r3, r3, #8
 8005f84:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 8005f86:	68bb      	ldr	r3, [r7, #8]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <DFSDM_GetChannelFromInstance+0x7c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d102      	bne.n	8005faa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	e02b      	b.n	8006002 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a19      	ldr	r2, [pc, #100]	; (8006014 <DFSDM_GetChannelFromInstance+0x80>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d102      	bne.n	8005fb8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e024      	b.n	8006002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a17      	ldr	r2, [pc, #92]	; (8006018 <DFSDM_GetChannelFromInstance+0x84>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d102      	bne.n	8005fc6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e01d      	b.n	8006002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a14      	ldr	r2, [pc, #80]	; (800601c <DFSDM_GetChannelFromInstance+0x88>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d102      	bne.n	8005fd4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e016      	b.n	8006002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a12      	ldr	r2, [pc, #72]	; (8006020 <DFSDM_GetChannelFromInstance+0x8c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d102      	bne.n	8005fe2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8005fdc:	2304      	movs	r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e00f      	b.n	8006002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a0f      	ldr	r2, [pc, #60]	; (8006024 <DFSDM_GetChannelFromInstance+0x90>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d102      	bne.n	8005ff0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8005fea:	2305      	movs	r3, #5
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	e008      	b.n	8006002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a0d      	ldr	r2, [pc, #52]	; (8006028 <DFSDM_GetChannelFromInstance+0x94>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d102      	bne.n	8005ffe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8005ff8:	2306      	movs	r3, #6
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	e001      	b.n	8006002 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8005ffe:	2307      	movs	r3, #7
 8006000:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40017800 	.word	0x40017800
 8006014:	40017820 	.word	0x40017820
 8006018:	40017840 	.word	0x40017840
 800601c:	40017860 	.word	0x40017860
 8006020:	40017880 	.word	0x40017880
 8006024:	400178a0 	.word	0x400178a0
 8006028:	400178c0 	.word	0x400178c0

0800602c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e033      	b.n	80060b6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800606c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0201 	orr.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006084:	2b03      	cmp	r3, #3
 8006086:	d116      	bne.n	80060b6 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	d107      	bne.n	80060a0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0202 	orr.w	r2, r2, #2
 800609e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d102      	bne.n	80060b0 <DFSDM_RegConvStart+0x84>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	e000      	b.n	80060b2 <DFSDM_RegConvStart+0x86>
 80060b0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <DFSDM_RegConvStart+0x98>
 80060c0:	2202      	movs	r2, #2
 80060c2:	e000      	b.n	80060c6 <DFSDM_RegConvStart+0x9a>
 80060c4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80060e0:	f7fd fb9c 	bl	800381c <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e314      	b.n	800671a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a66      	ldr	r2, [pc, #408]	; (8006290 <HAL_DMA_Init+0x1b8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d04a      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a65      	ldr	r2, [pc, #404]	; (8006294 <HAL_DMA_Init+0x1bc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d045      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a63      	ldr	r2, [pc, #396]	; (8006298 <HAL_DMA_Init+0x1c0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d040      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a62      	ldr	r2, [pc, #392]	; (800629c <HAL_DMA_Init+0x1c4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d03b      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a60      	ldr	r2, [pc, #384]	; (80062a0 <HAL_DMA_Init+0x1c8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d036      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a5f      	ldr	r2, [pc, #380]	; (80062a4 <HAL_DMA_Init+0x1cc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d031      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a5d      	ldr	r2, [pc, #372]	; (80062a8 <HAL_DMA_Init+0x1d0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d02c      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a5c      	ldr	r2, [pc, #368]	; (80062ac <HAL_DMA_Init+0x1d4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d027      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5a      	ldr	r2, [pc, #360]	; (80062b0 <HAL_DMA_Init+0x1d8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d022      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a59      	ldr	r2, [pc, #356]	; (80062b4 <HAL_DMA_Init+0x1dc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d01d      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a57      	ldr	r2, [pc, #348]	; (80062b8 <HAL_DMA_Init+0x1e0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d018      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a56      	ldr	r2, [pc, #344]	; (80062bc <HAL_DMA_Init+0x1e4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d013      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a54      	ldr	r2, [pc, #336]	; (80062c0 <HAL_DMA_Init+0x1e8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00e      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a53      	ldr	r2, [pc, #332]	; (80062c4 <HAL_DMA_Init+0x1ec>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d009      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a51      	ldr	r2, [pc, #324]	; (80062c8 <HAL_DMA_Init+0x1f0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d004      	beq.n	8006190 <HAL_DMA_Init+0xb8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a50      	ldr	r2, [pc, #320]	; (80062cc <HAL_DMA_Init+0x1f4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d101      	bne.n	8006194 <HAL_DMA_Init+0xbc>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <HAL_DMA_Init+0xbe>
 8006194:	2300      	movs	r3, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 813c 	beq.w	8006414 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a37      	ldr	r2, [pc, #220]	; (8006290 <HAL_DMA_Init+0x1b8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d04a      	beq.n	800624c <HAL_DMA_Init+0x174>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a36      	ldr	r2, [pc, #216]	; (8006294 <HAL_DMA_Init+0x1bc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d045      	beq.n	800624c <HAL_DMA_Init+0x174>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a34      	ldr	r2, [pc, #208]	; (8006298 <HAL_DMA_Init+0x1c0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d040      	beq.n	800624c <HAL_DMA_Init+0x174>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a33      	ldr	r2, [pc, #204]	; (800629c <HAL_DMA_Init+0x1c4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d03b      	beq.n	800624c <HAL_DMA_Init+0x174>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a31      	ldr	r2, [pc, #196]	; (80062a0 <HAL_DMA_Init+0x1c8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d036      	beq.n	800624c <HAL_DMA_Init+0x174>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a30      	ldr	r2, [pc, #192]	; (80062a4 <HAL_DMA_Init+0x1cc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d031      	beq.n	800624c <HAL_DMA_Init+0x174>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a2e      	ldr	r2, [pc, #184]	; (80062a8 <HAL_DMA_Init+0x1d0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d02c      	beq.n	800624c <HAL_DMA_Init+0x174>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a2d      	ldr	r2, [pc, #180]	; (80062ac <HAL_DMA_Init+0x1d4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d027      	beq.n	800624c <HAL_DMA_Init+0x174>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a2b      	ldr	r2, [pc, #172]	; (80062b0 <HAL_DMA_Init+0x1d8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <HAL_DMA_Init+0x174>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a2a      	ldr	r2, [pc, #168]	; (80062b4 <HAL_DMA_Init+0x1dc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d01d      	beq.n	800624c <HAL_DMA_Init+0x174>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a28      	ldr	r2, [pc, #160]	; (80062b8 <HAL_DMA_Init+0x1e0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_DMA_Init+0x174>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a27      	ldr	r2, [pc, #156]	; (80062bc <HAL_DMA_Init+0x1e4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_DMA_Init+0x174>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a25      	ldr	r2, [pc, #148]	; (80062c0 <HAL_DMA_Init+0x1e8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_DMA_Init+0x174>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a24      	ldr	r2, [pc, #144]	; (80062c4 <HAL_DMA_Init+0x1ec>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_DMA_Init+0x174>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a22      	ldr	r2, [pc, #136]	; (80062c8 <HAL_DMA_Init+0x1f0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_DMA_Init+0x174>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a21      	ldr	r2, [pc, #132]	; (80062cc <HAL_DMA_Init+0x1f4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d108      	bne.n	800625e <HAL_DMA_Init+0x186>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0201 	bic.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	e007      	b.n	800626e <HAL_DMA_Init+0x196>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0201 	bic.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800626e:	e02f      	b.n	80062d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006270:	f7fd fad4 	bl	800381c <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b05      	cmp	r3, #5
 800627c:	d928      	bls.n	80062d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2203      	movs	r2, #3
 8006288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e244      	b.n	800671a <HAL_DMA_Init+0x642>
 8006290:	40020010 	.word	0x40020010
 8006294:	40020028 	.word	0x40020028
 8006298:	40020040 	.word	0x40020040
 800629c:	40020058 	.word	0x40020058
 80062a0:	40020070 	.word	0x40020070
 80062a4:	40020088 	.word	0x40020088
 80062a8:	400200a0 	.word	0x400200a0
 80062ac:	400200b8 	.word	0x400200b8
 80062b0:	40020410 	.word	0x40020410
 80062b4:	40020428 	.word	0x40020428
 80062b8:	40020440 	.word	0x40020440
 80062bc:	40020458 	.word	0x40020458
 80062c0:	40020470 	.word	0x40020470
 80062c4:	40020488 	.word	0x40020488
 80062c8:	400204a0 	.word	0x400204a0
 80062cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1c8      	bne.n	8006270 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4b84      	ldr	r3, [pc, #528]	; (80064fc <HAL_DMA_Init+0x424>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80062f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006302:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800630e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b04      	cmp	r3, #4
 8006322:	d107      	bne.n	8006334 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632c:	4313      	orrs	r3, r2
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b28      	cmp	r3, #40	; 0x28
 800633a:	d903      	bls.n	8006344 <HAL_DMA_Init+0x26c>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b2e      	cmp	r3, #46	; 0x2e
 8006342:	d91f      	bls.n	8006384 <HAL_DMA_Init+0x2ac>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b3e      	cmp	r3, #62	; 0x3e
 800634a:	d903      	bls.n	8006354 <HAL_DMA_Init+0x27c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b42      	cmp	r3, #66	; 0x42
 8006352:	d917      	bls.n	8006384 <HAL_DMA_Init+0x2ac>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b46      	cmp	r3, #70	; 0x46
 800635a:	d903      	bls.n	8006364 <HAL_DMA_Init+0x28c>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b48      	cmp	r3, #72	; 0x48
 8006362:	d90f      	bls.n	8006384 <HAL_DMA_Init+0x2ac>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	2b4e      	cmp	r3, #78	; 0x4e
 800636a:	d903      	bls.n	8006374 <HAL_DMA_Init+0x29c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b52      	cmp	r3, #82	; 0x52
 8006372:	d907      	bls.n	8006384 <HAL_DMA_Init+0x2ac>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b73      	cmp	r3, #115	; 0x73
 800637a:	d905      	bls.n	8006388 <HAL_DMA_Init+0x2b0>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b77      	cmp	r3, #119	; 0x77
 8006382:	d801      	bhi.n	8006388 <HAL_DMA_Init+0x2b0>
 8006384:	2301      	movs	r3, #1
 8006386:	e000      	b.n	800638a <HAL_DMA_Init+0x2b2>
 8006388:	2300      	movs	r3, #0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006394:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f023 0307 	bic.w	r3, r3, #7
 80063ac:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d117      	bne.n	80063f0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00e      	beq.n	80063f0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 f9b6 	bl	8007744 <DMA_CheckFifoParam>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d008      	beq.n	80063f0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2240      	movs	r2, #64	; 0x40
 80063e2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e194      	b.n	800671a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 f8f1 	bl	80075e0 <DMA_CalcBaseAndBitshift>
 80063fe:	4603      	mov	r3, r0
 8006400:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	223f      	movs	r2, #63	; 0x3f
 800640c:	409a      	lsls	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	609a      	str	r2, [r3, #8]
 8006412:	e0ca      	b.n	80065aa <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a39      	ldr	r2, [pc, #228]	; (8006500 <HAL_DMA_Init+0x428>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d022      	beq.n	8006464 <HAL_DMA_Init+0x38c>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a38      	ldr	r2, [pc, #224]	; (8006504 <HAL_DMA_Init+0x42c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d01d      	beq.n	8006464 <HAL_DMA_Init+0x38c>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a36      	ldr	r2, [pc, #216]	; (8006508 <HAL_DMA_Init+0x430>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d018      	beq.n	8006464 <HAL_DMA_Init+0x38c>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a35      	ldr	r2, [pc, #212]	; (800650c <HAL_DMA_Init+0x434>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d013      	beq.n	8006464 <HAL_DMA_Init+0x38c>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a33      	ldr	r2, [pc, #204]	; (8006510 <HAL_DMA_Init+0x438>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00e      	beq.n	8006464 <HAL_DMA_Init+0x38c>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a32      	ldr	r2, [pc, #200]	; (8006514 <HAL_DMA_Init+0x43c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d009      	beq.n	8006464 <HAL_DMA_Init+0x38c>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a30      	ldr	r2, [pc, #192]	; (8006518 <HAL_DMA_Init+0x440>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d004      	beq.n	8006464 <HAL_DMA_Init+0x38c>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a2f      	ldr	r2, [pc, #188]	; (800651c <HAL_DMA_Init+0x444>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d101      	bne.n	8006468 <HAL_DMA_Init+0x390>
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <HAL_DMA_Init+0x392>
 8006468:	2300      	movs	r3, #0
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 8094 	beq.w	8006598 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a22      	ldr	r2, [pc, #136]	; (8006500 <HAL_DMA_Init+0x428>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d021      	beq.n	80064be <HAL_DMA_Init+0x3e6>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a21      	ldr	r2, [pc, #132]	; (8006504 <HAL_DMA_Init+0x42c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d01c      	beq.n	80064be <HAL_DMA_Init+0x3e6>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1f      	ldr	r2, [pc, #124]	; (8006508 <HAL_DMA_Init+0x430>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d017      	beq.n	80064be <HAL_DMA_Init+0x3e6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1e      	ldr	r2, [pc, #120]	; (800650c <HAL_DMA_Init+0x434>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d012      	beq.n	80064be <HAL_DMA_Init+0x3e6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1c      	ldr	r2, [pc, #112]	; (8006510 <HAL_DMA_Init+0x438>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00d      	beq.n	80064be <HAL_DMA_Init+0x3e6>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1b      	ldr	r2, [pc, #108]	; (8006514 <HAL_DMA_Init+0x43c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d008      	beq.n	80064be <HAL_DMA_Init+0x3e6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a19      	ldr	r2, [pc, #100]	; (8006518 <HAL_DMA_Init+0x440>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <HAL_DMA_Init+0x3e6>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a18      	ldr	r2, [pc, #96]	; (800651c <HAL_DMA_Init+0x444>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <HAL_DMA_Init+0x448>)
 80064dc:	4013      	ands	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b40      	cmp	r3, #64	; 0x40
 80064e6:	d01d      	beq.n	8006524 <HAL_DMA_Init+0x44c>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b80      	cmp	r3, #128	; 0x80
 80064ee:	d102      	bne.n	80064f6 <HAL_DMA_Init+0x41e>
 80064f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064f4:	e017      	b.n	8006526 <HAL_DMA_Init+0x44e>
 80064f6:	2300      	movs	r3, #0
 80064f8:	e015      	b.n	8006526 <HAL_DMA_Init+0x44e>
 80064fa:	bf00      	nop
 80064fc:	fe10803f 	.word	0xfe10803f
 8006500:	58025408 	.word	0x58025408
 8006504:	5802541c 	.word	0x5802541c
 8006508:	58025430 	.word	0x58025430
 800650c:	58025444 	.word	0x58025444
 8006510:	58025458 	.word	0x58025458
 8006514:	5802546c 	.word	0x5802546c
 8006518:	58025480 	.word	0x58025480
 800651c:	58025494 	.word	0x58025494
 8006520:	fffe000f 	.word	0xfffe000f
 8006524:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	68d2      	ldr	r2, [r2, #12]
 800652a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800652c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006534:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800653c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006544:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800654c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006554:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	4b6e      	ldr	r3, [pc, #440]	; (8006724 <HAL_DMA_Init+0x64c>)
 800656c:	4413      	add	r3, r2
 800656e:	4a6e      	ldr	r2, [pc, #440]	; (8006728 <HAL_DMA_Init+0x650>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	009a      	lsls	r2, r3, #2
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 f82f 	bl	80075e0 <DMA_CalcBaseAndBitshift>
 8006582:	4603      	mov	r3, r0
 8006584:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2201      	movs	r2, #1
 8006590:	409a      	lsls	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	e008      	b.n	80065aa <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2240      	movs	r2, #64	; 0x40
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2203      	movs	r2, #3
 80065a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e0b7      	b.n	800671a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5f      	ldr	r2, [pc, #380]	; (800672c <HAL_DMA_Init+0x654>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d072      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a5d      	ldr	r2, [pc, #372]	; (8006730 <HAL_DMA_Init+0x658>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d06d      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a5c      	ldr	r2, [pc, #368]	; (8006734 <HAL_DMA_Init+0x65c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d068      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a5a      	ldr	r2, [pc, #360]	; (8006738 <HAL_DMA_Init+0x660>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d063      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a59      	ldr	r2, [pc, #356]	; (800673c <HAL_DMA_Init+0x664>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d05e      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a57      	ldr	r2, [pc, #348]	; (8006740 <HAL_DMA_Init+0x668>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d059      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a56      	ldr	r2, [pc, #344]	; (8006744 <HAL_DMA_Init+0x66c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d054      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a54      	ldr	r2, [pc, #336]	; (8006748 <HAL_DMA_Init+0x670>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d04f      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a53      	ldr	r2, [pc, #332]	; (800674c <HAL_DMA_Init+0x674>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d04a      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a51      	ldr	r2, [pc, #324]	; (8006750 <HAL_DMA_Init+0x678>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d045      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a50      	ldr	r2, [pc, #320]	; (8006754 <HAL_DMA_Init+0x67c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d040      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a4e      	ldr	r2, [pc, #312]	; (8006758 <HAL_DMA_Init+0x680>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d03b      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a4d      	ldr	r2, [pc, #308]	; (800675c <HAL_DMA_Init+0x684>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d036      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a4b      	ldr	r2, [pc, #300]	; (8006760 <HAL_DMA_Init+0x688>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d031      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a4a      	ldr	r2, [pc, #296]	; (8006764 <HAL_DMA_Init+0x68c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d02c      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a48      	ldr	r2, [pc, #288]	; (8006768 <HAL_DMA_Init+0x690>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d027      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a47      	ldr	r2, [pc, #284]	; (800676c <HAL_DMA_Init+0x694>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d022      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a45      	ldr	r2, [pc, #276]	; (8006770 <HAL_DMA_Init+0x698>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01d      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a44      	ldr	r2, [pc, #272]	; (8006774 <HAL_DMA_Init+0x69c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d018      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a42      	ldr	r2, [pc, #264]	; (8006778 <HAL_DMA_Init+0x6a0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a41      	ldr	r2, [pc, #260]	; (800677c <HAL_DMA_Init+0x6a4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a3f      	ldr	r2, [pc, #252]	; (8006780 <HAL_DMA_Init+0x6a8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d009      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a3e      	ldr	r2, [pc, #248]	; (8006784 <HAL_DMA_Init+0x6ac>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_DMA_Init+0x5c2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a3c      	ldr	r2, [pc, #240]	; (8006788 <HAL_DMA_Init+0x6b0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d101      	bne.n	800669e <HAL_DMA_Init+0x5c6>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <HAL_DMA_Init+0x5c8>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d032      	beq.n	800670a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f8c9 	bl	800783c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b80      	cmp	r3, #128	; 0x80
 80066b0:	d102      	bne.n	80066b8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d010      	beq.n	80066f8 <HAL_DMA_Init+0x620>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d80c      	bhi.n	80066f8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 f946 	bl	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066f4:	605a      	str	r2, [r3, #4]
 80066f6:	e008      	b.n	800670a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	a7fdabf8 	.word	0xa7fdabf8
 8006728:	cccccccd 	.word	0xcccccccd
 800672c:	40020010 	.word	0x40020010
 8006730:	40020028 	.word	0x40020028
 8006734:	40020040 	.word	0x40020040
 8006738:	40020058 	.word	0x40020058
 800673c:	40020070 	.word	0x40020070
 8006740:	40020088 	.word	0x40020088
 8006744:	400200a0 	.word	0x400200a0
 8006748:	400200b8 	.word	0x400200b8
 800674c:	40020410 	.word	0x40020410
 8006750:	40020428 	.word	0x40020428
 8006754:	40020440 	.word	0x40020440
 8006758:	40020458 	.word	0x40020458
 800675c:	40020470 	.word	0x40020470
 8006760:	40020488 	.word	0x40020488
 8006764:	400204a0 	.word	0x400204a0
 8006768:	400204b8 	.word	0x400204b8
 800676c:	58025408 	.word	0x58025408
 8006770:	5802541c 	.word	0x5802541c
 8006774:	58025430 	.word	0x58025430
 8006778:	58025444 	.word	0x58025444
 800677c:	58025458 	.word	0x58025458
 8006780:	5802546c 	.word	0x5802546c
 8006784:	58025480 	.word	0x58025480
 8006788:	58025494 	.word	0x58025494

0800678c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08a      	sub	sp, #40	; 0x28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006798:	4b67      	ldr	r3, [pc, #412]	; (8006938 <HAL_DMA_IRQHandler+0x1ac>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a67      	ldr	r2, [pc, #412]	; (800693c <HAL_DMA_IRQHandler+0x1b0>)
 800679e:	fba2 2303 	umull	r2, r3, r2, r3
 80067a2:	0a9b      	lsrs	r3, r3, #10
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a5f      	ldr	r2, [pc, #380]	; (8006940 <HAL_DMA_IRQHandler+0x1b4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d04a      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a5d      	ldr	r2, [pc, #372]	; (8006944 <HAL_DMA_IRQHandler+0x1b8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d045      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a5c      	ldr	r2, [pc, #368]	; (8006948 <HAL_DMA_IRQHandler+0x1bc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d040      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a5a      	ldr	r2, [pc, #360]	; (800694c <HAL_DMA_IRQHandler+0x1c0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d03b      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a59      	ldr	r2, [pc, #356]	; (8006950 <HAL_DMA_IRQHandler+0x1c4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d036      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a57      	ldr	r2, [pc, #348]	; (8006954 <HAL_DMA_IRQHandler+0x1c8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d031      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a56      	ldr	r2, [pc, #344]	; (8006958 <HAL_DMA_IRQHandler+0x1cc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d02c      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a54      	ldr	r2, [pc, #336]	; (800695c <HAL_DMA_IRQHandler+0x1d0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d027      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a53      	ldr	r2, [pc, #332]	; (8006960 <HAL_DMA_IRQHandler+0x1d4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d022      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a51      	ldr	r2, [pc, #324]	; (8006964 <HAL_DMA_IRQHandler+0x1d8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01d      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a50      	ldr	r2, [pc, #320]	; (8006968 <HAL_DMA_IRQHandler+0x1dc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d018      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a4e      	ldr	r2, [pc, #312]	; (800696c <HAL_DMA_IRQHandler+0x1e0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d013      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a4d      	ldr	r2, [pc, #308]	; (8006970 <HAL_DMA_IRQHandler+0x1e4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00e      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a4b      	ldr	r2, [pc, #300]	; (8006974 <HAL_DMA_IRQHandler+0x1e8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d009      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a4a      	ldr	r2, [pc, #296]	; (8006978 <HAL_DMA_IRQHandler+0x1ec>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d004      	beq.n	800685e <HAL_DMA_IRQHandler+0xd2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a48      	ldr	r2, [pc, #288]	; (800697c <HAL_DMA_IRQHandler+0x1f0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d101      	bne.n	8006862 <HAL_DMA_IRQHandler+0xd6>
 800685e:	2301      	movs	r3, #1
 8006860:	e000      	b.n	8006864 <HAL_DMA_IRQHandler+0xd8>
 8006862:	2300      	movs	r3, #0
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 842b 	beq.w	80070c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686e:	f003 031f 	and.w	r3, r3, #31
 8006872:	2208      	movs	r2, #8
 8006874:	409a      	lsls	r2, r3
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	4013      	ands	r3, r2
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80a2 	beq.w	80069c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a2e      	ldr	r2, [pc, #184]	; (8006940 <HAL_DMA_IRQHandler+0x1b4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d04a      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a2d      	ldr	r2, [pc, #180]	; (8006944 <HAL_DMA_IRQHandler+0x1b8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d045      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a2b      	ldr	r2, [pc, #172]	; (8006948 <HAL_DMA_IRQHandler+0x1bc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d040      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a2a      	ldr	r2, [pc, #168]	; (800694c <HAL_DMA_IRQHandler+0x1c0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d03b      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a28      	ldr	r2, [pc, #160]	; (8006950 <HAL_DMA_IRQHandler+0x1c4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d036      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a27      	ldr	r2, [pc, #156]	; (8006954 <HAL_DMA_IRQHandler+0x1c8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d031      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a25      	ldr	r2, [pc, #148]	; (8006958 <HAL_DMA_IRQHandler+0x1cc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d02c      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a24      	ldr	r2, [pc, #144]	; (800695c <HAL_DMA_IRQHandler+0x1d0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d027      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a22      	ldr	r2, [pc, #136]	; (8006960 <HAL_DMA_IRQHandler+0x1d4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d022      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a21      	ldr	r2, [pc, #132]	; (8006964 <HAL_DMA_IRQHandler+0x1d8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d01d      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1f      	ldr	r2, [pc, #124]	; (8006968 <HAL_DMA_IRQHandler+0x1dc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d018      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1e      	ldr	r2, [pc, #120]	; (800696c <HAL_DMA_IRQHandler+0x1e0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d013      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1c      	ldr	r2, [pc, #112]	; (8006970 <HAL_DMA_IRQHandler+0x1e4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00e      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1b      	ldr	r2, [pc, #108]	; (8006974 <HAL_DMA_IRQHandler+0x1e8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d009      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a19      	ldr	r2, [pc, #100]	; (8006978 <HAL_DMA_IRQHandler+0x1ec>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_DMA_IRQHandler+0x194>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a18      	ldr	r2, [pc, #96]	; (800697c <HAL_DMA_IRQHandler+0x1f0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d12f      	bne.n	8006980 <HAL_DMA_IRQHandler+0x1f4>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	bf14      	ite	ne
 800692e:	2301      	movne	r3, #1
 8006930:	2300      	moveq	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	e02e      	b.n	8006994 <HAL_DMA_IRQHandler+0x208>
 8006936:	bf00      	nop
 8006938:	2400100c 	.word	0x2400100c
 800693c:	1b4e81b5 	.word	0x1b4e81b5
 8006940:	40020010 	.word	0x40020010
 8006944:	40020028 	.word	0x40020028
 8006948:	40020040 	.word	0x40020040
 800694c:	40020058 	.word	0x40020058
 8006950:	40020070 	.word	0x40020070
 8006954:	40020088 	.word	0x40020088
 8006958:	400200a0 	.word	0x400200a0
 800695c:	400200b8 	.word	0x400200b8
 8006960:	40020410 	.word	0x40020410
 8006964:	40020428 	.word	0x40020428
 8006968:	40020440 	.word	0x40020440
 800696c:	40020458 	.word	0x40020458
 8006970:	40020470 	.word	0x40020470
 8006974:	40020488 	.word	0x40020488
 8006978:	400204a0 	.word	0x400204a0
 800697c:	400204b8 	.word	0x400204b8
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	bf14      	ite	ne
 800698e:	2301      	movne	r3, #1
 8006990:	2300      	moveq	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d015      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0204 	bic.w	r2, r2, #4
 80069a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	2208      	movs	r2, #8
 80069b2:	409a      	lsls	r2, r3
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	f043 0201 	orr.w	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	fa22 f303 	lsr.w	r3, r2, r3
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d06e      	beq.n	8006ab8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a69      	ldr	r2, [pc, #420]	; (8006b84 <HAL_DMA_IRQHandler+0x3f8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d04a      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a67      	ldr	r2, [pc, #412]	; (8006b88 <HAL_DMA_IRQHandler+0x3fc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d045      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a66      	ldr	r2, [pc, #408]	; (8006b8c <HAL_DMA_IRQHandler+0x400>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d040      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a64      	ldr	r2, [pc, #400]	; (8006b90 <HAL_DMA_IRQHandler+0x404>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d03b      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a63      	ldr	r2, [pc, #396]	; (8006b94 <HAL_DMA_IRQHandler+0x408>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d036      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a61      	ldr	r2, [pc, #388]	; (8006b98 <HAL_DMA_IRQHandler+0x40c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d031      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a60      	ldr	r2, [pc, #384]	; (8006b9c <HAL_DMA_IRQHandler+0x410>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d02c      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a5e      	ldr	r2, [pc, #376]	; (8006ba0 <HAL_DMA_IRQHandler+0x414>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d027      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a5d      	ldr	r2, [pc, #372]	; (8006ba4 <HAL_DMA_IRQHandler+0x418>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d022      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a5b      	ldr	r2, [pc, #364]	; (8006ba8 <HAL_DMA_IRQHandler+0x41c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01d      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a5a      	ldr	r2, [pc, #360]	; (8006bac <HAL_DMA_IRQHandler+0x420>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d018      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a58      	ldr	r2, [pc, #352]	; (8006bb0 <HAL_DMA_IRQHandler+0x424>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a57      	ldr	r2, [pc, #348]	; (8006bb4 <HAL_DMA_IRQHandler+0x428>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00e      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a55      	ldr	r2, [pc, #340]	; (8006bb8 <HAL_DMA_IRQHandler+0x42c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d009      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a54      	ldr	r2, [pc, #336]	; (8006bbc <HAL_DMA_IRQHandler+0x430>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d004      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x2ee>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a52      	ldr	r2, [pc, #328]	; (8006bc0 <HAL_DMA_IRQHandler+0x434>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d10a      	bne.n	8006a90 <HAL_DMA_IRQHandler+0x304>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf14      	ite	ne
 8006a88:	2301      	movne	r3, #1
 8006a8a:	2300      	moveq	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	e003      	b.n	8006a98 <HAL_DMA_IRQHandler+0x30c>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2300      	movs	r3, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00d      	beq.n	8006ab8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab0:	f043 0202 	orr.w	r2, r3, #2
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 808f 	beq.w	8006bec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2c      	ldr	r2, [pc, #176]	; (8006b84 <HAL_DMA_IRQHandler+0x3f8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d04a      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2a      	ldr	r2, [pc, #168]	; (8006b88 <HAL_DMA_IRQHandler+0x3fc>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d045      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a29      	ldr	r2, [pc, #164]	; (8006b8c <HAL_DMA_IRQHandler+0x400>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d040      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a27      	ldr	r2, [pc, #156]	; (8006b90 <HAL_DMA_IRQHandler+0x404>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d03b      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a26      	ldr	r2, [pc, #152]	; (8006b94 <HAL_DMA_IRQHandler+0x408>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d036      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a24      	ldr	r2, [pc, #144]	; (8006b98 <HAL_DMA_IRQHandler+0x40c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d031      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a23      	ldr	r2, [pc, #140]	; (8006b9c <HAL_DMA_IRQHandler+0x410>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d02c      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <HAL_DMA_IRQHandler+0x414>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d027      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a20      	ldr	r2, [pc, #128]	; (8006ba4 <HAL_DMA_IRQHandler+0x418>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d022      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <HAL_DMA_IRQHandler+0x41c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1d      	ldr	r2, [pc, #116]	; (8006bac <HAL_DMA_IRQHandler+0x420>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1b      	ldr	r2, [pc, #108]	; (8006bb0 <HAL_DMA_IRQHandler+0x424>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <HAL_DMA_IRQHandler+0x428>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a18      	ldr	r2, [pc, #96]	; (8006bb8 <HAL_DMA_IRQHandler+0x42c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <HAL_DMA_IRQHandler+0x430>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x3e2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a15      	ldr	r2, [pc, #84]	; (8006bc0 <HAL_DMA_IRQHandler+0x434>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d12a      	bne.n	8006bc4 <HAL_DMA_IRQHandler+0x438>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bf14      	ite	ne
 8006b7c:	2301      	movne	r3, #1
 8006b7e:	2300      	moveq	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	e023      	b.n	8006bcc <HAL_DMA_IRQHandler+0x440>
 8006b84:	40020010 	.word	0x40020010
 8006b88:	40020028 	.word	0x40020028
 8006b8c:	40020040 	.word	0x40020040
 8006b90:	40020058 	.word	0x40020058
 8006b94:	40020070 	.word	0x40020070
 8006b98:	40020088 	.word	0x40020088
 8006b9c:	400200a0 	.word	0x400200a0
 8006ba0:	400200b8 	.word	0x400200b8
 8006ba4:	40020410 	.word	0x40020410
 8006ba8:	40020428 	.word	0x40020428
 8006bac:	40020440 	.word	0x40020440
 8006bb0:	40020458 	.word	0x40020458
 8006bb4:	40020470 	.word	0x40020470
 8006bb8:	40020488 	.word	0x40020488
 8006bbc:	400204a0 	.word	0x400204a0
 8006bc0:	400204b8 	.word	0x400204b8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00d      	beq.n	8006bec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2204      	movs	r2, #4
 8006bda:	409a      	lsls	r2, r3
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	f043 0204 	orr.w	r2, r3, #4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	2210      	movs	r2, #16
 8006bf6:	409a      	lsls	r2, r3
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 80a6 	beq.w	8006d4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a85      	ldr	r2, [pc, #532]	; (8006e1c <HAL_DMA_IRQHandler+0x690>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d04a      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a83      	ldr	r2, [pc, #524]	; (8006e20 <HAL_DMA_IRQHandler+0x694>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d045      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a82      	ldr	r2, [pc, #520]	; (8006e24 <HAL_DMA_IRQHandler+0x698>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d040      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a80      	ldr	r2, [pc, #512]	; (8006e28 <HAL_DMA_IRQHandler+0x69c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d03b      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a7f      	ldr	r2, [pc, #508]	; (8006e2c <HAL_DMA_IRQHandler+0x6a0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d036      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a7d      	ldr	r2, [pc, #500]	; (8006e30 <HAL_DMA_IRQHandler+0x6a4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d031      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a7c      	ldr	r2, [pc, #496]	; (8006e34 <HAL_DMA_IRQHandler+0x6a8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d02c      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a7a      	ldr	r2, [pc, #488]	; (8006e38 <HAL_DMA_IRQHandler+0x6ac>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d027      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a79      	ldr	r2, [pc, #484]	; (8006e3c <HAL_DMA_IRQHandler+0x6b0>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d022      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a77      	ldr	r2, [pc, #476]	; (8006e40 <HAL_DMA_IRQHandler+0x6b4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d01d      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a76      	ldr	r2, [pc, #472]	; (8006e44 <HAL_DMA_IRQHandler+0x6b8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d018      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a74      	ldr	r2, [pc, #464]	; (8006e48 <HAL_DMA_IRQHandler+0x6bc>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a73      	ldr	r2, [pc, #460]	; (8006e4c <HAL_DMA_IRQHandler+0x6c0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00e      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a71      	ldr	r2, [pc, #452]	; (8006e50 <HAL_DMA_IRQHandler+0x6c4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d009      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a70      	ldr	r2, [pc, #448]	; (8006e54 <HAL_DMA_IRQHandler+0x6c8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <HAL_DMA_IRQHandler+0x516>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a6e      	ldr	r2, [pc, #440]	; (8006e58 <HAL_DMA_IRQHandler+0x6cc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d10a      	bne.n	8006cb8 <HAL_DMA_IRQHandler+0x52c>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0308 	and.w	r3, r3, #8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	bf14      	ite	ne
 8006cb0:	2301      	movne	r3, #1
 8006cb2:	2300      	moveq	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	e009      	b.n	8006ccc <HAL_DMA_IRQHandler+0x540>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bf14      	ite	ne
 8006cc6:	2301      	movne	r3, #1
 8006cc8:	2300      	moveq	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d03e      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	2210      	movs	r2, #16
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d018      	beq.n	8006d20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d108      	bne.n	8006d0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d024      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	4798      	blx	r3
 8006d0c:	e01f      	b.n	8006d4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01b      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
 8006d1e:	e016      	b.n	8006d4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d107      	bne.n	8006d3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0208 	bic.w	r2, r2, #8
 8006d3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	2220      	movs	r2, #32
 8006d58:	409a      	lsls	r2, r3
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8110 	beq.w	8006f84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a2c      	ldr	r2, [pc, #176]	; (8006e1c <HAL_DMA_IRQHandler+0x690>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d04a      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a2b      	ldr	r2, [pc, #172]	; (8006e20 <HAL_DMA_IRQHandler+0x694>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d045      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a29      	ldr	r2, [pc, #164]	; (8006e24 <HAL_DMA_IRQHandler+0x698>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d040      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a28      	ldr	r2, [pc, #160]	; (8006e28 <HAL_DMA_IRQHandler+0x69c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d03b      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <HAL_DMA_IRQHandler+0x6a0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d036      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a25      	ldr	r2, [pc, #148]	; (8006e30 <HAL_DMA_IRQHandler+0x6a4>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d031      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a23      	ldr	r2, [pc, #140]	; (8006e34 <HAL_DMA_IRQHandler+0x6a8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d02c      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a22      	ldr	r2, [pc, #136]	; (8006e38 <HAL_DMA_IRQHandler+0x6ac>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d027      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a20      	ldr	r2, [pc, #128]	; (8006e3c <HAL_DMA_IRQHandler+0x6b0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d022      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a1f      	ldr	r2, [pc, #124]	; (8006e40 <HAL_DMA_IRQHandler+0x6b4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d01d      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <HAL_DMA_IRQHandler+0x6b8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d018      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <HAL_DMA_IRQHandler+0x6bc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d013      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a1a      	ldr	r2, [pc, #104]	; (8006e4c <HAL_DMA_IRQHandler+0x6c0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00e      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a19      	ldr	r2, [pc, #100]	; (8006e50 <HAL_DMA_IRQHandler+0x6c4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d009      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a17      	ldr	r2, [pc, #92]	; (8006e54 <HAL_DMA_IRQHandler+0x6c8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d004      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x678>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a16      	ldr	r2, [pc, #88]	; (8006e58 <HAL_DMA_IRQHandler+0x6cc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d12b      	bne.n	8006e5c <HAL_DMA_IRQHandler+0x6d0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0310 	and.w	r3, r3, #16
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bf14      	ite	ne
 8006e12:	2301      	movne	r3, #1
 8006e14:	2300      	moveq	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	e02a      	b.n	8006e70 <HAL_DMA_IRQHandler+0x6e4>
 8006e1a:	bf00      	nop
 8006e1c:	40020010 	.word	0x40020010
 8006e20:	40020028 	.word	0x40020028
 8006e24:	40020040 	.word	0x40020040
 8006e28:	40020058 	.word	0x40020058
 8006e2c:	40020070 	.word	0x40020070
 8006e30:	40020088 	.word	0x40020088
 8006e34:	400200a0 	.word	0x400200a0
 8006e38:	400200b8 	.word	0x400200b8
 8006e3c:	40020410 	.word	0x40020410
 8006e40:	40020428 	.word	0x40020428
 8006e44:	40020440 	.word	0x40020440
 8006e48:	40020458 	.word	0x40020458
 8006e4c:	40020470 	.word	0x40020470
 8006e50:	40020488 	.word	0x40020488
 8006e54:	400204a0 	.word	0x400204a0
 8006e58:	400204b8 	.word	0x400204b8
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	bf14      	ite	ne
 8006e6a:	2301      	movne	r3, #1
 8006e6c:	2300      	moveq	r3, #0
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8087 	beq.w	8006f84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	2220      	movs	r2, #32
 8006e80:	409a      	lsls	r2, r3
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d139      	bne.n	8006f06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0216 	bic.w	r2, r2, #22
 8006ea0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695a      	ldr	r2, [r3, #20]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006eb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d103      	bne.n	8006ec2 <HAL_DMA_IRQHandler+0x736>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d007      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0208 	bic.w	r2, r2, #8
 8006ed0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	223f      	movs	r2, #63	; 0x3f
 8006edc:	409a      	lsls	r2, r3
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 834a 	beq.w	8007590 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
          }
          return;
 8006f04:	e344      	b.n	8007590 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d018      	beq.n	8006f46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d108      	bne.n	8006f34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d02c      	beq.n	8006f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3
 8006f32:	e027      	b.n	8006f84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d023      	beq.n	8006f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	4798      	blx	r3
 8006f44:	e01e      	b.n	8006f84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10f      	bne.n	8006f74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0210 	bic.w	r2, r2, #16
 8006f62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 8306 	beq.w	800759a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8088 	beq.w	80070ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a7a      	ldr	r2, [pc, #488]	; (8007194 <HAL_DMA_IRQHandler+0xa08>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d04a      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a79      	ldr	r2, [pc, #484]	; (8007198 <HAL_DMA_IRQHandler+0xa0c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d045      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a77      	ldr	r2, [pc, #476]	; (800719c <HAL_DMA_IRQHandler+0xa10>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d040      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a76      	ldr	r2, [pc, #472]	; (80071a0 <HAL_DMA_IRQHandler+0xa14>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d03b      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a74      	ldr	r2, [pc, #464]	; (80071a4 <HAL_DMA_IRQHandler+0xa18>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d036      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a73      	ldr	r2, [pc, #460]	; (80071a8 <HAL_DMA_IRQHandler+0xa1c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d031      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a71      	ldr	r2, [pc, #452]	; (80071ac <HAL_DMA_IRQHandler+0xa20>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d02c      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a70      	ldr	r2, [pc, #448]	; (80071b0 <HAL_DMA_IRQHandler+0xa24>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d027      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a6e      	ldr	r2, [pc, #440]	; (80071b4 <HAL_DMA_IRQHandler+0xa28>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d022      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a6d      	ldr	r2, [pc, #436]	; (80071b8 <HAL_DMA_IRQHandler+0xa2c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d01d      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a6b      	ldr	r2, [pc, #428]	; (80071bc <HAL_DMA_IRQHandler+0xa30>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d018      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a6a      	ldr	r2, [pc, #424]	; (80071c0 <HAL_DMA_IRQHandler+0xa34>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d013      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a68      	ldr	r2, [pc, #416]	; (80071c4 <HAL_DMA_IRQHandler+0xa38>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00e      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a67      	ldr	r2, [pc, #412]	; (80071c8 <HAL_DMA_IRQHandler+0xa3c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d009      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a65      	ldr	r2, [pc, #404]	; (80071cc <HAL_DMA_IRQHandler+0xa40>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d004      	beq.n	8007044 <HAL_DMA_IRQHandler+0x8b8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a64      	ldr	r2, [pc, #400]	; (80071d0 <HAL_DMA_IRQHandler+0xa44>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d108      	bne.n	8007056 <HAL_DMA_IRQHandler+0x8ca>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0201 	bic.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	e007      	b.n	8007066 <HAL_DMA_IRQHandler+0x8da>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3301      	adds	r3, #1
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706e:	429a      	cmp	r2, r3
 8007070:	d307      	bcc.n	8007082 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1f2      	bne.n	8007066 <HAL_DMA_IRQHandler+0x8da>
 8007080:	e000      	b.n	8007084 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007082:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d004      	beq.n	800709c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2203      	movs	r2, #3
 8007096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800709a:	e003      	b.n	80070a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8272 	beq.w	800759a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
 80070be:	e26c      	b.n	800759a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a43      	ldr	r2, [pc, #268]	; (80071d4 <HAL_DMA_IRQHandler+0xa48>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d022      	beq.n	8007110 <HAL_DMA_IRQHandler+0x984>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a42      	ldr	r2, [pc, #264]	; (80071d8 <HAL_DMA_IRQHandler+0xa4c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d01d      	beq.n	8007110 <HAL_DMA_IRQHandler+0x984>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a40      	ldr	r2, [pc, #256]	; (80071dc <HAL_DMA_IRQHandler+0xa50>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d018      	beq.n	8007110 <HAL_DMA_IRQHandler+0x984>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a3f      	ldr	r2, [pc, #252]	; (80071e0 <HAL_DMA_IRQHandler+0xa54>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d013      	beq.n	8007110 <HAL_DMA_IRQHandler+0x984>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a3d      	ldr	r2, [pc, #244]	; (80071e4 <HAL_DMA_IRQHandler+0xa58>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00e      	beq.n	8007110 <HAL_DMA_IRQHandler+0x984>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a3c      	ldr	r2, [pc, #240]	; (80071e8 <HAL_DMA_IRQHandler+0xa5c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d009      	beq.n	8007110 <HAL_DMA_IRQHandler+0x984>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a3a      	ldr	r2, [pc, #232]	; (80071ec <HAL_DMA_IRQHandler+0xa60>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d004      	beq.n	8007110 <HAL_DMA_IRQHandler+0x984>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a39      	ldr	r2, [pc, #228]	; (80071f0 <HAL_DMA_IRQHandler+0xa64>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d101      	bne.n	8007114 <HAL_DMA_IRQHandler+0x988>
 8007110:	2301      	movs	r3, #1
 8007112:	e000      	b.n	8007116 <HAL_DMA_IRQHandler+0x98a>
 8007114:	2300      	movs	r3, #0
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 823f 	beq.w	800759a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	2204      	movs	r2, #4
 800712e:	409a      	lsls	r2, r3
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	4013      	ands	r3, r2
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 80cd 	beq.w	80072d4 <HAL_DMA_IRQHandler+0xb48>
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80c7 	beq.w	80072d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2204      	movs	r2, #4
 8007150:	409a      	lsls	r2, r3
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d049      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d109      	bne.n	800717e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 8210 	beq.w	8007594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800717c:	e20a      	b.n	8007594 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8206 	beq.w	8007594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007190:	e200      	b.n	8007594 <HAL_DMA_IRQHandler+0xe08>
 8007192:	bf00      	nop
 8007194:	40020010 	.word	0x40020010
 8007198:	40020028 	.word	0x40020028
 800719c:	40020040 	.word	0x40020040
 80071a0:	40020058 	.word	0x40020058
 80071a4:	40020070 	.word	0x40020070
 80071a8:	40020088 	.word	0x40020088
 80071ac:	400200a0 	.word	0x400200a0
 80071b0:	400200b8 	.word	0x400200b8
 80071b4:	40020410 	.word	0x40020410
 80071b8:	40020428 	.word	0x40020428
 80071bc:	40020440 	.word	0x40020440
 80071c0:	40020458 	.word	0x40020458
 80071c4:	40020470 	.word	0x40020470
 80071c8:	40020488 	.word	0x40020488
 80071cc:	400204a0 	.word	0x400204a0
 80071d0:	400204b8 	.word	0x400204b8
 80071d4:	58025408 	.word	0x58025408
 80071d8:	5802541c 	.word	0x5802541c
 80071dc:	58025430 	.word	0x58025430
 80071e0:	58025444 	.word	0x58025444
 80071e4:	58025458 	.word	0x58025458
 80071e8:	5802546c 	.word	0x5802546c
 80071ec:	58025480 	.word	0x58025480
 80071f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d160      	bne.n	80072c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a7f      	ldr	r2, [pc, #508]	; (8007400 <HAL_DMA_IRQHandler+0xc74>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d04a      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a7d      	ldr	r2, [pc, #500]	; (8007404 <HAL_DMA_IRQHandler+0xc78>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d045      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a7c      	ldr	r2, [pc, #496]	; (8007408 <HAL_DMA_IRQHandler+0xc7c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d040      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a7a      	ldr	r2, [pc, #488]	; (800740c <HAL_DMA_IRQHandler+0xc80>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d03b      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a79      	ldr	r2, [pc, #484]	; (8007410 <HAL_DMA_IRQHandler+0xc84>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d036      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a77      	ldr	r2, [pc, #476]	; (8007414 <HAL_DMA_IRQHandler+0xc88>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d031      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a76      	ldr	r2, [pc, #472]	; (8007418 <HAL_DMA_IRQHandler+0xc8c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d02c      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a74      	ldr	r2, [pc, #464]	; (800741c <HAL_DMA_IRQHandler+0xc90>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d027      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a73      	ldr	r2, [pc, #460]	; (8007420 <HAL_DMA_IRQHandler+0xc94>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d022      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a71      	ldr	r2, [pc, #452]	; (8007424 <HAL_DMA_IRQHandler+0xc98>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d01d      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a70      	ldr	r2, [pc, #448]	; (8007428 <HAL_DMA_IRQHandler+0xc9c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d018      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a6e      	ldr	r2, [pc, #440]	; (800742c <HAL_DMA_IRQHandler+0xca0>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d013      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a6d      	ldr	r2, [pc, #436]	; (8007430 <HAL_DMA_IRQHandler+0xca4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00e      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a6b      	ldr	r2, [pc, #428]	; (8007434 <HAL_DMA_IRQHandler+0xca8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d009      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a6a      	ldr	r2, [pc, #424]	; (8007438 <HAL_DMA_IRQHandler+0xcac>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d004      	beq.n	800729e <HAL_DMA_IRQHandler+0xb12>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a68      	ldr	r2, [pc, #416]	; (800743c <HAL_DMA_IRQHandler+0xcb0>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d108      	bne.n	80072b0 <HAL_DMA_IRQHandler+0xb24>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0208 	bic.w	r2, r2, #8
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e007      	b.n	80072c0 <HAL_DMA_IRQHandler+0xb34>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0204 	bic.w	r2, r2, #4
 80072be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8165 	beq.w	8007594 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072d2:	e15f      	b.n	8007594 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d8:	f003 031f 	and.w	r3, r3, #31
 80072dc:	2202      	movs	r2, #2
 80072de:	409a      	lsls	r2, r3
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 80c5 	beq.w	8007474 <HAL_DMA_IRQHandler+0xce8>
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 80bf 	beq.w	8007474 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fa:	f003 031f 	and.w	r3, r3, #31
 80072fe:	2202      	movs	r2, #2
 8007300:	409a      	lsls	r2, r3
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d018      	beq.n	8007342 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d109      	bne.n	800732e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 813a 	beq.w	8007598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800732c:	e134      	b.n	8007598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 8130 	beq.w	8007598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007340:	e12a      	b.n	8007598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	f040 8089 	bne.w	8007460 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a2b      	ldr	r2, [pc, #172]	; (8007400 <HAL_DMA_IRQHandler+0xc74>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d04a      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a29      	ldr	r2, [pc, #164]	; (8007404 <HAL_DMA_IRQHandler+0xc78>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d045      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a28      	ldr	r2, [pc, #160]	; (8007408 <HAL_DMA_IRQHandler+0xc7c>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d040      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a26      	ldr	r2, [pc, #152]	; (800740c <HAL_DMA_IRQHandler+0xc80>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d03b      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a25      	ldr	r2, [pc, #148]	; (8007410 <HAL_DMA_IRQHandler+0xc84>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d036      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a23      	ldr	r2, [pc, #140]	; (8007414 <HAL_DMA_IRQHandler+0xc88>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d031      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a22      	ldr	r2, [pc, #136]	; (8007418 <HAL_DMA_IRQHandler+0xc8c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d02c      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a20      	ldr	r2, [pc, #128]	; (800741c <HAL_DMA_IRQHandler+0xc90>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d027      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a1f      	ldr	r2, [pc, #124]	; (8007420 <HAL_DMA_IRQHandler+0xc94>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d022      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <HAL_DMA_IRQHandler+0xc98>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d01d      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1c      	ldr	r2, [pc, #112]	; (8007428 <HAL_DMA_IRQHandler+0xc9c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d018      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1a      	ldr	r2, [pc, #104]	; (800742c <HAL_DMA_IRQHandler+0xca0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d013      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a19      	ldr	r2, [pc, #100]	; (8007430 <HAL_DMA_IRQHandler+0xca4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00e      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a17      	ldr	r2, [pc, #92]	; (8007434 <HAL_DMA_IRQHandler+0xca8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d009      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a16      	ldr	r2, [pc, #88]	; (8007438 <HAL_DMA_IRQHandler+0xcac>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d004      	beq.n	80073ee <HAL_DMA_IRQHandler+0xc62>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a14      	ldr	r2, [pc, #80]	; (800743c <HAL_DMA_IRQHandler+0xcb0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d128      	bne.n	8007440 <HAL_DMA_IRQHandler+0xcb4>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0214 	bic.w	r2, r2, #20
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	e027      	b.n	8007450 <HAL_DMA_IRQHandler+0xcc4>
 8007400:	40020010 	.word	0x40020010
 8007404:	40020028 	.word	0x40020028
 8007408:	40020040 	.word	0x40020040
 800740c:	40020058 	.word	0x40020058
 8007410:	40020070 	.word	0x40020070
 8007414:	40020088 	.word	0x40020088
 8007418:	400200a0 	.word	0x400200a0
 800741c:	400200b8 	.word	0x400200b8
 8007420:	40020410 	.word	0x40020410
 8007424:	40020428 	.word	0x40020428
 8007428:	40020440 	.word	0x40020440
 800742c:	40020458 	.word	0x40020458
 8007430:	40020470 	.word	0x40020470
 8007434:	40020488 	.word	0x40020488
 8007438:	400204a0 	.word	0x400204a0
 800743c:	400204b8 	.word	0x400204b8
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 020a 	bic.w	r2, r2, #10
 800744e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 8097 	beq.w	8007598 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007472:	e091      	b.n	8007598 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007478:	f003 031f 	and.w	r3, r3, #31
 800747c:	2208      	movs	r2, #8
 800747e:	409a      	lsls	r2, r3
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	4013      	ands	r3, r2
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8088 	beq.w	800759a <HAL_DMA_IRQHandler+0xe0e>
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 8082 	beq.w	800759a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a41      	ldr	r2, [pc, #260]	; (80075a0 <HAL_DMA_IRQHandler+0xe14>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d04a      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a3f      	ldr	r2, [pc, #252]	; (80075a4 <HAL_DMA_IRQHandler+0xe18>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d045      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a3e      	ldr	r2, [pc, #248]	; (80075a8 <HAL_DMA_IRQHandler+0xe1c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d040      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a3c      	ldr	r2, [pc, #240]	; (80075ac <HAL_DMA_IRQHandler+0xe20>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d03b      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a3b      	ldr	r2, [pc, #236]	; (80075b0 <HAL_DMA_IRQHandler+0xe24>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d036      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a39      	ldr	r2, [pc, #228]	; (80075b4 <HAL_DMA_IRQHandler+0xe28>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d031      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a38      	ldr	r2, [pc, #224]	; (80075b8 <HAL_DMA_IRQHandler+0xe2c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d02c      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a36      	ldr	r2, [pc, #216]	; (80075bc <HAL_DMA_IRQHandler+0xe30>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d027      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a35      	ldr	r2, [pc, #212]	; (80075c0 <HAL_DMA_IRQHandler+0xe34>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d022      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a33      	ldr	r2, [pc, #204]	; (80075c4 <HAL_DMA_IRQHandler+0xe38>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d01d      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a32      	ldr	r2, [pc, #200]	; (80075c8 <HAL_DMA_IRQHandler+0xe3c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d018      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a30      	ldr	r2, [pc, #192]	; (80075cc <HAL_DMA_IRQHandler+0xe40>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d013      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a2f      	ldr	r2, [pc, #188]	; (80075d0 <HAL_DMA_IRQHandler+0xe44>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00e      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a2d      	ldr	r2, [pc, #180]	; (80075d4 <HAL_DMA_IRQHandler+0xe48>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d009      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a2c      	ldr	r2, [pc, #176]	; (80075d8 <HAL_DMA_IRQHandler+0xe4c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d004      	beq.n	8007536 <HAL_DMA_IRQHandler+0xdaa>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a2a      	ldr	r2, [pc, #168]	; (80075dc <HAL_DMA_IRQHandler+0xe50>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d108      	bne.n	8007548 <HAL_DMA_IRQHandler+0xdbc>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 021c 	bic.w	r2, r2, #28
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	e007      	b.n	8007558 <HAL_DMA_IRQHandler+0xdcc>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 020e 	bic.w	r2, r2, #14
 8007556:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755c:	f003 031f 	and.w	r3, r3, #31
 8007560:	2201      	movs	r2, #1
 8007562:	409a      	lsls	r2, r3
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
 800758e:	e004      	b.n	800759a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007590:	bf00      	nop
 8007592:	e002      	b.n	800759a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007594:	bf00      	nop
 8007596:	e000      	b.n	800759a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007598:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800759a:	3728      	adds	r7, #40	; 0x28
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	40020010 	.word	0x40020010
 80075a4:	40020028 	.word	0x40020028
 80075a8:	40020040 	.word	0x40020040
 80075ac:	40020058 	.word	0x40020058
 80075b0:	40020070 	.word	0x40020070
 80075b4:	40020088 	.word	0x40020088
 80075b8:	400200a0 	.word	0x400200a0
 80075bc:	400200b8 	.word	0x400200b8
 80075c0:	40020410 	.word	0x40020410
 80075c4:	40020428 	.word	0x40020428
 80075c8:	40020440 	.word	0x40020440
 80075cc:	40020458 	.word	0x40020458
 80075d0:	40020470 	.word	0x40020470
 80075d4:	40020488 	.word	0x40020488
 80075d8:	400204a0 	.word	0x400204a0
 80075dc:	400204b8 	.word	0x400204b8

080075e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a42      	ldr	r2, [pc, #264]	; (80076f8 <DMA_CalcBaseAndBitshift+0x118>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d04a      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a41      	ldr	r2, [pc, #260]	; (80076fc <DMA_CalcBaseAndBitshift+0x11c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d045      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a3f      	ldr	r2, [pc, #252]	; (8007700 <DMA_CalcBaseAndBitshift+0x120>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d040      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a3e      	ldr	r2, [pc, #248]	; (8007704 <DMA_CalcBaseAndBitshift+0x124>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d03b      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a3c      	ldr	r2, [pc, #240]	; (8007708 <DMA_CalcBaseAndBitshift+0x128>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d036      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a3b      	ldr	r2, [pc, #236]	; (800770c <DMA_CalcBaseAndBitshift+0x12c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d031      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a39      	ldr	r2, [pc, #228]	; (8007710 <DMA_CalcBaseAndBitshift+0x130>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d02c      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a38      	ldr	r2, [pc, #224]	; (8007714 <DMA_CalcBaseAndBitshift+0x134>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d027      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a36      	ldr	r2, [pc, #216]	; (8007718 <DMA_CalcBaseAndBitshift+0x138>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d022      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a35      	ldr	r2, [pc, #212]	; (800771c <DMA_CalcBaseAndBitshift+0x13c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d01d      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a33      	ldr	r2, [pc, #204]	; (8007720 <DMA_CalcBaseAndBitshift+0x140>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d018      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a32      	ldr	r2, [pc, #200]	; (8007724 <DMA_CalcBaseAndBitshift+0x144>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d013      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a30      	ldr	r2, [pc, #192]	; (8007728 <DMA_CalcBaseAndBitshift+0x148>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00e      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a2f      	ldr	r2, [pc, #188]	; (800772c <DMA_CalcBaseAndBitshift+0x14c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d009      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a2d      	ldr	r2, [pc, #180]	; (8007730 <DMA_CalcBaseAndBitshift+0x150>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d004      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xa8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a2c      	ldr	r2, [pc, #176]	; (8007734 <DMA_CalcBaseAndBitshift+0x154>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d101      	bne.n	800768c <DMA_CalcBaseAndBitshift+0xac>
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <DMA_CalcBaseAndBitshift+0xae>
 800768c:	2300      	movs	r3, #0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d024      	beq.n	80076dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	3b10      	subs	r3, #16
 800769a:	4a27      	ldr	r2, [pc, #156]	; (8007738 <DMA_CalcBaseAndBitshift+0x158>)
 800769c:	fba2 2303 	umull	r2, r3, r2, r3
 80076a0:	091b      	lsrs	r3, r3, #4
 80076a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	4a24      	ldr	r2, [pc, #144]	; (800773c <DMA_CalcBaseAndBitshift+0x15c>)
 80076ac:	5cd3      	ldrb	r3, [r2, r3]
 80076ae:	461a      	mov	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d908      	bls.n	80076cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	4b1f      	ldr	r3, [pc, #124]	; (8007740 <DMA_CalcBaseAndBitshift+0x160>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	1d1a      	adds	r2, r3, #4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	659a      	str	r2, [r3, #88]	; 0x58
 80076ca:	e00d      	b.n	80076e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	4b1b      	ldr	r3, [pc, #108]	; (8007740 <DMA_CalcBaseAndBitshift+0x160>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6593      	str	r3, [r2, #88]	; 0x58
 80076da:	e005      	b.n	80076e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	40020010 	.word	0x40020010
 80076fc:	40020028 	.word	0x40020028
 8007700:	40020040 	.word	0x40020040
 8007704:	40020058 	.word	0x40020058
 8007708:	40020070 	.word	0x40020070
 800770c:	40020088 	.word	0x40020088
 8007710:	400200a0 	.word	0x400200a0
 8007714:	400200b8 	.word	0x400200b8
 8007718:	40020410 	.word	0x40020410
 800771c:	40020428 	.word	0x40020428
 8007720:	40020440 	.word	0x40020440
 8007724:	40020458 	.word	0x40020458
 8007728:	40020470 	.word	0x40020470
 800772c:	40020488 	.word	0x40020488
 8007730:	400204a0 	.word	0x400204a0
 8007734:	400204b8 	.word	0x400204b8
 8007738:	aaaaaaab 	.word	0xaaaaaaab
 800773c:	0801469c 	.word	0x0801469c
 8007740:	fffffc00 	.word	0xfffffc00

08007744 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d120      	bne.n	800779a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	2b03      	cmp	r3, #3
 800775e:	d858      	bhi.n	8007812 <DMA_CheckFifoParam+0xce>
 8007760:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <DMA_CheckFifoParam+0x24>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	08007779 	.word	0x08007779
 800776c:	0800778b 	.word	0x0800778b
 8007770:	08007779 	.word	0x08007779
 8007774:	08007813 	.word	0x08007813
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d048      	beq.n	8007816 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007788:	e045      	b.n	8007816 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007792:	d142      	bne.n	800781a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007798:	e03f      	b.n	800781a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a2:	d123      	bne.n	80077ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d838      	bhi.n	800781e <DMA_CheckFifoParam+0xda>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <DMA_CheckFifoParam+0x70>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	080077c5 	.word	0x080077c5
 80077b8:	080077cb 	.word	0x080077cb
 80077bc:	080077c5 	.word	0x080077c5
 80077c0:	080077dd 	.word	0x080077dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
        break;
 80077c8:	e030      	b.n	800782c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d025      	beq.n	8007822 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077da:	e022      	b.n	8007822 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077e4:	d11f      	bne.n	8007826 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077ea:	e01c      	b.n	8007826 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d902      	bls.n	80077fa <DMA_CheckFifoParam+0xb6>
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d003      	beq.n	8007800 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80077f8:	e018      	b.n	800782c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	73fb      	strb	r3, [r7, #15]
        break;
 80077fe:	e015      	b.n	800782c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00e      	beq.n	800782a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	73fb      	strb	r3, [r7, #15]
    break;
 8007810:	e00b      	b.n	800782a <DMA_CheckFifoParam+0xe6>
        break;
 8007812:	bf00      	nop
 8007814:	e00a      	b.n	800782c <DMA_CheckFifoParam+0xe8>
        break;
 8007816:	bf00      	nop
 8007818:	e008      	b.n	800782c <DMA_CheckFifoParam+0xe8>
        break;
 800781a:	bf00      	nop
 800781c:	e006      	b.n	800782c <DMA_CheckFifoParam+0xe8>
        break;
 800781e:	bf00      	nop
 8007820:	e004      	b.n	800782c <DMA_CheckFifoParam+0xe8>
        break;
 8007822:	bf00      	nop
 8007824:	e002      	b.n	800782c <DMA_CheckFifoParam+0xe8>
        break;
 8007826:	bf00      	nop
 8007828:	e000      	b.n	800782c <DMA_CheckFifoParam+0xe8>
    break;
 800782a:	bf00      	nop
    }
  }

  return status;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop

0800783c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a38      	ldr	r2, [pc, #224]	; (8007930 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d022      	beq.n	800789a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a36      	ldr	r2, [pc, #216]	; (8007934 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d01d      	beq.n	800789a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a35      	ldr	r2, [pc, #212]	; (8007938 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d018      	beq.n	800789a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a33      	ldr	r2, [pc, #204]	; (800793c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d013      	beq.n	800789a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a32      	ldr	r2, [pc, #200]	; (8007940 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00e      	beq.n	800789a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a30      	ldr	r2, [pc, #192]	; (8007944 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d009      	beq.n	800789a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a2f      	ldr	r2, [pc, #188]	; (8007948 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d004      	beq.n	800789a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a2d      	ldr	r2, [pc, #180]	; (800794c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d101      	bne.n	800789e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800789e:	2300      	movs	r3, #0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01a      	beq.n	80078da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	3b08      	subs	r3, #8
 80078ac:	4a28      	ldr	r2, [pc, #160]	; (8007950 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80078ae:	fba2 2303 	umull	r2, r3, r2, r3
 80078b2:	091b      	lsrs	r3, r3, #4
 80078b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4b26      	ldr	r3, [pc, #152]	; (8007954 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a24      	ldr	r2, [pc, #144]	; (8007958 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80078c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f003 031f 	and.w	r3, r3, #31
 80078d0:	2201      	movs	r2, #1
 80078d2:	409a      	lsls	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80078d8:	e024      	b.n	8007924 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	3b10      	subs	r3, #16
 80078e2:	4a1e      	ldr	r2, [pc, #120]	; (800795c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80078e4:	fba2 2303 	umull	r2, r3, r2, r3
 80078e8:	091b      	lsrs	r3, r3, #4
 80078ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4a1c      	ldr	r2, [pc, #112]	; (8007960 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d806      	bhi.n	8007902 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4a1b      	ldr	r2, [pc, #108]	; (8007964 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d902      	bls.n	8007902 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3308      	adds	r3, #8
 8007900:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4b18      	ldr	r3, [pc, #96]	; (8007968 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a16      	ldr	r2, [pc, #88]	; (800796c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007914:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	2201      	movs	r2, #1
 800791e:	409a      	lsls	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007924:	bf00      	nop
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	58025408 	.word	0x58025408
 8007934:	5802541c 	.word	0x5802541c
 8007938:	58025430 	.word	0x58025430
 800793c:	58025444 	.word	0x58025444
 8007940:	58025458 	.word	0x58025458
 8007944:	5802546c 	.word	0x5802546c
 8007948:	58025480 	.word	0x58025480
 800794c:	58025494 	.word	0x58025494
 8007950:	cccccccd 	.word	0xcccccccd
 8007954:	16009600 	.word	0x16009600
 8007958:	58025880 	.word	0x58025880
 800795c:	aaaaaaab 	.word	0xaaaaaaab
 8007960:	400204b8 	.word	0x400204b8
 8007964:	4002040f 	.word	0x4002040f
 8007968:	10008200 	.word	0x10008200
 800796c:	40020880 	.word	0x40020880

08007970 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d04a      	beq.n	8007a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b08      	cmp	r3, #8
 800798a:	d847      	bhi.n	8007a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a25      	ldr	r2, [pc, #148]	; (8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d022      	beq.n	80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a24      	ldr	r2, [pc, #144]	; (8007a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d01d      	beq.n	80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a22      	ldr	r2, [pc, #136]	; (8007a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d018      	beq.n	80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a21      	ldr	r2, [pc, #132]	; (8007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d013      	beq.n	80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00e      	beq.n	80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a1e      	ldr	r2, [pc, #120]	; (8007a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d009      	beq.n	80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a1c      	ldr	r2, [pc, #112]	; (8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d004      	beq.n	80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a1b      	ldr	r2, [pc, #108]	; (8007a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d101      	bne.n	80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80079dc:	2301      	movs	r3, #1
 80079de:	e000      	b.n	80079e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80079e0:	2300      	movs	r3, #0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4b17      	ldr	r3, [pc, #92]	; (8007a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	461a      	mov	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a15      	ldr	r2, [pc, #84]	; (8007a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80079f8:	671a      	str	r2, [r3, #112]	; 0x70
 80079fa:	e009      	b.n	8007a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	4b14      	ldr	r3, [pc, #80]	; (8007a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	461a      	mov	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a11      	ldr	r2, [pc, #68]	; (8007a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	2201      	movs	r2, #1
 8007a16:	409a      	lsls	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	58025408 	.word	0x58025408
 8007a2c:	5802541c 	.word	0x5802541c
 8007a30:	58025430 	.word	0x58025430
 8007a34:	58025444 	.word	0x58025444
 8007a38:	58025458 	.word	0x58025458
 8007a3c:	5802546c 	.word	0x5802546c
 8007a40:	58025480 	.word	0x58025480
 8007a44:	58025494 	.word	0x58025494
 8007a48:	1600963f 	.word	0x1600963f
 8007a4c:	58025940 	.word	0x58025940
 8007a50:	1000823f 	.word	0x1000823f
 8007a54:	40020940 	.word	0x40020940

08007a58 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b098      	sub	sp, #96	; 0x60
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007a60:	4a84      	ldr	r2, [pc, #528]	; (8007c74 <HAL_FDCAN_Init+0x21c>)
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	4611      	mov	r1, r2
 8007a68:	224c      	movs	r2, #76	; 0x4c
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f00b fd88 	bl	8013580 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e1c6      	b.n	8007e08 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a7e      	ldr	r2, [pc, #504]	; (8007c78 <HAL_FDCAN_Init+0x220>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d106      	bne.n	8007a92 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d106      	bne.n	8007aac <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fb f962 	bl	8002d70 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	699a      	ldr	r2, [r3, #24]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0210 	bic.w	r2, r2, #16
 8007aba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007abc:	f7fb feae 	bl	800381c <HAL_GetTick>
 8007ac0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007ac2:	e014      	b.n	8007aee <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007ac4:	f7fb feaa 	bl	800381c <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b0a      	cmp	r3, #10
 8007ad0:	d90d      	bls.n	8007aee <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ad8:	f043 0201 	orr.w	r2, r3, #1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2203      	movs	r2, #3
 8007ae6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e18c      	b.n	8007e08 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	f003 0308 	and.w	r3, r3, #8
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d0e3      	beq.n	8007ac4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b0c:	f7fb fe86 	bl	800381c <HAL_GetTick>
 8007b10:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007b12:	e014      	b.n	8007b3e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007b14:	f7fb fe82 	bl	800381c <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b0a      	cmp	r3, #10
 8007b20:	d90d      	bls.n	8007b3e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b28:	f043 0201 	orr.w	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2203      	movs	r2, #3
 8007b36:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e164      	b.n	8007e08 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0e3      	beq.n	8007b14 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0202 	orr.w	r2, r2, #2
 8007b5a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7c1b      	ldrb	r3, [r3, #16]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d108      	bne.n	8007b76 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699a      	ldr	r2, [r3, #24]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b72:	619a      	str	r2, [r3, #24]
 8007b74:	e007      	b.n	8007b86 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b84:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7c5b      	ldrb	r3, [r3, #17]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d108      	bne.n	8007ba0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b9c:	619a      	str	r2, [r3, #24]
 8007b9e:	e007      	b.n	8007bb0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bae:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	7c9b      	ldrb	r3, [r3, #18]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d108      	bne.n	8007bca <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bc6:	619a      	str	r2, [r3, #24]
 8007bc8:	e007      	b.n	8007bda <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699a      	ldr	r2, [r3, #24]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bd8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007bfe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691a      	ldr	r2, [r3, #16]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0210 	bic.w	r2, r2, #16
 8007c0e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d108      	bne.n	8007c2a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699a      	ldr	r2, [r3, #24]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0204 	orr.w	r2, r2, #4
 8007c26:	619a      	str	r2, [r3, #24]
 8007c28:	e030      	b.n	8007c8c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d02c      	beq.n	8007c8c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d020      	beq.n	8007c7c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	699a      	ldr	r2, [r3, #24]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c48:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	691a      	ldr	r2, [r3, #16]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0210 	orr.w	r2, r2, #16
 8007c58:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d114      	bne.n	8007c8c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	699a      	ldr	r2, [r3, #24]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0220 	orr.w	r2, r2, #32
 8007c70:	619a      	str	r2, [r3, #24]
 8007c72:	e00b      	b.n	8007c8c <HAL_FDCAN_Init+0x234>
 8007c74:	080145c0 	.word	0x080145c0
 8007c78:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699a      	ldr	r2, [r3, #24]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0220 	orr.w	r2, r2, #32
 8007c8a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c9c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007ca4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007cb4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007cb6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cc0:	d115      	bne.n	8007cee <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007cd0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007cda:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007cea:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007cec:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d14:	4413      	add	r3, r2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d011      	beq.n	8007d3e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007d22:	f023 0107 	bic.w	r1, r3, #7
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	3360      	adds	r3, #96	; 0x60
 8007d2e:	443b      	add	r3, r7
 8007d30:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d011      	beq.n	8007d6a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d4e:	f023 0107 	bic.w	r1, r3, #7
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	3360      	adds	r3, #96	; 0x60
 8007d5a:	443b      	add	r3, r7
 8007d5c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d012      	beq.n	8007d98 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d7a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	3360      	adds	r3, #96	; 0x60
 8007d86:	443b      	add	r3, r7
 8007d88:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007d8c:	011a      	lsls	r2, r3, #4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d012      	beq.n	8007dc6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007da8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	3360      	adds	r3, #96	; 0x60
 8007db4:	443b      	add	r3, r7
 8007db6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007dba:	021a      	lsls	r2, r3, #8
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a11      	ldr	r2, [pc, #68]	; (8007e10 <HAL_FDCAN_Init+0x3b8>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d107      	bne.n	8007de0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f022 0203 	bic.w	r2, r2, #3
 8007dde:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f80b 	bl	8007e14 <FDCAN_CalcultateRamBlockAddresses>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007e04:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3760      	adds	r7, #96	; 0x60
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	4000a000 	.word	0x4000a000

08007e14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e20:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007e2a:	4ba7      	ldr	r3, [pc, #668]	; (80080c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	0091      	lsls	r1, r2, #2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	6812      	ldr	r2, [r2, #0]
 8007e36:	430b      	orrs	r3, r1
 8007e38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e44:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	041a      	lsls	r2, r3, #16
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	4413      	add	r3, r2
 8007e60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e6a:	4b97      	ldr	r3, [pc, #604]	; (80080c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	0091      	lsls	r1, r2, #2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	430b      	orrs	r3, r1
 8007e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e84:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8c:	041a      	lsls	r2, r3, #16
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007eac:	4b86      	ldr	r3, [pc, #536]	; (80080c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	0091      	lsls	r1, r2, #2
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6812      	ldr	r2, [r2, #0]
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ec6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	041a      	lsls	r2, r3, #16
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ee2:	fb02 f303 	mul.w	r3, r2, r3
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	4413      	add	r3, r2
 8007eea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007ef4:	4b74      	ldr	r3, [pc, #464]	; (80080c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	0091      	lsls	r1, r2, #2
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	6812      	ldr	r2, [r2, #0]
 8007f00:	430b      	orrs	r3, r1
 8007f02:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f16:	041a      	lsls	r2, r3, #16
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f2a:	fb02 f303 	mul.w	r3, r2, r3
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	4413      	add	r3, r2
 8007f32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007f3c:	4b62      	ldr	r3, [pc, #392]	; (80080c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f3e:	4013      	ands	r3, r2
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	0091      	lsls	r1, r2, #2
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6812      	ldr	r2, [r2, #0]
 8007f48:	430b      	orrs	r3, r1
 8007f4a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007f56:	fb02 f303 	mul.w	r3, r2, r3
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007f68:	4b57      	ldr	r3, [pc, #348]	; (80080c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	0091      	lsls	r1, r2, #2
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	430b      	orrs	r3, r1
 8007f76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f82:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8a:	041a      	lsls	r2, r3, #16
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007faa:	4b47      	ldr	r3, [pc, #284]	; (80080c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	0091      	lsls	r1, r2, #2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007fc4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fcc:	041a      	lsls	r2, r3, #16
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007fe0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe8:	061a      	lsls	r2, r3, #24
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ff8:	4b34      	ldr	r3, [pc, #208]	; (80080cc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009a      	lsls	r2, r3, #2
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	441a      	add	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	441a      	add	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800802e:	fb01 f303 	mul.w	r3, r1, r3
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008046:	fb01 f303 	mul.w	r3, r1, r3
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	441a      	add	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800805e:	fb01 f303 	mul.w	r3, r1, r3
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	441a      	add	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	441a      	add	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808a:	6879      	ldr	r1, [r7, #4]
 800808c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800808e:	fb01 f303 	mul.w	r3, r1, r3
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	441a      	add	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80080aa:	fb01 f303 	mul.w	r3, r1, r3
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	441a      	add	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080be:	4a04      	ldr	r2, [pc, #16]	; (80080d0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d915      	bls.n	80080f0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80080c4:	e006      	b.n	80080d4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80080c6:	bf00      	nop
 80080c8:	ffff0003 	.word	0xffff0003
 80080cc:	10002b00 	.word	0x10002b00
 80080d0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080da:	f043 0220 	orr.w	r2, r3, #32
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2203      	movs	r2, #3
 80080e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e010      	b.n	8008112 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	e005      	b.n	8008104 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3304      	adds	r3, #4
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	429a      	cmp	r2, r3
 800810e:	d3f3      	bcc.n	80080f8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop

08008120 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e033      	b.n	800819a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fa fe76 	bl	8002e38 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f854 	bl	8008200 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f822 	bl	80081a2 <FMAC_Reset>
 800815e:	4603      	mov	r3, r0
 8008160:	2b01      	cmp	r3, #1
 8008162:	d10c      	bne.n	800817e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	f043 0210 	orr.w	r2, r3, #16
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	22a0      	movs	r2, #160	; 0xa0
 8008174:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
 800817c:	e008      	b.n	8008190 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081aa:	f7fb fb37 	bl	800381c <HAL_GetTick>
 80081ae:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	691a      	ldr	r2, [r3, #16]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80081be:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80081c0:	e00f      	b.n	80081e2 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80081c2:	f7fb fb2b 	bl	800381c <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80081d0:	d907      	bls.n	80081e2 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e00a      	b.n	80081f8 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e8      	bne.n	80081c2 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f807 	bl	800821c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f81b 	bl	800824a <FMAC_ResetOutputStateAndDataPointers>
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008278:	b480      	push	{r7}
 800827a:	b089      	sub	sp, #36	; 0x24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008282:	2300      	movs	r3, #0
 8008284:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008286:	4b86      	ldr	r3, [pc, #536]	; (80084a0 <HAL_GPIO_Init+0x228>)
 8008288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800828a:	e18c      	b.n	80085a6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	2101      	movs	r1, #1
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	fa01 f303 	lsl.w	r3, r1, r3
 8008298:	4013      	ands	r3, r2
 800829a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 817e 	beq.w	80085a0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d005      	beq.n	80082bc <HAL_GPIO_Init+0x44>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f003 0303 	and.w	r3, r3, #3
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d130      	bne.n	800831e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	2203      	movs	r2, #3
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	43db      	mvns	r3, r3
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	4013      	ands	r3, r2
 80082d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082f2:	2201      	movs	r2, #1
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	43db      	mvns	r3, r3
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	4013      	ands	r3, r2
 8008300:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	091b      	lsrs	r3, r3, #4
 8008308:	f003 0201 	and.w	r2, r3, #1
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	4313      	orrs	r3, r2
 8008316:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b03      	cmp	r3, #3
 8008328:	d017      	beq.n	800835a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	2203      	movs	r2, #3
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	43db      	mvns	r3, r3
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	4013      	ands	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	fa02 f303 	lsl.w	r3, r2, r3
 800834e:	69ba      	ldr	r2, [r7, #24]
 8008350:	4313      	orrs	r3, r2
 8008352:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f003 0303 	and.w	r3, r3, #3
 8008362:	2b02      	cmp	r3, #2
 8008364:	d123      	bne.n	80083ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	08da      	lsrs	r2, r3, #3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3208      	adds	r2, #8
 800836e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	220f      	movs	r2, #15
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	43db      	mvns	r3, r3
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	4013      	ands	r3, r2
 8008388:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	691a      	ldr	r2, [r3, #16]
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	f003 0307 	and.w	r3, r3, #7
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	fa02 f303 	lsl.w	r3, r2, r3
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	4313      	orrs	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	08da      	lsrs	r2, r3, #3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	3208      	adds	r2, #8
 80083a8:	69b9      	ldr	r1, [r7, #24]
 80083aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	2203      	movs	r2, #3
 80083ba:	fa02 f303 	lsl.w	r3, r2, r3
 80083be:	43db      	mvns	r3, r3
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	4013      	ands	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f003 0203 	and.w	r2, r3, #3
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	4313      	orrs	r3, r2
 80083da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 80d8 	beq.w	80085a0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083f0:	4b2c      	ldr	r3, [pc, #176]	; (80084a4 <HAL_GPIO_Init+0x22c>)
 80083f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083f6:	4a2b      	ldr	r2, [pc, #172]	; (80084a4 <HAL_GPIO_Init+0x22c>)
 80083f8:	f043 0302 	orr.w	r3, r3, #2
 80083fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008400:	4b28      	ldr	r3, [pc, #160]	; (80084a4 <HAL_GPIO_Init+0x22c>)
 8008402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800840e:	4a26      	ldr	r2, [pc, #152]	; (80084a8 <HAL_GPIO_Init+0x230>)
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	089b      	lsrs	r3, r3, #2
 8008414:	3302      	adds	r3, #2
 8008416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800841a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	220f      	movs	r2, #15
 8008426:	fa02 f303 	lsl.w	r3, r2, r3
 800842a:	43db      	mvns	r3, r3
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	4013      	ands	r3, r2
 8008430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a1d      	ldr	r2, [pc, #116]	; (80084ac <HAL_GPIO_Init+0x234>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d04a      	beq.n	80084d0 <HAL_GPIO_Init+0x258>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a1c      	ldr	r2, [pc, #112]	; (80084b0 <HAL_GPIO_Init+0x238>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d02b      	beq.n	800849a <HAL_GPIO_Init+0x222>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a1b      	ldr	r2, [pc, #108]	; (80084b4 <HAL_GPIO_Init+0x23c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d025      	beq.n	8008496 <HAL_GPIO_Init+0x21e>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a1a      	ldr	r2, [pc, #104]	; (80084b8 <HAL_GPIO_Init+0x240>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d01f      	beq.n	8008492 <HAL_GPIO_Init+0x21a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a19      	ldr	r2, [pc, #100]	; (80084bc <HAL_GPIO_Init+0x244>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d019      	beq.n	800848e <HAL_GPIO_Init+0x216>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a18      	ldr	r2, [pc, #96]	; (80084c0 <HAL_GPIO_Init+0x248>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d013      	beq.n	800848a <HAL_GPIO_Init+0x212>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a17      	ldr	r2, [pc, #92]	; (80084c4 <HAL_GPIO_Init+0x24c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d00d      	beq.n	8008486 <HAL_GPIO_Init+0x20e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a16      	ldr	r2, [pc, #88]	; (80084c8 <HAL_GPIO_Init+0x250>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d007      	beq.n	8008482 <HAL_GPIO_Init+0x20a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a15      	ldr	r2, [pc, #84]	; (80084cc <HAL_GPIO_Init+0x254>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d101      	bne.n	800847e <HAL_GPIO_Init+0x206>
 800847a:	2309      	movs	r3, #9
 800847c:	e029      	b.n	80084d2 <HAL_GPIO_Init+0x25a>
 800847e:	230a      	movs	r3, #10
 8008480:	e027      	b.n	80084d2 <HAL_GPIO_Init+0x25a>
 8008482:	2307      	movs	r3, #7
 8008484:	e025      	b.n	80084d2 <HAL_GPIO_Init+0x25a>
 8008486:	2306      	movs	r3, #6
 8008488:	e023      	b.n	80084d2 <HAL_GPIO_Init+0x25a>
 800848a:	2305      	movs	r3, #5
 800848c:	e021      	b.n	80084d2 <HAL_GPIO_Init+0x25a>
 800848e:	2304      	movs	r3, #4
 8008490:	e01f      	b.n	80084d2 <HAL_GPIO_Init+0x25a>
 8008492:	2303      	movs	r3, #3
 8008494:	e01d      	b.n	80084d2 <HAL_GPIO_Init+0x25a>
 8008496:	2302      	movs	r3, #2
 8008498:	e01b      	b.n	80084d2 <HAL_GPIO_Init+0x25a>
 800849a:	2301      	movs	r3, #1
 800849c:	e019      	b.n	80084d2 <HAL_GPIO_Init+0x25a>
 800849e:	bf00      	nop
 80084a0:	58000080 	.word	0x58000080
 80084a4:	58024400 	.word	0x58024400
 80084a8:	58000400 	.word	0x58000400
 80084ac:	58020000 	.word	0x58020000
 80084b0:	58020400 	.word	0x58020400
 80084b4:	58020800 	.word	0x58020800
 80084b8:	58020c00 	.word	0x58020c00
 80084bc:	58021000 	.word	0x58021000
 80084c0:	58021400 	.word	0x58021400
 80084c4:	58021800 	.word	0x58021800
 80084c8:	58021c00 	.word	0x58021c00
 80084cc:	58022400 	.word	0x58022400
 80084d0:	2300      	movs	r3, #0
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	f002 0203 	and.w	r2, r2, #3
 80084d8:	0092      	lsls	r2, r2, #2
 80084da:	4093      	lsls	r3, r2
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	4313      	orrs	r3, r2
 80084e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084e2:	4938      	ldr	r1, [pc, #224]	; (80085c4 <HAL_GPIO_Init+0x34c>)
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	089b      	lsrs	r3, r3, #2
 80084e8:	3302      	adds	r3, #2
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80084f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	43db      	mvns	r3, r3
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	4013      	ands	r3, r2
 8008500:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800851e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	43db      	mvns	r3, r3
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	4013      	ands	r3, r2
 800852e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	4313      	orrs	r3, r2
 8008542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	43db      	mvns	r3, r3
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	4013      	ands	r3, r2
 800855a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	4313      	orrs	r3, r2
 800856e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	43db      	mvns	r3, r3
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	4013      	ands	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4313      	orrs	r3, r2
 8008598:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	3301      	adds	r3, #1
 80085a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	fa22 f303 	lsr.w	r3, r2, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f47f ae6b 	bne.w	800828c <HAL_GPIO_Init+0x14>
  }
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	3724      	adds	r7, #36	; 0x24
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	58000400 	.word	0x58000400

080085c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	807b      	strh	r3, [r7, #2]
 80085d4:	4613      	mov	r3, r2
 80085d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80085d8:	787b      	ldrb	r3, [r7, #1]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085de:	887a      	ldrh	r2, [r7, #2]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80085e4:	e003      	b.n	80085ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	041a      	lsls	r2, r3, #16
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	619a      	str	r2, [r3, #24]
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80085fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085fc:	b08f      	sub	sp, #60	; 0x3c
 80085fe:	af0a      	add	r7, sp, #40	; 0x28
 8008600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e116      	b.n	800883a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f00a fb40 	bl	8012cac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2203      	movs	r2, #3
 8008630:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4618      	mov	r0, r3
 800864c:	f006 fe6d 	bl	800f32a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	603b      	str	r3, [r7, #0]
 8008656:	687e      	ldr	r6, [r7, #4]
 8008658:	466d      	mov	r5, sp
 800865a:	f106 0410 	add.w	r4, r6, #16
 800865e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008666:	e894 0003 	ldmia.w	r4, {r0, r1}
 800866a:	e885 0003 	stmia.w	r5, {r0, r1}
 800866e:	1d33      	adds	r3, r6, #4
 8008670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008672:	6838      	ldr	r0, [r7, #0]
 8008674:	f006 fd38 	bl	800f0e8 <USB_CoreInit>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2202      	movs	r2, #2
 8008682:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e0d7      	b.n	800883a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2100      	movs	r1, #0
 8008690:	4618      	mov	r0, r3
 8008692:	f006 fe5b 	bl	800f34c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
 800869a:	e04a      	b.n	8008732 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800869c:	7bfa      	ldrb	r2, [r7, #15]
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	333d      	adds	r3, #61	; 0x3d
 80086ac:	2201      	movs	r2, #1
 80086ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80086b0:	7bfa      	ldrb	r2, [r7, #15]
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	4613      	mov	r3, r2
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	440b      	add	r3, r1
 80086be:	333c      	adds	r3, #60	; 0x3c
 80086c0:	7bfa      	ldrb	r2, [r7, #15]
 80086c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80086c4:	7bfa      	ldrb	r2, [r7, #15]
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	b298      	uxth	r0, r3
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	4613      	mov	r3, r2
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	3344      	adds	r3, #68	; 0x44
 80086d8:	4602      	mov	r2, r0
 80086da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80086dc:	7bfa      	ldrb	r2, [r7, #15]
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	4613      	mov	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	3340      	adds	r3, #64	; 0x40
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80086f0:	7bfa      	ldrb	r2, [r7, #15]
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4613      	mov	r3, r2
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	3348      	adds	r3, #72	; 0x48
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008704:	7bfa      	ldrb	r2, [r7, #15]
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	334c      	adds	r3, #76	; 0x4c
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008718:	7bfa      	ldrb	r2, [r7, #15]
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4613      	mov	r3, r2
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	3354      	adds	r3, #84	; 0x54
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	3301      	adds	r3, #1
 8008730:	73fb      	strb	r3, [r7, #15]
 8008732:	7bfa      	ldrb	r2, [r7, #15]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	429a      	cmp	r2, r3
 800873a:	d3af      	bcc.n	800869c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800873c:	2300      	movs	r3, #0
 800873e:	73fb      	strb	r3, [r7, #15]
 8008740:	e044      	b.n	80087cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008742:	7bfa      	ldrb	r2, [r7, #15]
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008758:	7bfa      	ldrb	r2, [r7, #15]
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	4613      	mov	r3, r2
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800876a:	7bfa      	ldrb	r2, [r7, #15]
 800876c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800876e:	7bfa      	ldrb	r2, [r7, #15]
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	440b      	add	r3, r1
 800877c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008780:	2200      	movs	r2, #0
 8008782:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008784:	7bfa      	ldrb	r2, [r7, #15]
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	4613      	mov	r3, r2
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800879a:	7bfa      	ldrb	r2, [r7, #15]
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	4613      	mov	r3, r2
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	440b      	add	r3, r1
 80087a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80087b0:	7bfa      	ldrb	r2, [r7, #15]
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	4613      	mov	r3, r2
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	440b      	add	r3, r1
 80087be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	3301      	adds	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
 80087cc:	7bfa      	ldrb	r2, [r7, #15]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d3b5      	bcc.n	8008742 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	687e      	ldr	r6, [r7, #4]
 80087de:	466d      	mov	r5, sp
 80087e0:	f106 0410 	add.w	r4, r6, #16
 80087e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80087f4:	1d33      	adds	r3, r6, #4
 80087f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087f8:	6838      	ldr	r0, [r7, #0]
 80087fa:	f006 fdf3 	bl	800f3e4 <USB_DevInit>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d005      	beq.n	8008810 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e014      	b.n	800883a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	2b01      	cmp	r3, #1
 8008826:	d102      	bne.n	800882e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f001 f98b 	bl	8009b44 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f007 ff41 	bl	80106ba <USB_DevDisconnect>

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008842 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <HAL_PCD_Start+0x1c>
 800885a:	2302      	movs	r3, #2
 800885c:	e020      	b.n	80088a0 <HAL_PCD_Start+0x5e>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886a:	2b01      	cmp	r3, #1
 800886c:	d109      	bne.n	8008882 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008872:	2b01      	cmp	r3, #1
 8008874:	d005      	beq.n	8008882 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f006 fd3e 	bl	800f308 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4618      	mov	r0, r3
 8008892:	f007 fef1 	bl	8010678 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80088a8:	b590      	push	{r4, r7, lr}
 80088aa:	b08d      	sub	sp, #52	; 0x34
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	f007 ffaf 	bl	8010822 <USB_GetMode>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f040 84b7 	bne.w	800923a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f007 ff13 	bl	80106fc <USB_ReadInterrupts>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 84ad 	beq.w	8009238 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	0a1b      	lsrs	r3, r3, #8
 80088e8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f007 ff00 	bl	80106fc <USB_ReadInterrupts>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b02      	cmp	r3, #2
 8008904:	d107      	bne.n	8008916 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	695a      	ldr	r2, [r3, #20]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f002 0202 	and.w	r2, r2, #2
 8008914:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f007 feee 	bl	80106fc <USB_ReadInterrupts>
 8008920:	4603      	mov	r3, r0
 8008922:	f003 0310 	and.w	r3, r3, #16
 8008926:	2b10      	cmp	r3, #16
 8008928:	d161      	bne.n	80089ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 0210 	bic.w	r2, r2, #16
 8008938:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	f003 020f 	and.w	r2, r3, #15
 8008946:	4613      	mov	r3, r2
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	4413      	add	r3, r2
 8008956:	3304      	adds	r3, #4
 8008958:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	0c5b      	lsrs	r3, r3, #17
 800895e:	f003 030f 	and.w	r3, r3, #15
 8008962:	2b02      	cmp	r3, #2
 8008964:	d124      	bne.n	80089b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800896c:	4013      	ands	r3, r2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d035      	beq.n	80089de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	091b      	lsrs	r3, r3, #4
 800897a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800897c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008980:	b29b      	uxth	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	6a38      	ldr	r0, [r7, #32]
 8008986:	f007 fd25 	bl	80103d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	691a      	ldr	r2, [r3, #16]
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	091b      	lsrs	r3, r3, #4
 8008992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008996:	441a      	add	r2, r3
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	6a1a      	ldr	r2, [r3, #32]
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	091b      	lsrs	r3, r3, #4
 80089a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089a8:	441a      	add	r2, r3
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	621a      	str	r2, [r3, #32]
 80089ae:	e016      	b.n	80089de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	0c5b      	lsrs	r3, r3, #17
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	2b06      	cmp	r3, #6
 80089ba:	d110      	bne.n	80089de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089c2:	2208      	movs	r2, #8
 80089c4:	4619      	mov	r1, r3
 80089c6:	6a38      	ldr	r0, [r7, #32]
 80089c8:	f007 fd04 	bl	80103d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	6a1a      	ldr	r2, [r3, #32]
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	091b      	lsrs	r3, r3, #4
 80089d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089d8:	441a      	add	r2, r3
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	699a      	ldr	r2, [r3, #24]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f042 0210 	orr.w	r2, r2, #16
 80089ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f007 fe82 	bl	80106fc <USB_ReadInterrupts>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a02:	f040 80a7 	bne.w	8008b54 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f007 fe87 	bl	8010722 <USB_ReadDevAllOutEpInterrupt>
 8008a14:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008a16:	e099      	b.n	8008b4c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 808e 	beq.w	8008b40 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2a:	b2d2      	uxtb	r2, r2
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f007 feab 	bl	801078a <USB_ReadDevOutEPInterrupt>
 8008a34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00c      	beq.n	8008a5a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	2301      	movs	r3, #1
 8008a50:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 feef 	bl	8009838 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f003 0308 	and.w	r3, r3, #8
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00c      	beq.n	8008a7e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a70:	461a      	mov	r2, r3
 8008a72:	2308      	movs	r3, #8
 8008a74:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008a76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 ffc5 	bl	8009a08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f003 0310 	and.w	r3, r3, #16
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d008      	beq.n	8008a9a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a94:	461a      	mov	r2, r3
 8008a96:	2310      	movs	r3, #16
 8008a98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d030      	beq.n	8008b06 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aac:	2b80      	cmp	r3, #128	; 0x80
 8008aae:	d109      	bne.n	8008ac4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	69fa      	ldr	r2, [r7, #28]
 8008aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ac2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	00db      	lsls	r3, r3, #3
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	78db      	ldrb	r3, [r3, #3]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d108      	bne.n	8008af4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f00a f9d0 	bl	8012e94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b00:	461a      	mov	r2, r3
 8008b02:	2302      	movs	r3, #2
 8008b04:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f003 0320 	and.w	r3, r3, #32
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d008      	beq.n	8008b22 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	2320      	movs	r3, #32
 8008b20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d009      	beq.n	8008b40 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b3e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	3301      	adds	r3, #1
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	085b      	lsrs	r3, r3, #1
 8008b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f47f af62 	bne.w	8008a18 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f007 fdcf 	bl	80106fc <USB_ReadInterrupts>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b68:	f040 80db 	bne.w	8008d22 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f007 fdf0 	bl	8010756 <USB_ReadDevAllInEpInterrupt>
 8008b76:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008b7c:	e0cd      	b.n	8008d1a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 80c2 	beq.w	8008d0e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b90:	b2d2      	uxtb	r2, r2
 8008b92:	4611      	mov	r1, r2
 8008b94:	4618      	mov	r0, r3
 8008b96:	f007 fe16 	bl	80107c6 <USB_ReadDevInEPInterrupt>
 8008b9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d057      	beq.n	8008c56 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	2201      	movs	r2, #1
 8008bae:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	43db      	mvns	r3, r3
 8008bc0:	69f9      	ldr	r1, [r7, #28]
 8008bc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	2301      	movs	r3, #1
 8008bda:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d132      	bne.n	8008c4a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be8:	4613      	mov	r3, r2
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	4413      	add	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	440b      	add	r3, r1
 8008bf2:	334c      	adds	r3, #76	; 0x4c
 8008bf4:	6819      	ldr	r1, [r3, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4403      	add	r3, r0
 8008c04:	3348      	adds	r3, #72	; 0x48
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4419      	add	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0e:	4613      	mov	r3, r2
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4403      	add	r3, r0
 8008c18:	334c      	adds	r3, #76	; 0x4c
 8008c1a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d113      	bne.n	8008c4a <HAL_PCD_IRQHandler+0x3a2>
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c26:	4613      	mov	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	3354      	adds	r3, #84	; 0x54
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d108      	bne.n	8008c4a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c42:	461a      	mov	r2, r3
 8008c44:	2101      	movs	r1, #1
 8008c46:	f007 fe1f 	bl	8010888 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f00a f89a 	bl	8012d8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d008      	beq.n	8008c72 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	2308      	movs	r3, #8
 8008c70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f003 0310 	and.w	r3, r3, #16
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d008      	beq.n	8008c8e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c88:	461a      	mov	r2, r3
 8008c8a:	2310      	movs	r3, #16
 8008c8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d008      	beq.n	8008caa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	2340      	movs	r3, #64	; 0x40
 8008ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d023      	beq.n	8008cfc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cb6:	6a38      	ldr	r0, [r7, #32]
 8008cb8:	f006 fcf2 	bl	800f6a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	3338      	adds	r3, #56	; 0x38
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	4413      	add	r3, r2
 8008ccc:	3304      	adds	r3, #4
 8008cce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	78db      	ldrb	r3, [r3, #3]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d108      	bne.n	8008cea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f00a f8e7 	bl	8012eb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fd08 	bl	800971e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	3301      	adds	r3, #1
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	085b      	lsrs	r3, r3, #1
 8008d18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f47f af2e 	bne.w	8008b7e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f007 fce8 	bl	80106fc <USB_ReadInterrupts>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d36:	d122      	bne.n	8008d7e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	69fa      	ldr	r2, [r7, #28]
 8008d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d46:	f023 0301 	bic.w	r3, r3, #1
 8008d4a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d108      	bne.n	8008d68 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008d5e:	2100      	movs	r1, #0
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 ff13 	bl	8009b8c <HAL_PCDEx_LPM_Callback>
 8008d66:	e002      	b.n	8008d6e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f00a f885 	bl	8012e78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	695a      	ldr	r2, [r3, #20]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f007 fcba 	bl	80106fc <USB_ReadInterrupts>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d92:	d112      	bne.n	8008dba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d102      	bne.n	8008daa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f00a f841 	bl	8012e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695a      	ldr	r2, [r3, #20]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f007 fc9c 	bl	80106fc <USB_ReadInterrupts>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dce:	d121      	bne.n	8008e14 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695a      	ldr	r2, [r3, #20]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008dde:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d111      	bne.n	8008e0e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df8:	089b      	lsrs	r3, r3, #2
 8008dfa:	f003 020f 	and.w	r2, r3, #15
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008e04:	2101      	movs	r1, #1
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fec0 	bl	8009b8c <HAL_PCDEx_LPM_Callback>
 8008e0c:	e002      	b.n	8008e14 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f00a f80c 	bl	8012e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f007 fc6f 	bl	80106fc <USB_ReadInterrupts>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e28:	f040 80b7 	bne.w	8008f9a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	69fa      	ldr	r2, [r7, #28]
 8008e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e3a:	f023 0301 	bic.w	r3, r3, #1
 8008e3e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2110      	movs	r1, #16
 8008e46:	4618      	mov	r0, r3
 8008e48:	f006 fc2a 	bl	800f6a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e50:	e046      	b.n	8008ee0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5e:	461a      	mov	r2, r3
 8008e60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e64:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e76:	0151      	lsls	r1, r2, #5
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	440a      	add	r2, r1
 8008e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e92:	461a      	mov	r2, r3
 8008e94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e98:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eaa:	0151      	lsls	r1, r2, #5
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	440a      	add	r2, r1
 8008eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008eb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eca:	0151      	lsls	r1, r2, #5
 8008ecc:	69fa      	ldr	r2, [r7, #28]
 8008ece:	440a      	add	r2, r1
 8008ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ed4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ed8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	3301      	adds	r3, #1
 8008ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d3b3      	bcc.n	8008e52 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	69fa      	ldr	r2, [r7, #28]
 8008ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ef8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008efc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d016      	beq.n	8008f34 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f10:	69fa      	ldr	r2, [r7, #28]
 8008f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f16:	f043 030b 	orr.w	r3, r3, #11
 8008f1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f26:	69fa      	ldr	r2, [r7, #28]
 8008f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f2c:	f043 030b 	orr.w	r3, r3, #11
 8008f30:	6453      	str	r3, [r2, #68]	; 0x44
 8008f32:	e015      	b.n	8008f60 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f42:	4619      	mov	r1, r3
 8008f44:	f242 032b 	movw	r3, #8235	; 0x202b
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	69fa      	ldr	r2, [r7, #28]
 8008f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f5a:	f043 030b 	orr.w	r3, r3, #11
 8008f5e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f72:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f84:	461a      	mov	r2, r3
 8008f86:	f007 fc7f 	bl	8010888 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	695a      	ldr	r2, [r3, #20]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f007 fbac 	bl	80106fc <USB_ReadInterrupts>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fae:	d124      	bne.n	8008ffa <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f007 fc43 	bl	8010840 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f006 fbeb 	bl	800f79a <USB_GetDevSpeed>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681c      	ldr	r4, [r3, #0]
 8008fd0:	f001 fd12 	bl	800a9f8 <HAL_RCC_GetHCLKFreq>
 8008fd4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f006 f8f0 	bl	800f1c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f009 fef8 	bl	8012dda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	695a      	ldr	r2, [r3, #20]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f007 fb7c 	bl	80106fc <USB_ReadInterrupts>
 8009004:	4603      	mov	r3, r0
 8009006:	f003 0308 	and.w	r3, r3, #8
 800900a:	2b08      	cmp	r3, #8
 800900c:	d10a      	bne.n	8009024 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f009 fed5 	bl	8012dbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	695a      	ldr	r2, [r3, #20]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f002 0208 	and.w	r2, r2, #8
 8009022:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f007 fb67 	bl	80106fc <USB_ReadInterrupts>
 800902e:	4603      	mov	r3, r0
 8009030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009034:	2b80      	cmp	r3, #128	; 0x80
 8009036:	d122      	bne.n	800907e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009044:	2301      	movs	r3, #1
 8009046:	627b      	str	r3, [r7, #36]	; 0x24
 8009048:	e014      	b.n	8009074 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904e:	4613      	mov	r3, r2
 8009050:	00db      	lsls	r3, r3, #3
 8009052:	4413      	add	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	440b      	add	r3, r1
 8009058:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d105      	bne.n	800906e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	b2db      	uxtb	r3, r3
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fb27 	bl	80096bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	3301      	adds	r3, #1
 8009072:	627b      	str	r3, [r7, #36]	; 0x24
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907a:	429a      	cmp	r2, r3
 800907c:	d3e5      	bcc.n	800904a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4618      	mov	r0, r3
 8009084:	f007 fb3a 	bl	80106fc <USB_ReadInterrupts>
 8009088:	4603      	mov	r3, r0
 800908a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800908e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009092:	d13b      	bne.n	800910c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009094:	2301      	movs	r3, #1
 8009096:	627b      	str	r3, [r7, #36]	; 0x24
 8009098:	e02b      	b.n	80090f2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ae:	4613      	mov	r3, r2
 80090b0:	00db      	lsls	r3, r3, #3
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	3340      	adds	r3, #64	; 0x40
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d115      	bne.n	80090ec <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80090c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	da12      	bge.n	80090ec <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ca:	4613      	mov	r3, r2
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	4413      	add	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	440b      	add	r3, r1
 80090d4:	333f      	adds	r3, #63	; 0x3f
 80090d6:	2201      	movs	r2, #1
 80090d8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fae8 	bl	80096bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	3301      	adds	r3, #1
 80090f0:	627b      	str	r3, [r7, #36]	; 0x24
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d3ce      	bcc.n	800909a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695a      	ldr	r2, [r3, #20]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800910a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4618      	mov	r0, r3
 8009112:	f007 faf3 	bl	80106fc <USB_ReadInterrupts>
 8009116:	4603      	mov	r3, r0
 8009118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800911c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009120:	d155      	bne.n	80091ce <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009122:	2301      	movs	r3, #1
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
 8009126:	e045      	b.n	80091b4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913c:	4613      	mov	r3, r2
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d12e      	bne.n	80091ae <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009150:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009152:	2b00      	cmp	r3, #0
 8009154:	da2b      	bge.n	80091ae <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009162:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009166:	429a      	cmp	r2, r3
 8009168:	d121      	bne.n	80091ae <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916e:	4613      	mov	r3, r2
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800917c:	2201      	movs	r2, #1
 800917e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	69fa      	ldr	r2, [r7, #28]
 80091a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091aa:	6053      	str	r3, [r2, #4]
            break;
 80091ac:	e007      	b.n	80091be <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	3301      	adds	r3, #1
 80091b2:	627b      	str	r3, [r7, #36]	; 0x24
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d3b4      	bcc.n	8009128 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	695a      	ldr	r2, [r3, #20]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80091cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f007 fa92 	bl	80106fc <USB_ReadInterrupts>
 80091d8:	4603      	mov	r3, r0
 80091da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e2:	d10a      	bne.n	80091fa <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f009 fe79 	bl	8012edc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	695a      	ldr	r2, [r3, #20]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80091f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4618      	mov	r0, r3
 8009200:	f007 fa7c 	bl	80106fc <USB_ReadInterrupts>
 8009204:	4603      	mov	r3, r0
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b04      	cmp	r3, #4
 800920c:	d115      	bne.n	800923a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f009 fe69 	bl	8012ef8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6859      	ldr	r1, [r3, #4]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	69ba      	ldr	r2, [r7, #24]
 8009232:	430a      	orrs	r2, r1
 8009234:	605a      	str	r2, [r3, #4]
 8009236:	e000      	b.n	800923a <HAL_PCD_IRQHandler+0x992>
      return;
 8009238:	bf00      	nop
    }
  }
}
 800923a:	3734      	adds	r7, #52	; 0x34
 800923c:	46bd      	mov	sp, r7
 800923e:	bd90      	pop	{r4, r7, pc}

08009240 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <HAL_PCD_SetAddress+0x1a>
 8009256:	2302      	movs	r3, #2
 8009258:	e013      	b.n	8009282 <HAL_PCD_SetAddress+0x42>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	78fa      	ldrb	r2, [r7, #3]
 8009266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	78fa      	ldrb	r2, [r7, #3]
 8009270:	4611      	mov	r1, r2
 8009272:	4618      	mov	r0, r3
 8009274:	f007 f9da 	bl	801062c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	4608      	mov	r0, r1
 8009294:	4611      	mov	r1, r2
 8009296:	461a      	mov	r2, r3
 8009298:	4603      	mov	r3, r0
 800929a:	70fb      	strb	r3, [r7, #3]
 800929c:	460b      	mov	r3, r1
 800929e:	803b      	strh	r3, [r7, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80092a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da0f      	bge.n	80092d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	f003 020f 	and.w	r2, r3, #15
 80092b6:	4613      	mov	r3, r2
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	4413      	add	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	3338      	adds	r3, #56	; 0x38
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	4413      	add	r3, r2
 80092c4:	3304      	adds	r3, #4
 80092c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2201      	movs	r2, #1
 80092cc:	705a      	strb	r2, [r3, #1]
 80092ce:	e00f      	b.n	80092f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	f003 020f 	and.w	r2, r3, #15
 80092d6:	4613      	mov	r3, r2
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	4413      	add	r3, r2
 80092e6:	3304      	adds	r3, #4
 80092e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80092fc:	883a      	ldrh	r2, [r7, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	78ba      	ldrb	r2, [r7, #2]
 8009306:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	785b      	ldrb	r3, [r3, #1]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d004      	beq.n	800931a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800931a:	78bb      	ldrb	r3, [r7, #2]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d102      	bne.n	8009326 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800932c:	2b01      	cmp	r3, #1
 800932e:	d101      	bne.n	8009334 <HAL_PCD_EP_Open+0xaa>
 8009330:	2302      	movs	r3, #2
 8009332:	e00e      	b.n	8009352 <HAL_PCD_EP_Open+0xc8>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68f9      	ldr	r1, [r7, #12]
 8009342:	4618      	mov	r0, r3
 8009344:	f006 fa4e 	bl	800f7e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009350:	7afb      	ldrb	r3, [r7, #11]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800936a:	2b00      	cmp	r3, #0
 800936c:	da0f      	bge.n	800938e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	f003 020f 	and.w	r2, r3, #15
 8009374:	4613      	mov	r3, r2
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	4413      	add	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	3338      	adds	r3, #56	; 0x38
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	4413      	add	r3, r2
 8009382:	3304      	adds	r3, #4
 8009384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2201      	movs	r2, #1
 800938a:	705a      	strb	r2, [r3, #1]
 800938c:	e00f      	b.n	80093ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800938e:	78fb      	ldrb	r3, [r7, #3]
 8009390:	f003 020f 	and.w	r2, r3, #15
 8009394:	4613      	mov	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	4413      	add	r3, r2
 80093a4:	3304      	adds	r3, #4
 80093a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d101      	bne.n	80093c8 <HAL_PCD_EP_Close+0x6e>
 80093c4:	2302      	movs	r3, #2
 80093c6:	e00e      	b.n	80093e6 <HAL_PCD_EP_Close+0x8c>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68f9      	ldr	r1, [r7, #12]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f006 fa8c 	bl	800f8f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b086      	sub	sp, #24
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
 80093fa:	460b      	mov	r3, r1
 80093fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093fe:	7afb      	ldrb	r3, [r7, #11]
 8009400:	f003 020f 	and.w	r2, r3, #15
 8009404:	4613      	mov	r3, r2
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	4413      	add	r3, r2
 8009414:	3304      	adds	r3, #4
 8009416:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2200      	movs	r2, #0
 8009428:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2200      	movs	r2, #0
 800942e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009430:	7afb      	ldrb	r3, [r7, #11]
 8009432:	f003 030f 	and.w	r3, r3, #15
 8009436:	b2da      	uxtb	r2, r3
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d102      	bne.n	800944a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800944a:	7afb      	ldrb	r3, [r7, #11]
 800944c:	f003 030f 	and.w	r3, r3, #15
 8009450:	2b00      	cmp	r3, #0
 8009452:	d109      	bne.n	8009468 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6818      	ldr	r0, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	b2db      	uxtb	r3, r3
 800945e:	461a      	mov	r2, r3
 8009460:	6979      	ldr	r1, [r7, #20]
 8009462:	f006 fd73 	bl	800ff4c <USB_EP0StartXfer>
 8009466:	e008      	b.n	800947a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	461a      	mov	r2, r3
 8009474:	6979      	ldr	r1, [r7, #20]
 8009476:	f006 fb19 	bl	800faac <USB_EPStartXfer>
  }

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3718      	adds	r7, #24
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	f003 020f 	and.w	r2, r3, #15
 8009496:	6879      	ldr	r1, [r7, #4]
 8009498:	4613      	mov	r3, r2
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	440b      	add	r3, r1
 80094a2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80094a6:	681b      	ldr	r3, [r3, #0]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	607a      	str	r2, [r7, #4]
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	460b      	mov	r3, r1
 80094c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	f003 020f 	and.w	r2, r3, #15
 80094ca:	4613      	mov	r3, r2
 80094cc:	00db      	lsls	r3, r3, #3
 80094ce:	4413      	add	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	3338      	adds	r3, #56	; 0x38
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	4413      	add	r3, r2
 80094d8:	3304      	adds	r3, #4
 80094da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2200      	movs	r2, #0
 80094ec:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2201      	movs	r2, #1
 80094f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094f4:	7afb      	ldrb	r3, [r7, #11]
 80094f6:	f003 030f 	and.w	r3, r3, #15
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d102      	bne.n	800950e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800950e:	7afb      	ldrb	r3, [r7, #11]
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	2b00      	cmp	r3, #0
 8009516:	d109      	bne.n	800952c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	b2db      	uxtb	r3, r3
 8009522:	461a      	mov	r2, r3
 8009524:	6979      	ldr	r1, [r7, #20]
 8009526:	f006 fd11 	bl	800ff4c <USB_EP0StartXfer>
 800952a:	e008      	b.n	800953e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	b2db      	uxtb	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	6979      	ldr	r1, [r7, #20]
 800953a:	f006 fab7 	bl	800faac <USB_EPStartXfer>
  }

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	f003 020f 	and.w	r2, r3, #15
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	429a      	cmp	r2, r3
 8009560:	d901      	bls.n	8009566 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e050      	b.n	8009608 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800956a:	2b00      	cmp	r3, #0
 800956c:	da0f      	bge.n	800958e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	f003 020f 	and.w	r2, r3, #15
 8009574:	4613      	mov	r3, r2
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	3338      	adds	r3, #56	; 0x38
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	4413      	add	r3, r2
 8009582:	3304      	adds	r3, #4
 8009584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2201      	movs	r2, #1
 800958a:	705a      	strb	r2, [r3, #1]
 800958c:	e00d      	b.n	80095aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800958e:	78fa      	ldrb	r2, [r7, #3]
 8009590:	4613      	mov	r3, r2
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	4413      	add	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	4413      	add	r3, r2
 80095a0:	3304      	adds	r3, #4
 80095a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2201      	movs	r2, #1
 80095ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	f003 030f 	and.w	r3, r3, #15
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d101      	bne.n	80095ca <HAL_PCD_EP_SetStall+0x82>
 80095c6:	2302      	movs	r3, #2
 80095c8:	e01e      	b.n	8009608 <HAL_PCD_EP_SetStall+0xc0>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	4618      	mov	r0, r3
 80095da:	f006 ff53 	bl	8010484 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80095de:	78fb      	ldrb	r3, [r7, #3]
 80095e0:	f003 030f 	and.w	r3, r3, #15
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	b2d9      	uxtb	r1, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095f8:	461a      	mov	r2, r3
 80095fa:	f007 f945 	bl	8010888 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	f003 020f 	and.w	r2, r3, #15
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	429a      	cmp	r2, r3
 8009628:	d901      	bls.n	800962e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e042      	b.n	80096b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800962e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009632:	2b00      	cmp	r3, #0
 8009634:	da0f      	bge.n	8009656 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	f003 020f 	and.w	r2, r3, #15
 800963c:	4613      	mov	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	3338      	adds	r3, #56	; 0x38
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	3304      	adds	r3, #4
 800964c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	705a      	strb	r2, [r3, #1]
 8009654:	e00f      	b.n	8009676 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009656:	78fb      	ldrb	r3, [r7, #3]
 8009658:	f003 020f 	and.w	r2, r3, #15
 800965c:	4613      	mov	r3, r2
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	4413      	add	r3, r2
 800966c:	3304      	adds	r3, #4
 800966e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800967c:	78fb      	ldrb	r3, [r7, #3]
 800967e:	f003 030f 	and.w	r3, r3, #15
 8009682:	b2da      	uxtb	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800968e:	2b01      	cmp	r3, #1
 8009690:	d101      	bne.n	8009696 <HAL_PCD_EP_ClrStall+0x86>
 8009692:	2302      	movs	r3, #2
 8009694:	e00e      	b.n	80096b4 <HAL_PCD_EP_ClrStall+0xa4>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68f9      	ldr	r1, [r7, #12]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f006 ff5b 	bl	8010560 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80096c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	da0c      	bge.n	80096ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096d0:	78fb      	ldrb	r3, [r7, #3]
 80096d2:	f003 020f 	and.w	r2, r3, #15
 80096d6:	4613      	mov	r3, r2
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	3338      	adds	r3, #56	; 0x38
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	4413      	add	r3, r2
 80096e4:	3304      	adds	r3, #4
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	e00c      	b.n	8009704 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	f003 020f 	and.w	r2, r3, #15
 80096f0:	4613      	mov	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	4413      	add	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	4413      	add	r3, r2
 8009700:	3304      	adds	r3, #4
 8009702:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68f9      	ldr	r1, [r7, #12]
 800970a:	4618      	mov	r0, r3
 800970c:	f006 fd7a 	bl	8010204 <USB_EPStopXfer>
 8009710:	4603      	mov	r3, r0
 8009712:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009714:	7afb      	ldrb	r3, [r7, #11]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b08a      	sub	sp, #40	; 0x28
 8009722:	af02      	add	r7, sp, #8
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	4613      	mov	r3, r2
 8009736:	00db      	lsls	r3, r3, #3
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	3338      	adds	r3, #56	; 0x38
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	4413      	add	r3, r2
 8009742:	3304      	adds	r3, #4
 8009744:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6a1a      	ldr	r2, [r3, #32]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	429a      	cmp	r2, r3
 8009750:	d901      	bls.n	8009756 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e06c      	b.n	8009830 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	699a      	ldr	r2, [r3, #24]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	429a      	cmp	r2, r3
 800976a:	d902      	bls.n	8009772 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	3303      	adds	r3, #3
 8009776:	089b      	lsrs	r3, r3, #2
 8009778:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800977a:	e02b      	b.n	80097d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	699a      	ldr	r2, [r3, #24]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	69fa      	ldr	r2, [r7, #28]
 800978e:	429a      	cmp	r2, r3
 8009790:	d902      	bls.n	8009798 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	3303      	adds	r3, #3
 800979c:	089b      	lsrs	r3, r3, #2
 800979e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6919      	ldr	r1, [r3, #16]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	4603      	mov	r3, r0
 80097b6:	6978      	ldr	r0, [r7, #20]
 80097b8:	f006 fdce 	bl	8010358 <USB_WritePacket>

    ep->xfer_buff  += len;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	441a      	add	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6a1a      	ldr	r2, [r3, #32]
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	441a      	add	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d809      	bhi.n	80097fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a1a      	ldr	r2, [r3, #32]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d203      	bcs.n	80097fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1be      	bne.n	800977c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	699a      	ldr	r2, [r3, #24]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	429a      	cmp	r2, r3
 8009808:	d811      	bhi.n	800982e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	f003 030f 	and.w	r3, r3, #15
 8009810:	2201      	movs	r2, #1
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	43db      	mvns	r3, r3
 8009824:	6939      	ldr	r1, [r7, #16]
 8009826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800982a:	4013      	ands	r3, r2
 800982c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3720      	adds	r7, #32
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	333c      	adds	r3, #60	; 0x3c
 8009850:	3304      	adds	r3, #4
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	4413      	add	r3, r2
 800985e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d17b      	bne.n	8009966 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f003 0308 	and.w	r3, r3, #8
 8009874:	2b00      	cmp	r3, #0
 8009876:	d015      	beq.n	80098a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	4a61      	ldr	r2, [pc, #388]	; (8009a00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800987c:	4293      	cmp	r3, r2
 800987e:	f240 80b9 	bls.w	80099f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 80b3 	beq.w	80099f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989a:	461a      	mov	r2, r3
 800989c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098a0:	6093      	str	r3, [r2, #8]
 80098a2:	e0a7      	b.n	80099f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f003 0320 	and.w	r3, r3, #32
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d009      	beq.n	80098c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ba:	461a      	mov	r2, r3
 80098bc:	2320      	movs	r3, #32
 80098be:	6093      	str	r3, [r2, #8]
 80098c0:	e098      	b.n	80099f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f040 8093 	bne.w	80099f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	4a4b      	ldr	r2, [pc, #300]	; (8009a00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d90f      	bls.n	80098f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00a      	beq.n	80098f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ec:	461a      	mov	r2, r3
 80098ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098f2:	6093      	str	r3, [r2, #8]
 80098f4:	e07e      	b.n	80099f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	4413      	add	r3, r2
 8009908:	3304      	adds	r3, #4
 800990a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	69da      	ldr	r2, [r3, #28]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	0159      	lsls	r1, r3, #5
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	440b      	add	r3, r1
 8009918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009922:	1ad2      	subs	r2, r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d114      	bne.n	8009958 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d109      	bne.n	800994a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6818      	ldr	r0, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009940:	461a      	mov	r2, r3
 8009942:	2101      	movs	r1, #1
 8009944:	f006 ffa0 	bl	8010888 <USB_EP0_OutStart>
 8009948:	e006      	b.n	8009958 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	691a      	ldr	r2, [r3, #16]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	441a      	add	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	b2db      	uxtb	r3, r3
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f009 f9f8 	bl	8012d54 <HAL_PCD_DataOutStageCallback>
 8009964:	e046      	b.n	80099f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	4a26      	ldr	r2, [pc, #152]	; (8009a04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d124      	bne.n	80099b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00a      	beq.n	800998e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009984:	461a      	mov	r2, r3
 8009986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800998a:	6093      	str	r3, [r2, #8]
 800998c:	e032      	b.n	80099f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	f003 0320 	and.w	r3, r3, #32
 8009994:	2b00      	cmp	r3, #0
 8009996:	d008      	beq.n	80099aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a4:	461a      	mov	r2, r3
 80099a6:	2320      	movs	r3, #32
 80099a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f009 f9cf 	bl	8012d54 <HAL_PCD_DataOutStageCallback>
 80099b6:	e01d      	b.n	80099f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d114      	bne.n	80099e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80099be:	6879      	ldr	r1, [r7, #4]
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	4613      	mov	r3, r2
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	440b      	add	r3, r1
 80099cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d108      	bne.n	80099e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099e0:	461a      	mov	r2, r3
 80099e2:	2100      	movs	r1, #0
 80099e4:	f006 ff50 	bl	8010888 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f009 f9b0 	bl	8012d54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3720      	adds	r7, #32
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	4f54300a 	.word	0x4f54300a
 8009a04:	4f54310a 	.word	0x4f54310a

08009a08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	333c      	adds	r3, #60	; 0x3c
 8009a20:	3304      	adds	r3, #4
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4a15      	ldr	r2, [pc, #84]	; (8009a90 <PCD_EP_OutSetupPacket_int+0x88>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d90e      	bls.n	8009a5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d009      	beq.n	8009a5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a54:	461a      	mov	r2, r3
 8009a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f009 f967 	bl	8012d30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4a0a      	ldr	r2, [pc, #40]	; (8009a90 <PCD_EP_OutSetupPacket_int+0x88>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d90c      	bls.n	8009a84 <PCD_EP_OutSetupPacket_int+0x7c>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d108      	bne.n	8009a84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6818      	ldr	r0, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	2101      	movs	r1, #1
 8009a80:	f006 ff02 	bl	8010888 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	4f54300a 	.word	0x4f54300a

08009a94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	70fb      	strb	r3, [r7, #3]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d107      	bne.n	8009ac2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009ab2:	883b      	ldrh	r3, [r7, #0]
 8009ab4:	0419      	lsls	r1, r3, #16
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	629a      	str	r2, [r3, #40]	; 0x28
 8009ac0:	e028      	b.n	8009b14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac8:	0c1b      	lsrs	r3, r3, #16
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	4413      	add	r3, r2
 8009ace:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	73fb      	strb	r3, [r7, #15]
 8009ad4:	e00d      	b.n	8009af2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	3340      	adds	r3, #64	; 0x40
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	0c1b      	lsrs	r3, r3, #16
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	4413      	add	r3, r2
 8009aea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	3301      	adds	r3, #1
 8009af0:	73fb      	strb	r3, [r7, #15]
 8009af2:	7bfa      	ldrb	r2, [r7, #15]
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d3ec      	bcc.n	8009ad6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009afc:	883b      	ldrh	r3, [r7, #0]
 8009afe:	0418      	lsls	r0, r3, #16
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6819      	ldr	r1, [r3, #0]
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	4302      	orrs	r2, r0
 8009b0c:	3340      	adds	r3, #64	; 0x40
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	440b      	add	r3, r1
 8009b12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b083      	sub	sp, #12
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	887a      	ldrh	r2, [r7, #2]
 8009b34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b72:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <HAL_PCDEx_ActivateLPM+0x44>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	10000003 	.word	0x10000003

08009b8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009bac:	4b19      	ldr	r3, [pc, #100]	; (8009c14 <HAL_PWREx_ConfigSupply+0x70>)
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f003 0304 	and.w	r3, r3, #4
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d00a      	beq.n	8009bce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009bb8:	4b16      	ldr	r3, [pc, #88]	; (8009c14 <HAL_PWREx_ConfigSupply+0x70>)
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f003 0307 	and.w	r3, r3, #7
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d001      	beq.n	8009bca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e01f      	b.n	8009c0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	e01d      	b.n	8009c0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009bce:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <HAL_PWREx_ConfigSupply+0x70>)
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	f023 0207 	bic.w	r2, r3, #7
 8009bd6:	490f      	ldr	r1, [pc, #60]	; (8009c14 <HAL_PWREx_ConfigSupply+0x70>)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009bde:	f7f9 fe1d 	bl	800381c <HAL_GetTick>
 8009be2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009be4:	e009      	b.n	8009bfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009be6:	f7f9 fe19 	bl	800381c <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bf4:	d901      	bls.n	8009bfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e007      	b.n	8009c0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009bfa:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <HAL_PWREx_ConfigSupply+0x70>)
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c06:	d1ee      	bne.n	8009be6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	58024800 	.word	0x58024800

08009c18 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	4a04      	ldr	r2, [pc, #16]	; (8009c34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c26:	60d3      	str	r3, [r2, #12]
}
 8009c28:	bf00      	nop
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	58024800 	.word	0x58024800

08009c38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08c      	sub	sp, #48	; 0x30
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e39f      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 8089 	beq.w	8009d6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c58:	4b89      	ldr	r3, [pc, #548]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c62:	4b87      	ldr	r3, [pc, #540]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6a:	2b10      	cmp	r3, #16
 8009c6c:	d007      	beq.n	8009c7e <HAL_RCC_OscConfig+0x46>
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c70:	2b18      	cmp	r3, #24
 8009c72:	d110      	bne.n	8009c96 <HAL_RCC_OscConfig+0x5e>
 8009c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c76:	f003 0303 	and.w	r3, r3, #3
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d10b      	bne.n	8009c96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c7e:	4b80      	ldr	r3, [pc, #512]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d06e      	beq.n	8009d68 <HAL_RCC_OscConfig+0x130>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d16a      	bne.n	8009d68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e379      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c9e:	d106      	bne.n	8009cae <HAL_RCC_OscConfig+0x76>
 8009ca0:	4b77      	ldr	r3, [pc, #476]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a76      	ldr	r2, [pc, #472]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	e02e      	b.n	8009d0c <HAL_RCC_OscConfig+0xd4>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10c      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x98>
 8009cb6:	4b72      	ldr	r3, [pc, #456]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a71      	ldr	r2, [pc, #452]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	4b6f      	ldr	r3, [pc, #444]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a6e      	ldr	r2, [pc, #440]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	e01d      	b.n	8009d0c <HAL_RCC_OscConfig+0xd4>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cd8:	d10c      	bne.n	8009cf4 <HAL_RCC_OscConfig+0xbc>
 8009cda:	4b69      	ldr	r3, [pc, #420]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a68      	ldr	r2, [pc, #416]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	4b66      	ldr	r3, [pc, #408]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a65      	ldr	r2, [pc, #404]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cf0:	6013      	str	r3, [r2, #0]
 8009cf2:	e00b      	b.n	8009d0c <HAL_RCC_OscConfig+0xd4>
 8009cf4:	4b62      	ldr	r3, [pc, #392]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a61      	ldr	r2, [pc, #388]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	4b5f      	ldr	r3, [pc, #380]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a5e      	ldr	r2, [pc, #376]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d014      	beq.n	8009d3e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d14:	f7f9 fd82 	bl	800381c <HAL_GetTick>
 8009d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d1a:	e009      	b.n	8009d30 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d1c:	f7f9 fd7e 	bl	800381c <HAL_GetTick>
 8009d20:	4602      	mov	r2, r0
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d2a:	d901      	bls.n	8009d30 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e32c      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d30:	4b53      	ldr	r3, [pc, #332]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0ef      	beq.n	8009d1c <HAL_RCC_OscConfig+0xe4>
 8009d3c:	e015      	b.n	8009d6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d3e:	f7f9 fd6d 	bl	800381c <HAL_GetTick>
 8009d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d44:	e009      	b.n	8009d5a <HAL_RCC_OscConfig+0x122>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d46:	f7f9 fd69 	bl	800381c <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d54:	d901      	bls.n	8009d5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e317      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d5a:	4b49      	ldr	r3, [pc, #292]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1ef      	bne.n	8009d46 <HAL_RCC_OscConfig+0x10e>
 8009d66:	e000      	b.n	8009d6a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f000 808c 	beq.w	8009e90 <HAL_RCC_OscConfig+0x258>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d78:	4b41      	ldr	r3, [pc, #260]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d82:	4b3f      	ldr	r3, [pc, #252]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d86:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d007      	beq.n	8009d9e <HAL_RCC_OscConfig+0x166>
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	2b18      	cmp	r3, #24
 8009d92:	d137      	bne.n	8009e04 <HAL_RCC_OscConfig+0x1cc>
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d132      	bne.n	8009e04 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d9e:	4b38      	ldr	r3, [pc, #224]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0304 	and.w	r3, r3, #4
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d005      	beq.n	8009db6 <HAL_RCC_OscConfig+0x17e>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e2e9      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009db6:	4b32      	ldr	r3, [pc, #200]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f023 0219 	bic.w	r2, r3, #25
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	492f      	ldr	r1, [pc, #188]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009dc8:	f7f9 fd28 	bl	800381c <HAL_GetTick>
 8009dcc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dce:	e008      	b.n	8009de2 <HAL_RCC_OscConfig+0x1aa>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009dd0:	f7f9 fd24 	bl	800381c <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_OscConfig+0x1aa>
            {
              return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e2d3      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009de2:	4b27      	ldr	r3, [pc, #156]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0304 	and.w	r3, r3, #4
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0f0      	beq.n	8009dd0 <HAL_RCC_OscConfig+0x198>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dee:	4b24      	ldr	r3, [pc, #144]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	061b      	lsls	r3, r3, #24
 8009dfc:	4920      	ldr	r1, [pc, #128]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e02:	e045      	b.n	8009e90 <HAL_RCC_OscConfig+0x258>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d026      	beq.n	8009e5a <HAL_RCC_OscConfig+0x222>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e0c:	4b1c      	ldr	r3, [pc, #112]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f023 0219 	bic.w	r2, r3, #25
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	4919      	ldr	r1, [pc, #100]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e1e:	f7f9 fcfd 	bl	800381c <HAL_GetTick>
 8009e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e24:	e008      	b.n	8009e38 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e26:	f7f9 fcf9 	bl	800381c <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d901      	bls.n	8009e38 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e2a8      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e38:	4b11      	ldr	r3, [pc, #68]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d0f0      	beq.n	8009e26 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e44:	4b0e      	ldr	r3, [pc, #56]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	061b      	lsls	r3, r3, #24
 8009e52:	490b      	ldr	r1, [pc, #44]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	604b      	str	r3, [r1, #4]
 8009e58:	e01a      	b.n	8009e90 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e5a:	4b09      	ldr	r3, [pc, #36]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a08      	ldr	r2, [pc, #32]	; (8009e80 <HAL_RCC_OscConfig+0x248>)
 8009e60:	f023 0301 	bic.w	r3, r3, #1
 8009e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e66:	f7f9 fcd9 	bl	800381c <HAL_GetTick>
 8009e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009e6c:	e00a      	b.n	8009e84 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e6e:	f7f9 fcd5 	bl	800381c <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d903      	bls.n	8009e84 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e284      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
 8009e80:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009e84:	4b96      	ldr	r3, [pc, #600]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1ee      	bne.n	8009e6e <HAL_RCC_OscConfig+0x236>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0310 	and.w	r3, r3, #16
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d06a      	beq.n	8009f72 <HAL_RCC_OscConfig+0x33a>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e9c:	4b90      	ldr	r3, [pc, #576]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ea4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ea6:	4b8e      	ldr	r3, [pc, #568]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eaa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	2b08      	cmp	r3, #8
 8009eb0:	d007      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x28a>
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2b18      	cmp	r3, #24
 8009eb6:	d11b      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x2b8>
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f003 0303 	and.w	r3, r3, #3
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d116      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x2b8>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ec2:	4b87      	ldr	r3, [pc, #540]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <HAL_RCC_OscConfig+0x2a2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	69db      	ldr	r3, [r3, #28]
 8009ed2:	2b80      	cmp	r3, #128	; 0x80
 8009ed4:	d001      	beq.n	8009eda <HAL_RCC_OscConfig+0x2a2>
      {
        return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e257      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009eda:	4b81      	ldr	r3, [pc, #516]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	061b      	lsls	r3, r3, #24
 8009ee8:	497d      	ldr	r1, [pc, #500]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009eee:	e040      	b.n	8009f72 <HAL_RCC_OscConfig+0x33a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d023      	beq.n	8009f40 <HAL_RCC_OscConfig+0x308>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009ef8:	4b79      	ldr	r3, [pc, #484]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a78      	ldr	r2, [pc, #480]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f04:	f7f9 fc8a 	bl	800381c <HAL_GetTick>
 8009f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f0a:	e008      	b.n	8009f1e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009f0c:	f7f9 fc86 	bl	800381c <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d901      	bls.n	8009f1e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e235      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f1e:	4b70      	ldr	r3, [pc, #448]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0f0      	beq.n	8009f0c <HAL_RCC_OscConfig+0x2d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f2a:	4b6d      	ldr	r3, [pc, #436]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	061b      	lsls	r3, r3, #24
 8009f38:	4969      	ldr	r1, [pc, #420]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60cb      	str	r3, [r1, #12]
 8009f3e:	e018      	b.n	8009f72 <HAL_RCC_OscConfig+0x33a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009f40:	4b67      	ldr	r3, [pc, #412]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a66      	ldr	r2, [pc, #408]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4c:	f7f9 fc66 	bl	800381c <HAL_GetTick>
 8009f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009f52:	e008      	b.n	8009f66 <HAL_RCC_OscConfig+0x32e>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009f54:	f7f9 fc62 	bl	800381c <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d901      	bls.n	8009f66 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e211      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009f66:	4b5e      	ldr	r3, [pc, #376]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1f0      	bne.n	8009f54 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0308 	and.w	r3, r3, #8
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d036      	beq.n	8009fec <HAL_RCC_OscConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d019      	beq.n	8009fba <HAL_RCC_OscConfig+0x382>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f86:	4b56      	ldr	r3, [pc, #344]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f8a:	4a55      	ldr	r2, [pc, #340]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009f8c:	f043 0301 	orr.w	r3, r3, #1
 8009f90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f92:	f7f9 fc43 	bl	800381c <HAL_GetTick>
 8009f96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009f98:	e008      	b.n	8009fac <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f9a:	f7f9 fc3f 	bl	800381c <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d901      	bls.n	8009fac <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e1ee      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009fac:	4b4c      	ldr	r3, [pc, #304]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d0f0      	beq.n	8009f9a <HAL_RCC_OscConfig+0x362>
 8009fb8:	e018      	b.n	8009fec <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009fba:	4b49      	ldr	r3, [pc, #292]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fbe:	4a48      	ldr	r2, [pc, #288]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fc6:	f7f9 fc29 	bl	800381c <HAL_GetTick>
 8009fca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009fcc:	e008      	b.n	8009fe0 <HAL_RCC_OscConfig+0x3a8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fce:	f7f9 fc25 	bl	800381c <HAL_GetTick>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d901      	bls.n	8009fe0 <HAL_RCC_OscConfig+0x3a8>
        {
          return HAL_TIMEOUT;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	e1d4      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009fe0:	4b3f      	ldr	r3, [pc, #252]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 8009fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1f0      	bne.n	8009fce <HAL_RCC_OscConfig+0x396>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0320 	and.w	r3, r3, #32
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d036      	beq.n	800a066 <HAL_RCC_OscConfig+0x42e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d019      	beq.n	800a034 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a000:	4b37      	ldr	r3, [pc, #220]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a36      	ldr	r2, [pc, #216]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a00a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a00c:	f7f9 fc06 	bl	800381c <HAL_GetTick>
 800a010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a012:	e008      	b.n	800a026 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a014:	f7f9 fc02 	bl	800381c <HAL_GetTick>
 800a018:	4602      	mov	r2, r0
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d901      	bls.n	800a026 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e1b1      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a026:	4b2e      	ldr	r3, [pc, #184]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0f0      	beq.n	800a014 <HAL_RCC_OscConfig+0x3dc>
 800a032:	e018      	b.n	800a066 <HAL_RCC_OscConfig+0x42e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a034:	4b2a      	ldr	r3, [pc, #168]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a29      	ldr	r2, [pc, #164]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a03a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a03e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a040:	f7f9 fbec 	bl	800381c <HAL_GetTick>
 800a044:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a046:	e008      	b.n	800a05a <HAL_RCC_OscConfig+0x422>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a048:	f7f9 fbe8 	bl	800381c <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	2b02      	cmp	r3, #2
 800a054:	d901      	bls.n	800a05a <HAL_RCC_OscConfig+0x422>
        {
          return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e197      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a05a:	4b21      	ldr	r3, [pc, #132]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1f0      	bne.n	800a048 <HAL_RCC_OscConfig+0x410>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0304 	and.w	r3, r3, #4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 8086 	beq.w	800a180 <HAL_RCC_OscConfig+0x548>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a074:	4b1b      	ldr	r3, [pc, #108]	; (800a0e4 <HAL_RCC_OscConfig+0x4ac>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a1a      	ldr	r2, [pc, #104]	; (800a0e4 <HAL_RCC_OscConfig+0x4ac>)
 800a07a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a07e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a080:	f7f9 fbcc 	bl	800381c <HAL_GetTick>
 800a084:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a086:	e008      	b.n	800a09a <HAL_RCC_OscConfig+0x462>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a088:	f7f9 fbc8 	bl	800381c <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b64      	cmp	r3, #100	; 0x64
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x462>
      {
        return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e177      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a09a:	4b12      	ldr	r3, [pc, #72]	; (800a0e4 <HAL_RCC_OscConfig+0x4ac>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0f0      	beq.n	800a088 <HAL_RCC_OscConfig+0x450>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d106      	bne.n	800a0bc <HAL_RCC_OscConfig+0x484>
 800a0ae:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b2:	4a0b      	ldr	r2, [pc, #44]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a0b4:	f043 0301 	orr.w	r3, r3, #1
 800a0b8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0ba:	e032      	b.n	800a122 <HAL_RCC_OscConfig+0x4ea>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d111      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x4b0>
 800a0c4:	4b06      	ldr	r3, [pc, #24]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c8:	4a05      	ldr	r2, [pc, #20]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a0ca:	f023 0301 	bic.w	r3, r3, #1
 800a0ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a0d0:	4b03      	ldr	r3, [pc, #12]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d4:	4a02      	ldr	r2, [pc, #8]	; (800a0e0 <HAL_RCC_OscConfig+0x4a8>)
 800a0d6:	f023 0304 	bic.w	r3, r3, #4
 800a0da:	6713      	str	r3, [r2, #112]	; 0x70
 800a0dc:	e021      	b.n	800a122 <HAL_RCC_OscConfig+0x4ea>
 800a0de:	bf00      	nop
 800a0e0:	58024400 	.word	0x58024400
 800a0e4:	58024800 	.word	0x58024800
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	2b05      	cmp	r3, #5
 800a0ee:	d10c      	bne.n	800a10a <HAL_RCC_OscConfig+0x4d2>
 800a0f0:	4b83      	ldr	r3, [pc, #524]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f4:	4a82      	ldr	r2, [pc, #520]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a0f6:	f043 0304 	orr.w	r3, r3, #4
 800a0fa:	6713      	str	r3, [r2, #112]	; 0x70
 800a0fc:	4b80      	ldr	r3, [pc, #512]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a0fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a100:	4a7f      	ldr	r2, [pc, #508]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a102:	f043 0301 	orr.w	r3, r3, #1
 800a106:	6713      	str	r3, [r2, #112]	; 0x70
 800a108:	e00b      	b.n	800a122 <HAL_RCC_OscConfig+0x4ea>
 800a10a:	4b7d      	ldr	r3, [pc, #500]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a10c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a10e:	4a7c      	ldr	r2, [pc, #496]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a110:	f023 0301 	bic.w	r3, r3, #1
 800a114:	6713      	str	r3, [r2, #112]	; 0x70
 800a116:	4b7a      	ldr	r3, [pc, #488]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a11a:	4a79      	ldr	r2, [pc, #484]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a11c:	f023 0304 	bic.w	r3, r3, #4
 800a120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d015      	beq.n	800a156 <HAL_RCC_OscConfig+0x51e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a12a:	f7f9 fb77 	bl	800381c <HAL_GetTick>
 800a12e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a130:	e00a      	b.n	800a148 <HAL_RCC_OscConfig+0x510>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a132:	f7f9 fb73 	bl	800381c <HAL_GetTick>
 800a136:	4602      	mov	r2, r0
 800a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a140:	4293      	cmp	r3, r2
 800a142:	d901      	bls.n	800a148 <HAL_RCC_OscConfig+0x510>
        {
          return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e120      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a148:	4b6d      	ldr	r3, [pc, #436]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14c:	f003 0302 	and.w	r3, r3, #2
 800a150:	2b00      	cmp	r3, #0
 800a152:	d0ee      	beq.n	800a132 <HAL_RCC_OscConfig+0x4fa>
 800a154:	e014      	b.n	800a180 <HAL_RCC_OscConfig+0x548>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a156:	f7f9 fb61 	bl	800381c <HAL_GetTick>
 800a15a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a15c:	e00a      	b.n	800a174 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a15e:	f7f9 fb5d 	bl	800381c <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	f241 3288 	movw	r2, #5000	; 0x1388
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d901      	bls.n	800a174 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e10a      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a174:	4b62      	ldr	r3, [pc, #392]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a178:	f003 0302 	and.w	r3, r3, #2
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1ee      	bne.n	800a15e <HAL_RCC_OscConfig+0x526>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 80ff 	beq.w	800a388 <HAL_RCC_OscConfig+0x750>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a18a:	4b5d      	ldr	r3, [pc, #372]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a192:	2b18      	cmp	r3, #24
 800a194:	f000 80ba 	beq.w	800a30c <HAL_RCC_OscConfig+0x6d4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	f040 8095 	bne.w	800a2cc <HAL_RCC_OscConfig+0x694>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1a2:	4b57      	ldr	r3, [pc, #348]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a56      	ldr	r2, [pc, #344]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a1a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ae:	f7f9 fb35 	bl	800381c <HAL_GetTick>
 800a1b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1b4:	e008      	b.n	800a1c8 <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1b6:	f7f9 fb31 	bl	800381c <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d901      	bls.n	800a1c8 <HAL_RCC_OscConfig+0x590>
          {
            return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e0e0      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1c8:	4b4d      	ldr	r3, [pc, #308]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1f0      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x57e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a1d4:	4b4a      	ldr	r3, [pc, #296]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a1d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1d8:	4b4a      	ldr	r3, [pc, #296]	; (800a304 <HAL_RCC_OscConfig+0x6cc>)
 800a1da:	4013      	ands	r3, r2
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a1e4:	0112      	lsls	r2, r2, #4
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	4945      	ldr	r1, [pc, #276]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	628b      	str	r3, [r1, #40]	; 0x28
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	025b      	lsls	r3, r3, #9
 800a200:	b29b      	uxth	r3, r3
 800a202:	431a      	orrs	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a208:	3b01      	subs	r3, #1
 800a20a:	041b      	lsls	r3, r3, #16
 800a20c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a210:	431a      	orrs	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a216:	3b01      	subs	r3, #1
 800a218:	061b      	lsls	r3, r3, #24
 800a21a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a21e:	4938      	ldr	r1, [pc, #224]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a220:	4313      	orrs	r3, r2
 800a222:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a224:	4b36      	ldr	r3, [pc, #216]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	4a35      	ldr	r2, [pc, #212]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a22a:	f023 0301 	bic.w	r3, r3, #1
 800a22e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a230:	4b33      	ldr	r3, [pc, #204]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a234:	4b34      	ldr	r3, [pc, #208]	; (800a308 <HAL_RCC_OscConfig+0x6d0>)
 800a236:	4013      	ands	r3, r2
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a23c:	00d2      	lsls	r2, r2, #3
 800a23e:	4930      	ldr	r1, [pc, #192]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a240:	4313      	orrs	r3, r2
 800a242:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a244:	4b2e      	ldr	r3, [pc, #184]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	f023 020c 	bic.w	r2, r3, #12
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	492b      	ldr	r1, [pc, #172]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a252:	4313      	orrs	r3, r2
 800a254:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a256:	4b2a      	ldr	r3, [pc, #168]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25a:	f023 0202 	bic.w	r2, r3, #2
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a262:	4927      	ldr	r1, [pc, #156]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a264:	4313      	orrs	r3, r2
 800a266:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a268:	4b25      	ldr	r3, [pc, #148]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	4a24      	ldr	r2, [pc, #144]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a26e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a274:	4b22      	ldr	r3, [pc, #136]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	4a21      	ldr	r2, [pc, #132]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a27a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a27e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a280:	4b1f      	ldr	r3, [pc, #124]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	4a1e      	ldr	r2, [pc, #120]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a28a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a28c:	4b1c      	ldr	r3, [pc, #112]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	4a1b      	ldr	r2, [pc, #108]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a292:	f043 0301 	orr.w	r3, r3, #1
 800a296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a298:	4b19      	ldr	r3, [pc, #100]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a18      	ldr	r2, [pc, #96]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a29e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a4:	f7f9 faba 	bl	800381c <HAL_GetTick>
 800a2a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a2aa:	e008      	b.n	800a2be <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2ac:	f7f9 fab6 	bl	800381c <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e065      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a2be:	4b10      	ldr	r3, [pc, #64]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0f0      	beq.n	800a2ac <HAL_RCC_OscConfig+0x674>
 800a2ca:	e05d      	b.n	800a388 <HAL_RCC_OscConfig+0x750>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2cc:	4b0c      	ldr	r3, [pc, #48]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a0b      	ldr	r2, [pc, #44]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a2d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2d8:	f7f9 faa0 	bl	800381c <HAL_GetTick>
 800a2dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2de:	e008      	b.n	800a2f2 <HAL_RCC_OscConfig+0x6ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2e0:	f7f9 fa9c 	bl	800381c <HAL_GetTick>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d901      	bls.n	800a2f2 <HAL_RCC_OscConfig+0x6ba>
          {
            return HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e04b      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2f2:	4b03      	ldr	r3, [pc, #12]	; (800a300 <HAL_RCC_OscConfig+0x6c8>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1f0      	bne.n	800a2e0 <HAL_RCC_OscConfig+0x6a8>
 800a2fe:	e043      	b.n	800a388 <HAL_RCC_OscConfig+0x750>
 800a300:	58024400 	.word	0x58024400
 800a304:	fffffc0c 	.word	0xfffffc0c
 800a308:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a30c:	4b21      	ldr	r3, [pc, #132]	; (800a394 <HAL_RCC_OscConfig+0x75c>)
 800a30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a310:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a312:	4b20      	ldr	r3, [pc, #128]	; (800a394 <HAL_RCC_OscConfig+0x75c>)
 800a314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a316:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d031      	beq.n	800a384 <HAL_RCC_OscConfig+0x74c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	f003 0203 	and.w	r2, r3, #3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d12a      	bne.n	800a384 <HAL_RCC_OscConfig+0x74c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	091b      	lsrs	r3, r3, #4
 800a332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d122      	bne.n	800a384 <HAL_RCC_OscConfig+0x74c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a348:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d11a      	bne.n	800a384 <HAL_RCC_OscConfig+0x74c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	0a5b      	lsrs	r3, r3, #9
 800a352:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a35a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d111      	bne.n	800a384 <HAL_RCC_OscConfig+0x74c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	0c1b      	lsrs	r3, r3, #16
 800a364:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a36e:	429a      	cmp	r2, r3
 800a370:	d108      	bne.n	800a384 <HAL_RCC_OscConfig+0x74c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	0e1b      	lsrs	r3, r3, #24
 800a376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a380:	429a      	cmp	r2, r3
 800a382:	d001      	beq.n	800a388 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <HAL_RCC_OscConfig+0x752>
      }
    }
  }
  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3730      	adds	r7, #48	; 0x30
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	58024400 	.word	0x58024400

0800a398 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e19c      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a3ac:	4b8a      	ldr	r3, [pc, #552]	; (800a5d8 <HAL_RCC_ClockConfig+0x240>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 030f 	and.w	r3, r3, #15
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d910      	bls.n	800a3dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3ba:	4b87      	ldr	r3, [pc, #540]	; (800a5d8 <HAL_RCC_ClockConfig+0x240>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f023 020f 	bic.w	r2, r3, #15
 800a3c2:	4985      	ldr	r1, [pc, #532]	; (800a5d8 <HAL_RCC_ClockConfig+0x240>)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3ca:	4b83      	ldr	r3, [pc, #524]	; (800a5d8 <HAL_RCC_ClockConfig+0x240>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 030f 	and.w	r3, r3, #15
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d001      	beq.n	800a3dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e184      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0304 	and.w	r3, r3, #4
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d010      	beq.n	800a40a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	4b7b      	ldr	r3, [pc, #492]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d908      	bls.n	800a40a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3f8:	4b78      	ldr	r3, [pc, #480]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	4975      	ldr	r1, [pc, #468]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a406:	4313      	orrs	r3, r2
 800a408:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0308 	and.w	r3, r3, #8
 800a412:	2b00      	cmp	r3, #0
 800a414:	d010      	beq.n	800a438 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695a      	ldr	r2, [r3, #20]
 800a41a:	4b70      	ldr	r3, [pc, #448]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a422:	429a      	cmp	r2, r3
 800a424:	d908      	bls.n	800a438 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a426:	4b6d      	ldr	r3, [pc, #436]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	496a      	ldr	r1, [pc, #424]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a434:	4313      	orrs	r3, r2
 800a436:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0310 	and.w	r3, r3, #16
 800a440:	2b00      	cmp	r3, #0
 800a442:	d010      	beq.n	800a466 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	699a      	ldr	r2, [r3, #24]
 800a448:	4b64      	ldr	r3, [pc, #400]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a450:	429a      	cmp	r2, r3
 800a452:	d908      	bls.n	800a466 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a454:	4b61      	ldr	r3, [pc, #388]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	495e      	ldr	r1, [pc, #376]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a462:	4313      	orrs	r3, r2
 800a464:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0320 	and.w	r3, r3, #32
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d010      	beq.n	800a494 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69da      	ldr	r2, [r3, #28]
 800a476:	4b59      	ldr	r3, [pc, #356]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a47e:	429a      	cmp	r2, r3
 800a480:	d908      	bls.n	800a494 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a482:	4b56      	ldr	r3, [pc, #344]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	4953      	ldr	r1, [pc, #332]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a490:	4313      	orrs	r3, r2
 800a492:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d010      	beq.n	800a4c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68da      	ldr	r2, [r3, #12]
 800a4a4:	4b4d      	ldr	r3, [pc, #308]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a4a6:	699b      	ldr	r3, [r3, #24]
 800a4a8:	f003 030f 	and.w	r3, r3, #15
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d908      	bls.n	800a4c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4b0:	4b4a      	ldr	r3, [pc, #296]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	f023 020f 	bic.w	r2, r3, #15
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	4947      	ldr	r1, [pc, #284]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d055      	beq.n	800a57a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a4ce:	4b43      	ldr	r3, [pc, #268]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	4940      	ldr	r1, [pc, #256]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d107      	bne.n	800a4f8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4e8:	4b3c      	ldr	r3, [pc, #240]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d121      	bne.n	800a538 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e0f6      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d107      	bne.n	800a510 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a500:	4b36      	ldr	r3, [pc, #216]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d115      	bne.n	800a538 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e0ea      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d107      	bne.n	800a528 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a518:	4b30      	ldr	r3, [pc, #192]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a520:	2b00      	cmp	r3, #0
 800a522:	d109      	bne.n	800a538 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e0de      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a528:	4b2c      	ldr	r3, [pc, #176]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e0d6      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a538:	4b28      	ldr	r3, [pc, #160]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	f023 0207 	bic.w	r2, r3, #7
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	4925      	ldr	r1, [pc, #148]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a546:	4313      	orrs	r3, r2
 800a548:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a54a:	f7f9 f967 	bl	800381c <HAL_GetTick>
 800a54e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a550:	e00a      	b.n	800a568 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a552:	f7f9 f963 	bl	800381c <HAL_GetTick>
 800a556:	4602      	mov	r2, r0
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a560:	4293      	cmp	r3, r2
 800a562:	d901      	bls.n	800a568 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a564:	2303      	movs	r3, #3
 800a566:	e0be      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a568:	4b1c      	ldr	r3, [pc, #112]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	429a      	cmp	r2, r3
 800a578:	d1eb      	bne.n	800a552 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 0302 	and.w	r3, r3, #2
 800a582:	2b00      	cmp	r3, #0
 800a584:	d010      	beq.n	800a5a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68da      	ldr	r2, [r3, #12]
 800a58a:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	f003 030f 	and.w	r3, r3, #15
 800a592:	429a      	cmp	r2, r3
 800a594:	d208      	bcs.n	800a5a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a596:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	f023 020f 	bic.w	r2, r3, #15
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	490e      	ldr	r1, [pc, #56]	; (800a5dc <HAL_RCC_ClockConfig+0x244>)
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a5a8:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <HAL_RCC_ClockConfig+0x240>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d214      	bcs.n	800a5e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5b6:	4b08      	ldr	r3, [pc, #32]	; (800a5d8 <HAL_RCC_ClockConfig+0x240>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f023 020f 	bic.w	r2, r3, #15
 800a5be:	4906      	ldr	r1, [pc, #24]	; (800a5d8 <HAL_RCC_ClockConfig+0x240>)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5c6:	4b04      	ldr	r3, [pc, #16]	; (800a5d8 <HAL_RCC_ClockConfig+0x240>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f003 030f 	and.w	r3, r3, #15
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d005      	beq.n	800a5e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e086      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x34e>
 800a5d8:	52002000 	.word	0x52002000
 800a5dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d010      	beq.n	800a60e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691a      	ldr	r2, [r3, #16]
 800a5f0:	4b3f      	ldr	r3, [pc, #252]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d208      	bcs.n	800a60e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5fc:	4b3c      	ldr	r3, [pc, #240]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	4939      	ldr	r1, [pc, #228]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a60a:	4313      	orrs	r3, r2
 800a60c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	2b00      	cmp	r3, #0
 800a618:	d010      	beq.n	800a63c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	695a      	ldr	r2, [r3, #20]
 800a61e:	4b34      	ldr	r3, [pc, #208]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a626:	429a      	cmp	r2, r3
 800a628:	d208      	bcs.n	800a63c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a62a:	4b31      	ldr	r3, [pc, #196]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	492e      	ldr	r1, [pc, #184]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a638:	4313      	orrs	r3, r2
 800a63a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0310 	and.w	r3, r3, #16
 800a644:	2b00      	cmp	r3, #0
 800a646:	d010      	beq.n	800a66a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	699a      	ldr	r2, [r3, #24]
 800a64c:	4b28      	ldr	r3, [pc, #160]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a64e:	69db      	ldr	r3, [r3, #28]
 800a650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a654:	429a      	cmp	r2, r3
 800a656:	d208      	bcs.n	800a66a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a658:	4b25      	ldr	r3, [pc, #148]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	4922      	ldr	r1, [pc, #136]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a666:	4313      	orrs	r3, r2
 800a668:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b00      	cmp	r3, #0
 800a674:	d010      	beq.n	800a698 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	69da      	ldr	r2, [r3, #28]
 800a67a:	4b1d      	ldr	r3, [pc, #116]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a682:	429a      	cmp	r2, r3
 800a684:	d208      	bcs.n	800a698 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a686:	4b1a      	ldr	r3, [pc, #104]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	4917      	ldr	r1, [pc, #92]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a694:	4313      	orrs	r3, r2
 800a696:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a698:	f000 f834 	bl	800a704 <HAL_RCC_GetSysClockFreq>
 800a69c:	4602      	mov	r2, r0
 800a69e:	4b14      	ldr	r3, [pc, #80]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	0a1b      	lsrs	r3, r3, #8
 800a6a4:	f003 030f 	and.w	r3, r3, #15
 800a6a8:	4912      	ldr	r1, [pc, #72]	; (800a6f4 <HAL_RCC_ClockConfig+0x35c>)
 800a6aa:	5ccb      	ldrb	r3, [r1, r3]
 800a6ac:	f003 031f 	and.w	r3, r3, #31
 800a6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a6b6:	4b0e      	ldr	r3, [pc, #56]	; (800a6f0 <HAL_RCC_ClockConfig+0x358>)
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	f003 030f 	and.w	r3, r3, #15
 800a6be:	4a0d      	ldr	r2, [pc, #52]	; (800a6f4 <HAL_RCC_ClockConfig+0x35c>)
 800a6c0:	5cd3      	ldrb	r3, [r2, r3]
 800a6c2:	f003 031f 	and.w	r3, r3, #31
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6cc:	4a0a      	ldr	r2, [pc, #40]	; (800a6f8 <HAL_RCC_ClockConfig+0x360>)
 800a6ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a6d0:	4a0a      	ldr	r2, [pc, #40]	; (800a6fc <HAL_RCC_ClockConfig+0x364>)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a6d6:	4b0a      	ldr	r3, [pc, #40]	; (800a700 <HAL_RCC_ClockConfig+0x368>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7f9 f854 	bl	8003788 <HAL_InitTick>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	58024400 	.word	0x58024400
 800a6f4:	0801468c 	.word	0x0801468c
 800a6f8:	24001010 	.word	0x24001010
 800a6fc:	2400100c 	.word	0x2400100c
 800a700:	24001014 	.word	0x24001014

0800a704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a704:	b480      	push	{r7}
 800a706:	b089      	sub	sp, #36	; 0x24
 800a708:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a70a:	4bb3      	ldr	r3, [pc, #716]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a712:	2b18      	cmp	r3, #24
 800a714:	f200 8155 	bhi.w	800a9c2 <HAL_RCC_GetSysClockFreq+0x2be>
 800a718:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71e:	bf00      	nop
 800a720:	0800a785 	.word	0x0800a785
 800a724:	0800a9c3 	.word	0x0800a9c3
 800a728:	0800a9c3 	.word	0x0800a9c3
 800a72c:	0800a9c3 	.word	0x0800a9c3
 800a730:	0800a9c3 	.word	0x0800a9c3
 800a734:	0800a9c3 	.word	0x0800a9c3
 800a738:	0800a9c3 	.word	0x0800a9c3
 800a73c:	0800a9c3 	.word	0x0800a9c3
 800a740:	0800a7ab 	.word	0x0800a7ab
 800a744:	0800a9c3 	.word	0x0800a9c3
 800a748:	0800a9c3 	.word	0x0800a9c3
 800a74c:	0800a9c3 	.word	0x0800a9c3
 800a750:	0800a9c3 	.word	0x0800a9c3
 800a754:	0800a9c3 	.word	0x0800a9c3
 800a758:	0800a9c3 	.word	0x0800a9c3
 800a75c:	0800a9c3 	.word	0x0800a9c3
 800a760:	0800a7b1 	.word	0x0800a7b1
 800a764:	0800a9c3 	.word	0x0800a9c3
 800a768:	0800a9c3 	.word	0x0800a9c3
 800a76c:	0800a9c3 	.word	0x0800a9c3
 800a770:	0800a9c3 	.word	0x0800a9c3
 800a774:	0800a9c3 	.word	0x0800a9c3
 800a778:	0800a9c3 	.word	0x0800a9c3
 800a77c:	0800a9c3 	.word	0x0800a9c3
 800a780:	0800a7b7 	.word	0x0800a7b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a784:	4b94      	ldr	r3, [pc, #592]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0320 	and.w	r3, r3, #32
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d009      	beq.n	800a7a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a790:	4b91      	ldr	r3, [pc, #580]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	08db      	lsrs	r3, r3, #3
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	4a90      	ldr	r2, [pc, #576]	; (800a9dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a79c:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a7a2:	e111      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a7a4:	4b8d      	ldr	r3, [pc, #564]	; (800a9dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7a6:	61bb      	str	r3, [r7, #24]
    break;
 800a7a8:	e10e      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a7aa:	4b8d      	ldr	r3, [pc, #564]	; (800a9e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a7ac:	61bb      	str	r3, [r7, #24]
    break;
 800a7ae:	e10b      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a7b0:	4b8c      	ldr	r3, [pc, #560]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a7b2:	61bb      	str	r3, [r7, #24]
    break;
 800a7b4:	e108      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7b6:	4b88      	ldr	r3, [pc, #544]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a7c0:	4b85      	ldr	r3, [pc, #532]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c4:	091b      	lsrs	r3, r3, #4
 800a7c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a7cc:	4b82      	ldr	r3, [pc, #520]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d0:	f003 0301 	and.w	r3, r3, #1
 800a7d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a7d6:	4b80      	ldr	r3, [pc, #512]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7da:	08db      	lsrs	r3, r3, #3
 800a7dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	fb02 f303 	mul.w	r3, r2, r3
 800a7e6:	ee07 3a90 	vmov	s15, r3
 800a7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 80e1 	beq.w	800a9bc <HAL_RCC_GetSysClockFreq+0x2b8>
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	f000 8083 	beq.w	800a908 <HAL_RCC_GetSysClockFreq+0x204>
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2b02      	cmp	r3, #2
 800a806:	f200 80a1 	bhi.w	800a94c <HAL_RCC_GetSysClockFreq+0x248>
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d003      	beq.n	800a818 <HAL_RCC_GetSysClockFreq+0x114>
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d056      	beq.n	800a8c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a816:	e099      	b.n	800a94c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a818:	4b6f      	ldr	r3, [pc, #444]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 0320 	and.w	r3, r3, #32
 800a820:	2b00      	cmp	r3, #0
 800a822:	d02d      	beq.n	800a880 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a824:	4b6c      	ldr	r3, [pc, #432]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	08db      	lsrs	r3, r3, #3
 800a82a:	f003 0303 	and.w	r3, r3, #3
 800a82e:	4a6b      	ldr	r2, [pc, #428]	; (800a9dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a830:	fa22 f303 	lsr.w	r3, r2, r3
 800a834:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	ee07 3a90 	vmov	s15, r3
 800a83c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	ee07 3a90 	vmov	s15, r3
 800a846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a84e:	4b62      	ldr	r3, [pc, #392]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a85e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a862:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a9e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a87a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a87e:	e087      	b.n	800a990 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	ee07 3a90 	vmov	s15, r3
 800a886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a9ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800a88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a892:	4b51      	ldr	r3, [pc, #324]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a9e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8c2:	e065      	b.n	800a990 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	ee07 3a90 	vmov	s15, r3
 800a8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a9f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a8d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8d6:	4b40      	ldr	r3, [pc, #256]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8de:	ee07 3a90 	vmov	s15, r3
 800a8e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a9e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a906:	e043      	b.n	800a990 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a912:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a9f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a91a:	4b2f      	ldr	r3, [pc, #188]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a922:	ee07 3a90 	vmov	s15, r3
 800a926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a92e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a9e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a93a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a93e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a94a:	e021      	b.n	800a990 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	ee07 3a90 	vmov	s15, r3
 800a952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a956:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a9f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a95e:	4b1e      	ldr	r3, [pc, #120]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a96e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a972:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a9e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a98a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a98e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a990:	4b11      	ldr	r3, [pc, #68]	; (800a9d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a994:	0a5b      	lsrs	r3, r3, #9
 800a996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a99a:	3301      	adds	r3, #1
 800a99c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	ee07 3a90 	vmov	s15, r3
 800a9a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a9a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9b4:	ee17 3a90 	vmov	r3, s15
 800a9b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a9ba:	e005      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	61bb      	str	r3, [r7, #24]
    break;
 800a9c0:	e002      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a9c2:	4b07      	ldr	r3, [pc, #28]	; (800a9e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a9c4:	61bb      	str	r3, [r7, #24]
    break;
 800a9c6:	bf00      	nop
  }

  return sysclockfreq;
 800a9c8:	69bb      	ldr	r3, [r7, #24]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3724      	adds	r7, #36	; 0x24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	58024400 	.word	0x58024400
 800a9dc:	03d09000 	.word	0x03d09000
 800a9e0:	003d0900 	.word	0x003d0900
 800a9e4:	01518000 	.word	0x01518000
 800a9e8:	46000000 	.word	0x46000000
 800a9ec:	4c742400 	.word	0x4c742400
 800a9f0:	4a742400 	.word	0x4a742400
 800a9f4:	4ba8c000 	.word	0x4ba8c000

0800a9f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a9fe:	f7ff fe81 	bl	800a704 <HAL_RCC_GetSysClockFreq>
 800aa02:	4602      	mov	r2, r0
 800aa04:	4b10      	ldr	r3, [pc, #64]	; (800aa48 <HAL_RCC_GetHCLKFreq+0x50>)
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	0a1b      	lsrs	r3, r3, #8
 800aa0a:	f003 030f 	and.w	r3, r3, #15
 800aa0e:	490f      	ldr	r1, [pc, #60]	; (800aa4c <HAL_RCC_GetHCLKFreq+0x54>)
 800aa10:	5ccb      	ldrb	r3, [r1, r3]
 800aa12:	f003 031f 	and.w	r3, r3, #31
 800aa16:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa1c:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <HAL_RCC_GetHCLKFreq+0x50>)
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	f003 030f 	and.w	r3, r3, #15
 800aa24:	4a09      	ldr	r2, [pc, #36]	; (800aa4c <HAL_RCC_GetHCLKFreq+0x54>)
 800aa26:	5cd3      	ldrb	r3, [r2, r3]
 800aa28:	f003 031f 	and.w	r3, r3, #31
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa32:	4a07      	ldr	r2, [pc, #28]	; (800aa50 <HAL_RCC_GetHCLKFreq+0x58>)
 800aa34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa36:	4a07      	ldr	r2, [pc, #28]	; (800aa54 <HAL_RCC_GetHCLKFreq+0x5c>)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aa3c:	4b04      	ldr	r3, [pc, #16]	; (800aa50 <HAL_RCC_GetHCLKFreq+0x58>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	58024400 	.word	0x58024400
 800aa4c:	0801468c 	.word	0x0801468c
 800aa50:	24001010 	.word	0x24001010
 800aa54:	2400100c 	.word	0x2400100c

0800aa58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aa60:	2300      	movs	r3, #0
 800aa62:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aa64:	2300      	movs	r3, #0
 800aa66:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d03f      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa7c:	d02a      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800aa7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa82:	d824      	bhi.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aa84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa88:	d018      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aa8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa8e:	d81e      	bhi.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800aa94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa98:	d007      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800aa9a:	e018      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa9c:	4ba4      	ldr	r3, [pc, #656]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa0:	4aa3      	ldr	r2, [pc, #652]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aaa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aaa8:	e015      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3304      	adds	r3, #4
 800aaae:	2102      	movs	r1, #2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f001 ff01 	bl	800c8b8 <RCCEx_PLL2_Config>
 800aab6:	4603      	mov	r3, r0
 800aab8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aaba:	e00c      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3324      	adds	r3, #36	; 0x24
 800aac0:	2102      	movs	r1, #2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f001 ffaa 	bl	800ca1c <RCCEx_PLL3_Config>
 800aac8:	4603      	mov	r3, r0
 800aaca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aacc:	e003      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	75fb      	strb	r3, [r7, #23]
      break;
 800aad2:	e000      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d109      	bne.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aadc:	4b94      	ldr	r3, [pc, #592]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aae8:	4991      	ldr	r1, [pc, #580]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	650b      	str	r3, [r1, #80]	; 0x50
 800aaee:	e001      	b.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d03d      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d826      	bhi.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ab08:	a201      	add	r2, pc, #4	; (adr r2, 800ab10 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800ab0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0e:	bf00      	nop
 800ab10:	0800ab25 	.word	0x0800ab25
 800ab14:	0800ab33 	.word	0x0800ab33
 800ab18:	0800ab45 	.word	0x0800ab45
 800ab1c:	0800ab5d 	.word	0x0800ab5d
 800ab20:	0800ab5d 	.word	0x0800ab5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab24:	4b82      	ldr	r3, [pc, #520]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	4a81      	ldr	r2, [pc, #516]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ab2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab30:	e015      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3304      	adds	r3, #4
 800ab36:	2100      	movs	r1, #0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 febd 	bl	800c8b8 <RCCEx_PLL2_Config>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab42:	e00c      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3324      	adds	r3, #36	; 0x24
 800ab48:	2100      	movs	r1, #0
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f001 ff66 	bl	800ca1c <RCCEx_PLL3_Config>
 800ab50:	4603      	mov	r3, r0
 800ab52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab54:	e003      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	75fb      	strb	r3, [r7, #23]
      break;
 800ab5a:	e000      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ab5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d109      	bne.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab64:	4b72      	ldr	r3, [pc, #456]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ab66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab68:	f023 0207 	bic.w	r2, r3, #7
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab70:	496f      	ldr	r1, [pc, #444]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ab72:	4313      	orrs	r3, r2
 800ab74:	650b      	str	r3, [r1, #80]	; 0x50
 800ab76:	e001      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d051      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab8e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ab92:	d036      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ab94:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ab98:	d830      	bhi.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ab9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab9e:	d032      	beq.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800aba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aba4:	d82a      	bhi.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800aba6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abaa:	d02e      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800abac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abb0:	d824      	bhi.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800abb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abb6:	d018      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x192>
 800abb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abbc:	d81e      	bhi.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x172>
 800abc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abc6:	d007      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800abc8:	e018      	b.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abca:	4b59      	ldr	r3, [pc, #356]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800abcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abce:	4a58      	ldr	r2, [pc, #352]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800abd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800abd6:	e019      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3304      	adds	r3, #4
 800abdc:	2100      	movs	r1, #0
 800abde:	4618      	mov	r0, r3
 800abe0:	f001 fe6a 	bl	800c8b8 <RCCEx_PLL2_Config>
 800abe4:	4603      	mov	r3, r0
 800abe6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800abe8:	e010      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3324      	adds	r3, #36	; 0x24
 800abee:	2100      	movs	r1, #0
 800abf0:	4618      	mov	r0, r3
 800abf2:	f001 ff13 	bl	800ca1c <RCCEx_PLL3_Config>
 800abf6:	4603      	mov	r3, r0
 800abf8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800abfa:	e007      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	75fb      	strb	r3, [r7, #23]
      break;
 800ac00:	e004      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800ac02:	bf00      	nop
 800ac04:	e002      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800ac06:	bf00      	nop
 800ac08:	e000      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800ac0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10a      	bne.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ac12:	4b47      	ldr	r3, [pc, #284]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ac14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac16:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ac20:	4943      	ldr	r1, [pc, #268]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	658b      	str	r3, [r1, #88]	; 0x58
 800ac26:	e001      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac28:	7dfb      	ldrb	r3, [r7, #23]
 800ac2a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d051      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac3e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ac42:	d036      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800ac44:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ac48:	d830      	bhi.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800ac4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac4e:	d032      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800ac50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac54:	d82a      	bhi.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800ac56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac5a:	d02e      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x262>
 800ac5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac60:	d824      	bhi.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800ac62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac66:	d018      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x242>
 800ac68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac6c:	d81e      	bhi.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800ac72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac76:	d007      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ac78:	e018      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac7a:	4b2d      	ldr	r3, [pc, #180]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ac7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7e:	4a2c      	ldr	r2, [pc, #176]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ac80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ac86:	e019      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f001 fe12 	bl	800c8b8 <RCCEx_PLL2_Config>
 800ac94:	4603      	mov	r3, r0
 800ac96:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ac98:	e010      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	3324      	adds	r3, #36	; 0x24
 800ac9e:	2100      	movs	r1, #0
 800aca0:	4618      	mov	r0, r3
 800aca2:	f001 febb 	bl	800ca1c <RCCEx_PLL3_Config>
 800aca6:	4603      	mov	r3, r0
 800aca8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800acaa:	e007      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	75fb      	strb	r3, [r7, #23]
      break;
 800acb0:	e004      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800acb2:	bf00      	nop
 800acb4:	e002      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800acb6:	bf00      	nop
 800acb8:	e000      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800acba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10a      	bne.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800acc2:	4b1b      	ldr	r3, [pc, #108]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800acc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acc6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800acd0:	4917      	ldr	r1, [pc, #92]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800acd2:	4313      	orrs	r3, r2
 800acd4:	658b      	str	r3, [r1, #88]	; 0x58
 800acd6:	e001      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d035      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acec:	2b30      	cmp	r3, #48	; 0x30
 800acee:	d01c      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800acf0:	2b30      	cmp	r3, #48	; 0x30
 800acf2:	d817      	bhi.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800acf4:	2b20      	cmp	r3, #32
 800acf6:	d00c      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800acf8:	2b20      	cmp	r3, #32
 800acfa:	d813      	bhi.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d019      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800ad00:	2b10      	cmp	r3, #16
 800ad02:	d10f      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad04:	4b0a      	ldr	r3, [pc, #40]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ad0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800ad10:	e011      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3304      	adds	r3, #4
 800ad16:	2102      	movs	r1, #2
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f001 fdcd 	bl	800c8b8 <RCCEx_PLL2_Config>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800ad22:	e008      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	75fb      	strb	r3, [r7, #23]
      break;
 800ad28:	e005      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800ad2a:	bf00      	nop
 800ad2c:	e003      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ad2e:	bf00      	nop
 800ad30:	58024400 	.word	0x58024400
      break;
 800ad34:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d109      	bne.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ad3c:	4ba3      	ldr	r3, [pc, #652]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ad3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad48:	49a0      	ldr	r1, [pc, #640]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ad4e:	e001      	b.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad50:	7dfb      	ldrb	r3, [r7, #23]
 800ad52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d047      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad68:	d030      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800ad6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad6e:	d82a      	bhi.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ad70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad74:	d02c      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800ad76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad7a:	d824      	bhi.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ad7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad80:	d018      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ad82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad86:	d81e      	bhi.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ad8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad90:	d007      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ad92:	e018      	b.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad94:	4b8d      	ldr	r3, [pc, #564]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	4a8c      	ldr	r2, [pc, #560]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ad9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ada0:	e017      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3304      	adds	r3, #4
 800ada6:	2100      	movs	r1, #0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f001 fd85 	bl	800c8b8 <RCCEx_PLL2_Config>
 800adae:	4603      	mov	r3, r0
 800adb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800adb2:	e00e      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3324      	adds	r3, #36	; 0x24
 800adb8:	2100      	movs	r1, #0
 800adba:	4618      	mov	r0, r3
 800adbc:	f001 fe2e 	bl	800ca1c <RCCEx_PLL3_Config>
 800adc0:	4603      	mov	r3, r0
 800adc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800adc4:	e005      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	75fb      	strb	r3, [r7, #23]
      break;
 800adca:	e002      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800adcc:	bf00      	nop
 800adce:	e000      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800add0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d109      	bne.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800add8:	4b7c      	ldr	r3, [pc, #496]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800adda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800addc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade4:	4979      	ldr	r1, [pc, #484]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	650b      	str	r3, [r1, #80]	; 0x50
 800adea:	e001      	b.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d049      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae04:	d02e      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800ae06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae0a:	d828      	bhi.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800ae0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae10:	d02a      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ae12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae16:	d822      	bhi.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800ae18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae1c:	d026      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800ae1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae22:	d81c      	bhi.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800ae24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae28:	d010      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800ae2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae2e:	d816      	bhi.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d01d      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800ae34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae38:	d111      	bne.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	2101      	movs	r1, #1
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 fd39 	bl	800c8b8 <RCCEx_PLL2_Config>
 800ae46:	4603      	mov	r3, r0
 800ae48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ae4a:	e012      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3324      	adds	r3, #36	; 0x24
 800ae50:	2101      	movs	r1, #1
 800ae52:	4618      	mov	r0, r3
 800ae54:	f001 fde2 	bl	800ca1c <RCCEx_PLL3_Config>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ae5c:	e009      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	75fb      	strb	r3, [r7, #23]
      break;
 800ae62:	e006      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ae64:	bf00      	nop
 800ae66:	e004      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ae68:	bf00      	nop
 800ae6a:	e002      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ae6c:	bf00      	nop
 800ae6e:	e000      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ae70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d109      	bne.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ae78:	4b54      	ldr	r3, [pc, #336]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ae7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae84:	4951      	ldr	r1, [pc, #324]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	650b      	str	r3, [r1, #80]	; 0x50
 800ae8a:	e001      	b.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d04b      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aea6:	d02e      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800aea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeac:	d828      	bhi.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800aeae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeb2:	d02a      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800aeb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeb8:	d822      	bhi.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800aeba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aebe:	d026      	beq.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800aec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aec4:	d81c      	bhi.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800aec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeca:	d010      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x496>
 800aecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aed0:	d816      	bhi.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d01d      	beq.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800aed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeda:	d111      	bne.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3304      	adds	r3, #4
 800aee0:	2101      	movs	r1, #1
 800aee2:	4618      	mov	r0, r3
 800aee4:	f001 fce8 	bl	800c8b8 <RCCEx_PLL2_Config>
 800aee8:	4603      	mov	r3, r0
 800aeea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800aeec:	e012      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	3324      	adds	r3, #36	; 0x24
 800aef2:	2101      	movs	r1, #1
 800aef4:	4618      	mov	r0, r3
 800aef6:	f001 fd91 	bl	800ca1c <RCCEx_PLL3_Config>
 800aefa:	4603      	mov	r3, r0
 800aefc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800aefe:	e009      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	75fb      	strb	r3, [r7, #23]
      break;
 800af04:	e006      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800af06:	bf00      	nop
 800af08:	e004      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800af0a:	bf00      	nop
 800af0c:	e002      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800af0e:	bf00      	nop
 800af10:	e000      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800af12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af14:	7dfb      	ldrb	r3, [r7, #23]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10a      	bne.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800af1a:	4b2c      	ldr	r3, [pc, #176]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800af1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af28:	4928      	ldr	r1, [pc, #160]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	658b      	str	r3, [r1, #88]	; 0x58
 800af2e:	e001      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af30:	7dfb      	ldrb	r3, [r7, #23]
 800af32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d02f      	beq.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af48:	d00e      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800af4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af4e:	d814      	bhi.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800af50:	2b00      	cmp	r3, #0
 800af52:	d015      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800af54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af58:	d10f      	bne.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af5a:	4b1c      	ldr	r3, [pc, #112]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800af5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5e:	4a1b      	ldr	r2, [pc, #108]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800af60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800af66:	e00c      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3304      	adds	r3, #4
 800af6c:	2101      	movs	r1, #1
 800af6e:	4618      	mov	r0, r3
 800af70:	f001 fca2 	bl	800c8b8 <RCCEx_PLL2_Config>
 800af74:	4603      	mov	r3, r0
 800af76:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800af78:	e003      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	75fb      	strb	r3, [r7, #23]
      break;
 800af7e:	e000      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800af80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d109      	bne.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af88:	4b10      	ldr	r3, [pc, #64]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800af8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af94:	490d      	ldr	r1, [pc, #52]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800af96:	4313      	orrs	r3, r2
 800af98:	650b      	str	r3, [r1, #80]	; 0x50
 800af9a:	e001      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d034      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d81d      	bhi.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800afb4:	a201      	add	r2, pc, #4	; (adr r2, 800afbc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800afb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afba:	bf00      	nop
 800afbc:	0800aff7 	.word	0x0800aff7
 800afc0:	0800afd1 	.word	0x0800afd1
 800afc4:	0800afdf 	.word	0x0800afdf
 800afc8:	0800aff7 	.word	0x0800aff7
 800afcc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afd0:	4bb1      	ldr	r3, [pc, #708]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	4ab0      	ldr	r2, [pc, #704]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800afd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800afdc:	e00c      	b.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3304      	adds	r3, #4
 800afe2:	2102      	movs	r1, #2
 800afe4:	4618      	mov	r0, r3
 800afe6:	f001 fc67 	bl	800c8b8 <RCCEx_PLL2_Config>
 800afea:	4603      	mov	r3, r0
 800afec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800afee:	e003      	b.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	75fb      	strb	r3, [r7, #23]
      break;
 800aff4:	e000      	b.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800aff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d109      	bne.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800affe:	4ba6      	ldr	r3, [pc, #664]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b002:	f023 0203 	bic.w	r2, r3, #3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00a:	49a3      	ldr	r1, [pc, #652]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b010:	e001      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b012:	7dfb      	ldrb	r3, [r7, #23]
 800b014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 8086 	beq.w	800b130 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b024:	4b9d      	ldr	r3, [pc, #628]	; (800b29c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a9c      	ldr	r2, [pc, #624]	; (800b29c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b02a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b02e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b030:	f7f8 fbf4 	bl	800381c <HAL_GetTick>
 800b034:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b036:	e009      	b.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b038:	f7f8 fbf0 	bl	800381c <HAL_GetTick>
 800b03c:	4602      	mov	r2, r0
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	2b64      	cmp	r3, #100	; 0x64
 800b044:	d902      	bls.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800b046:	2303      	movs	r3, #3
 800b048:	75fb      	strb	r3, [r7, #23]
        break;
 800b04a:	e005      	b.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b04c:	4b93      	ldr	r3, [pc, #588]	; (800b29c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b054:	2b00      	cmp	r3, #0
 800b056:	d0ef      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800b058:	7dfb      	ldrb	r3, [r7, #23]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d166      	bne.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b05e:	4b8e      	ldr	r3, [pc, #568]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b060:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b068:	4053      	eors	r3, r2
 800b06a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d013      	beq.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b072:	4b89      	ldr	r3, [pc, #548]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b07a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b07c:	4b86      	ldr	r3, [pc, #536]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b080:	4a85      	ldr	r2, [pc, #532]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b086:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b088:	4b83      	ldr	r3, [pc, #524]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b08a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08c:	4a82      	ldr	r2, [pc, #520]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b08e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b092:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b094:	4a80      	ldr	r2, [pc, #512]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a4:	d115      	bne.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0a6:	f7f8 fbb9 	bl	800381c <HAL_GetTick>
 800b0aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0ac:	e00b      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0ae:	f7f8 fbb5 	bl	800381c <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d902      	bls.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	75fb      	strb	r3, [r7, #23]
            break;
 800b0c4:	e005      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0c6:	4b74      	ldr	r3, [pc, #464]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ca:	f003 0302 	and.w	r3, r3, #2
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0ed      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d126      	bne.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0e6:	d10d      	bne.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800b0e8:	4b6b      	ldr	r3, [pc, #428]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0f6:	0919      	lsrs	r1, r3, #4
 800b0f8:	4b69      	ldr	r3, [pc, #420]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b0fa:	400b      	ands	r3, r1
 800b0fc:	4966      	ldr	r1, [pc, #408]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	610b      	str	r3, [r1, #16]
 800b102:	e005      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b104:	4b64      	ldr	r3, [pc, #400]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	4a63      	ldr	r2, [pc, #396]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b10a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b10e:	6113      	str	r3, [r2, #16]
 800b110:	4b61      	ldr	r3, [pc, #388]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b112:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b11a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b11e:	495e      	ldr	r1, [pc, #376]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b120:	4313      	orrs	r3, r2
 800b122:	670b      	str	r3, [r1, #112]	; 0x70
 800b124:	e004      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b126:	7dfb      	ldrb	r3, [r7, #23]
 800b128:	75bb      	strb	r3, [r7, #22]
 800b12a:	e001      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b12c:	7dfb      	ldrb	r3, [r7, #23]
 800b12e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 0301 	and.w	r3, r3, #1
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d07e      	beq.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b140:	2b28      	cmp	r3, #40	; 0x28
 800b142:	d867      	bhi.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800b144:	a201      	add	r2, pc, #4	; (adr r2, 800b14c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800b146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14a:	bf00      	nop
 800b14c:	0800b21b 	.word	0x0800b21b
 800b150:	0800b215 	.word	0x0800b215
 800b154:	0800b215 	.word	0x0800b215
 800b158:	0800b215 	.word	0x0800b215
 800b15c:	0800b215 	.word	0x0800b215
 800b160:	0800b215 	.word	0x0800b215
 800b164:	0800b215 	.word	0x0800b215
 800b168:	0800b215 	.word	0x0800b215
 800b16c:	0800b1f1 	.word	0x0800b1f1
 800b170:	0800b215 	.word	0x0800b215
 800b174:	0800b215 	.word	0x0800b215
 800b178:	0800b215 	.word	0x0800b215
 800b17c:	0800b215 	.word	0x0800b215
 800b180:	0800b215 	.word	0x0800b215
 800b184:	0800b215 	.word	0x0800b215
 800b188:	0800b215 	.word	0x0800b215
 800b18c:	0800b203 	.word	0x0800b203
 800b190:	0800b215 	.word	0x0800b215
 800b194:	0800b215 	.word	0x0800b215
 800b198:	0800b215 	.word	0x0800b215
 800b19c:	0800b215 	.word	0x0800b215
 800b1a0:	0800b215 	.word	0x0800b215
 800b1a4:	0800b215 	.word	0x0800b215
 800b1a8:	0800b215 	.word	0x0800b215
 800b1ac:	0800b21b 	.word	0x0800b21b
 800b1b0:	0800b215 	.word	0x0800b215
 800b1b4:	0800b215 	.word	0x0800b215
 800b1b8:	0800b215 	.word	0x0800b215
 800b1bc:	0800b215 	.word	0x0800b215
 800b1c0:	0800b215 	.word	0x0800b215
 800b1c4:	0800b215 	.word	0x0800b215
 800b1c8:	0800b215 	.word	0x0800b215
 800b1cc:	0800b21b 	.word	0x0800b21b
 800b1d0:	0800b215 	.word	0x0800b215
 800b1d4:	0800b215 	.word	0x0800b215
 800b1d8:	0800b215 	.word	0x0800b215
 800b1dc:	0800b215 	.word	0x0800b215
 800b1e0:	0800b215 	.word	0x0800b215
 800b1e4:	0800b215 	.word	0x0800b215
 800b1e8:	0800b215 	.word	0x0800b215
 800b1ec:	0800b21b 	.word	0x0800b21b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f001 fb5e 	bl	800c8b8 <RCCEx_PLL2_Config>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b200:	e00c      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3324      	adds	r3, #36	; 0x24
 800b206:	2101      	movs	r1, #1
 800b208:	4618      	mov	r0, r3
 800b20a:	f001 fc07 	bl	800ca1c <RCCEx_PLL3_Config>
 800b20e:	4603      	mov	r3, r0
 800b210:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b212:	e003      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	75fb      	strb	r3, [r7, #23]
      break;
 800b218:	e000      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800b21a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b21c:	7dfb      	ldrb	r3, [r7, #23]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d109      	bne.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b222:	4b1d      	ldr	r3, [pc, #116]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b226:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b22e:	491a      	ldr	r1, [pc, #104]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b230:	4313      	orrs	r3, r2
 800b232:	654b      	str	r3, [r1, #84]	; 0x54
 800b234:	e001      	b.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 0302 	and.w	r3, r3, #2
 800b242:	2b00      	cmp	r3, #0
 800b244:	d03e      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24a:	2b05      	cmp	r3, #5
 800b24c:	d820      	bhi.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800b24e:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800b250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b254:	0800b2a5 	.word	0x0800b2a5
 800b258:	0800b26d 	.word	0x0800b26d
 800b25c:	0800b27f 	.word	0x0800b27f
 800b260:	0800b2a5 	.word	0x0800b2a5
 800b264:	0800b2a5 	.word	0x0800b2a5
 800b268:	0800b2a5 	.word	0x0800b2a5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3304      	adds	r3, #4
 800b270:	2101      	movs	r1, #1
 800b272:	4618      	mov	r0, r3
 800b274:	f001 fb20 	bl	800c8b8 <RCCEx_PLL2_Config>
 800b278:	4603      	mov	r3, r0
 800b27a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b27c:	e013      	b.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3324      	adds	r3, #36	; 0x24
 800b282:	2101      	movs	r1, #1
 800b284:	4618      	mov	r0, r3
 800b286:	f001 fbc9 	bl	800ca1c <RCCEx_PLL3_Config>
 800b28a:	4603      	mov	r3, r0
 800b28c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b28e:	e00a      	b.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	75fb      	strb	r3, [r7, #23]
      break;
 800b294:	e007      	b.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800b296:	bf00      	nop
 800b298:	58024400 	.word	0x58024400
 800b29c:	58024800 	.word	0x58024800
 800b2a0:	00ffffcf 	.word	0x00ffffcf
      break;
 800b2a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d109      	bne.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b2ac:	4b9f      	ldr	r3, [pc, #636]	; (800b52c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b2ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2b0:	f023 0207 	bic.w	r2, r3, #7
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b8:	499c      	ldr	r1, [pc, #624]	; (800b52c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	654b      	str	r3, [r1, #84]	; 0x54
 800b2be:	e001      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
 800b2c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 0304 	and.w	r3, r3, #4
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d039      	beq.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2d6:	2b05      	cmp	r3, #5
 800b2d8:	d820      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800b2da:	a201      	add	r2, pc, #4	; (adr r2, 800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e0:	0800b323 	.word	0x0800b323
 800b2e4:	0800b2f9 	.word	0x0800b2f9
 800b2e8:	0800b30b 	.word	0x0800b30b
 800b2ec:	0800b323 	.word	0x0800b323
 800b2f0:	0800b323 	.word	0x0800b323
 800b2f4:	0800b323 	.word	0x0800b323
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	2101      	movs	r1, #1
 800b2fe:	4618      	mov	r0, r3
 800b300:	f001 fada 	bl	800c8b8 <RCCEx_PLL2_Config>
 800b304:	4603      	mov	r3, r0
 800b306:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b308:	e00c      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3324      	adds	r3, #36	; 0x24
 800b30e:	2101      	movs	r1, #1
 800b310:	4618      	mov	r0, r3
 800b312:	f001 fb83 	bl	800ca1c <RCCEx_PLL3_Config>
 800b316:	4603      	mov	r3, r0
 800b318:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b31a:	e003      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	75fb      	strb	r3, [r7, #23]
      break;
 800b320:	e000      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800b322:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10a      	bne.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b32a:	4b80      	ldr	r3, [pc, #512]	; (800b52c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b32e:	f023 0207 	bic.w	r2, r3, #7
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b338:	497c      	ldr	r1, [pc, #496]	; (800b52c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b33a:	4313      	orrs	r3, r2
 800b33c:	658b      	str	r3, [r1, #88]	; 0x58
 800b33e:	e001      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b340:	7dfb      	ldrb	r3, [r7, #23]
 800b342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0320 	and.w	r3, r3, #32
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d04b      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b35a:	d02e      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x962>
 800b35c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b360:	d828      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b366:	d02a      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x966>
 800b368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b36c:	d822      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b36e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b372:	d026      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800b374:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b378:	d81c      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b37a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b37e:	d010      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800b380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b384:	d816      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b386:	2b00      	cmp	r3, #0
 800b388:	d01d      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b38a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b38e:	d111      	bne.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3304      	adds	r3, #4
 800b394:	2100      	movs	r1, #0
 800b396:	4618      	mov	r0, r3
 800b398:	f001 fa8e 	bl	800c8b8 <RCCEx_PLL2_Config>
 800b39c:	4603      	mov	r3, r0
 800b39e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b3a0:	e012      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	3324      	adds	r3, #36	; 0x24
 800b3a6:	2102      	movs	r1, #2
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f001 fb37 	bl	800ca1c <RCCEx_PLL3_Config>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b3b2:	e009      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b8:	e006      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b3ba:	bf00      	nop
 800b3bc:	e004      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b3be:	bf00      	nop
 800b3c0:	e002      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b3c2:	bf00      	nop
 800b3c4:	e000      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b3c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3c8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d10a      	bne.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3ce:	4b57      	ldr	r3, [pc, #348]	; (800b52c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3dc:	4953      	ldr	r1, [pc, #332]	; (800b52c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	654b      	str	r3, [r1, #84]	; 0x54
 800b3e2:	e001      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e4:	7dfb      	ldrb	r3, [r7, #23]
 800b3e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d04b      	beq.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b3fe:	d02e      	beq.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800b400:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b404:	d828      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b40a:	d02a      	beq.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800b40c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b410:	d822      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b412:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b416:	d026      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800b418:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b41c:	d81c      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b41e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b422:	d010      	beq.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800b424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b428:	d816      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d01d      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b42e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b432:	d111      	bne.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3304      	adds	r3, #4
 800b438:	2100      	movs	r1, #0
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 fa3c 	bl	800c8b8 <RCCEx_PLL2_Config>
 800b440:	4603      	mov	r3, r0
 800b442:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b444:	e012      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3324      	adds	r3, #36	; 0x24
 800b44a:	2102      	movs	r1, #2
 800b44c:	4618      	mov	r0, r3
 800b44e:	f001 fae5 	bl	800ca1c <RCCEx_PLL3_Config>
 800b452:	4603      	mov	r3, r0
 800b454:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b456:	e009      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	75fb      	strb	r3, [r7, #23]
      break;
 800b45c:	e006      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b45e:	bf00      	nop
 800b460:	e004      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b462:	bf00      	nop
 800b464:	e002      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b466:	bf00      	nop
 800b468:	e000      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b46a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b472:	4b2e      	ldr	r3, [pc, #184]	; (800b52c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b476:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b480:	492a      	ldr	r1, [pc, #168]	; (800b52c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b482:	4313      	orrs	r3, r2
 800b484:	658b      	str	r3, [r1, #88]	; 0x58
 800b486:	e001      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b494:	2b00      	cmp	r3, #0
 800b496:	d04d      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b49e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4a2:	d02e      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800b4a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4a8:	d828      	bhi.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b4aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4ae:	d02a      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800b4b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4b4:	d822      	bhi.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b4b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b4ba:	d026      	beq.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800b4bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b4c0:	d81c      	bhi.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b4c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4c6:	d010      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800b4c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4cc:	d816      	bhi.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d01d      	beq.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800b4d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4d6:	d111      	bne.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3304      	adds	r3, #4
 800b4dc:	2100      	movs	r1, #0
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f001 f9ea 	bl	800c8b8 <RCCEx_PLL2_Config>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b4e8:	e012      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3324      	adds	r3, #36	; 0x24
 800b4ee:	2102      	movs	r1, #2
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f001 fa93 	bl	800ca1c <RCCEx_PLL3_Config>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b4fa:	e009      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b500:	e006      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b502:	bf00      	nop
 800b504:	e004      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b506:	bf00      	nop
 800b508:	e002      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b50a:	bf00      	nop
 800b50c:	e000      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b50e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b510:	7dfb      	ldrb	r3, [r7, #23]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10c      	bne.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b516:	4b05      	ldr	r3, [pc, #20]	; (800b52c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b51a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b524:	4901      	ldr	r1, [pc, #4]	; (800b52c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b526:	4313      	orrs	r3, r2
 800b528:	658b      	str	r3, [r1, #88]	; 0x58
 800b52a:	e003      	b.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800b52c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b530:	7dfb      	ldrb	r3, [r7, #23]
 800b532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 0308 	and.w	r3, r3, #8
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d018      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b548:	d10a      	bne.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3324      	adds	r3, #36	; 0x24
 800b54e:	2102      	movs	r1, #2
 800b550:	4618      	mov	r0, r3
 800b552:	f001 fa63 	bl	800ca1c <RCCEx_PLL3_Config>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d001      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b560:	4b8a      	ldr	r3, [pc, #552]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b564:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b56c:	4987      	ldr	r1, [pc, #540]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b56e:	4313      	orrs	r3, r2
 800b570:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f003 0310 	and.w	r3, r3, #16
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d01a      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b588:	d10a      	bne.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	3324      	adds	r3, #36	; 0x24
 800b58e:	2102      	movs	r1, #2
 800b590:	4618      	mov	r0, r3
 800b592:	f001 fa43 	bl	800ca1c <RCCEx_PLL3_Config>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b5a0:	4b7a      	ldr	r3, [pc, #488]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ae:	4977      	ldr	r1, [pc, #476]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d034      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ca:	d01d      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b5cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5d0:	d817      	bhi.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b5d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5da:	d009      	beq.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b5dc:	e011      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f001 f967 	bl	800c8b8 <RCCEx_PLL2_Config>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b5ee:	e00c      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3324      	adds	r3, #36	; 0x24
 800b5f4:	2102      	movs	r1, #2
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f001 fa10 	bl	800ca1c <RCCEx_PLL3_Config>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b600:	e003      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	75fb      	strb	r3, [r7, #23]
      break;
 800b606:	e000      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800b608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b610:	4b5e      	ldr	r3, [pc, #376]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b61e:	495b      	ldr	r1, [pc, #364]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b620:	4313      	orrs	r3, r2
 800b622:	658b      	str	r3, [r1, #88]	; 0x58
 800b624:	e001      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b626:	7dfb      	ldrb	r3, [r7, #23]
 800b628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d033      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b63c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b640:	d01c      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b642:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b646:	d816      	bhi.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b64c:	d003      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b64e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b652:	d007      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800b654:	e00f      	b.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b656:	4b4d      	ldr	r3, [pc, #308]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65a:	4a4c      	ldr	r2, [pc, #304]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b65c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b662:	e00c      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	3324      	adds	r3, #36	; 0x24
 800b668:	2101      	movs	r1, #1
 800b66a:	4618      	mov	r0, r3
 800b66c:	f001 f9d6 	bl	800ca1c <RCCEx_PLL3_Config>
 800b670:	4603      	mov	r3, r0
 800b672:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b674:	e003      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	75fb      	strb	r3, [r7, #23]
      break;
 800b67a:	e000      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800b67c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10a      	bne.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b684:	4b41      	ldr	r3, [pc, #260]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b692:	493e      	ldr	r1, [pc, #248]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b694:	4313      	orrs	r3, r2
 800b696:	654b      	str	r3, [r1, #84]	; 0x54
 800b698:	e001      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d029      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b6b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b6:	d007      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b6b8:	e00f      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6ba:	4b34      	ldr	r3, [pc, #208]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6be:	4a33      	ldr	r2, [pc, #204]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b6c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b6c6:	e00b      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	2102      	movs	r1, #2
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f001 f8f2 	bl	800c8b8 <RCCEx_PLL2_Config>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b6d8:	e002      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	75fb      	strb	r3, [r7, #23]
      break;
 800b6de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d109      	bne.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b6e6:	4b29      	ldr	r3, [pc, #164]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6f2:	4926      	ldr	r1, [pc, #152]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b6f8:	e001      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6fa:	7dfb      	ldrb	r3, [r7, #23]
 800b6fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00a      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	3324      	adds	r3, #36	; 0x24
 800b70e:	2102      	movs	r1, #2
 800b710:	4618      	mov	r0, r3
 800b712:	f001 f983 	bl	800ca1c <RCCEx_PLL3_Config>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d033      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b734:	d017      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800b736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b73a:	d811      	bhi.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b73c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b740:	d013      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800b742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b746:	d80b      	bhi.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d010      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800b74c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b750:	d106      	bne.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b752:	4b0e      	ldr	r3, [pc, #56]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	4a0d      	ldr	r2, [pc, #52]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b75c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b75e:	e007      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	75fb      	strb	r3, [r7, #23]
      break;
 800b764:	e004      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800b766:	bf00      	nop
 800b768:	e002      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800b76a:	bf00      	nop
 800b76c:	e000      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800b76e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b770:	7dfb      	ldrb	r3, [r7, #23]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10c      	bne.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b776:	4b05      	ldr	r3, [pc, #20]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b77a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b782:	4902      	ldr	r1, [pc, #8]	; (800b78c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b784:	4313      	orrs	r3, r2
 800b786:	654b      	str	r3, [r1, #84]	; 0x54
 800b788:	e004      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800b78a:	bf00      	nop
 800b78c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b790:	7dfb      	ldrb	r3, [r7, #23]
 800b792:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d008      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b7a0:	4b29      	ldr	r3, [pc, #164]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ac:	4926      	ldr	r1, [pc, #152]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d008      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b7be:	4b22      	ldr	r3, [pc, #136]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ca:	491f      	ldr	r1, [pc, #124]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00d      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b7dc:	4b1a      	ldr	r3, [pc, #104]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	4a19      	ldr	r2, [pc, #100]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b7e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b7e6:	6113      	str	r3, [r2, #16]
 800b7e8:	4b17      	ldr	r3, [pc, #92]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b7ea:	691a      	ldr	r2, [r3, #16]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b7f2:	4915      	ldr	r1, [pc, #84]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	da08      	bge.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b800:	4b11      	ldr	r3, [pc, #68]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b804:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80c:	490e      	ldr	r1, [pc, #56]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b80e:	4313      	orrs	r3, r2
 800b810:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d009      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b81e:	4b0a      	ldr	r3, [pc, #40]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b822:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b82c:	4906      	ldr	r1, [pc, #24]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b82e:	4313      	orrs	r3, r2
 800b830:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b832:	7dbb      	ldrb	r3, [r7, #22]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800b838:	2300      	movs	r3, #0
 800b83a:	e000      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	58024400 	.word	0x58024400

0800b84c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b090      	sub	sp, #64	; 0x40
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b85a:	f040 8089 	bne.w	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b85e:	4b95      	ldr	r3, [pc, #596]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b862:	f003 0307 	and.w	r3, r3, #7
 800b866:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86a:	2b04      	cmp	r3, #4
 800b86c:	d87d      	bhi.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800b86e:	a201      	add	r2, pc, #4	; (adr r2, 800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800b870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b874:	0800b889 	.word	0x0800b889
 800b878:	0800b8ad 	.word	0x0800b8ad
 800b87c:	0800b8d1 	.word	0x0800b8d1
 800b880:	0800b965 	.word	0x0800b965
 800b884:	0800b8f5 	.word	0x0800b8f5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b888:	4b8a      	ldr	r3, [pc, #552]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b890:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b894:	d107      	bne.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 feba 	bl	800c614 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b8a4:	e3ef      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8aa:	e3ec      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8ac:	4b81      	ldr	r3, [pc, #516]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8b8:	d107      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8ba:	f107 0318 	add.w	r3, r7, #24
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 fc00 	bl	800c0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b8c8:	e3dd      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8ce:	e3da      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8d0:	4b78      	ldr	r3, [pc, #480]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8dc:	d107      	bne.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8de:	f107 030c 	add.w	r3, r7, #12
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 fd42 	bl	800c36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b8ec:	e3cb      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8f2:	e3c8      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b8f4:	4b6f      	ldr	r3, [pc, #444]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b8f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8fe:	4b6d      	ldr	r3, [pc, #436]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 0304 	and.w	r3, r3, #4
 800b906:	2b04      	cmp	r3, #4
 800b908:	d10c      	bne.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800b90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d109      	bne.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b910:	4b68      	ldr	r3, [pc, #416]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	08db      	lsrs	r3, r3, #3
 800b916:	f003 0303 	and.w	r3, r3, #3
 800b91a:	4a67      	ldr	r2, [pc, #412]	; (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800b91c:	fa22 f303 	lsr.w	r3, r2, r3
 800b920:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b922:	e01e      	b.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b924:	4b63      	ldr	r3, [pc, #396]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b930:	d106      	bne.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800b932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b938:	d102      	bne.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b93a:	4b60      	ldr	r3, [pc, #384]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b93c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b93e:	e010      	b.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b940:	4b5c      	ldr	r3, [pc, #368]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b94c:	d106      	bne.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b954:	d102      	bne.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b956:	4b5a      	ldr	r3, [pc, #360]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b95a:	e002      	b.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b960:	e391      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b962:	e390      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b964:	4b57      	ldr	r3, [pc, #348]	; (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b968:	e38d      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b96e:	e38a      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b976:	f040 80a7 	bne.w	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b97a:	4b4e      	ldr	r3, [pc, #312]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b97c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b97e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b982:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b98a:	d054      	beq.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b992:	f200 808b 	bhi.w	800baac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b99c:	f000 8083 	beq.w	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b9a6:	f200 8081 	bhi.w	800baac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9b0:	d02f      	beq.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9b8:	d878      	bhi.n	800baac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d004      	beq.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9c6:	d012      	beq.n	800b9ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800b9c8:	e070      	b.n	800baac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9ca:	4b3a      	ldr	r3, [pc, #232]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9d6:	d107      	bne.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 fe19 	bl	800c614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9e6:	e34e      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9ec:	e34b      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9ee:	4b31      	ldr	r3, [pc, #196]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9fa:	d107      	bne.n	800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9fc:	f107 0318 	add.w	r3, r7, #24
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 fb5f 	bl	800c0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba0a:	e33c      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba10:	e339      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba12:	4b28      	ldr	r3, [pc, #160]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba1e:	d107      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba20:	f107 030c 	add.w	r3, r7, #12
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fca1 	bl	800c36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba2e:	e32a      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba34:	e327      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ba36:	4b1f      	ldr	r3, [pc, #124]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ba38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba3e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba40:	4b1c      	ldr	r3, [pc, #112]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b04      	cmp	r3, #4
 800ba4a:	d10c      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d109      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba52:	4b18      	ldr	r3, [pc, #96]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	08db      	lsrs	r3, r3, #3
 800ba58:	f003 0303 	and.w	r3, r3, #3
 800ba5c:	4a16      	ldr	r2, [pc, #88]	; (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800ba5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba64:	e01e      	b.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba66:	4b13      	ldr	r3, [pc, #76]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba72:	d106      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800ba74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba7a:	d102      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ba7c:	4b0f      	ldr	r3, [pc, #60]	; (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ba7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba80:	e010      	b.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba82:	4b0c      	ldr	r3, [pc, #48]	; (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba8e:	d106      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800ba90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba96:	d102      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ba98:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ba9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba9c:	e002      	b.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800baa2:	e2f0      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800baa4:	e2ef      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800baa6:	4b07      	ldr	r3, [pc, #28]	; (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800baa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800baaa:	e2ec      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800baac:	2300      	movs	r3, #0
 800baae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bab0:	e2e9      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bab2:	bf00      	nop
 800bab4:	58024400 	.word	0x58024400
 800bab8:	03d09000 	.word	0x03d09000
 800babc:	003d0900 	.word	0x003d0900
 800bac0:	01518000 	.word	0x01518000
 800bac4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bace:	f040 809c 	bne.w	800bc0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800bad2:	4b9d      	ldr	r3, [pc, #628]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bada:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800badc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bae2:	d054      	beq.n	800bb8e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800baea:	f200 808b 	bhi.w	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800baf4:	f000 8083 	beq.w	800bbfe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800baf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bafe:	f200 8081 	bhi.w	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb08:	d02f      	beq.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb10:	d878      	bhi.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d004      	beq.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb1e:	d012      	beq.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bb20:	e070      	b.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb22:	4b89      	ldr	r3, [pc, #548]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb2e:	d107      	bne.n	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 fd6d 	bl	800c614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bb3e:	e2a2      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb44:	e29f      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb46:	4b80      	ldr	r3, [pc, #512]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb52:	d107      	bne.n	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb54:	f107 0318 	add.w	r3, r7, #24
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 fab3 	bl	800c0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800bb62:	e290      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb68:	e28d      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb6a:	4b77      	ldr	r3, [pc, #476]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb76:	d107      	bne.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb78:	f107 030c 	add.w	r3, r7, #12
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 fbf5 	bl	800c36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bb86:	e27e      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb8c:	e27b      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bb8e:	4b6e      	ldr	r3, [pc, #440]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bb90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb96:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb98:	4b6b      	ldr	r3, [pc, #428]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 0304 	and.w	r3, r3, #4
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	d10c      	bne.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d109      	bne.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbaa:	4b67      	ldr	r3, [pc, #412]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	08db      	lsrs	r3, r3, #3
 800bbb0:	f003 0303 	and.w	r3, r3, #3
 800bbb4:	4a65      	ldr	r2, [pc, #404]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bbb6:	fa22 f303 	lsr.w	r3, r2, r3
 800bbba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbbc:	e01e      	b.n	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bbbe:	4b62      	ldr	r3, [pc, #392]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbca:	d106      	bne.n	800bbda <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800bbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbd2:	d102      	bne.n	800bbda <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bbd4:	4b5e      	ldr	r3, [pc, #376]	; (800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbd8:	e010      	b.n	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bbda:	4b5b      	ldr	r3, [pc, #364]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbe6:	d106      	bne.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800bbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbee:	d102      	bne.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bbf0:	4b58      	ldr	r3, [pc, #352]	; (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800bbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbf4:	e002      	b.n	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bbfa:	e244      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bbfc:	e243      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bbfe:	4b56      	ldr	r3, [pc, #344]	; (800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800bc00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc02:	e240      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc08:	e23d      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc10:	f040 80a7 	bne.w	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800bc14:	4b4c      	ldr	r3, [pc, #304]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bc16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc18:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bc1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc24:	d055      	beq.n	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800bc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc2c:	f200 8096 	bhi.w	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc36:	f000 8084 	beq.w	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800bc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc40:	f200 808c 	bhi.w	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800bc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc4a:	d030      	beq.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800bc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc52:	f200 8083 	bhi.w	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800bc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d004      	beq.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800bc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc62:	d012      	beq.n	800bc8a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800bc64:	e07a      	b.n	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc66:	4b38      	ldr	r3, [pc, #224]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc72:	d107      	bne.n	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 fccb 	bl	800c614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bc82:	e200      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc88:	e1fd      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc8a:	4b2f      	ldr	r3, [pc, #188]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc96:	d107      	bne.n	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc98:	f107 0318 	add.w	r3, r7, #24
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 fa11 	bl	800c0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bca6:	e1ee      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcac:	e1eb      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bcae:	4b26      	ldr	r3, [pc, #152]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcba:	d107      	bne.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcbc:	f107 030c 	add.w	r3, r7, #12
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 fb53 	bl	800c36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bcca:	e1dc      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcd0:	e1d9      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bcd2:	4b1d      	ldr	r3, [pc, #116]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bcd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcda:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bcdc:	4b1a      	ldr	r3, [pc, #104]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 0304 	and.w	r3, r3, #4
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	d10c      	bne.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800bce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d109      	bne.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcee:	4b16      	ldr	r3, [pc, #88]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	08db      	lsrs	r3, r3, #3
 800bcf4:	f003 0303 	and.w	r3, r3, #3
 800bcf8:	4a14      	ldr	r2, [pc, #80]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800bcfa:	fa22 f303 	lsr.w	r3, r2, r3
 800bcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd00:	e01e      	b.n	800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd02:	4b11      	ldr	r3, [pc, #68]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd0e:	d106      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800bd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd16:	d102      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bd18:	4b0d      	ldr	r3, [pc, #52]	; (800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd1c:	e010      	b.n	800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd1e:	4b0a      	ldr	r3, [pc, #40]	; (800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd2a:	d106      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800bd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd32:	d102      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bd34:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800bd36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd38:	e002      	b.n	800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bd3e:	e1a2      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bd40:	e1a1      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bd42:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800bd44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd46:	e19e      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bd48:	58024400 	.word	0x58024400
 800bd4c:	03d09000 	.word	0x03d09000
 800bd50:	003d0900 	.word	0x003d0900
 800bd54:	01518000 	.word	0x01518000
 800bd58:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd60:	e191      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd68:	d173      	bne.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800bd6a:	4b9b      	ldr	r3, [pc, #620]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bd72:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd7a:	d02f      	beq.n	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800bd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd82:	d863      	bhi.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d004      	beq.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd90:	d012      	beq.n	800bdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800bd92:	e05b      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd94:	4b90      	ldr	r3, [pc, #576]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bda0:	d107      	bne.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bda2:	f107 0318 	add.w	r3, r7, #24
 800bda6:	4618      	mov	r0, r3
 800bda8:	f000 f98c 	bl	800c0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bdb0:	e169      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdb6:	e166      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdb8:	4b87      	ldr	r3, [pc, #540]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdc4:	d107      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdc6:	f107 030c 	add.w	r3, r7, #12
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 face 	bl	800c36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bdd4:	e157      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdda:	e154      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bddc:	4b7e      	ldr	r3, [pc, #504]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bdde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bde0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bde4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bde6:	4b7c      	ldr	r3, [pc, #496]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0304 	and.w	r3, r3, #4
 800bdee:	2b04      	cmp	r3, #4
 800bdf0:	d10c      	bne.n	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800bdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d109      	bne.n	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bdf8:	4b77      	ldr	r3, [pc, #476]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	08db      	lsrs	r3, r3, #3
 800bdfe:	f003 0303 	and.w	r3, r3, #3
 800be02:	4a76      	ldr	r2, [pc, #472]	; (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800be04:	fa22 f303 	lsr.w	r3, r2, r3
 800be08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be0a:	e01e      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be0c:	4b72      	ldr	r3, [pc, #456]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be18:	d106      	bne.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be20:	d102      	bne.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800be22:	4b6f      	ldr	r3, [pc, #444]	; (800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800be24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be26:	e010      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be28:	4b6b      	ldr	r3, [pc, #428]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be34:	d106      	bne.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800be36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be3c:	d102      	bne.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800be3e:	4b69      	ldr	r3, [pc, #420]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800be40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be42:	e002      	b.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800be48:	e11d      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800be4a:	e11c      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800be4c:	2300      	movs	r3, #0
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be50:	e119      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be58:	d133      	bne.n	800bec2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800be5a:	4b5f      	ldr	r3, [pc, #380]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800be5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800be64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be66:	2b00      	cmp	r3, #0
 800be68:	d004      	beq.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be70:	d012      	beq.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800be72:	e023      	b.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be74:	4b58      	ldr	r3, [pc, #352]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be80:	d107      	bne.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fbc4 	bl	800c614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800be90:	e0f9      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800be92:	2300      	movs	r3, #0
 800be94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be96:	e0f6      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be98:	4b4f      	ldr	r3, [pc, #316]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bea4:	d107      	bne.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bea6:	f107 0318 	add.w	r3, r7, #24
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 f90a 	bl	800c0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800beb0:	6a3b      	ldr	r3, [r7, #32]
 800beb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800beb4:	e0e7      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800beba:	e0e4      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bec0:	e0e1      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bec8:	f040 808e 	bne.w	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800becc:	4b42      	ldr	r3, [pc, #264]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bed0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bed4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bedc:	d06b      	beq.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800bede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bee4:	d874      	bhi.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800bee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beec:	d056      	beq.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800beee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bef4:	d86c      	bhi.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800befc:	d03b      	beq.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800befe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf04:	d864      	bhi.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800bf06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf0c:	d021      	beq.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf14:	d85c      	bhi.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d004      	beq.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf22:	d004      	beq.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800bf24:	e054      	b.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bf26:	f000 f8b7 	bl	800c098 <HAL_RCCEx_GetD3PCLK1Freq>
 800bf2a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800bf2c:	e0ab      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf2e:	4b2a      	ldr	r3, [pc, #168]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf3a:	d107      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf3c:	f107 0318 	add.w	r3, r7, #24
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 f8bf 	bl	800c0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf4a:	e09c      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf50:	e099      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf52:	4b21      	ldr	r3, [pc, #132]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf5e:	d107      	bne.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf60:	f107 030c 	add.w	r3, r7, #12
 800bf64:	4618      	mov	r0, r3
 800bf66:	f000 fa01 	bl	800c36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf6e:	e08a      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf74:	e087      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bf76:	4b18      	ldr	r3, [pc, #96]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 0304 	and.w	r3, r3, #4
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	d109      	bne.n	800bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf82:	4b15      	ldr	r3, [pc, #84]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	08db      	lsrs	r3, r3, #3
 800bf88:	f003 0303 	and.w	r3, r3, #3
 800bf8c:	4a13      	ldr	r2, [pc, #76]	; (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800bf8e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf94:	e077      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf9a:	e074      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bf9c:	4b0e      	ldr	r3, [pc, #56]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfa8:	d102      	bne.n	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800bfaa:	4b0d      	ldr	r3, [pc, #52]	; (800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800bfac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bfae:	e06a      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfb4:	e067      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bfb6:	4b08      	ldr	r3, [pc, #32]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfc2:	d102      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800bfc4:	4b07      	ldr	r3, [pc, #28]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bfc8:	e05d      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfce:	e05a      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfd4:	e057      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bfd6:	bf00      	nop
 800bfd8:	58024400 	.word	0x58024400
 800bfdc:	03d09000 	.word	0x03d09000
 800bfe0:	003d0900 	.word	0x003d0900
 800bfe4:	01518000 	.word	0x01518000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfee:	d148      	bne.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800bff0:	4b27      	ldr	r3, [pc, #156]	; (800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800bff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bff8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c000:	d02a      	beq.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c008:	d838      	bhi.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800c00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d004      	beq.n	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800c010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c016:	d00d      	beq.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800c018:	e030      	b.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c01a:	4b1d      	ldr	r3, [pc, #116]	; (800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c026:	d102      	bne.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800c028:	4b1a      	ldr	r3, [pc, #104]	; (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800c02a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c02c:	e02b      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c032:	e028      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c034:	4b16      	ldr	r3, [pc, #88]	; (800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c03c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c040:	d107      	bne.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c046:	4618      	mov	r0, r3
 800c048:	f000 fae4 	bl	800c614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c050:	e019      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c056:	e016      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c058:	4b0d      	ldr	r3, [pc, #52]	; (800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c064:	d107      	bne.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c066:	f107 0318 	add.w	r3, r7, #24
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 f82a 	bl	800c0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c074:	e007      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800c076:	2300      	movs	r3, #0
 800c078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c07a:	e004      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800c07c:	2300      	movs	r3, #0
 800c07e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c080:	e001      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3740      	adds	r7, #64	; 0x40
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	58024400 	.word	0x58024400
 800c094:	01518000 	.word	0x01518000

0800c098 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c09c:	f7fe fcac 	bl	800a9f8 <HAL_RCC_GetHCLKFreq>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	4b06      	ldr	r3, [pc, #24]	; (800c0bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c0a4:	6a1b      	ldr	r3, [r3, #32]
 800c0a6:	091b      	lsrs	r3, r3, #4
 800c0a8:	f003 0307 	and.w	r3, r3, #7
 800c0ac:	4904      	ldr	r1, [pc, #16]	; (800c0c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c0ae:	5ccb      	ldrb	r3, [r1, r3]
 800c0b0:	f003 031f 	and.w	r3, r3, #31
 800c0b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	58024400 	.word	0x58024400
 800c0c0:	0801468c 	.word	0x0801468c

0800c0c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b089      	sub	sp, #36	; 0x24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0cc:	4ba1      	ldr	r3, [pc, #644]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d0:	f003 0303 	and.w	r3, r3, #3
 800c0d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c0d6:	4b9f      	ldr	r3, [pc, #636]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0da:	0b1b      	lsrs	r3, r3, #12
 800c0dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c0e2:	4b9c      	ldr	r3, [pc, #624]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e6:	091b      	lsrs	r3, r3, #4
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c0ee:	4b99      	ldr	r3, [pc, #612]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f2:	08db      	lsrs	r3, r3, #3
 800c0f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	fb02 f303 	mul.w	r3, r2, r3
 800c0fe:	ee07 3a90 	vmov	s15, r3
 800c102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c106:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 8111 	beq.w	800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	2b02      	cmp	r3, #2
 800c116:	f000 8083 	beq.w	800c220 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	f200 80a1 	bhi.w	800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d003      	beq.n	800c130 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d056      	beq.n	800c1dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c12e:	e099      	b.n	800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c130:	4b88      	ldr	r3, [pc, #544]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 0320 	and.w	r3, r3, #32
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d02d      	beq.n	800c198 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c13c:	4b85      	ldr	r3, [pc, #532]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	08db      	lsrs	r3, r3, #3
 800c142:	f003 0303 	and.w	r3, r3, #3
 800c146:	4a84      	ldr	r2, [pc, #528]	; (800c358 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c148:	fa22 f303 	lsr.w	r3, r2, r3
 800c14c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	ee07 3a90 	vmov	s15, r3
 800c154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	ee07 3a90 	vmov	s15, r3
 800c15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c166:	4b7b      	ldr	r3, [pc, #492]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16e:	ee07 3a90 	vmov	s15, r3
 800c172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c176:	ed97 6a03 	vldr	s12, [r7, #12]
 800c17a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c35c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c192:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c196:	e087      	b.n	800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	ee07 3a90 	vmov	s15, r3
 800c19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c360 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1aa:	4b6a      	ldr	r3, [pc, #424]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b2:	ee07 3a90 	vmov	s15, r3
 800c1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c35c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1da:	e065      	b.n	800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	ee07 3a90 	vmov	s15, r3
 800c1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ee:	4b59      	ldr	r3, [pc, #356]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f6:	ee07 3a90 	vmov	s15, r3
 800c1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c202:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c35c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c20e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c21a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c21e:	e043      	b.n	800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c232:	4b48      	ldr	r3, [pc, #288]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c23a:	ee07 3a90 	vmov	s15, r3
 800c23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c242:	ed97 6a03 	vldr	s12, [r7, #12]
 800c246:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c35c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c25e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c262:	e021      	b.n	800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c276:	4b37      	ldr	r3, [pc, #220]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c27e:	ee07 3a90 	vmov	s15, r3
 800c282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c286:	ed97 6a03 	vldr	s12, [r7, #12]
 800c28a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c35c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c2a8:	4b2a      	ldr	r3, [pc, #168]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ac:	0a5b      	lsrs	r3, r3, #9
 800c2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2b2:	ee07 3a90 	vmov	s15, r3
 800c2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2ce:	ee17 2a90 	vmov	r2, s15
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c2d6:	4b1f      	ldr	r3, [pc, #124]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2da:	0c1b      	lsrs	r3, r3, #16
 800c2dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2e0:	ee07 3a90 	vmov	s15, r3
 800c2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2fc:	ee17 2a90 	vmov	r2, s15
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c304:	4b13      	ldr	r3, [pc, #76]	; (800c354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c308:	0e1b      	lsrs	r3, r3, #24
 800c30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c30e:	ee07 3a90 	vmov	s15, r3
 800c312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c31a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c31e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c32a:	ee17 2a90 	vmov	r2, s15
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c332:	e008      	b.n	800c346 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	609a      	str	r2, [r3, #8]
}
 800c346:	bf00      	nop
 800c348:	3724      	adds	r7, #36	; 0x24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	58024400 	.word	0x58024400
 800c358:	03d09000 	.word	0x03d09000
 800c35c:	46000000 	.word	0x46000000
 800c360:	4c742400 	.word	0x4c742400
 800c364:	4a742400 	.word	0x4a742400
 800c368:	4ba8c000 	.word	0x4ba8c000

0800c36c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b089      	sub	sp, #36	; 0x24
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c374:	4ba1      	ldr	r3, [pc, #644]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c378:	f003 0303 	and.w	r3, r3, #3
 800c37c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c37e:	4b9f      	ldr	r3, [pc, #636]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c382:	0d1b      	lsrs	r3, r3, #20
 800c384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c388:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c38a:	4b9c      	ldr	r3, [pc, #624]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38e:	0a1b      	lsrs	r3, r3, #8
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c396:	4b99      	ldr	r3, [pc, #612]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c39a:	08db      	lsrs	r3, r3, #3
 800c39c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3a0:	693a      	ldr	r2, [r7, #16]
 800c3a2:	fb02 f303 	mul.w	r3, r2, r3
 800c3a6:	ee07 3a90 	vmov	s15, r3
 800c3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f000 8111 	beq.w	800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	f000 8083 	beq.w	800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	f200 80a1 	bhi.w	800c50c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d003      	beq.n	800c3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d056      	beq.n	800c484 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c3d6:	e099      	b.n	800c50c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3d8:	4b88      	ldr	r3, [pc, #544]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 0320 	and.w	r3, r3, #32
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d02d      	beq.n	800c440 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c3e4:	4b85      	ldr	r3, [pc, #532]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	08db      	lsrs	r3, r3, #3
 800c3ea:	f003 0303 	and.w	r3, r3, #3
 800c3ee:	4a84      	ldr	r2, [pc, #528]	; (800c600 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c3f4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	ee07 3a90 	vmov	s15, r3
 800c3fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	ee07 3a90 	vmov	s15, r3
 800c406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c40e:	4b7b      	ldr	r3, [pc, #492]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c416:	ee07 3a90 	vmov	s15, r3
 800c41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c41e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c422:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c42e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c43a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c43e:	e087      	b.n	800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	ee07 3a90 	vmov	s15, r3
 800c446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c44a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c608 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c452:	4b6a      	ldr	r3, [pc, #424]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c45a:	ee07 3a90 	vmov	s15, r3
 800c45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c462:	ed97 6a03 	vldr	s12, [r7, #12]
 800c466:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c47e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c482:	e065      	b.n	800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	ee07 3a90 	vmov	s15, r3
 800c48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c48e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c60c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c496:	4b59      	ldr	r3, [pc, #356]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c49e:	ee07 3a90 	vmov	s15, r3
 800c4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4c6:	e043      	b.n	800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	ee07 3a90 	vmov	s15, r3
 800c4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4da:	4b48      	ldr	r3, [pc, #288]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4e2:	ee07 3a90 	vmov	s15, r3
 800c4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c50a:	e021      	b.n	800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	ee07 3a90 	vmov	s15, r3
 800c512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c516:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c60c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c51e:	4b37      	ldr	r3, [pc, #220]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c526:	ee07 3a90 	vmov	s15, r3
 800c52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c532:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c54a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c54e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c550:	4b2a      	ldr	r3, [pc, #168]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c554:	0a5b      	lsrs	r3, r3, #9
 800c556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c55a:	ee07 3a90 	vmov	s15, r3
 800c55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c56a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c56e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c576:	ee17 2a90 	vmov	r2, s15
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c57e:	4b1f      	ldr	r3, [pc, #124]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c582:	0c1b      	lsrs	r3, r3, #16
 800c584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c588:	ee07 3a90 	vmov	s15, r3
 800c58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c594:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c598:	edd7 6a07 	vldr	s13, [r7, #28]
 800c59c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5a4:	ee17 2a90 	vmov	r2, s15
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c5ac:	4b13      	ldr	r3, [pc, #76]	; (800c5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b0:	0e1b      	lsrs	r3, r3, #24
 800c5b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5b6:	ee07 3a90 	vmov	s15, r3
 800c5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5d2:	ee17 2a90 	vmov	r2, s15
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c5da:	e008      	b.n	800c5ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	609a      	str	r2, [r3, #8]
}
 800c5ee:	bf00      	nop
 800c5f0:	3724      	adds	r7, #36	; 0x24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	58024400 	.word	0x58024400
 800c600:	03d09000 	.word	0x03d09000
 800c604:	46000000 	.word	0x46000000
 800c608:	4c742400 	.word	0x4c742400
 800c60c:	4a742400 	.word	0x4a742400
 800c610:	4ba8c000 	.word	0x4ba8c000

0800c614 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c614:	b480      	push	{r7}
 800c616:	b089      	sub	sp, #36	; 0x24
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c61c:	4ba0      	ldr	r3, [pc, #640]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c620:	f003 0303 	and.w	r3, r3, #3
 800c624:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c626:	4b9e      	ldr	r3, [pc, #632]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62a:	091b      	lsrs	r3, r3, #4
 800c62c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c630:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c632:	4b9b      	ldr	r3, [pc, #620]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c63c:	4b98      	ldr	r3, [pc, #608]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c640:	08db      	lsrs	r3, r3, #3
 800c642:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	fb02 f303 	mul.w	r3, r2, r3
 800c64c:	ee07 3a90 	vmov	s15, r3
 800c650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c654:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f000 8111 	beq.w	800c882 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	2b02      	cmp	r3, #2
 800c664:	f000 8083 	beq.w	800c76e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	f200 80a1 	bhi.w	800c7b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c670:	69bb      	ldr	r3, [r7, #24]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d003      	beq.n	800c67e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d056      	beq.n	800c72a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c67c:	e099      	b.n	800c7b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c67e:	4b88      	ldr	r3, [pc, #544]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f003 0320 	and.w	r3, r3, #32
 800c686:	2b00      	cmp	r3, #0
 800c688:	d02d      	beq.n	800c6e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c68a:	4b85      	ldr	r3, [pc, #532]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	08db      	lsrs	r3, r3, #3
 800c690:	f003 0303 	and.w	r3, r3, #3
 800c694:	4a83      	ldr	r2, [pc, #524]	; (800c8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c696:	fa22 f303 	lsr.w	r3, r2, r3
 800c69a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	ee07 3a90 	vmov	s15, r3
 800c6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	ee07 3a90 	vmov	s15, r3
 800c6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6b4:	4b7a      	ldr	r3, [pc, #488]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6bc:	ee07 3a90 	vmov	s15, r3
 800c6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c6cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c6e4:	e087      	b.n	800c7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	ee07 3a90 	vmov	s15, r3
 800c6ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c8ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c6f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6f8:	4b69      	ldr	r3, [pc, #420]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c700:	ee07 3a90 	vmov	s15, r3
 800c704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c708:	ed97 6a03 	vldr	s12, [r7, #12]
 800c70c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c71c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c724:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c728:	e065      	b.n	800c7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	ee07 3a90 	vmov	s15, r3
 800c730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c734:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c73c:	4b58      	ldr	r3, [pc, #352]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c744:	ee07 3a90 	vmov	s15, r3
 800c748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c74c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c750:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c75c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c764:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c768:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c76c:	e043      	b.n	800c7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	ee07 3a90 	vmov	s15, r3
 800c774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c778:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c77c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c780:	4b47      	ldr	r3, [pc, #284]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c788:	ee07 3a90 	vmov	s15, r3
 800c78c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c790:	ed97 6a03 	vldr	s12, [r7, #12]
 800c794:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c79c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7b0:	e021      	b.n	800c7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	ee07 3a90 	vmov	s15, r3
 800c7b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c8ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c7c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7c4:	4b36      	ldr	r3, [pc, #216]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7cc:	ee07 3a90 	vmov	s15, r3
 800c7d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c7f6:	4b2a      	ldr	r3, [pc, #168]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7fa:	0a5b      	lsrs	r3, r3, #9
 800c7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c800:	ee07 3a90 	vmov	s15, r3
 800c804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c80c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c810:	edd7 6a07 	vldr	s13, [r7, #28]
 800c814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c81c:	ee17 2a90 	vmov	r2, s15
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c824:	4b1e      	ldr	r3, [pc, #120]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c828:	0c1b      	lsrs	r3, r3, #16
 800c82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c82e:	ee07 3a90 	vmov	s15, r3
 800c832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c83a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c83e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c84a:	ee17 2a90 	vmov	r2, s15
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c852:	4b13      	ldr	r3, [pc, #76]	; (800c8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c856:	0e1b      	lsrs	r3, r3, #24
 800c858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c85c:	ee07 3a90 	vmov	s15, r3
 800c860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c86c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c878:	ee17 2a90 	vmov	r2, s15
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c880:	e008      	b.n	800c894 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	609a      	str	r2, [r3, #8]
}
 800c894:	bf00      	nop
 800c896:	3724      	adds	r7, #36	; 0x24
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	58024400 	.word	0x58024400
 800c8a4:	03d09000 	.word	0x03d09000
 800c8a8:	46000000 	.word	0x46000000
 800c8ac:	4c742400 	.word	0x4c742400
 800c8b0:	4a742400 	.word	0x4a742400
 800c8b4:	4ba8c000 	.word	0x4ba8c000

0800c8b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c8c6:	4b53      	ldr	r3, [pc, #332]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ca:	f003 0303 	and.w	r3, r3, #3
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d101      	bne.n	800c8d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e099      	b.n	800ca0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c8d6:	4b4f      	ldr	r3, [pc, #316]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a4e      	ldr	r2, [pc, #312]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c8dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c8e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8e2:	f7f6 ff9b 	bl	800381c <HAL_GetTick>
 800c8e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8e8:	e008      	b.n	800c8fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c8ea:	f7f6 ff97 	bl	800381c <HAL_GetTick>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	1ad3      	subs	r3, r2, r3
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d901      	bls.n	800c8fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c8f8:	2303      	movs	r3, #3
 800c8fa:	e086      	b.n	800ca0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8fc:	4b45      	ldr	r3, [pc, #276]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1f0      	bne.n	800c8ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c908:	4b42      	ldr	r3, [pc, #264]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c90c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	031b      	lsls	r3, r3, #12
 800c916:	493f      	ldr	r1, [pc, #252]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c918:	4313      	orrs	r3, r2
 800c91a:	628b      	str	r3, [r1, #40]	; 0x28
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	3b01      	subs	r3, #1
 800c922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	3b01      	subs	r3, #1
 800c92c:	025b      	lsls	r3, r3, #9
 800c92e:	b29b      	uxth	r3, r3
 800c930:	431a      	orrs	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	3b01      	subs	r3, #1
 800c938:	041b      	lsls	r3, r3, #16
 800c93a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c93e:	431a      	orrs	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	3b01      	subs	r3, #1
 800c946:	061b      	lsls	r3, r3, #24
 800c948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c94c:	4931      	ldr	r1, [pc, #196]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c94e:	4313      	orrs	r3, r2
 800c950:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c952:	4b30      	ldr	r3, [pc, #192]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	492d      	ldr	r1, [pc, #180]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c960:	4313      	orrs	r3, r2
 800c962:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c964:	4b2b      	ldr	r3, [pc, #172]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c968:	f023 0220 	bic.w	r2, r3, #32
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	4928      	ldr	r1, [pc, #160]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c972:	4313      	orrs	r3, r2
 800c974:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c976:	4b27      	ldr	r3, [pc, #156]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97a:	4a26      	ldr	r2, [pc, #152]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c97c:	f023 0310 	bic.w	r3, r3, #16
 800c980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c982:	4b24      	ldr	r3, [pc, #144]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c986:	4b24      	ldr	r3, [pc, #144]	; (800ca18 <RCCEx_PLL2_Config+0x160>)
 800c988:	4013      	ands	r3, r2
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	69d2      	ldr	r2, [r2, #28]
 800c98e:	00d2      	lsls	r2, r2, #3
 800c990:	4920      	ldr	r1, [pc, #128]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c992:	4313      	orrs	r3, r2
 800c994:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c996:	4b1f      	ldr	r3, [pc, #124]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c99a:	4a1e      	ldr	r2, [pc, #120]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c99c:	f043 0310 	orr.w	r3, r3, #16
 800c9a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d106      	bne.n	800c9b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c9a8:	4b1a      	ldr	r3, [pc, #104]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ac:	4a19      	ldr	r2, [pc, #100]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c9ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c9b4:	e00f      	b.n	800c9d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d106      	bne.n	800c9ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c9bc:	4b15      	ldr	r3, [pc, #84]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c0:	4a14      	ldr	r2, [pc, #80]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c9c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c9c8:	e005      	b.n	800c9d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c9ca:	4b12      	ldr	r3, [pc, #72]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ce:	4a11      	ldr	r2, [pc, #68]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c9d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c9d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c9d6:	4b0f      	ldr	r3, [pc, #60]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a0e      	ldr	r2, [pc, #56]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c9dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c9e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9e2:	f7f6 ff1b 	bl	800381c <HAL_GetTick>
 800c9e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9e8:	e008      	b.n	800c9fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c9ea:	f7f6 ff17 	bl	800381c <HAL_GetTick>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d901      	bls.n	800c9fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c9f8:	2303      	movs	r3, #3
 800c9fa:	e006      	b.n	800ca0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9fc:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <RCCEx_PLL2_Config+0x15c>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d0f0      	beq.n	800c9ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ca08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	58024400 	.word	0x58024400
 800ca18:	ffff0007 	.word	0xffff0007

0800ca1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca2a:	4b53      	ldr	r3, [pc, #332]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800ca2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca2e:	f003 0303 	and.w	r3, r3, #3
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d101      	bne.n	800ca3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	e099      	b.n	800cb6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ca3a:	4b4f      	ldr	r3, [pc, #316]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a4e      	ldr	r2, [pc, #312]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800ca40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca46:	f7f6 fee9 	bl	800381c <HAL_GetTick>
 800ca4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca4c:	e008      	b.n	800ca60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ca4e:	f7f6 fee5 	bl	800381c <HAL_GetTick>
 800ca52:	4602      	mov	r2, r0
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d901      	bls.n	800ca60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e086      	b.n	800cb6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca60:	4b45      	ldr	r3, [pc, #276]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1f0      	bne.n	800ca4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ca6c:	4b42      	ldr	r3, [pc, #264]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800ca6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	051b      	lsls	r3, r3, #20
 800ca7a:	493f      	ldr	r1, [pc, #252]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	628b      	str	r3, [r1, #40]	; 0x28
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	3b01      	subs	r3, #1
 800ca86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	025b      	lsls	r3, r3, #9
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	431a      	orrs	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	041b      	lsls	r3, r3, #16
 800ca9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800caa2:	431a      	orrs	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	3b01      	subs	r3, #1
 800caaa:	061b      	lsls	r3, r3, #24
 800caac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cab0:	4931      	ldr	r1, [pc, #196]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cab2:	4313      	orrs	r3, r2
 800cab4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cab6:	4b30      	ldr	r3, [pc, #192]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	695b      	ldr	r3, [r3, #20]
 800cac2:	492d      	ldr	r1, [pc, #180]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cac4:	4313      	orrs	r3, r2
 800cac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cac8:	4b2b      	ldr	r3, [pc, #172]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800caca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cacc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	4928      	ldr	r1, [pc, #160]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cad6:	4313      	orrs	r3, r2
 800cad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cada:	4b27      	ldr	r3, [pc, #156]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cade:	4a26      	ldr	r2, [pc, #152]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cae6:	4b24      	ldr	r3, [pc, #144]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caea:	4b24      	ldr	r3, [pc, #144]	; (800cb7c <RCCEx_PLL3_Config+0x160>)
 800caec:	4013      	ands	r3, r2
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	69d2      	ldr	r2, [r2, #28]
 800caf2:	00d2      	lsls	r2, r2, #3
 800caf4:	4920      	ldr	r1, [pc, #128]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cafa:	4b1f      	ldr	r3, [pc, #124]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafe:	4a1e      	ldr	r2, [pc, #120]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cb00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d106      	bne.n	800cb1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cb0c:	4b1a      	ldr	r3, [pc, #104]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb10:	4a19      	ldr	r2, [pc, #100]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cb12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb18:	e00f      	b.n	800cb3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d106      	bne.n	800cb2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cb20:	4b15      	ldr	r3, [pc, #84]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb24:	4a14      	ldr	r2, [pc, #80]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cb26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb2c:	e005      	b.n	800cb3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cb2e:	4b12      	ldr	r3, [pc, #72]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb32:	4a11      	ldr	r2, [pc, #68]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cb34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cb3a:	4b0f      	ldr	r3, [pc, #60]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a0e      	ldr	r2, [pc, #56]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cb40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb46:	f7f6 fe69 	bl	800381c <HAL_GetTick>
 800cb4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb4c:	e008      	b.n	800cb60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cb4e:	f7f6 fe65 	bl	800381c <HAL_GetTick>
 800cb52:	4602      	mov	r2, r0
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d901      	bls.n	800cb60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	e006      	b.n	800cb6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb60:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <RCCEx_PLL3_Config+0x15c>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d0f0      	beq.n	800cb4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	58024400 	.word	0x58024400
 800cb7c:	ffff0007 	.word	0xffff0007

0800cb80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e0f1      	b.n	800cd76 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a78      	ldr	r2, [pc, #480]	; (800cd80 <HAL_SPI_Init+0x200>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d00f      	beq.n	800cbc2 <HAL_SPI_Init+0x42>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a77      	ldr	r2, [pc, #476]	; (800cd84 <HAL_SPI_Init+0x204>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d00a      	beq.n	800cbc2 <HAL_SPI_Init+0x42>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a75      	ldr	r2, [pc, #468]	; (800cd88 <HAL_SPI_Init+0x208>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d005      	beq.n	800cbc2 <HAL_SPI_Init+0x42>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	2b0f      	cmp	r3, #15
 800cbbc:	d901      	bls.n	800cbc2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e0d9      	b.n	800cd76 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 fdca 	bl	800d75c <SPI_GetPacketSize>
 800cbc8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a6c      	ldr	r2, [pc, #432]	; (800cd80 <HAL_SPI_Init+0x200>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d00c      	beq.n	800cbee <HAL_SPI_Init+0x6e>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a6a      	ldr	r2, [pc, #424]	; (800cd84 <HAL_SPI_Init+0x204>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d007      	beq.n	800cbee <HAL_SPI_Init+0x6e>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a69      	ldr	r2, [pc, #420]	; (800cd88 <HAL_SPI_Init+0x208>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d002      	beq.n	800cbee <HAL_SPI_Init+0x6e>
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b08      	cmp	r3, #8
 800cbec:	d811      	bhi.n	800cc12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cbf2:	4a63      	ldr	r2, [pc, #396]	; (800cd80 <HAL_SPI_Init+0x200>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d009      	beq.n	800cc0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a61      	ldr	r2, [pc, #388]	; (800cd84 <HAL_SPI_Init+0x204>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d004      	beq.n	800cc0c <HAL_SPI_Init+0x8c>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a60      	ldr	r2, [pc, #384]	; (800cd88 <HAL_SPI_Init+0x208>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d104      	bne.n	800cc16 <HAL_SPI_Init+0x96>
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2b10      	cmp	r3, #16
 800cc10:	d901      	bls.n	800cc16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e0af      	b.n	800cd76 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d106      	bne.n	800cc30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7f6 f926 	bl	8002e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2202      	movs	r2, #2
 800cc34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f022 0201 	bic.w	r2, r2, #1
 800cc46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cc52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc5c:	d119      	bne.n	800cc92 <HAL_SPI_Init+0x112>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc66:	d103      	bne.n	800cc70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d008      	beq.n	800cc82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d10c      	bne.n	800cc92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cc7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc80:	d107      	bne.n	800cc92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cc90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	69da      	ldr	r2, [r3, #28]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc9a:	431a      	orrs	r2, r3
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	431a      	orrs	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca4:	ea42 0103 	orr.w	r1, r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68da      	ldr	r2, [r3, #12]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	431a      	orrs	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	431a      	orrs	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	431a      	orrs	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	431a      	orrs	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	431a      	orrs	r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	431a      	orrs	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cce6:	431a      	orrs	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	431a      	orrs	r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccf2:	ea42 0103 	orr.w	r1, r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	430a      	orrs	r2, r1
 800cd00:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d113      	bne.n	800cd32 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd1c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd30:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0201 	bic.w	r2, r2, #1
 800cd40:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00a      	beq.n	800cd64 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	430a      	orrs	r2, r1
 800cd62:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	40013000 	.word	0x40013000
 800cd84:	40003800 	.word	0x40003800
 800cd88:	40003c00 	.word	0x40003c00

0800cd8c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08a      	sub	sp, #40	; 0x28
 800cd90:	af02      	add	r7, sp, #8
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	603b      	str	r3, [r7, #0]
 800cd98:	4613      	mov	r3, r2
 800cd9a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	3320      	adds	r3, #32
 800cda2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cda4:	2300      	movs	r3, #0
 800cda6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d101      	bne.n	800cdb6 <HAL_SPI_Transmit+0x2a>
 800cdb2:	2302      	movs	r3, #2
 800cdb4:	e1d7      	b.n	800d166 <HAL_SPI_Transmit+0x3da>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cdbe:	f7f6 fd2d 	bl	800381c <HAL_GetTick>
 800cdc2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d007      	beq.n	800cde0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cddc:	7efb      	ldrb	r3, [r7, #27]
 800cdde:	e1c2      	b.n	800d166 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d002      	beq.n	800cdec <HAL_SPI_Transmit+0x60>
 800cde6:	88fb      	ldrh	r3, [r7, #6]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d107      	bne.n	800cdfc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800cdec:	2301      	movs	r3, #1
 800cdee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cdf8:	7efb      	ldrb	r3, [r7, #27]
 800cdfa:	e1b4      	b.n	800d166 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2203      	movs	r2, #3
 800ce00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	88fa      	ldrh	r2, [r7, #6]
 800ce16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	88fa      	ldrh	r2, [r7, #6]
 800ce1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2200      	movs	r2, #0
 800ce42:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ce4c:	d107      	bne.n	800ce5e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	4b96      	ldr	r3, [pc, #600]	; (800d0c0 <HAL_SPI_Transmit+0x334>)
 800ce66:	4013      	ands	r3, r2
 800ce68:	88f9      	ldrh	r1, [r7, #6]
 800ce6a:	68fa      	ldr	r2, [r7, #12]
 800ce6c:	6812      	ldr	r2, [r2, #0]
 800ce6e:	430b      	orrs	r3, r1
 800ce70:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f042 0201 	orr.w	r2, r2, #1
 800ce80:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce8a:	d107      	bne.n	800ce9c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	2b0f      	cmp	r3, #15
 800cea2:	d947      	bls.n	800cf34 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cea4:	e03f      	b.n	800cf26 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	695b      	ldr	r3, [r3, #20]
 800ceac:	f003 0302 	and.w	r3, r3, #2
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d114      	bne.n	800cede <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6812      	ldr	r2, [r2, #0]
 800cebe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cec4:	1d1a      	adds	r2, r3, #4
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	3b01      	subs	r3, #1
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cedc:	e023      	b.n	800cf26 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cede:	f7f6 fc9d 	bl	800381c <HAL_GetTick>
 800cee2:	4602      	mov	r2, r0
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	1ad3      	subs	r3, r2, r3
 800cee8:	683a      	ldr	r2, [r7, #0]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d803      	bhi.n	800cef6 <HAL_SPI_Transmit+0x16a>
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef4:	d102      	bne.n	800cefc <HAL_SPI_Transmit+0x170>
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d114      	bne.n	800cf26 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f000 fb5f 	bl	800d5c0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2200      	movs	r2, #0
 800cf06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cf22:	2303      	movs	r3, #3
 800cf24:	e11f      	b.n	800d166 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1b9      	bne.n	800cea6 <HAL_SPI_Transmit+0x11a>
 800cf32:	e0f2      	b.n	800d11a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	2b07      	cmp	r3, #7
 800cf3a:	f240 80e7 	bls.w	800d10c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cf3e:	e05d      	b.n	800cffc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	695b      	ldr	r3, [r3, #20]
 800cf46:	f003 0302 	and.w	r3, r3, #2
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d132      	bne.n	800cfb4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d918      	bls.n	800cf8c <HAL_SPI_Transmit+0x200>
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d014      	beq.n	800cf8c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	6812      	ldr	r2, [r2, #0]
 800cf6c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf72:	1d1a      	adds	r2, r3, #4
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	3b02      	subs	r3, #2
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cf8a:	e037      	b.n	800cffc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf90:	881a      	ldrh	r2, [r3, #0]
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf9a:	1c9a      	adds	r2, r3, #2
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cfb2:	e023      	b.n	800cffc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfb4:	f7f6 fc32 	bl	800381c <HAL_GetTick>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	683a      	ldr	r2, [r7, #0]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d803      	bhi.n	800cfcc <HAL_SPI_Transmit+0x240>
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfca:	d102      	bne.n	800cfd2 <HAL_SPI_Transmit+0x246>
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d114      	bne.n	800cffc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f000 faf4 	bl	800d5c0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfe6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cff8:	2303      	movs	r3, #3
 800cffa:	e0b4      	b.n	800d166 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d002:	b29b      	uxth	r3, r3
 800d004:	2b00      	cmp	r3, #0
 800d006:	d19b      	bne.n	800cf40 <HAL_SPI_Transmit+0x1b4>
 800d008:	e087      	b.n	800d11a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	695b      	ldr	r3, [r3, #20]
 800d010:	f003 0302 	and.w	r3, r3, #2
 800d014:	2b02      	cmp	r3, #2
 800d016:	d155      	bne.n	800d0c4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d01e:	b29b      	uxth	r3, r3
 800d020:	2b03      	cmp	r3, #3
 800d022:	d918      	bls.n	800d056 <HAL_SPI_Transmit+0x2ca>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d028:	2b40      	cmp	r3, #64	; 0x40
 800d02a:	d914      	bls.n	800d056 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	6812      	ldr	r2, [r2, #0]
 800d036:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d03c:	1d1a      	adds	r2, r3, #4
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d048:	b29b      	uxth	r3, r3
 800d04a:	3b04      	subs	r3, #4
 800d04c:	b29a      	uxth	r2, r3
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d054:	e05a      	b.n	800d10c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d917      	bls.n	800d092 <HAL_SPI_Transmit+0x306>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d066:	2b00      	cmp	r3, #0
 800d068:	d013      	beq.n	800d092 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d06e:	881a      	ldrh	r2, [r3, #0]
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d078:	1c9a      	adds	r2, r3, #2
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d084:	b29b      	uxth	r3, r3
 800d086:	3b02      	subs	r3, #2
 800d088:	b29a      	uxth	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d090:	e03c      	b.n	800d10c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	3320      	adds	r3, #32
 800d09c:	7812      	ldrb	r2, [r2, #0]
 800d09e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0a4:	1c5a      	adds	r2, r3, #1
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d0bc:	e026      	b.n	800d10c <HAL_SPI_Transmit+0x380>
 800d0be:	bf00      	nop
 800d0c0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0c4:	f7f6 fbaa 	bl	800381c <HAL_GetTick>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d803      	bhi.n	800d0dc <HAL_SPI_Transmit+0x350>
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0da:	d102      	bne.n	800d0e2 <HAL_SPI_Transmit+0x356>
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d114      	bne.n	800d10c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f000 fa6c 	bl	800d5c0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d108:	2303      	movs	r3, #3
 800d10a:	e02c      	b.n	800d166 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d112:	b29b      	uxth	r3, r3
 800d114:	2b00      	cmp	r3, #0
 800d116:	f47f af78 	bne.w	800d00a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	2200      	movs	r2, #0
 800d122:	2108      	movs	r1, #8
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f000 faeb 	bl	800d700 <SPI_WaitOnFlagUntilTimeout>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d007      	beq.n	800d140 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d136:	f043 0220 	orr.w	r2, r3, #32
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f000 fa3d 	bl	800d5c0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2201      	movs	r2, #1
 800d152:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d001      	beq.n	800d164 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	e000      	b.n	800d166 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d164:	7efb      	ldrb	r3, [r7, #27]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3720      	adds	r7, #32
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop

0800d170 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08e      	sub	sp, #56	; 0x38
 800d174:	af02      	add	r7, sp, #8
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d17e:	2300      	movs	r3, #0
 800d180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	3320      	adds	r3, #32
 800d18a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3330      	adds	r3, #48	; 0x30
 800d192:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d101      	bne.n	800d1a2 <HAL_SPI_TransmitReceive+0x32>
 800d19e:	2302      	movs	r3, #2
 800d1a0:	e209      	b.n	800d5b6 <HAL_SPI_TransmitReceive+0x446>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d1aa:	f7f6 fb37 	bl	800381c <HAL_GetTick>
 800d1ae:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d1b0:	887b      	ldrh	r3, [r7, #2]
 800d1b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d1b4:	887b      	ldrh	r3, [r7, #2]
 800d1b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d1be:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d1c6:	7efb      	ldrb	r3, [r7, #27]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d014      	beq.n	800d1f6 <HAL_SPI_TransmitReceive+0x86>
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1d2:	d106      	bne.n	800d1e2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d102      	bne.n	800d1e2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d1dc:	7efb      	ldrb	r3, [r7, #27]
 800d1de:	2b04      	cmp	r3, #4
 800d1e0:	d009      	beq.n	800d1f6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d1f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d1f4:	e1df      	b.n	800d5b6 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d005      	beq.n	800d208 <HAL_SPI_TransmitReceive+0x98>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d002      	beq.n	800d208 <HAL_SPI_TransmitReceive+0x98>
 800d202:	887b      	ldrh	r3, [r7, #2]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d109      	bne.n	800d21c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2200      	movs	r2, #0
 800d212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d21a:	e1cc      	b.n	800d5b6 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b04      	cmp	r3, #4
 800d226:	d003      	beq.n	800d230 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2205      	movs	r2, #5
 800d22c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2200      	movs	r2, #0
 800d234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	887a      	ldrh	r2, [r7, #2]
 800d242:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	887a      	ldrh	r2, [r7, #2]
 800d24a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	887a      	ldrh	r2, [r7, #2]
 800d258:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	887a      	ldrh	r2, [r7, #2]
 800d260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2200      	movs	r2, #0
 800d268:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	685a      	ldr	r2, [r3, #4]
 800d276:	4b82      	ldr	r3, [pc, #520]	; (800d480 <HAL_SPI_TransmitReceive+0x310>)
 800d278:	4013      	ands	r3, r2
 800d27a:	8879      	ldrh	r1, [r7, #2]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	6812      	ldr	r2, [r2, #0]
 800d280:	430b      	orrs	r3, r1
 800d282:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f042 0201 	orr.w	r2, r2, #1
 800d292:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d29c:	d107      	bne.n	800d2ae <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	2b0f      	cmp	r3, #15
 800d2b4:	d970      	bls.n	800d398 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d2b6:	e068      	b.n	800d38a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	695b      	ldr	r3, [r3, #20]
 800d2be:	f003 0302 	and.w	r3, r3, #2
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d11a      	bne.n	800d2fc <HAL_SPI_TransmitReceive+0x18c>
 800d2c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d017      	beq.n	800d2fc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	6812      	ldr	r2, [r2, #0]
 800d2d6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2dc:	1d1a      	adds	r2, r3, #4
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	695a      	ldr	r2, [r3, #20]
 800d302:	f248 0308 	movw	r3, #32776	; 0x8008
 800d306:	4013      	ands	r3, r2
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d01a      	beq.n	800d342 <HAL_SPI_TransmitReceive+0x1d2>
 800d30c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d017      	beq.n	800d342 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d31a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d31c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d322:	1d1a      	adds	r2, r3, #4
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d32e:	b29b      	uxth	r3, r3
 800d330:	3b01      	subs	r3, #1
 800d332:	b29a      	uxth	r2, r3
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d340:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d342:	f7f6 fa6b 	bl	800381c <HAL_GetTick>
 800d346:	4602      	mov	r2, r0
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d34e:	429a      	cmp	r2, r3
 800d350:	d803      	bhi.n	800d35a <HAL_SPI_TransmitReceive+0x1ea>
 800d352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d358:	d102      	bne.n	800d360 <HAL_SPI_TransmitReceive+0x1f0>
 800d35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d114      	bne.n	800d38a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 f92d 	bl	800d5c0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d374:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2201      	movs	r2, #1
 800d382:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d386:	2303      	movs	r3, #3
 800d388:	e115      	b.n	800d5b6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d38a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d193      	bne.n	800d2b8 <HAL_SPI_TransmitReceive+0x148>
 800d390:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d392:	2b00      	cmp	r3, #0
 800d394:	d190      	bne.n	800d2b8 <HAL_SPI_TransmitReceive+0x148>
 800d396:	e0e7      	b.n	800d568 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	2b07      	cmp	r3, #7
 800d39e:	f240 80dd 	bls.w	800d55c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d3a2:	e066      	b.n	800d472 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	f003 0302 	and.w	r3, r3, #2
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d119      	bne.n	800d3e6 <HAL_SPI_TransmitReceive+0x276>
 800d3b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d016      	beq.n	800d3e6 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3bc:	881a      	ldrh	r2, [r3, #0]
 800d3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3c6:	1c9a      	adds	r2, r3, #2
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	695b      	ldr	r3, [r3, #20]
 800d3ec:	f003 0301 	and.w	r3, r3, #1
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d11a      	bne.n	800d42a <HAL_SPI_TransmitReceive+0x2ba>
 800d3f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d017      	beq.n	800d42a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3fe:	6a3a      	ldr	r2, [r7, #32]
 800d400:	8812      	ldrh	r2, [r2, #0]
 800d402:	b292      	uxth	r2, r2
 800d404:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d40a:	1c9a      	adds	r2, r3, #2
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d416:	b29b      	uxth	r3, r3
 800d418:	3b01      	subs	r3, #1
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d428:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d42a:	f7f6 f9f7 	bl	800381c <HAL_GetTick>
 800d42e:	4602      	mov	r2, r0
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	1ad3      	subs	r3, r2, r3
 800d434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d436:	429a      	cmp	r2, r3
 800d438:	d803      	bhi.n	800d442 <HAL_SPI_TransmitReceive+0x2d2>
 800d43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d440:	d102      	bne.n	800d448 <HAL_SPI_TransmitReceive+0x2d8>
 800d442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d444:	2b00      	cmp	r3, #0
 800d446:	d114      	bne.n	800d472 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f000 f8b9 	bl	800d5c0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d45c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2201      	movs	r2, #1
 800d46a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d46e:	2303      	movs	r3, #3
 800d470:	e0a1      	b.n	800d5b6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d472:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d474:	2b00      	cmp	r3, #0
 800d476:	d195      	bne.n	800d3a4 <HAL_SPI_TransmitReceive+0x234>
 800d478:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d192      	bne.n	800d3a4 <HAL_SPI_TransmitReceive+0x234>
 800d47e:	e073      	b.n	800d568 <HAL_SPI_TransmitReceive+0x3f8>
 800d480:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	695b      	ldr	r3, [r3, #20]
 800d48a:	f003 0302 	and.w	r3, r3, #2
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d11b      	bne.n	800d4ca <HAL_SPI_TransmitReceive+0x35a>
 800d492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d494:	2b00      	cmp	r3, #0
 800d496:	d018      	beq.n	800d4ca <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3320      	adds	r3, #32
 800d4a2:	7812      	ldrb	r2, [r2, #0]
 800d4a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	695b      	ldr	r3, [r3, #20]
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d11d      	bne.n	800d514 <HAL_SPI_TransmitReceive+0x3a4>
 800d4d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d01a      	beq.n	800d514 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4ea:	7812      	ldrb	r2, [r2, #0]
 800d4ec:	b2d2      	uxtb	r2, r2
 800d4ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4f4:	1c5a      	adds	r2, r3, #1
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d500:	b29b      	uxth	r3, r3
 800d502:	3b01      	subs	r3, #1
 800d504:	b29a      	uxth	r2, r3
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d512:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d514:	f7f6 f982 	bl	800381c <HAL_GetTick>
 800d518:	4602      	mov	r2, r0
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d520:	429a      	cmp	r2, r3
 800d522:	d803      	bhi.n	800d52c <HAL_SPI_TransmitReceive+0x3bc>
 800d524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d52a:	d102      	bne.n	800d532 <HAL_SPI_TransmitReceive+0x3c2>
 800d52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d114      	bne.n	800d55c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f000 f844 	bl	800d5c0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d546:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d558:	2303      	movs	r3, #3
 800d55a:	e02c      	b.n	800d5b6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d55c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d190      	bne.n	800d484 <HAL_SPI_TransmitReceive+0x314>
 800d562:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d564:	2b00      	cmp	r3, #0
 800d566:	d18d      	bne.n	800d484 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	2200      	movs	r2, #0
 800d570:	2108      	movs	r1, #8
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f000 f8c4 	bl	800d700 <SPI_WaitOnFlagUntilTimeout>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d007      	beq.n	800d58e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d584:	f043 0220 	orr.w	r2, r3, #32
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f000 f816 	bl	800d5c0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e001      	b.n	800d5b6 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800d5b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3730      	adds	r7, #48	; 0x30
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop

0800d5c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b085      	sub	sp, #20
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	695b      	ldr	r3, [r3, #20]
 800d5ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	699a      	ldr	r2, [r3, #24]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f042 0208 	orr.w	r2, r2, #8
 800d5de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	699a      	ldr	r2, [r3, #24]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f042 0210 	orr.w	r2, r2, #16
 800d5ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f022 0201 	bic.w	r2, r2, #1
 800d5fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6919      	ldr	r1, [r3, #16]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	4b3c      	ldr	r3, [pc, #240]	; (800d6fc <SPI_CloseTransfer+0x13c>)
 800d60c:	400b      	ands	r3, r1
 800d60e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	689a      	ldr	r2, [r3, #8]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d61e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b04      	cmp	r3, #4
 800d62a:	d014      	beq.n	800d656 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f003 0320 	and.w	r3, r3, #32
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00f      	beq.n	800d656 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d63c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	699a      	ldr	r2, [r3, #24]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f042 0220 	orr.w	r2, r2, #32
 800d654:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	2b03      	cmp	r3, #3
 800d660:	d014      	beq.n	800d68c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00f      	beq.n	800d68c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d672:	f043 0204 	orr.w	r2, r3, #4
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	699a      	ldr	r2, [r3, #24]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d68a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00f      	beq.n	800d6b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d69c:	f043 0201 	orr.w	r2, r3, #1
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	699a      	ldr	r2, [r3, #24]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d00f      	beq.n	800d6e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6c6:	f043 0208 	orr.w	r2, r3, #8
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	699a      	ldr	r2, [r3, #24]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d6f0:	bf00      	nop
 800d6f2:	3714      	adds	r7, #20
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	fffffc90 	.word	0xfffffc90

0800d700 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	603b      	str	r3, [r7, #0]
 800d70c:	4613      	mov	r3, r2
 800d70e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d710:	e010      	b.n	800d734 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d712:	f7f6 f883 	bl	800381c <HAL_GetTick>
 800d716:	4602      	mov	r2, r0
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	1ad3      	subs	r3, r2, r3
 800d71c:	69ba      	ldr	r2, [r7, #24]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d803      	bhi.n	800d72a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d728:	d102      	bne.n	800d730 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d730:	2303      	movs	r3, #3
 800d732:	e00f      	b.n	800d754 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	695a      	ldr	r2, [r3, #20]
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	4013      	ands	r3, r2
 800d73e:	68ba      	ldr	r2, [r7, #8]
 800d740:	429a      	cmp	r2, r3
 800d742:	bf0c      	ite	eq
 800d744:	2301      	moveq	r3, #1
 800d746:	2300      	movne	r3, #0
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	461a      	mov	r2, r3
 800d74c:	79fb      	ldrb	r3, [r7, #7]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d0df      	beq.n	800d712 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d768:	095b      	lsrs	r3, r3, #5
 800d76a:	3301      	adds	r3, #1
 800d76c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	3301      	adds	r3, #1
 800d774:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	3307      	adds	r3, #7
 800d77a:	08db      	lsrs	r3, r3, #3
 800d77c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	fb02 f303 	mul.w	r3, r2, r3
}
 800d786:	4618      	mov	r0, r3
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr

0800d792 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b082      	sub	sp, #8
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d101      	bne.n	800d7a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e049      	b.n	800d838 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d106      	bne.n	800d7be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f7f5 fd03 	bl	80031c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2202      	movs	r2, #2
 800d7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	3304      	adds	r3, #4
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	f000 feef 	bl	800e5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2201      	movs	r2, #1
 800d802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2201      	movs	r2, #1
 800d812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d836:	2300      	movs	r3, #0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b01      	cmp	r3, #1
 800d852:	d001      	beq.n	800d858 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d854:	2301      	movs	r3, #1
 800d856:	e056      	b.n	800d906 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2202      	movs	r2, #2
 800d85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a2b      	ldr	r2, [pc, #172]	; (800d914 <HAL_TIM_Base_Start+0xd4>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d02c      	beq.n	800d8c4 <HAL_TIM_Base_Start+0x84>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d872:	d027      	beq.n	800d8c4 <HAL_TIM_Base_Start+0x84>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a27      	ldr	r2, [pc, #156]	; (800d918 <HAL_TIM_Base_Start+0xd8>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d022      	beq.n	800d8c4 <HAL_TIM_Base_Start+0x84>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a26      	ldr	r2, [pc, #152]	; (800d91c <HAL_TIM_Base_Start+0xdc>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d01d      	beq.n	800d8c4 <HAL_TIM_Base_Start+0x84>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a24      	ldr	r2, [pc, #144]	; (800d920 <HAL_TIM_Base_Start+0xe0>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d018      	beq.n	800d8c4 <HAL_TIM_Base_Start+0x84>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a23      	ldr	r2, [pc, #140]	; (800d924 <HAL_TIM_Base_Start+0xe4>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d013      	beq.n	800d8c4 <HAL_TIM_Base_Start+0x84>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a21      	ldr	r2, [pc, #132]	; (800d928 <HAL_TIM_Base_Start+0xe8>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d00e      	beq.n	800d8c4 <HAL_TIM_Base_Start+0x84>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a20      	ldr	r2, [pc, #128]	; (800d92c <HAL_TIM_Base_Start+0xec>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d009      	beq.n	800d8c4 <HAL_TIM_Base_Start+0x84>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a1e      	ldr	r2, [pc, #120]	; (800d930 <HAL_TIM_Base_Start+0xf0>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d004      	beq.n	800d8c4 <HAL_TIM_Base_Start+0x84>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a1d      	ldr	r2, [pc, #116]	; (800d934 <HAL_TIM_Base_Start+0xf4>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d115      	bne.n	800d8f0 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	689a      	ldr	r2, [r3, #8]
 800d8ca:	4b1b      	ldr	r3, [pc, #108]	; (800d938 <HAL_TIM_Base_Start+0xf8>)
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2b06      	cmp	r3, #6
 800d8d4:	d015      	beq.n	800d902 <HAL_TIM_Base_Start+0xc2>
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8dc:	d011      	beq.n	800d902 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f042 0201 	orr.w	r2, r2, #1
 800d8ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8ee:	e008      	b.n	800d902 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f042 0201 	orr.w	r2, r2, #1
 800d8fe:	601a      	str	r2, [r3, #0]
 800d900:	e000      	b.n	800d904 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d904:	2300      	movs	r3, #0
}
 800d906:	4618      	mov	r0, r3
 800d908:	3714      	adds	r7, #20
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	40010000 	.word	0x40010000
 800d918:	40000400 	.word	0x40000400
 800d91c:	40000800 	.word	0x40000800
 800d920:	40000c00 	.word	0x40000c00
 800d924:	40010400 	.word	0x40010400
 800d928:	40001800 	.word	0x40001800
 800d92c:	40014000 	.word	0x40014000
 800d930:	4000e000 	.word	0x4000e000
 800d934:	4000e400 	.word	0x4000e400
 800d938:	00010007 	.word	0x00010007

0800d93c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b085      	sub	sp, #20
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d001      	beq.n	800d954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	e05e      	b.n	800da12 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2202      	movs	r2, #2
 800d958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68da      	ldr	r2, [r3, #12]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f042 0201 	orr.w	r2, r2, #1
 800d96a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a2b      	ldr	r2, [pc, #172]	; (800da20 <HAL_TIM_Base_Start_IT+0xe4>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d02c      	beq.n	800d9d0 <HAL_TIM_Base_Start_IT+0x94>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d97e:	d027      	beq.n	800d9d0 <HAL_TIM_Base_Start_IT+0x94>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a27      	ldr	r2, [pc, #156]	; (800da24 <HAL_TIM_Base_Start_IT+0xe8>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d022      	beq.n	800d9d0 <HAL_TIM_Base_Start_IT+0x94>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a26      	ldr	r2, [pc, #152]	; (800da28 <HAL_TIM_Base_Start_IT+0xec>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d01d      	beq.n	800d9d0 <HAL_TIM_Base_Start_IT+0x94>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a24      	ldr	r2, [pc, #144]	; (800da2c <HAL_TIM_Base_Start_IT+0xf0>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d018      	beq.n	800d9d0 <HAL_TIM_Base_Start_IT+0x94>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a23      	ldr	r2, [pc, #140]	; (800da30 <HAL_TIM_Base_Start_IT+0xf4>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d013      	beq.n	800d9d0 <HAL_TIM_Base_Start_IT+0x94>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a21      	ldr	r2, [pc, #132]	; (800da34 <HAL_TIM_Base_Start_IT+0xf8>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d00e      	beq.n	800d9d0 <HAL_TIM_Base_Start_IT+0x94>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a20      	ldr	r2, [pc, #128]	; (800da38 <HAL_TIM_Base_Start_IT+0xfc>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d009      	beq.n	800d9d0 <HAL_TIM_Base_Start_IT+0x94>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a1e      	ldr	r2, [pc, #120]	; (800da3c <HAL_TIM_Base_Start_IT+0x100>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d004      	beq.n	800d9d0 <HAL_TIM_Base_Start_IT+0x94>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a1d      	ldr	r2, [pc, #116]	; (800da40 <HAL_TIM_Base_Start_IT+0x104>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d115      	bne.n	800d9fc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	689a      	ldr	r2, [r3, #8]
 800d9d6:	4b1b      	ldr	r3, [pc, #108]	; (800da44 <HAL_TIM_Base_Start_IT+0x108>)
 800d9d8:	4013      	ands	r3, r2
 800d9da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b06      	cmp	r3, #6
 800d9e0:	d015      	beq.n	800da0e <HAL_TIM_Base_Start_IT+0xd2>
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9e8:	d011      	beq.n	800da0e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f042 0201 	orr.w	r2, r2, #1
 800d9f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9fa:	e008      	b.n	800da0e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f042 0201 	orr.w	r2, r2, #1
 800da0a:	601a      	str	r2, [r3, #0]
 800da0c:	e000      	b.n	800da10 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	40010000 	.word	0x40010000
 800da24:	40000400 	.word	0x40000400
 800da28:	40000800 	.word	0x40000800
 800da2c:	40000c00 	.word	0x40000c00
 800da30:	40010400 	.word	0x40010400
 800da34:	40001800 	.word	0x40001800
 800da38:	40014000 	.word	0x40014000
 800da3c:	4000e000 	.word	0x4000e000
 800da40:	4000e400 	.word	0x4000e400
 800da44:	00010007 	.word	0x00010007

0800da48 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d101      	bne.n	800da5a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e049      	b.n	800daee <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b00      	cmp	r3, #0
 800da64:	d106      	bne.n	800da74 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 f841 	bl	800daf6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2202      	movs	r2, #2
 800da78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3304      	adds	r3, #4
 800da84:	4619      	mov	r1, r3
 800da86:	4610      	mov	r0, r2
 800da88:	f000 fd94 	bl	800e5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3708      	adds	r7, #8
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b083      	sub	sp, #12
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800dafe:	bf00      	nop
 800db00:	370c      	adds	r7, #12
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr

0800db0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b082      	sub	sp, #8
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d101      	bne.n	800db1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	e049      	b.n	800dbb0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db22:	b2db      	uxtb	r3, r3
 800db24:	2b00      	cmp	r3, #0
 800db26:	d106      	bne.n	800db36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f841 	bl	800dbb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2202      	movs	r2, #2
 800db3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	3304      	adds	r3, #4
 800db46:	4619      	mov	r1, r3
 800db48:	4610      	mov	r0, r2
 800db4a:	f000 fd33 	bl	800e5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2201      	movs	r2, #1
 800db52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2201      	movs	r2, #1
 800db5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2201      	movs	r2, #1
 800db62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2201      	movs	r2, #1
 800db6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2201      	movs	r2, #1
 800db72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2201      	movs	r2, #1
 800db7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2201      	movs	r2, #1
 800db82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2201      	movs	r2, #1
 800db8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2201      	movs	r2, #1
 800db92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2201      	movs	r2, #1
 800dba2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d109      	bne.n	800dbf0 <HAL_TIM_PWM_Start+0x24>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	bf14      	ite	ne
 800dbe8:	2301      	movne	r3, #1
 800dbea:	2300      	moveq	r3, #0
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	e03c      	b.n	800dc6a <HAL_TIM_PWM_Start+0x9e>
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	2b04      	cmp	r3, #4
 800dbf4:	d109      	bne.n	800dc0a <HAL_TIM_PWM_Start+0x3e>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	bf14      	ite	ne
 800dc02:	2301      	movne	r3, #1
 800dc04:	2300      	moveq	r3, #0
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	e02f      	b.n	800dc6a <HAL_TIM_PWM_Start+0x9e>
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	2b08      	cmp	r3, #8
 800dc0e:	d109      	bne.n	800dc24 <HAL_TIM_PWM_Start+0x58>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	bf14      	ite	ne
 800dc1c:	2301      	movne	r3, #1
 800dc1e:	2300      	moveq	r3, #0
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	e022      	b.n	800dc6a <HAL_TIM_PWM_Start+0x9e>
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	2b0c      	cmp	r3, #12
 800dc28:	d109      	bne.n	800dc3e <HAL_TIM_PWM_Start+0x72>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	bf14      	ite	ne
 800dc36:	2301      	movne	r3, #1
 800dc38:	2300      	moveq	r3, #0
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	e015      	b.n	800dc6a <HAL_TIM_PWM_Start+0x9e>
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b10      	cmp	r3, #16
 800dc42:	d109      	bne.n	800dc58 <HAL_TIM_PWM_Start+0x8c>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	bf14      	ite	ne
 800dc50:	2301      	movne	r3, #1
 800dc52:	2300      	moveq	r3, #0
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	e008      	b.n	800dc6a <HAL_TIM_PWM_Start+0x9e>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	bf14      	ite	ne
 800dc64:	2301      	movne	r3, #1
 800dc66:	2300      	moveq	r3, #0
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d001      	beq.n	800dc72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e0ab      	b.n	800ddca <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d104      	bne.n	800dc82 <HAL_TIM_PWM_Start+0xb6>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2202      	movs	r2, #2
 800dc7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc80:	e023      	b.n	800dcca <HAL_TIM_PWM_Start+0xfe>
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	2b04      	cmp	r3, #4
 800dc86:	d104      	bne.n	800dc92 <HAL_TIM_PWM_Start+0xc6>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2202      	movs	r2, #2
 800dc8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc90:	e01b      	b.n	800dcca <HAL_TIM_PWM_Start+0xfe>
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	2b08      	cmp	r3, #8
 800dc96:	d104      	bne.n	800dca2 <HAL_TIM_PWM_Start+0xd6>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2202      	movs	r2, #2
 800dc9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dca0:	e013      	b.n	800dcca <HAL_TIM_PWM_Start+0xfe>
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	2b0c      	cmp	r3, #12
 800dca6:	d104      	bne.n	800dcb2 <HAL_TIM_PWM_Start+0xe6>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2202      	movs	r2, #2
 800dcac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dcb0:	e00b      	b.n	800dcca <HAL_TIM_PWM_Start+0xfe>
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b10      	cmp	r3, #16
 800dcb6:	d104      	bne.n	800dcc2 <HAL_TIM_PWM_Start+0xf6>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2202      	movs	r2, #2
 800dcbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dcc0:	e003      	b.n	800dcca <HAL_TIM_PWM_Start+0xfe>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f001 f888 	bl	800ede8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a3d      	ldr	r2, [pc, #244]	; (800ddd4 <HAL_TIM_PWM_Start+0x208>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d013      	beq.n	800dd0a <HAL_TIM_PWM_Start+0x13e>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a3c      	ldr	r2, [pc, #240]	; (800ddd8 <HAL_TIM_PWM_Start+0x20c>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d00e      	beq.n	800dd0a <HAL_TIM_PWM_Start+0x13e>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a3a      	ldr	r2, [pc, #232]	; (800dddc <HAL_TIM_PWM_Start+0x210>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d009      	beq.n	800dd0a <HAL_TIM_PWM_Start+0x13e>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a39      	ldr	r2, [pc, #228]	; (800dde0 <HAL_TIM_PWM_Start+0x214>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d004      	beq.n	800dd0a <HAL_TIM_PWM_Start+0x13e>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a37      	ldr	r2, [pc, #220]	; (800dde4 <HAL_TIM_PWM_Start+0x218>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d101      	bne.n	800dd0e <HAL_TIM_PWM_Start+0x142>
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e000      	b.n	800dd10 <HAL_TIM_PWM_Start+0x144>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d007      	beq.n	800dd24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dd22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a2a      	ldr	r2, [pc, #168]	; (800ddd4 <HAL_TIM_PWM_Start+0x208>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d02c      	beq.n	800dd88 <HAL_TIM_PWM_Start+0x1bc>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd36:	d027      	beq.n	800dd88 <HAL_TIM_PWM_Start+0x1bc>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a2a      	ldr	r2, [pc, #168]	; (800dde8 <HAL_TIM_PWM_Start+0x21c>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d022      	beq.n	800dd88 <HAL_TIM_PWM_Start+0x1bc>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a29      	ldr	r2, [pc, #164]	; (800ddec <HAL_TIM_PWM_Start+0x220>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d01d      	beq.n	800dd88 <HAL_TIM_PWM_Start+0x1bc>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a27      	ldr	r2, [pc, #156]	; (800ddf0 <HAL_TIM_PWM_Start+0x224>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d018      	beq.n	800dd88 <HAL_TIM_PWM_Start+0x1bc>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a1f      	ldr	r2, [pc, #124]	; (800ddd8 <HAL_TIM_PWM_Start+0x20c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d013      	beq.n	800dd88 <HAL_TIM_PWM_Start+0x1bc>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a23      	ldr	r2, [pc, #140]	; (800ddf4 <HAL_TIM_PWM_Start+0x228>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d00e      	beq.n	800dd88 <HAL_TIM_PWM_Start+0x1bc>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a1b      	ldr	r2, [pc, #108]	; (800dddc <HAL_TIM_PWM_Start+0x210>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d009      	beq.n	800dd88 <HAL_TIM_PWM_Start+0x1bc>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a1f      	ldr	r2, [pc, #124]	; (800ddf8 <HAL_TIM_PWM_Start+0x22c>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d004      	beq.n	800dd88 <HAL_TIM_PWM_Start+0x1bc>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a1e      	ldr	r2, [pc, #120]	; (800ddfc <HAL_TIM_PWM_Start+0x230>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d115      	bne.n	800ddb4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	689a      	ldr	r2, [r3, #8]
 800dd8e:	4b1c      	ldr	r3, [pc, #112]	; (800de00 <HAL_TIM_PWM_Start+0x234>)
 800dd90:	4013      	ands	r3, r2
 800dd92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b06      	cmp	r3, #6
 800dd98:	d015      	beq.n	800ddc6 <HAL_TIM_PWM_Start+0x1fa>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dda0:	d011      	beq.n	800ddc6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f042 0201 	orr.w	r2, r2, #1
 800ddb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddb2:	e008      	b.n	800ddc6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f042 0201 	orr.w	r2, r2, #1
 800ddc2:	601a      	str	r2, [r3, #0]
 800ddc4:	e000      	b.n	800ddc8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	40010000 	.word	0x40010000
 800ddd8:	40010400 	.word	0x40010400
 800dddc:	40014000 	.word	0x40014000
 800dde0:	40014400 	.word	0x40014400
 800dde4:	40014800 	.word	0x40014800
 800dde8:	40000400 	.word	0x40000400
 800ddec:	40000800 	.word	0x40000800
 800ddf0:	40000c00 	.word	0x40000c00
 800ddf4:	40001800 	.word	0x40001800
 800ddf8:	4000e000 	.word	0x4000e000
 800ddfc:	4000e400 	.word	0x4000e400
 800de00:	00010007 	.word	0x00010007

0800de04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	f003 0302 	and.w	r3, r3, #2
 800de16:	2b02      	cmp	r3, #2
 800de18:	d122      	bne.n	800de60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	f003 0302 	and.w	r3, r3, #2
 800de24:	2b02      	cmp	r3, #2
 800de26:	d11b      	bne.n	800de60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f06f 0202 	mvn.w	r2, #2
 800de30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2201      	movs	r2, #1
 800de36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	699b      	ldr	r3, [r3, #24]
 800de3e:	f003 0303 	and.w	r3, r3, #3
 800de42:	2b00      	cmp	r3, #0
 800de44:	d003      	beq.n	800de4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 fb96 	bl	800e578 <HAL_TIM_IC_CaptureCallback>
 800de4c:	e005      	b.n	800de5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 fb88 	bl	800e564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 fb99 	bl	800e58c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	f003 0304 	and.w	r3, r3, #4
 800de6a:	2b04      	cmp	r3, #4
 800de6c:	d122      	bne.n	800deb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	f003 0304 	and.w	r3, r3, #4
 800de78:	2b04      	cmp	r3, #4
 800de7a:	d11b      	bne.n	800deb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f06f 0204 	mvn.w	r2, #4
 800de84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2202      	movs	r2, #2
 800de8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	699b      	ldr	r3, [r3, #24]
 800de92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de96:	2b00      	cmp	r3, #0
 800de98:	d003      	beq.n	800dea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 fb6c 	bl	800e578 <HAL_TIM_IC_CaptureCallback>
 800dea0:	e005      	b.n	800deae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 fb5e 	bl	800e564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fb6f 	bl	800e58c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2200      	movs	r2, #0
 800deb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	691b      	ldr	r3, [r3, #16]
 800deba:	f003 0308 	and.w	r3, r3, #8
 800debe:	2b08      	cmp	r3, #8
 800dec0:	d122      	bne.n	800df08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	f003 0308 	and.w	r3, r3, #8
 800decc:	2b08      	cmp	r3, #8
 800dece:	d11b      	bne.n	800df08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f06f 0208 	mvn.w	r2, #8
 800ded8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2204      	movs	r2, #4
 800dede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	69db      	ldr	r3, [r3, #28]
 800dee6:	f003 0303 	and.w	r3, r3, #3
 800deea:	2b00      	cmp	r3, #0
 800deec:	d003      	beq.n	800def6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 fb42 	bl	800e578 <HAL_TIM_IC_CaptureCallback>
 800def4:	e005      	b.n	800df02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f000 fb34 	bl	800e564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fb45 	bl	800e58c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	691b      	ldr	r3, [r3, #16]
 800df0e:	f003 0310 	and.w	r3, r3, #16
 800df12:	2b10      	cmp	r3, #16
 800df14:	d122      	bne.n	800df5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	f003 0310 	and.w	r3, r3, #16
 800df20:	2b10      	cmp	r3, #16
 800df22:	d11b      	bne.n	800df5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f06f 0210 	mvn.w	r2, #16
 800df2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2208      	movs	r2, #8
 800df32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	69db      	ldr	r3, [r3, #28]
 800df3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d003      	beq.n	800df4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fb18 	bl	800e578 <HAL_TIM_IC_CaptureCallback>
 800df48:	e005      	b.n	800df56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 fb0a 	bl	800e564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 fb1b 	bl	800e58c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	691b      	ldr	r3, [r3, #16]
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	2b01      	cmp	r3, #1
 800df68:	d10e      	bne.n	800df88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	f003 0301 	and.w	r3, r3, #1
 800df74:	2b01      	cmp	r3, #1
 800df76:	d107      	bne.n	800df88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f06f 0201 	mvn.w	r2, #1
 800df80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 fae4 	bl	800e550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	691b      	ldr	r3, [r3, #16]
 800df8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df92:	2b80      	cmp	r3, #128	; 0x80
 800df94:	d10e      	bne.n	800dfb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfa0:	2b80      	cmp	r3, #128	; 0x80
 800dfa2:	d107      	bne.n	800dfb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dfac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f001 f886 	bl	800f0c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	691b      	ldr	r3, [r3, #16]
 800dfba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfc2:	d10e      	bne.n	800dfe2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfce:	2b80      	cmp	r3, #128	; 0x80
 800dfd0:	d107      	bne.n	800dfe2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dfda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f001 f879 	bl	800f0d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	691b      	ldr	r3, [r3, #16]
 800dfe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfec:	2b40      	cmp	r3, #64	; 0x40
 800dfee:	d10e      	bne.n	800e00e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffa:	2b40      	cmp	r3, #64	; 0x40
 800dffc:	d107      	bne.n	800e00e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 fac9 	bl	800e5a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	f003 0320 	and.w	r3, r3, #32
 800e018:	2b20      	cmp	r3, #32
 800e01a:	d10e      	bne.n	800e03a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	f003 0320 	and.w	r3, r3, #32
 800e026:	2b20      	cmp	r3, #32
 800e028:	d107      	bne.n	800e03a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f06f 0220 	mvn.w	r2, #32
 800e032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f001 f839 	bl	800f0ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e03a:	bf00      	nop
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
	...

0800e044 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d101      	bne.n	800e062 <HAL_TIM_OC_ConfigChannel+0x1e>
 800e05e:	2302      	movs	r3, #2
 800e060:	e066      	b.n	800e130 <HAL_TIM_OC_ConfigChannel+0xec>
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2201      	movs	r2, #1
 800e066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b14      	cmp	r3, #20
 800e06e:	d857      	bhi.n	800e120 <HAL_TIM_OC_ConfigChannel+0xdc>
 800e070:	a201      	add	r2, pc, #4	; (adr r2, 800e078 <HAL_TIM_OC_ConfigChannel+0x34>)
 800e072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e076:	bf00      	nop
 800e078:	0800e0cd 	.word	0x0800e0cd
 800e07c:	0800e121 	.word	0x0800e121
 800e080:	0800e121 	.word	0x0800e121
 800e084:	0800e121 	.word	0x0800e121
 800e088:	0800e0db 	.word	0x0800e0db
 800e08c:	0800e121 	.word	0x0800e121
 800e090:	0800e121 	.word	0x0800e121
 800e094:	0800e121 	.word	0x0800e121
 800e098:	0800e0e9 	.word	0x0800e0e9
 800e09c:	0800e121 	.word	0x0800e121
 800e0a0:	0800e121 	.word	0x0800e121
 800e0a4:	0800e121 	.word	0x0800e121
 800e0a8:	0800e0f7 	.word	0x0800e0f7
 800e0ac:	0800e121 	.word	0x0800e121
 800e0b0:	0800e121 	.word	0x0800e121
 800e0b4:	0800e121 	.word	0x0800e121
 800e0b8:	0800e105 	.word	0x0800e105
 800e0bc:	0800e121 	.word	0x0800e121
 800e0c0:	0800e121 	.word	0x0800e121
 800e0c4:	0800e121 	.word	0x0800e121
 800e0c8:	0800e113 	.word	0x0800e113
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	68b9      	ldr	r1, [r7, #8]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f000 fb14 	bl	800e700 <TIM_OC1_SetConfig>
      break;
 800e0d8:	e025      	b.n	800e126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68b9      	ldr	r1, [r7, #8]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 fb9d 	bl	800e820 <TIM_OC2_SetConfig>
      break;
 800e0e6:	e01e      	b.n	800e126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68b9      	ldr	r1, [r7, #8]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f000 fc20 	bl	800e934 <TIM_OC3_SetConfig>
      break;
 800e0f4:	e017      	b.n	800e126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68b9      	ldr	r1, [r7, #8]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f000 fca1 	bl	800ea44 <TIM_OC4_SetConfig>
      break;
 800e102:	e010      	b.n	800e126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	68b9      	ldr	r1, [r7, #8]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 fd04 	bl	800eb18 <TIM_OC5_SetConfig>
      break;
 800e110:	e009      	b.n	800e126 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	68b9      	ldr	r1, [r7, #8]
 800e118:	4618      	mov	r0, r3
 800e11a:	f000 fd61 	bl	800ebe0 <TIM_OC6_SetConfig>
      break;
 800e11e:	e002      	b.n	800e126 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800e120:	2301      	movs	r3, #1
 800e122:	75fb      	strb	r3, [r7, #23]
      break;
 800e124:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e12e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e130:	4618      	mov	r0, r3
 800e132:	3718      	adds	r7, #24
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b086      	sub	sp, #24
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e144:	2300      	movs	r3, #0
 800e146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d101      	bne.n	800e156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e152:	2302      	movs	r3, #2
 800e154:	e0ff      	b.n	800e356 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2b14      	cmp	r3, #20
 800e162:	f200 80f0 	bhi.w	800e346 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e166:	a201      	add	r2, pc, #4	; (adr r2, 800e16c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e16c:	0800e1c1 	.word	0x0800e1c1
 800e170:	0800e347 	.word	0x0800e347
 800e174:	0800e347 	.word	0x0800e347
 800e178:	0800e347 	.word	0x0800e347
 800e17c:	0800e201 	.word	0x0800e201
 800e180:	0800e347 	.word	0x0800e347
 800e184:	0800e347 	.word	0x0800e347
 800e188:	0800e347 	.word	0x0800e347
 800e18c:	0800e243 	.word	0x0800e243
 800e190:	0800e347 	.word	0x0800e347
 800e194:	0800e347 	.word	0x0800e347
 800e198:	0800e347 	.word	0x0800e347
 800e19c:	0800e283 	.word	0x0800e283
 800e1a0:	0800e347 	.word	0x0800e347
 800e1a4:	0800e347 	.word	0x0800e347
 800e1a8:	0800e347 	.word	0x0800e347
 800e1ac:	0800e2c5 	.word	0x0800e2c5
 800e1b0:	0800e347 	.word	0x0800e347
 800e1b4:	0800e347 	.word	0x0800e347
 800e1b8:	0800e347 	.word	0x0800e347
 800e1bc:	0800e305 	.word	0x0800e305
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68b9      	ldr	r1, [r7, #8]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f000 fa9a 	bl	800e700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	699a      	ldr	r2, [r3, #24]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f042 0208 	orr.w	r2, r2, #8
 800e1da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	699a      	ldr	r2, [r3, #24]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f022 0204 	bic.w	r2, r2, #4
 800e1ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	6999      	ldr	r1, [r3, #24]
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	691a      	ldr	r2, [r3, #16]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	430a      	orrs	r2, r1
 800e1fc:	619a      	str	r2, [r3, #24]
      break;
 800e1fe:	e0a5      	b.n	800e34c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68b9      	ldr	r1, [r7, #8]
 800e206:	4618      	mov	r0, r3
 800e208:	f000 fb0a 	bl	800e820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	699a      	ldr	r2, [r3, #24]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e21a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	699a      	ldr	r2, [r3, #24]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e22a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	6999      	ldr	r1, [r3, #24]
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	691b      	ldr	r3, [r3, #16]
 800e236:	021a      	lsls	r2, r3, #8
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	430a      	orrs	r2, r1
 800e23e:	619a      	str	r2, [r3, #24]
      break;
 800e240:	e084      	b.n	800e34c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	68b9      	ldr	r1, [r7, #8]
 800e248:	4618      	mov	r0, r3
 800e24a:	f000 fb73 	bl	800e934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	69da      	ldr	r2, [r3, #28]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f042 0208 	orr.w	r2, r2, #8
 800e25c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	69da      	ldr	r2, [r3, #28]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f022 0204 	bic.w	r2, r2, #4
 800e26c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	69d9      	ldr	r1, [r3, #28]
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	691a      	ldr	r2, [r3, #16]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	430a      	orrs	r2, r1
 800e27e:	61da      	str	r2, [r3, #28]
      break;
 800e280:	e064      	b.n	800e34c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	68b9      	ldr	r1, [r7, #8]
 800e288:	4618      	mov	r0, r3
 800e28a:	f000 fbdb 	bl	800ea44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	69da      	ldr	r2, [r3, #28]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e29c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	69da      	ldr	r2, [r3, #28]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	69d9      	ldr	r1, [r3, #28]
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	021a      	lsls	r2, r3, #8
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	430a      	orrs	r2, r1
 800e2c0:	61da      	str	r2, [r3, #28]
      break;
 800e2c2:	e043      	b.n	800e34c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	68b9      	ldr	r1, [r7, #8]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f000 fc24 	bl	800eb18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f042 0208 	orr.w	r2, r2, #8
 800e2de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f022 0204 	bic.w	r2, r2, #4
 800e2ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	691a      	ldr	r2, [r3, #16]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	430a      	orrs	r2, r1
 800e300:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e302:	e023      	b.n	800e34c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	68b9      	ldr	r1, [r7, #8]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f000 fc68 	bl	800ebe0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e31e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e32e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	021a      	lsls	r2, r3, #8
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	430a      	orrs	r2, r1
 800e342:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e344:	e002      	b.n	800e34c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e346:	2301      	movs	r3, #1
 800e348:	75fb      	strb	r3, [r7, #23]
      break;
 800e34a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2200      	movs	r2, #0
 800e350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e354:	7dfb      	ldrb	r3, [r7, #23]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3718      	adds	r7, #24
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop

0800e360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e374:	2b01      	cmp	r3, #1
 800e376:	d101      	bne.n	800e37c <HAL_TIM_ConfigClockSource+0x1c>
 800e378:	2302      	movs	r3, #2
 800e37a:	e0dc      	b.n	800e536 <HAL_TIM_ConfigClockSource+0x1d6>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2202      	movs	r2, #2
 800e388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	4b6a      	ldr	r3, [pc, #424]	; (800e540 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e398:	4013      	ands	r3, r2
 800e39a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e3a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	68ba      	ldr	r2, [r7, #8]
 800e3aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a64      	ldr	r2, [pc, #400]	; (800e544 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	f000 80a9 	beq.w	800e50a <HAL_TIM_ConfigClockSource+0x1aa>
 800e3b8:	4a62      	ldr	r2, [pc, #392]	; (800e544 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	f200 80ae 	bhi.w	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e3c0:	4a61      	ldr	r2, [pc, #388]	; (800e548 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	f000 80a1 	beq.w	800e50a <HAL_TIM_ConfigClockSource+0x1aa>
 800e3c8:	4a5f      	ldr	r2, [pc, #380]	; (800e548 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	f200 80a6 	bhi.w	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e3d0:	4a5e      	ldr	r2, [pc, #376]	; (800e54c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	f000 8099 	beq.w	800e50a <HAL_TIM_ConfigClockSource+0x1aa>
 800e3d8:	4a5c      	ldr	r2, [pc, #368]	; (800e54c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	f200 809e 	bhi.w	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e3e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e3e4:	f000 8091 	beq.w	800e50a <HAL_TIM_ConfigClockSource+0x1aa>
 800e3e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e3ec:	f200 8096 	bhi.w	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e3f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3f4:	f000 8089 	beq.w	800e50a <HAL_TIM_ConfigClockSource+0x1aa>
 800e3f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3fc:	f200 808e 	bhi.w	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e404:	d03e      	beq.n	800e484 <HAL_TIM_ConfigClockSource+0x124>
 800e406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e40a:	f200 8087 	bhi.w	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e40e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e412:	f000 8086 	beq.w	800e522 <HAL_TIM_ConfigClockSource+0x1c2>
 800e416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e41a:	d87f      	bhi.n	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e41c:	2b70      	cmp	r3, #112	; 0x70
 800e41e:	d01a      	beq.n	800e456 <HAL_TIM_ConfigClockSource+0xf6>
 800e420:	2b70      	cmp	r3, #112	; 0x70
 800e422:	d87b      	bhi.n	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e424:	2b60      	cmp	r3, #96	; 0x60
 800e426:	d050      	beq.n	800e4ca <HAL_TIM_ConfigClockSource+0x16a>
 800e428:	2b60      	cmp	r3, #96	; 0x60
 800e42a:	d877      	bhi.n	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e42c:	2b50      	cmp	r3, #80	; 0x50
 800e42e:	d03c      	beq.n	800e4aa <HAL_TIM_ConfigClockSource+0x14a>
 800e430:	2b50      	cmp	r3, #80	; 0x50
 800e432:	d873      	bhi.n	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e434:	2b40      	cmp	r3, #64	; 0x40
 800e436:	d058      	beq.n	800e4ea <HAL_TIM_ConfigClockSource+0x18a>
 800e438:	2b40      	cmp	r3, #64	; 0x40
 800e43a:	d86f      	bhi.n	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e43c:	2b30      	cmp	r3, #48	; 0x30
 800e43e:	d064      	beq.n	800e50a <HAL_TIM_ConfigClockSource+0x1aa>
 800e440:	2b30      	cmp	r3, #48	; 0x30
 800e442:	d86b      	bhi.n	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e444:	2b20      	cmp	r3, #32
 800e446:	d060      	beq.n	800e50a <HAL_TIM_ConfigClockSource+0x1aa>
 800e448:	2b20      	cmp	r3, #32
 800e44a:	d867      	bhi.n	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d05c      	beq.n	800e50a <HAL_TIM_ConfigClockSource+0x1aa>
 800e450:	2b10      	cmp	r3, #16
 800e452:	d05a      	beq.n	800e50a <HAL_TIM_ConfigClockSource+0x1aa>
 800e454:	e062      	b.n	800e51c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6818      	ldr	r0, [r3, #0]
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	6899      	ldr	r1, [r3, #8]
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	685a      	ldr	r2, [r3, #4]
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	f000 fc9f 	bl	800eda8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e478:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	609a      	str	r2, [r3, #8]
      break;
 800e482:	e04f      	b.n	800e524 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6818      	ldr	r0, [r3, #0]
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	6899      	ldr	r1, [r3, #8]
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	685a      	ldr	r2, [r3, #4]
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	f000 fc88 	bl	800eda8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	689a      	ldr	r2, [r3, #8]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e4a6:	609a      	str	r2, [r3, #8]
      break;
 800e4a8:	e03c      	b.n	800e524 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6818      	ldr	r0, [r3, #0]
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	6859      	ldr	r1, [r3, #4]
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	f000 fbf8 	bl	800ecac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2150      	movs	r1, #80	; 0x50
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f000 fc52 	bl	800ed6c <TIM_ITRx_SetConfig>
      break;
 800e4c8:	e02c      	b.n	800e524 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6818      	ldr	r0, [r3, #0]
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	6859      	ldr	r1, [r3, #4]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	f000 fc17 	bl	800ed0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2160      	movs	r1, #96	; 0x60
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f000 fc42 	bl	800ed6c <TIM_ITRx_SetConfig>
      break;
 800e4e8:	e01c      	b.n	800e524 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6818      	ldr	r0, [r3, #0]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	6859      	ldr	r1, [r3, #4]
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	f000 fbd8 	bl	800ecac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2140      	movs	r1, #64	; 0x40
 800e502:	4618      	mov	r0, r3
 800e504:	f000 fc32 	bl	800ed6c <TIM_ITRx_SetConfig>
      break;
 800e508:	e00c      	b.n	800e524 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4619      	mov	r1, r3
 800e514:	4610      	mov	r0, r2
 800e516:	f000 fc29 	bl	800ed6c <TIM_ITRx_SetConfig>
      break;
 800e51a:	e003      	b.n	800e524 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e51c:	2301      	movs	r3, #1
 800e51e:	73fb      	strb	r3, [r7, #15]
      break;
 800e520:	e000      	b.n	800e524 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e522:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2201      	movs	r2, #1
 800e528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2200      	movs	r2, #0
 800e530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e534:	7bfb      	ldrb	r3, [r7, #15]
}
 800e536:	4618      	mov	r0, r3
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	ffceff88 	.word	0xffceff88
 800e544:	00100040 	.word	0x00100040
 800e548:	00100030 	.word	0x00100030
 800e54c:	00100020 	.word	0x00100020

0800e550 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e558:	bf00      	nop
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e56c:	bf00      	nop
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e578:	b480      	push	{r7}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e580:	bf00      	nop
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr

0800e58c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e594:	bf00      	nop
 800e596:	370c      	adds	r7, #12
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr

0800e5a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e5a8:	bf00      	nop
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	4a44      	ldr	r2, [pc, #272]	; (800e6d8 <TIM_Base_SetConfig+0x124>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d013      	beq.n	800e5f4 <TIM_Base_SetConfig+0x40>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5d2:	d00f      	beq.n	800e5f4 <TIM_Base_SetConfig+0x40>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	4a41      	ldr	r2, [pc, #260]	; (800e6dc <TIM_Base_SetConfig+0x128>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d00b      	beq.n	800e5f4 <TIM_Base_SetConfig+0x40>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	4a40      	ldr	r2, [pc, #256]	; (800e6e0 <TIM_Base_SetConfig+0x12c>)
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d007      	beq.n	800e5f4 <TIM_Base_SetConfig+0x40>
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4a3f      	ldr	r2, [pc, #252]	; (800e6e4 <TIM_Base_SetConfig+0x130>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d003      	beq.n	800e5f4 <TIM_Base_SetConfig+0x40>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4a3e      	ldr	r2, [pc, #248]	; (800e6e8 <TIM_Base_SetConfig+0x134>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d108      	bne.n	800e606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	4313      	orrs	r3, r2
 800e604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	4a33      	ldr	r2, [pc, #204]	; (800e6d8 <TIM_Base_SetConfig+0x124>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d027      	beq.n	800e65e <TIM_Base_SetConfig+0xaa>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e614:	d023      	beq.n	800e65e <TIM_Base_SetConfig+0xaa>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	4a30      	ldr	r2, [pc, #192]	; (800e6dc <TIM_Base_SetConfig+0x128>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d01f      	beq.n	800e65e <TIM_Base_SetConfig+0xaa>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4a2f      	ldr	r2, [pc, #188]	; (800e6e0 <TIM_Base_SetConfig+0x12c>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d01b      	beq.n	800e65e <TIM_Base_SetConfig+0xaa>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4a2e      	ldr	r2, [pc, #184]	; (800e6e4 <TIM_Base_SetConfig+0x130>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d017      	beq.n	800e65e <TIM_Base_SetConfig+0xaa>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4a2d      	ldr	r2, [pc, #180]	; (800e6e8 <TIM_Base_SetConfig+0x134>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d013      	beq.n	800e65e <TIM_Base_SetConfig+0xaa>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4a2c      	ldr	r2, [pc, #176]	; (800e6ec <TIM_Base_SetConfig+0x138>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d00f      	beq.n	800e65e <TIM_Base_SetConfig+0xaa>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a2b      	ldr	r2, [pc, #172]	; (800e6f0 <TIM_Base_SetConfig+0x13c>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d00b      	beq.n	800e65e <TIM_Base_SetConfig+0xaa>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4a2a      	ldr	r2, [pc, #168]	; (800e6f4 <TIM_Base_SetConfig+0x140>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d007      	beq.n	800e65e <TIM_Base_SetConfig+0xaa>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4a29      	ldr	r2, [pc, #164]	; (800e6f8 <TIM_Base_SetConfig+0x144>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d003      	beq.n	800e65e <TIM_Base_SetConfig+0xaa>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a28      	ldr	r2, [pc, #160]	; (800e6fc <TIM_Base_SetConfig+0x148>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d108      	bne.n	800e670 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	68db      	ldr	r3, [r3, #12]
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	695b      	ldr	r3, [r3, #20]
 800e67a:	4313      	orrs	r3, r2
 800e67c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	689a      	ldr	r2, [r3, #8]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4a10      	ldr	r2, [pc, #64]	; (800e6d8 <TIM_Base_SetConfig+0x124>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d00f      	beq.n	800e6bc <TIM_Base_SetConfig+0x108>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	4a12      	ldr	r2, [pc, #72]	; (800e6e8 <TIM_Base_SetConfig+0x134>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d00b      	beq.n	800e6bc <TIM_Base_SetConfig+0x108>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4a11      	ldr	r2, [pc, #68]	; (800e6ec <TIM_Base_SetConfig+0x138>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d007      	beq.n	800e6bc <TIM_Base_SetConfig+0x108>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	4a10      	ldr	r2, [pc, #64]	; (800e6f0 <TIM_Base_SetConfig+0x13c>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d003      	beq.n	800e6bc <TIM_Base_SetConfig+0x108>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4a0f      	ldr	r2, [pc, #60]	; (800e6f4 <TIM_Base_SetConfig+0x140>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d103      	bne.n	800e6c4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	691a      	ldr	r2, [r3, #16]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	615a      	str	r2, [r3, #20]
}
 800e6ca:	bf00      	nop
 800e6cc:	3714      	adds	r7, #20
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	40010000 	.word	0x40010000
 800e6dc:	40000400 	.word	0x40000400
 800e6e0:	40000800 	.word	0x40000800
 800e6e4:	40000c00 	.word	0x40000c00
 800e6e8:	40010400 	.word	0x40010400
 800e6ec:	40014000 	.word	0x40014000
 800e6f0:	40014400 	.word	0x40014400
 800e6f4:	40014800 	.word	0x40014800
 800e6f8:	4000e000 	.word	0x4000e000
 800e6fc:	4000e400 	.word	0x4000e400

0800e700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e700:	b480      	push	{r7}
 800e702:	b087      	sub	sp, #28
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a1b      	ldr	r3, [r3, #32]
 800e70e:	f023 0201 	bic.w	r2, r3, #1
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6a1b      	ldr	r3, [r3, #32]
 800e71a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	699b      	ldr	r3, [r3, #24]
 800e726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e728:	68fa      	ldr	r2, [r7, #12]
 800e72a:	4b37      	ldr	r3, [pc, #220]	; (800e808 <TIM_OC1_SetConfig+0x108>)
 800e72c:	4013      	ands	r3, r2
 800e72e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f023 0303 	bic.w	r3, r3, #3
 800e736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	68fa      	ldr	r2, [r7, #12]
 800e73e:	4313      	orrs	r3, r2
 800e740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	f023 0302 	bic.w	r3, r3, #2
 800e748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	697a      	ldr	r2, [r7, #20]
 800e750:	4313      	orrs	r3, r2
 800e752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	4a2d      	ldr	r2, [pc, #180]	; (800e80c <TIM_OC1_SetConfig+0x10c>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d00f      	beq.n	800e77c <TIM_OC1_SetConfig+0x7c>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4a2c      	ldr	r2, [pc, #176]	; (800e810 <TIM_OC1_SetConfig+0x110>)
 800e760:	4293      	cmp	r3, r2
 800e762:	d00b      	beq.n	800e77c <TIM_OC1_SetConfig+0x7c>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	4a2b      	ldr	r2, [pc, #172]	; (800e814 <TIM_OC1_SetConfig+0x114>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d007      	beq.n	800e77c <TIM_OC1_SetConfig+0x7c>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a2a      	ldr	r2, [pc, #168]	; (800e818 <TIM_OC1_SetConfig+0x118>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d003      	beq.n	800e77c <TIM_OC1_SetConfig+0x7c>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4a29      	ldr	r2, [pc, #164]	; (800e81c <TIM_OC1_SetConfig+0x11c>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d10c      	bne.n	800e796 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	f023 0308 	bic.w	r3, r3, #8
 800e782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	697a      	ldr	r2, [r7, #20]
 800e78a:	4313      	orrs	r3, r2
 800e78c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	f023 0304 	bic.w	r3, r3, #4
 800e794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	4a1c      	ldr	r2, [pc, #112]	; (800e80c <TIM_OC1_SetConfig+0x10c>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d00f      	beq.n	800e7be <TIM_OC1_SetConfig+0xbe>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4a1b      	ldr	r2, [pc, #108]	; (800e810 <TIM_OC1_SetConfig+0x110>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d00b      	beq.n	800e7be <TIM_OC1_SetConfig+0xbe>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a1a      	ldr	r2, [pc, #104]	; (800e814 <TIM_OC1_SetConfig+0x114>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d007      	beq.n	800e7be <TIM_OC1_SetConfig+0xbe>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a19      	ldr	r2, [pc, #100]	; (800e818 <TIM_OC1_SetConfig+0x118>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d003      	beq.n	800e7be <TIM_OC1_SetConfig+0xbe>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a18      	ldr	r2, [pc, #96]	; (800e81c <TIM_OC1_SetConfig+0x11c>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d111      	bne.n	800e7e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e7cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	695b      	ldr	r3, [r3, #20]
 800e7d2:	693a      	ldr	r2, [r7, #16]
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	699b      	ldr	r3, [r3, #24]
 800e7dc:	693a      	ldr	r2, [r7, #16]
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	693a      	ldr	r2, [r7, #16]
 800e7e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	685a      	ldr	r2, [r3, #4]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	697a      	ldr	r2, [r7, #20]
 800e7fa:	621a      	str	r2, [r3, #32]
}
 800e7fc:	bf00      	nop
 800e7fe:	371c      	adds	r7, #28
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr
 800e808:	fffeff8f 	.word	0xfffeff8f
 800e80c:	40010000 	.word	0x40010000
 800e810:	40010400 	.word	0x40010400
 800e814:	40014000 	.word	0x40014000
 800e818:	40014400 	.word	0x40014400
 800e81c:	40014800 	.word	0x40014800

0800e820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e820:	b480      	push	{r7}
 800e822:	b087      	sub	sp, #28
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6a1b      	ldr	r3, [r3, #32]
 800e82e:	f023 0210 	bic.w	r2, r3, #16
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6a1b      	ldr	r3, [r3, #32]
 800e83a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	699b      	ldr	r3, [r3, #24]
 800e846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e848:	68fa      	ldr	r2, [r7, #12]
 800e84a:	4b34      	ldr	r3, [pc, #208]	; (800e91c <TIM_OC2_SetConfig+0xfc>)
 800e84c:	4013      	ands	r3, r2
 800e84e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	021b      	lsls	r3, r3, #8
 800e85e:	68fa      	ldr	r2, [r7, #12]
 800e860:	4313      	orrs	r3, r2
 800e862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	f023 0320 	bic.w	r3, r3, #32
 800e86a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	011b      	lsls	r3, r3, #4
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	4313      	orrs	r3, r2
 800e876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4a29      	ldr	r2, [pc, #164]	; (800e920 <TIM_OC2_SetConfig+0x100>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d003      	beq.n	800e888 <TIM_OC2_SetConfig+0x68>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	4a28      	ldr	r2, [pc, #160]	; (800e924 <TIM_OC2_SetConfig+0x104>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d10d      	bne.n	800e8a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e88e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	011b      	lsls	r3, r3, #4
 800e896:	697a      	ldr	r2, [r7, #20]
 800e898:	4313      	orrs	r3, r2
 800e89a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4a1e      	ldr	r2, [pc, #120]	; (800e920 <TIM_OC2_SetConfig+0x100>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d00f      	beq.n	800e8cc <TIM_OC2_SetConfig+0xac>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4a1d      	ldr	r2, [pc, #116]	; (800e924 <TIM_OC2_SetConfig+0x104>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d00b      	beq.n	800e8cc <TIM_OC2_SetConfig+0xac>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4a1c      	ldr	r2, [pc, #112]	; (800e928 <TIM_OC2_SetConfig+0x108>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d007      	beq.n	800e8cc <TIM_OC2_SetConfig+0xac>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4a1b      	ldr	r2, [pc, #108]	; (800e92c <TIM_OC2_SetConfig+0x10c>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d003      	beq.n	800e8cc <TIM_OC2_SetConfig+0xac>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a1a      	ldr	r2, [pc, #104]	; (800e930 <TIM_OC2_SetConfig+0x110>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d113      	bne.n	800e8f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e8d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e8da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	695b      	ldr	r3, [r3, #20]
 800e8e0:	009b      	lsls	r3, r3, #2
 800e8e2:	693a      	ldr	r2, [r7, #16]
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	699b      	ldr	r3, [r3, #24]
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	693a      	ldr	r2, [r7, #16]
 800e8f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	685a      	ldr	r2, [r3, #4]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	621a      	str	r2, [r3, #32]
}
 800e90e:	bf00      	nop
 800e910:	371c      	adds	r7, #28
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	feff8fff 	.word	0xfeff8fff
 800e920:	40010000 	.word	0x40010000
 800e924:	40010400 	.word	0x40010400
 800e928:	40014000 	.word	0x40014000
 800e92c:	40014400 	.word	0x40014400
 800e930:	40014800 	.word	0x40014800

0800e934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e934:	b480      	push	{r7}
 800e936:	b087      	sub	sp, #28
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a1b      	ldr	r3, [r3, #32]
 800e942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a1b      	ldr	r3, [r3, #32]
 800e94e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	69db      	ldr	r3, [r3, #28]
 800e95a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	4b33      	ldr	r3, [pc, #204]	; (800ea2c <TIM_OC3_SetConfig+0xf8>)
 800e960:	4013      	ands	r3, r2
 800e962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f023 0303 	bic.w	r3, r3, #3
 800e96a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	4313      	orrs	r3, r2
 800e974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e97c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	021b      	lsls	r3, r3, #8
 800e984:	697a      	ldr	r2, [r7, #20]
 800e986:	4313      	orrs	r3, r2
 800e988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4a28      	ldr	r2, [pc, #160]	; (800ea30 <TIM_OC3_SetConfig+0xfc>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d003      	beq.n	800e99a <TIM_OC3_SetConfig+0x66>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4a27      	ldr	r2, [pc, #156]	; (800ea34 <TIM_OC3_SetConfig+0x100>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d10d      	bne.n	800e9b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e9a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	021b      	lsls	r3, r3, #8
 800e9a8:	697a      	ldr	r2, [r7, #20]
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e9b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4a1d      	ldr	r2, [pc, #116]	; (800ea30 <TIM_OC3_SetConfig+0xfc>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d00f      	beq.n	800e9de <TIM_OC3_SetConfig+0xaa>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4a1c      	ldr	r2, [pc, #112]	; (800ea34 <TIM_OC3_SetConfig+0x100>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d00b      	beq.n	800e9de <TIM_OC3_SetConfig+0xaa>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	4a1b      	ldr	r2, [pc, #108]	; (800ea38 <TIM_OC3_SetConfig+0x104>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d007      	beq.n	800e9de <TIM_OC3_SetConfig+0xaa>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	4a1a      	ldr	r2, [pc, #104]	; (800ea3c <TIM_OC3_SetConfig+0x108>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d003      	beq.n	800e9de <TIM_OC3_SetConfig+0xaa>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4a19      	ldr	r2, [pc, #100]	; (800ea40 <TIM_OC3_SetConfig+0x10c>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d113      	bne.n	800ea06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	011b      	lsls	r3, r3, #4
 800e9f4:	693a      	ldr	r2, [r7, #16]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	011b      	lsls	r3, r3, #4
 800ea00:	693a      	ldr	r2, [r7, #16]
 800ea02:	4313      	orrs	r3, r2
 800ea04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	693a      	ldr	r2, [r7, #16]
 800ea0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	685a      	ldr	r2, [r3, #4]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	697a      	ldr	r2, [r7, #20]
 800ea1e:	621a      	str	r2, [r3, #32]
}
 800ea20:	bf00      	nop
 800ea22:	371c      	adds	r7, #28
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	fffeff8f 	.word	0xfffeff8f
 800ea30:	40010000 	.word	0x40010000
 800ea34:	40010400 	.word	0x40010400
 800ea38:	40014000 	.word	0x40014000
 800ea3c:	40014400 	.word	0x40014400
 800ea40:	40014800 	.word	0x40014800

0800ea44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b087      	sub	sp, #28
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a1b      	ldr	r3, [r3, #32]
 800ea5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	69db      	ldr	r3, [r3, #28]
 800ea6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	4b24      	ldr	r3, [pc, #144]	; (800eb00 <TIM_OC4_SetConfig+0xbc>)
 800ea70:	4013      	ands	r3, r2
 800ea72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	021b      	lsls	r3, r3, #8
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	4313      	orrs	r3, r2
 800ea86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ea8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	689b      	ldr	r3, [r3, #8]
 800ea94:	031b      	lsls	r3, r3, #12
 800ea96:	693a      	ldr	r2, [r7, #16]
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	4a19      	ldr	r2, [pc, #100]	; (800eb04 <TIM_OC4_SetConfig+0xc0>)
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d00f      	beq.n	800eac4 <TIM_OC4_SetConfig+0x80>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4a18      	ldr	r2, [pc, #96]	; (800eb08 <TIM_OC4_SetConfig+0xc4>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d00b      	beq.n	800eac4 <TIM_OC4_SetConfig+0x80>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4a17      	ldr	r2, [pc, #92]	; (800eb0c <TIM_OC4_SetConfig+0xc8>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d007      	beq.n	800eac4 <TIM_OC4_SetConfig+0x80>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a16      	ldr	r2, [pc, #88]	; (800eb10 <TIM_OC4_SetConfig+0xcc>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d003      	beq.n	800eac4 <TIM_OC4_SetConfig+0x80>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a15      	ldr	r2, [pc, #84]	; (800eb14 <TIM_OC4_SetConfig+0xd0>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d109      	bne.n	800ead8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eaca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	695b      	ldr	r3, [r3, #20]
 800ead0:	019b      	lsls	r3, r3, #6
 800ead2:	697a      	ldr	r2, [r7, #20]
 800ead4:	4313      	orrs	r3, r2
 800ead6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	697a      	ldr	r2, [r7, #20]
 800eadc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	685a      	ldr	r2, [r3, #4]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	693a      	ldr	r2, [r7, #16]
 800eaf0:	621a      	str	r2, [r3, #32]
}
 800eaf2:	bf00      	nop
 800eaf4:	371c      	adds	r7, #28
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	feff8fff 	.word	0xfeff8fff
 800eb04:	40010000 	.word	0x40010000
 800eb08:	40010400 	.word	0x40010400
 800eb0c:	40014000 	.word	0x40014000
 800eb10:	40014400 	.word	0x40014400
 800eb14:	40014800 	.word	0x40014800

0800eb18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b087      	sub	sp, #28
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a1b      	ldr	r3, [r3, #32]
 800eb26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6a1b      	ldr	r3, [r3, #32]
 800eb32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	4b21      	ldr	r3, [pc, #132]	; (800ebc8 <TIM_OC5_SetConfig+0xb0>)
 800eb44:	4013      	ands	r3, r2
 800eb46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800eb58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	041b      	lsls	r3, r3, #16
 800eb60:	693a      	ldr	r2, [r7, #16]
 800eb62:	4313      	orrs	r3, r2
 800eb64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4a18      	ldr	r2, [pc, #96]	; (800ebcc <TIM_OC5_SetConfig+0xb4>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d00f      	beq.n	800eb8e <TIM_OC5_SetConfig+0x76>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4a17      	ldr	r2, [pc, #92]	; (800ebd0 <TIM_OC5_SetConfig+0xb8>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d00b      	beq.n	800eb8e <TIM_OC5_SetConfig+0x76>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4a16      	ldr	r2, [pc, #88]	; (800ebd4 <TIM_OC5_SetConfig+0xbc>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d007      	beq.n	800eb8e <TIM_OC5_SetConfig+0x76>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a15      	ldr	r2, [pc, #84]	; (800ebd8 <TIM_OC5_SetConfig+0xc0>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d003      	beq.n	800eb8e <TIM_OC5_SetConfig+0x76>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a14      	ldr	r2, [pc, #80]	; (800ebdc <TIM_OC5_SetConfig+0xc4>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d109      	bne.n	800eba2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	695b      	ldr	r3, [r3, #20]
 800eb9a:	021b      	lsls	r3, r3, #8
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	697a      	ldr	r2, [r7, #20]
 800eba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	68fa      	ldr	r2, [r7, #12]
 800ebac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	685a      	ldr	r2, [r3, #4]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	693a      	ldr	r2, [r7, #16]
 800ebba:	621a      	str	r2, [r3, #32]
}
 800ebbc:	bf00      	nop
 800ebbe:	371c      	adds	r7, #28
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	fffeff8f 	.word	0xfffeff8f
 800ebcc:	40010000 	.word	0x40010000
 800ebd0:	40010400 	.word	0x40010400
 800ebd4:	40014000 	.word	0x40014000
 800ebd8:	40014400 	.word	0x40014400
 800ebdc:	40014800 	.word	0x40014800

0800ebe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b087      	sub	sp, #28
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6a1b      	ldr	r3, [r3, #32]
 800ebee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6a1b      	ldr	r3, [r3, #32]
 800ebfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	4b22      	ldr	r3, [pc, #136]	; (800ec94 <TIM_OC6_SetConfig+0xb4>)
 800ec0c:	4013      	ands	r3, r2
 800ec0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	021b      	lsls	r3, r3, #8
 800ec16:	68fa      	ldr	r2, [r7, #12]
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ec22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	689b      	ldr	r3, [r3, #8]
 800ec28:	051b      	lsls	r3, r3, #20
 800ec2a:	693a      	ldr	r2, [r7, #16]
 800ec2c:	4313      	orrs	r3, r2
 800ec2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	4a19      	ldr	r2, [pc, #100]	; (800ec98 <TIM_OC6_SetConfig+0xb8>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d00f      	beq.n	800ec58 <TIM_OC6_SetConfig+0x78>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4a18      	ldr	r2, [pc, #96]	; (800ec9c <TIM_OC6_SetConfig+0xbc>)
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d00b      	beq.n	800ec58 <TIM_OC6_SetConfig+0x78>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	4a17      	ldr	r2, [pc, #92]	; (800eca0 <TIM_OC6_SetConfig+0xc0>)
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d007      	beq.n	800ec58 <TIM_OC6_SetConfig+0x78>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	4a16      	ldr	r2, [pc, #88]	; (800eca4 <TIM_OC6_SetConfig+0xc4>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d003      	beq.n	800ec58 <TIM_OC6_SetConfig+0x78>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	4a15      	ldr	r2, [pc, #84]	; (800eca8 <TIM_OC6_SetConfig+0xc8>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d109      	bne.n	800ec6c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ec5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	695b      	ldr	r3, [r3, #20]
 800ec64:	029b      	lsls	r3, r3, #10
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	4313      	orrs	r3, r2
 800ec6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	697a      	ldr	r2, [r7, #20]
 800ec70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	685a      	ldr	r2, [r3, #4]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	621a      	str	r2, [r3, #32]
}
 800ec86:	bf00      	nop
 800ec88:	371c      	adds	r7, #28
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	feff8fff 	.word	0xfeff8fff
 800ec98:	40010000 	.word	0x40010000
 800ec9c:	40010400 	.word	0x40010400
 800eca0:	40014000 	.word	0x40014000
 800eca4:	40014400 	.word	0x40014400
 800eca8:	40014800 	.word	0x40014800

0800ecac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b087      	sub	sp, #28
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6a1b      	ldr	r3, [r3, #32]
 800ecbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6a1b      	ldr	r3, [r3, #32]
 800ecc2:	f023 0201 	bic.w	r2, r3, #1
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	699b      	ldr	r3, [r3, #24]
 800ecce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ecd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	011b      	lsls	r3, r3, #4
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	4313      	orrs	r3, r2
 800ece0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	f023 030a 	bic.w	r3, r3, #10
 800ece8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ecea:	697a      	ldr	r2, [r7, #20]
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	693a      	ldr	r2, [r7, #16]
 800ecf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	697a      	ldr	r2, [r7, #20]
 800ecfc:	621a      	str	r2, [r3, #32]
}
 800ecfe:	bf00      	nop
 800ed00:	371c      	adds	r7, #28
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed0a:	b480      	push	{r7}
 800ed0c:	b087      	sub	sp, #28
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	60f8      	str	r0, [r7, #12]
 800ed12:	60b9      	str	r1, [r7, #8]
 800ed14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6a1b      	ldr	r3, [r3, #32]
 800ed1a:	f023 0210 	bic.w	r2, r3, #16
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	699b      	ldr	r3, [r3, #24]
 800ed26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6a1b      	ldr	r3, [r3, #32]
 800ed2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ed34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	031b      	lsls	r3, r3, #12
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ed46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	011b      	lsls	r3, r3, #4
 800ed4c:	693a      	ldr	r2, [r7, #16]
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	697a      	ldr	r2, [r7, #20]
 800ed56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	693a      	ldr	r2, [r7, #16]
 800ed5c:	621a      	str	r2, [r3, #32]
}
 800ed5e:	bf00      	nop
 800ed60:	371c      	adds	r7, #28
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr
	...

0800ed6c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b085      	sub	sp, #20
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	4b09      	ldr	r3, [pc, #36]	; (800eda4 <TIM_ITRx_SetConfig+0x38>)
 800ed80:	4013      	ands	r3, r2
 800ed82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed84:	683a      	ldr	r2, [r7, #0]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	f043 0307 	orr.w	r3, r3, #7
 800ed8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	609a      	str	r2, [r3, #8]
}
 800ed96:	bf00      	nop
 800ed98:	3714      	adds	r7, #20
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	ffcfff8f 	.word	0xffcfff8f

0800eda8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b087      	sub	sp, #28
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	021a      	lsls	r2, r3, #8
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	431a      	orrs	r2, r3
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	4313      	orrs	r3, r2
 800edd0:	697a      	ldr	r2, [r7, #20]
 800edd2:	4313      	orrs	r3, r2
 800edd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	697a      	ldr	r2, [r7, #20]
 800edda:	609a      	str	r2, [r3, #8]
}
 800eddc:	bf00      	nop
 800edde:	371c      	adds	r7, #28
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr

0800ede8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ede8:	b480      	push	{r7}
 800edea:	b087      	sub	sp, #28
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	f003 031f 	and.w	r3, r3, #31
 800edfa:	2201      	movs	r2, #1
 800edfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ee00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	6a1a      	ldr	r2, [r3, #32]
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	43db      	mvns	r3, r3
 800ee0a:	401a      	ands	r2, r3
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6a1a      	ldr	r2, [r3, #32]
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	f003 031f 	and.w	r3, r3, #31
 800ee1a:	6879      	ldr	r1, [r7, #4]
 800ee1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ee20:	431a      	orrs	r2, r3
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	621a      	str	r2, [r3, #32]
}
 800ee26:	bf00      	nop
 800ee28:	371c      	adds	r7, #28
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
	...

0800ee34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d101      	bne.n	800ee4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ee48:	2302      	movs	r3, #2
 800ee4a:	e077      	b.n	800ef3c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2202      	movs	r2, #2
 800ee58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a35      	ldr	r2, [pc, #212]	; (800ef48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d004      	beq.n	800ee80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4a34      	ldr	r2, [pc, #208]	; (800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d108      	bne.n	800ee92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ee86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	4313      	orrs	r3, r2
 800eea2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a25      	ldr	r2, [pc, #148]	; (800ef48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d02c      	beq.n	800ef10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eebe:	d027      	beq.n	800ef10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a22      	ldr	r2, [pc, #136]	; (800ef50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d022      	beq.n	800ef10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a21      	ldr	r2, [pc, #132]	; (800ef54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d01d      	beq.n	800ef10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4a1f      	ldr	r2, [pc, #124]	; (800ef58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d018      	beq.n	800ef10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a1a      	ldr	r2, [pc, #104]	; (800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d013      	beq.n	800ef10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a1b      	ldr	r2, [pc, #108]	; (800ef5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d00e      	beq.n	800ef10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a1a      	ldr	r2, [pc, #104]	; (800ef60 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d009      	beq.n	800ef10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a18      	ldr	r2, [pc, #96]	; (800ef64 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d004      	beq.n	800ef10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a17      	ldr	r2, [pc, #92]	; (800ef68 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d10c      	bne.n	800ef2a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2200      	movs	r2, #0
 800ef36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ef3a:	2300      	movs	r3, #0
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3714      	adds	r7, #20
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr
 800ef48:	40010000 	.word	0x40010000
 800ef4c:	40010400 	.word	0x40010400
 800ef50:	40000400 	.word	0x40000400
 800ef54:	40000800 	.word	0x40000800
 800ef58:	40000c00 	.word	0x40000c00
 800ef5c:	40001800 	.word	0x40001800
 800ef60:	40014000 	.word	0x40014000
 800ef64:	4000e000 	.word	0x4000e000
 800ef68:	4000e400 	.word	0x4000e400

0800ef6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ef76:	2300      	movs	r3, #0
 800ef78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d101      	bne.n	800ef88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ef84:	2302      	movs	r3, #2
 800ef86:	e087      	b.n	800f098 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	4313      	orrs	r3, r2
 800efaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	4313      	orrs	r3, r2
 800efb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4313      	orrs	r3, r2
 800efc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	4313      	orrs	r3, r2
 800efd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	695b      	ldr	r3, [r3, #20]
 800efe0:	4313      	orrs	r3, r2
 800efe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efee:	4313      	orrs	r3, r2
 800eff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	699b      	ldr	r3, [r3, #24]
 800effc:	041b      	lsls	r3, r3, #16
 800effe:	4313      	orrs	r3, r2
 800f000:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a27      	ldr	r2, [pc, #156]	; (800f0a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d004      	beq.n	800f016 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a25      	ldr	r2, [pc, #148]	; (800f0a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d106      	bne.n	800f024 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	69db      	ldr	r3, [r3, #28]
 800f020:	4313      	orrs	r3, r2
 800f022:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4a1e      	ldr	r2, [pc, #120]	; (800f0a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d004      	beq.n	800f038 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a1d      	ldr	r2, [pc, #116]	; (800f0a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d126      	bne.n	800f086 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f042:	051b      	lsls	r3, r3, #20
 800f044:	4313      	orrs	r3, r2
 800f046:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	6a1b      	ldr	r3, [r3, #32]
 800f052:	4313      	orrs	r3, r2
 800f054:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f060:	4313      	orrs	r3, r2
 800f062:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a0e      	ldr	r2, [pc, #56]	; (800f0a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d004      	beq.n	800f078 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4a0d      	ldr	r2, [pc, #52]	; (800f0a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d106      	bne.n	800f086 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f082:	4313      	orrs	r3, r2
 800f084:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f096:	2300      	movs	r3, #0
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr
 800f0a4:	40010000 	.word	0x40010000
 800f0a8:	40010400 	.word	0x40010400

0800f0ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b083      	sub	sp, #12
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f0b4:	bf00      	nop
 800f0b6:	370c      	adds	r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f0c8:	bf00      	nop
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f0dc:	bf00      	nop
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f0e8:	b084      	sub	sp, #16
 800f0ea:	b580      	push	{r7, lr}
 800f0ec:	b084      	sub	sp, #16
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
 800f0f2:	f107 001c 	add.w	r0, r7, #28
 800f0f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d120      	bne.n	800f142 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f104:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	68da      	ldr	r2, [r3, #12]
 800f110:	4b2a      	ldr	r3, [pc, #168]	; (800f1bc <USB_CoreInit+0xd4>)
 800f112:	4013      	ands	r3, r2
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f126:	2b01      	cmp	r3, #1
 800f128:	d105      	bne.n	800f136 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f001 fc04 	bl	8010944 <USB_CoreReset>
 800f13c:	4603      	mov	r3, r0
 800f13e:	73fb      	strb	r3, [r7, #15]
 800f140:	e01a      	b.n	800f178 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f001 fbf8 	bl	8010944 <USB_CoreReset>
 800f154:	4603      	mov	r3, r0
 800f156:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d106      	bne.n	800f16c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f162:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	639a      	str	r2, [r3, #56]	; 0x38
 800f16a:	e005      	b.n	800f178 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f170:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d116      	bne.n	800f1ac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f182:	b29a      	uxth	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f18c:	4b0c      	ldr	r3, [pc, #48]	; (800f1c0 <USB_CoreInit+0xd8>)
 800f18e:	4313      	orrs	r3, r2
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	f043 0206 	orr.w	r2, r3, #6
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	689b      	ldr	r3, [r3, #8]
 800f1a4:	f043 0220 	orr.w	r2, r3, #32
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f1b8:	b004      	add	sp, #16
 800f1ba:	4770      	bx	lr
 800f1bc:	ffbdffbf 	.word	0xffbdffbf
 800f1c0:	03ee0000 	.word	0x03ee0000

0800f1c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b087      	sub	sp, #28
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	2b02      	cmp	r3, #2
 800f1d6:	d165      	bne.n	800f2a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	4a41      	ldr	r2, [pc, #260]	; (800f2e0 <USB_SetTurnaroundTime+0x11c>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d906      	bls.n	800f1ee <USB_SetTurnaroundTime+0x2a>
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	4a40      	ldr	r2, [pc, #256]	; (800f2e4 <USB_SetTurnaroundTime+0x120>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d202      	bcs.n	800f1ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f1e8:	230f      	movs	r3, #15
 800f1ea:	617b      	str	r3, [r7, #20]
 800f1ec:	e062      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	4a3c      	ldr	r2, [pc, #240]	; (800f2e4 <USB_SetTurnaroundTime+0x120>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d306      	bcc.n	800f204 <USB_SetTurnaroundTime+0x40>
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	4a3b      	ldr	r2, [pc, #236]	; (800f2e8 <USB_SetTurnaroundTime+0x124>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d202      	bcs.n	800f204 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f1fe:	230e      	movs	r3, #14
 800f200:	617b      	str	r3, [r7, #20]
 800f202:	e057      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	4a38      	ldr	r2, [pc, #224]	; (800f2e8 <USB_SetTurnaroundTime+0x124>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d306      	bcc.n	800f21a <USB_SetTurnaroundTime+0x56>
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	4a37      	ldr	r2, [pc, #220]	; (800f2ec <USB_SetTurnaroundTime+0x128>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d202      	bcs.n	800f21a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f214:	230d      	movs	r3, #13
 800f216:	617b      	str	r3, [r7, #20]
 800f218:	e04c      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	4a33      	ldr	r2, [pc, #204]	; (800f2ec <USB_SetTurnaroundTime+0x128>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d306      	bcc.n	800f230 <USB_SetTurnaroundTime+0x6c>
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	4a32      	ldr	r2, [pc, #200]	; (800f2f0 <USB_SetTurnaroundTime+0x12c>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d802      	bhi.n	800f230 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f22a:	230c      	movs	r3, #12
 800f22c:	617b      	str	r3, [r7, #20]
 800f22e:	e041      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	4a2f      	ldr	r2, [pc, #188]	; (800f2f0 <USB_SetTurnaroundTime+0x12c>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d906      	bls.n	800f246 <USB_SetTurnaroundTime+0x82>
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	4a2e      	ldr	r2, [pc, #184]	; (800f2f4 <USB_SetTurnaroundTime+0x130>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d802      	bhi.n	800f246 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f240:	230b      	movs	r3, #11
 800f242:	617b      	str	r3, [r7, #20]
 800f244:	e036      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	4a2a      	ldr	r2, [pc, #168]	; (800f2f4 <USB_SetTurnaroundTime+0x130>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d906      	bls.n	800f25c <USB_SetTurnaroundTime+0x98>
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	4a29      	ldr	r2, [pc, #164]	; (800f2f8 <USB_SetTurnaroundTime+0x134>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d802      	bhi.n	800f25c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f256:	230a      	movs	r3, #10
 800f258:	617b      	str	r3, [r7, #20]
 800f25a:	e02b      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	4a26      	ldr	r2, [pc, #152]	; (800f2f8 <USB_SetTurnaroundTime+0x134>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d906      	bls.n	800f272 <USB_SetTurnaroundTime+0xae>
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	4a25      	ldr	r2, [pc, #148]	; (800f2fc <USB_SetTurnaroundTime+0x138>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d202      	bcs.n	800f272 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f26c:	2309      	movs	r3, #9
 800f26e:	617b      	str	r3, [r7, #20]
 800f270:	e020      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	4a21      	ldr	r2, [pc, #132]	; (800f2fc <USB_SetTurnaroundTime+0x138>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d306      	bcc.n	800f288 <USB_SetTurnaroundTime+0xc4>
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	4a20      	ldr	r2, [pc, #128]	; (800f300 <USB_SetTurnaroundTime+0x13c>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d802      	bhi.n	800f288 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f282:	2308      	movs	r3, #8
 800f284:	617b      	str	r3, [r7, #20]
 800f286:	e015      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	4a1d      	ldr	r2, [pc, #116]	; (800f300 <USB_SetTurnaroundTime+0x13c>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d906      	bls.n	800f29e <USB_SetTurnaroundTime+0xda>
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	4a1c      	ldr	r2, [pc, #112]	; (800f304 <USB_SetTurnaroundTime+0x140>)
 800f294:	4293      	cmp	r3, r2
 800f296:	d202      	bcs.n	800f29e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f298:	2307      	movs	r3, #7
 800f29a:	617b      	str	r3, [r7, #20]
 800f29c:	e00a      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f29e:	2306      	movs	r3, #6
 800f2a0:	617b      	str	r3, [r7, #20]
 800f2a2:	e007      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d102      	bne.n	800f2b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f2aa:	2309      	movs	r3, #9
 800f2ac:	617b      	str	r3, [r7, #20]
 800f2ae:	e001      	b.n	800f2b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f2b0:	2309      	movs	r3, #9
 800f2b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	68da      	ldr	r2, [r3, #12]
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	029b      	lsls	r3, r3, #10
 800f2c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f2cc:	431a      	orrs	r2, r3
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f2d2:	2300      	movs	r3, #0
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	371c      	adds	r7, #28
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr
 800f2e0:	00d8acbf 	.word	0x00d8acbf
 800f2e4:	00e4e1c0 	.word	0x00e4e1c0
 800f2e8:	00f42400 	.word	0x00f42400
 800f2ec:	01067380 	.word	0x01067380
 800f2f0:	011a499f 	.word	0x011a499f
 800f2f4:	01312cff 	.word	0x01312cff
 800f2f8:	014ca43f 	.word	0x014ca43f
 800f2fc:	016e3600 	.word	0x016e3600
 800f300:	01a6ab1f 	.word	0x01a6ab1f
 800f304:	01e84800 	.word	0x01e84800

0800f308 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	f043 0201 	orr.w	r2, r3, #1
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	370c      	adds	r7, #12
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr

0800f32a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f32a:	b480      	push	{r7}
 800f32c:	b083      	sub	sp, #12
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	f023 0201 	bic.w	r2, r3, #1
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f33e:	2300      	movs	r3, #0
}
 800f340:	4618      	mov	r0, r3
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	460b      	mov	r3, r1
 800f356:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f358:	2300      	movs	r3, #0
 800f35a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f368:	78fb      	ldrb	r3, [r7, #3]
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d115      	bne.n	800f39a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f37a:	2001      	movs	r0, #1
 800f37c:	f7f4 fa5a 	bl	8003834 <HAL_Delay>
      ms++;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	3301      	adds	r3, #1
 800f384:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f001 fa4b 	bl	8010822 <USB_GetMode>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d01e      	beq.n	800f3d0 <USB_SetCurrentMode+0x84>
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2b31      	cmp	r3, #49	; 0x31
 800f396:	d9f0      	bls.n	800f37a <USB_SetCurrentMode+0x2e>
 800f398:	e01a      	b.n	800f3d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f39a:	78fb      	ldrb	r3, [r7, #3]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d115      	bne.n	800f3cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f3ac:	2001      	movs	r0, #1
 800f3ae:	f7f4 fa41 	bl	8003834 <HAL_Delay>
      ms++;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f001 fa32 	bl	8010822 <USB_GetMode>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d005      	beq.n	800f3d0 <USB_SetCurrentMode+0x84>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b31      	cmp	r3, #49	; 0x31
 800f3c8:	d9f0      	bls.n	800f3ac <USB_SetCurrentMode+0x60>
 800f3ca:	e001      	b.n	800f3d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e005      	b.n	800f3dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2b32      	cmp	r3, #50	; 0x32
 800f3d4:	d101      	bne.n	800f3da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e000      	b.n	800f3dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f3da:	2300      	movs	r3, #0
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f3e4:	b084      	sub	sp, #16
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b086      	sub	sp, #24
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f3f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f3fe:	2300      	movs	r3, #0
 800f400:	613b      	str	r3, [r7, #16]
 800f402:	e009      	b.n	800f418 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f404:	687a      	ldr	r2, [r7, #4]
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	3340      	adds	r3, #64	; 0x40
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4413      	add	r3, r2
 800f40e:	2200      	movs	r2, #0
 800f410:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	3301      	adds	r3, #1
 800f416:	613b      	str	r3, [r7, #16]
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	2b0e      	cmp	r3, #14
 800f41c:	d9f2      	bls.n	800f404 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f420:	2b00      	cmp	r3, #0
 800f422:	d11c      	bne.n	800f45e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f432:	f043 0302 	orr.w	r3, r3, #2
 800f436:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f43c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	601a      	str	r2, [r3, #0]
 800f45c:	e005      	b.n	800f46a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f462:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f470:	461a      	mov	r2, r3
 800f472:	2300      	movs	r3, #0
 800f474:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f47c:	4619      	mov	r1, r3
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f484:	461a      	mov	r2, r3
 800f486:	680b      	ldr	r3, [r1, #0]
 800f488:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d10c      	bne.n	800f4aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f492:	2b00      	cmp	r3, #0
 800f494:	d104      	bne.n	800f4a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f496:	2100      	movs	r1, #0
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 f965 	bl	800f768 <USB_SetDevSpeed>
 800f49e:	e008      	b.n	800f4b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f4a0:	2101      	movs	r1, #1
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 f960 	bl	800f768 <USB_SetDevSpeed>
 800f4a8:	e003      	b.n	800f4b2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f4aa:	2103      	movs	r1, #3
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 f95b 	bl	800f768 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f4b2:	2110      	movs	r1, #16
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f000 f8f3 	bl	800f6a0 <USB_FlushTxFifo>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 f91f 	bl	800f708 <USB_FlushRxFifo>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d001      	beq.n	800f4d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4da:	461a      	mov	r2, r3
 800f4dc:	2300      	movs	r3, #0
 800f4de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	613b      	str	r3, [r7, #16]
 800f4fc:	e043      	b.n	800f586 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	015a      	lsls	r2, r3, #5
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	4413      	add	r3, r2
 800f506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f514:	d118      	bne.n	800f548 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d10a      	bne.n	800f532 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	015a      	lsls	r2, r3, #5
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	4413      	add	r3, r2
 800f524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f528:	461a      	mov	r2, r3
 800f52a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f52e:	6013      	str	r3, [r2, #0]
 800f530:	e013      	b.n	800f55a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	015a      	lsls	r2, r3, #5
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	4413      	add	r3, r2
 800f53a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f53e:	461a      	mov	r2, r3
 800f540:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f544:	6013      	str	r3, [r2, #0]
 800f546:	e008      	b.n	800f55a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	015a      	lsls	r2, r3, #5
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	4413      	add	r3, r2
 800f550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f554:	461a      	mov	r2, r3
 800f556:	2300      	movs	r3, #0
 800f558:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	015a      	lsls	r2, r3, #5
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	4413      	add	r3, r2
 800f562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f566:	461a      	mov	r2, r3
 800f568:	2300      	movs	r3, #0
 800f56a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	015a      	lsls	r2, r3, #5
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	4413      	add	r3, r2
 800f574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f578:	461a      	mov	r2, r3
 800f57a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f57e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	3301      	adds	r3, #1
 800f584:	613b      	str	r3, [r7, #16]
 800f586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f588:	693a      	ldr	r2, [r7, #16]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d3b7      	bcc.n	800f4fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f58e:	2300      	movs	r3, #0
 800f590:	613b      	str	r3, [r7, #16]
 800f592:	e043      	b.n	800f61c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	015a      	lsls	r2, r3, #5
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	4413      	add	r3, r2
 800f59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f5a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f5aa:	d118      	bne.n	800f5de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d10a      	bne.n	800f5c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	015a      	lsls	r2, r3, #5
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5be:	461a      	mov	r2, r3
 800f5c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f5c4:	6013      	str	r3, [r2, #0]
 800f5c6:	e013      	b.n	800f5f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	015a      	lsls	r2, r3, #5
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f5da:	6013      	str	r3, [r2, #0]
 800f5dc:	e008      	b.n	800f5f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	015a      	lsls	r2, r3, #5
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	015a      	lsls	r2, r3, #5
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	2300      	movs	r3, #0
 800f600:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	015a      	lsls	r2, r3, #5
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	4413      	add	r3, r2
 800f60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f60e:	461a      	mov	r2, r3
 800f610:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f614:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	3301      	adds	r3, #1
 800f61a:	613b      	str	r3, [r7, #16]
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	429a      	cmp	r2, r3
 800f622:	d3b7      	bcc.n	800f594 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f636:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f644:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d105      	bne.n	800f658 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	699b      	ldr	r3, [r3, #24]
 800f650:	f043 0210 	orr.w	r2, r3, #16
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	699a      	ldr	r2, [r3, #24]
 800f65c:	4b0e      	ldr	r3, [pc, #56]	; (800f698 <USB_DevInit+0x2b4>)
 800f65e:	4313      	orrs	r3, r2
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f666:	2b00      	cmp	r3, #0
 800f668:	d005      	beq.n	800f676 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	699b      	ldr	r3, [r3, #24]
 800f66e:	f043 0208 	orr.w	r2, r3, #8
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d105      	bne.n	800f688 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	699a      	ldr	r2, [r3, #24]
 800f680:	4b06      	ldr	r3, [pc, #24]	; (800f69c <USB_DevInit+0x2b8>)
 800f682:	4313      	orrs	r3, r2
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f688:	7dfb      	ldrb	r3, [r7, #23]
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3718      	adds	r7, #24
 800f68e:	46bd      	mov	sp, r7
 800f690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f694:	b004      	add	sp, #16
 800f696:	4770      	bx	lr
 800f698:	803c3800 	.word	0x803c3800
 800f69c:	40000004 	.word	0x40000004

0800f6a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b085      	sub	sp, #20
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	4a13      	ldr	r2, [pc, #76]	; (800f704 <USB_FlushTxFifo+0x64>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d901      	bls.n	800f6c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f6bc:	2303      	movs	r3, #3
 800f6be:	e01b      	b.n	800f6f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	daf2      	bge.n	800f6ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	019b      	lsls	r3, r3, #6
 800f6d0:	f043 0220 	orr.w	r2, r3, #32
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	4a08      	ldr	r2, [pc, #32]	; (800f704 <USB_FlushTxFifo+0x64>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d901      	bls.n	800f6ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	e006      	b.n	800f6f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	691b      	ldr	r3, [r3, #16]
 800f6ee:	f003 0320 	and.w	r3, r3, #32
 800f6f2:	2b20      	cmp	r3, #32
 800f6f4:	d0f0      	beq.n	800f6d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f6f6:	2300      	movs	r3, #0
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3714      	adds	r7, #20
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr
 800f704:	00030d40 	.word	0x00030d40

0800f708 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f708:	b480      	push	{r7}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f710:	2300      	movs	r3, #0
 800f712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	3301      	adds	r3, #1
 800f718:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	4a11      	ldr	r2, [pc, #68]	; (800f764 <USB_FlushRxFifo+0x5c>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d901      	bls.n	800f726 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f722:	2303      	movs	r3, #3
 800f724:	e018      	b.n	800f758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	691b      	ldr	r3, [r3, #16]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	daf2      	bge.n	800f714 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f72e:	2300      	movs	r3, #0
 800f730:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2210      	movs	r2, #16
 800f736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	3301      	adds	r3, #1
 800f73c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	4a08      	ldr	r2, [pc, #32]	; (800f764 <USB_FlushRxFifo+0x5c>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d901      	bls.n	800f74a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f746:	2303      	movs	r3, #3
 800f748:	e006      	b.n	800f758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	f003 0310 	and.w	r3, r3, #16
 800f752:	2b10      	cmp	r3, #16
 800f754:	d0f0      	beq.n	800f738 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3714      	adds	r7, #20
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr
 800f764:	00030d40 	.word	0x00030d40

0800f768 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f768:	b480      	push	{r7}
 800f76a:	b085      	sub	sp, #20
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	460b      	mov	r3, r1
 800f772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	78fb      	ldrb	r3, [r7, #3]
 800f782:	68f9      	ldr	r1, [r7, #12]
 800f784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f788:	4313      	orrs	r3, r2
 800f78a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f78c:	2300      	movs	r3, #0
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3714      	adds	r7, #20
 800f792:	46bd      	mov	sp, r7
 800f794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f798:	4770      	bx	lr

0800f79a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f79a:	b480      	push	{r7}
 800f79c:	b087      	sub	sp, #28
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7ac:	689b      	ldr	r3, [r3, #8]
 800f7ae:	f003 0306 	and.w	r3, r3, #6
 800f7b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d102      	bne.n	800f7c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	75fb      	strb	r3, [r7, #23]
 800f7be:	e00a      	b.n	800f7d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2b02      	cmp	r3, #2
 800f7c4:	d002      	beq.n	800f7cc <USB_GetDevSpeed+0x32>
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2b06      	cmp	r3, #6
 800f7ca:	d102      	bne.n	800f7d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f7cc:	2302      	movs	r3, #2
 800f7ce:	75fb      	strb	r3, [r7, #23]
 800f7d0:	e001      	b.n	800f7d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f7d2:	230f      	movs	r3, #15
 800f7d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	371c      	adds	r7, #28
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr

0800f7e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	785b      	ldrb	r3, [r3, #1]
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d139      	bne.n	800f874 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f806:	69da      	ldr	r2, [r3, #28]
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	f003 030f 	and.w	r3, r3, #15
 800f810:	2101      	movs	r1, #1
 800f812:	fa01 f303 	lsl.w	r3, r1, r3
 800f816:	b29b      	uxth	r3, r3
 800f818:	68f9      	ldr	r1, [r7, #12]
 800f81a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f81e:	4313      	orrs	r3, r2
 800f820:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	015a      	lsls	r2, r3, #5
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	4413      	add	r3, r2
 800f82a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f834:	2b00      	cmp	r3, #0
 800f836:	d153      	bne.n	800f8e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	015a      	lsls	r2, r3, #5
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	4413      	add	r3, r2
 800f840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	791b      	ldrb	r3, [r3, #4]
 800f852:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f854:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	059b      	lsls	r3, r3, #22
 800f85a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f85c:	431a      	orrs	r2, r3
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	0159      	lsls	r1, r3, #5
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	440b      	add	r3, r1
 800f866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f86a:	4619      	mov	r1, r3
 800f86c:	4b20      	ldr	r3, [pc, #128]	; (800f8f0 <USB_ActivateEndpoint+0x10c>)
 800f86e:	4313      	orrs	r3, r2
 800f870:	600b      	str	r3, [r1, #0]
 800f872:	e035      	b.n	800f8e0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f87a:	69da      	ldr	r2, [r3, #28]
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	f003 030f 	and.w	r3, r3, #15
 800f884:	2101      	movs	r1, #1
 800f886:	fa01 f303 	lsl.w	r3, r1, r3
 800f88a:	041b      	lsls	r3, r3, #16
 800f88c:	68f9      	ldr	r1, [r7, #12]
 800f88e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f892:	4313      	orrs	r3, r2
 800f894:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	015a      	lsls	r2, r3, #5
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	4413      	add	r3, r2
 800f89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d119      	bne.n	800f8e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	015a      	lsls	r2, r3, #5
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	68db      	ldr	r3, [r3, #12]
 800f8be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	791b      	ldrb	r3, [r3, #4]
 800f8c6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f8c8:	430b      	orrs	r3, r1
 800f8ca:	431a      	orrs	r2, r3
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	0159      	lsls	r1, r3, #5
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	440b      	add	r3, r1
 800f8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d8:	4619      	mov	r1, r3
 800f8da:	4b05      	ldr	r3, [pc, #20]	; (800f8f0 <USB_ActivateEndpoint+0x10c>)
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f8e0:	2300      	movs	r3, #0
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3714      	adds	r7, #20
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	10008000 	.word	0x10008000

0800f8f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	785b      	ldrb	r3, [r3, #1]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d161      	bne.n	800f9d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	015a      	lsls	r2, r3, #5
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	4413      	add	r3, r2
 800f918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f926:	d11f      	bne.n	800f968 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	015a      	lsls	r2, r3, #5
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	4413      	add	r3, r2
 800f930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	0151      	lsls	r1, r2, #5
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	440a      	add	r2, r1
 800f93e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f946:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	015a      	lsls	r2, r3, #5
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	4413      	add	r3, r2
 800f950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	68ba      	ldr	r2, [r7, #8]
 800f958:	0151      	lsls	r1, r2, #5
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	440a      	add	r2, r1
 800f95e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f966:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f96e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	f003 030f 	and.w	r3, r3, #15
 800f978:	2101      	movs	r1, #1
 800f97a:	fa01 f303 	lsl.w	r3, r1, r3
 800f97e:	b29b      	uxth	r3, r3
 800f980:	43db      	mvns	r3, r3
 800f982:	68f9      	ldr	r1, [r7, #12]
 800f984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f988:	4013      	ands	r3, r2
 800f98a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f992:	69da      	ldr	r2, [r3, #28]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	f003 030f 	and.w	r3, r3, #15
 800f99c:	2101      	movs	r1, #1
 800f99e:	fa01 f303 	lsl.w	r3, r1, r3
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	43db      	mvns	r3, r3
 800f9a6:	68f9      	ldr	r1, [r7, #12]
 800f9a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9ac:	4013      	ands	r3, r2
 800f9ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	015a      	lsls	r2, r3, #5
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	4413      	add	r3, r2
 800f9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	0159      	lsls	r1, r3, #5
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	440b      	add	r3, r1
 800f9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4b35      	ldr	r3, [pc, #212]	; (800faa4 <USB_DeactivateEndpoint+0x1b0>)
 800f9ce:	4013      	ands	r3, r2
 800f9d0:	600b      	str	r3, [r1, #0]
 800f9d2:	e060      	b.n	800fa96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	015a      	lsls	r2, r3, #5
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	4413      	add	r3, r2
 800f9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9ea:	d11f      	bne.n	800fa2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	015a      	lsls	r2, r3, #5
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	4413      	add	r3, r2
 800f9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	68ba      	ldr	r2, [r7, #8]
 800f9fc:	0151      	lsls	r1, r2, #5
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	440a      	add	r2, r1
 800fa02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fa0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	015a      	lsls	r2, r3, #5
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	4413      	add	r3, r2
 800fa14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	68ba      	ldr	r2, [r7, #8]
 800fa1c:	0151      	lsls	r1, r2, #5
 800fa1e:	68fa      	ldr	r2, [r7, #12]
 800fa20:	440a      	add	r2, r1
 800fa22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	f003 030f 	and.w	r3, r3, #15
 800fa3c:	2101      	movs	r1, #1
 800fa3e:	fa01 f303 	lsl.w	r3, r1, r3
 800fa42:	041b      	lsls	r3, r3, #16
 800fa44:	43db      	mvns	r3, r3
 800fa46:	68f9      	ldr	r1, [r7, #12]
 800fa48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa4c:	4013      	ands	r3, r2
 800fa4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa56:	69da      	ldr	r2, [r3, #28]
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	f003 030f 	and.w	r3, r3, #15
 800fa60:	2101      	movs	r1, #1
 800fa62:	fa01 f303 	lsl.w	r3, r1, r3
 800fa66:	041b      	lsls	r3, r3, #16
 800fa68:	43db      	mvns	r3, r3
 800fa6a:	68f9      	ldr	r1, [r7, #12]
 800fa6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa70:	4013      	ands	r3, r2
 800fa72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	015a      	lsls	r2, r3, #5
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	4413      	add	r3, r2
 800fa7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	0159      	lsls	r1, r3, #5
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	440b      	add	r3, r1
 800fa8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa8e:	4619      	mov	r1, r3
 800fa90:	4b05      	ldr	r3, [pc, #20]	; (800faa8 <USB_DeactivateEndpoint+0x1b4>)
 800fa92:	4013      	ands	r3, r2
 800fa94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fa96:	2300      	movs	r3, #0
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3714      	adds	r7, #20
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr
 800faa4:	ec337800 	.word	0xec337800
 800faa8:	eff37800 	.word	0xeff37800

0800faac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b08a      	sub	sp, #40	; 0x28
 800fab0:	af02      	add	r7, sp, #8
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	4613      	mov	r3, r2
 800fab8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	785b      	ldrb	r3, [r3, #1]
 800fac8:	2b01      	cmp	r3, #1
 800faca:	f040 8163 	bne.w	800fd94 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	699b      	ldr	r3, [r3, #24]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d132      	bne.n	800fb3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	015a      	lsls	r2, r3, #5
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	4413      	add	r3, r2
 800fade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fae2:	691a      	ldr	r2, [r3, #16]
 800fae4:	69bb      	ldr	r3, [r7, #24]
 800fae6:	0159      	lsls	r1, r3, #5
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	440b      	add	r3, r1
 800faec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faf0:	4619      	mov	r1, r3
 800faf2:	4ba5      	ldr	r3, [pc, #660]	; (800fd88 <USB_EPStartXfer+0x2dc>)
 800faf4:	4013      	ands	r3, r2
 800faf6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	015a      	lsls	r2, r3, #5
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	4413      	add	r3, r2
 800fb00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb04:	691b      	ldr	r3, [r3, #16]
 800fb06:	69ba      	ldr	r2, [r7, #24]
 800fb08:	0151      	lsls	r1, r2, #5
 800fb0a:	69fa      	ldr	r2, [r7, #28]
 800fb0c:	440a      	add	r2, r1
 800fb0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	015a      	lsls	r2, r3, #5
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	4413      	add	r3, r2
 800fb20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb24:	691a      	ldr	r2, [r3, #16]
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	0159      	lsls	r1, r3, #5
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	440b      	add	r3, r1
 800fb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb32:	4619      	mov	r1, r3
 800fb34:	4b95      	ldr	r3, [pc, #596]	; (800fd8c <USB_EPStartXfer+0x2e0>)
 800fb36:	4013      	ands	r3, r2
 800fb38:	610b      	str	r3, [r1, #16]
 800fb3a:	e074      	b.n	800fc26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fb3c:	69bb      	ldr	r3, [r7, #24]
 800fb3e:	015a      	lsls	r2, r3, #5
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	4413      	add	r3, r2
 800fb44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb48:	691a      	ldr	r2, [r3, #16]
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	0159      	lsls	r1, r3, #5
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	440b      	add	r3, r1
 800fb52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb56:	4619      	mov	r1, r3
 800fb58:	4b8c      	ldr	r3, [pc, #560]	; (800fd8c <USB_EPStartXfer+0x2e0>)
 800fb5a:	4013      	ands	r3, r2
 800fb5c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	015a      	lsls	r2, r3, #5
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	4413      	add	r3, r2
 800fb66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb6a:	691a      	ldr	r2, [r3, #16]
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	0159      	lsls	r1, r3, #5
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	440b      	add	r3, r1
 800fb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb78:	4619      	mov	r1, r3
 800fb7a:	4b83      	ldr	r3, [pc, #524]	; (800fd88 <USB_EPStartXfer+0x2dc>)
 800fb7c:	4013      	ands	r3, r2
 800fb7e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	015a      	lsls	r2, r3, #5
 800fb84:	69fb      	ldr	r3, [r7, #28]
 800fb86:	4413      	add	r3, r2
 800fb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb8c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	6999      	ldr	r1, [r3, #24]
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	440b      	add	r3, r1
 800fb98:	1e59      	subs	r1, r3, #1
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	68db      	ldr	r3, [r3, #12]
 800fb9e:	fbb1 f3f3 	udiv	r3, r1, r3
 800fba2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fba4:	4b7a      	ldr	r3, [pc, #488]	; (800fd90 <USB_EPStartXfer+0x2e4>)
 800fba6:	400b      	ands	r3, r1
 800fba8:	69b9      	ldr	r1, [r7, #24]
 800fbaa:	0148      	lsls	r0, r1, #5
 800fbac:	69f9      	ldr	r1, [r7, #28]
 800fbae:	4401      	add	r1, r0
 800fbb0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	015a      	lsls	r2, r3, #5
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc4:	691a      	ldr	r2, [r3, #16]
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	699b      	ldr	r3, [r3, #24]
 800fbca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fbce:	69b9      	ldr	r1, [r7, #24]
 800fbd0:	0148      	lsls	r0, r1, #5
 800fbd2:	69f9      	ldr	r1, [r7, #28]
 800fbd4:	4401      	add	r1, r0
 800fbd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	791b      	ldrb	r3, [r3, #4]
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	d11f      	bne.n	800fc26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	015a      	lsls	r2, r3, #5
 800fbea:	69fb      	ldr	r3, [r7, #28]
 800fbec:	4413      	add	r3, r2
 800fbee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbf2:	691b      	ldr	r3, [r3, #16]
 800fbf4:	69ba      	ldr	r2, [r7, #24]
 800fbf6:	0151      	lsls	r1, r2, #5
 800fbf8:	69fa      	ldr	r2, [r7, #28]
 800fbfa:	440a      	add	r2, r1
 800fbfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fc04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	015a      	lsls	r2, r3, #5
 800fc0a:	69fb      	ldr	r3, [r7, #28]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc12:	691b      	ldr	r3, [r3, #16]
 800fc14:	69ba      	ldr	r2, [r7, #24]
 800fc16:	0151      	lsls	r1, r2, #5
 800fc18:	69fa      	ldr	r2, [r7, #28]
 800fc1a:	440a      	add	r2, r1
 800fc1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fc24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800fc26:	79fb      	ldrb	r3, [r7, #7]
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d14b      	bne.n	800fcc4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	695b      	ldr	r3, [r3, #20]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d009      	beq.n	800fc48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	015a      	lsls	r2, r3, #5
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	4413      	add	r3, r2
 800fc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc40:	461a      	mov	r2, r3
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	695b      	ldr	r3, [r3, #20]
 800fc46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	791b      	ldrb	r3, [r3, #4]
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d128      	bne.n	800fca2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d110      	bne.n	800fc82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	015a      	lsls	r2, r3, #5
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	4413      	add	r3, r2
 800fc68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	69ba      	ldr	r2, [r7, #24]
 800fc70:	0151      	lsls	r1, r2, #5
 800fc72:	69fa      	ldr	r2, [r7, #28]
 800fc74:	440a      	add	r2, r1
 800fc76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fc7e:	6013      	str	r3, [r2, #0]
 800fc80:	e00f      	b.n	800fca2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fc82:	69bb      	ldr	r3, [r7, #24]
 800fc84:	015a      	lsls	r2, r3, #5
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	4413      	add	r3, r2
 800fc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	69ba      	ldr	r2, [r7, #24]
 800fc92:	0151      	lsls	r1, r2, #5
 800fc94:	69fa      	ldr	r2, [r7, #28]
 800fc96:	440a      	add	r2, r1
 800fc98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fca0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	015a      	lsls	r2, r3, #5
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	4413      	add	r3, r2
 800fcaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	69ba      	ldr	r2, [r7, #24]
 800fcb2:	0151      	lsls	r1, r2, #5
 800fcb4:	69fa      	ldr	r2, [r7, #28]
 800fcb6:	440a      	add	r2, r1
 800fcb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcc0:	6013      	str	r3, [r2, #0]
 800fcc2:	e137      	b.n	800ff34 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	015a      	lsls	r2, r3, #5
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	4413      	add	r3, r2
 800fccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	69ba      	ldr	r2, [r7, #24]
 800fcd4:	0151      	lsls	r1, r2, #5
 800fcd6:	69fa      	ldr	r2, [r7, #28]
 800fcd8:	440a      	add	r2, r1
 800fcda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fce2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	791b      	ldrb	r3, [r3, #4]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d015      	beq.n	800fd18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	699b      	ldr	r3, [r3, #24]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f000 811f 	beq.w	800ff34 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fcf6:	69fb      	ldr	r3, [r7, #28]
 800fcf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	f003 030f 	and.w	r3, r3, #15
 800fd06:	2101      	movs	r1, #1
 800fd08:	fa01 f303 	lsl.w	r3, r1, r3
 800fd0c:	69f9      	ldr	r1, [r7, #28]
 800fd0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd12:	4313      	orrs	r3, r2
 800fd14:	634b      	str	r3, [r1, #52]	; 0x34
 800fd16:	e10d      	b.n	800ff34 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fd18:	69fb      	ldr	r3, [r7, #28]
 800fd1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d110      	bne.n	800fd4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	015a      	lsls	r2, r3, #5
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	4413      	add	r3, r2
 800fd30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	69ba      	ldr	r2, [r7, #24]
 800fd38:	0151      	lsls	r1, r2, #5
 800fd3a:	69fa      	ldr	r2, [r7, #28]
 800fd3c:	440a      	add	r2, r1
 800fd3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fd46:	6013      	str	r3, [r2, #0]
 800fd48:	e00f      	b.n	800fd6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fd4a:	69bb      	ldr	r3, [r7, #24]
 800fd4c:	015a      	lsls	r2, r3, #5
 800fd4e:	69fb      	ldr	r3, [r7, #28]
 800fd50:	4413      	add	r3, r2
 800fd52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	69ba      	ldr	r2, [r7, #24]
 800fd5a:	0151      	lsls	r1, r2, #5
 800fd5c:	69fa      	ldr	r2, [r7, #28]
 800fd5e:	440a      	add	r2, r1
 800fd60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	6919      	ldr	r1, [r3, #16]
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	781a      	ldrb	r2, [r3, #0]
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	699b      	ldr	r3, [r3, #24]
 800fd76:	b298      	uxth	r0, r3
 800fd78:	79fb      	ldrb	r3, [r7, #7]
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	68f8      	ldr	r0, [r7, #12]
 800fd80:	f000 faea 	bl	8010358 <USB_WritePacket>
 800fd84:	e0d6      	b.n	800ff34 <USB_EPStartXfer+0x488>
 800fd86:	bf00      	nop
 800fd88:	e007ffff 	.word	0xe007ffff
 800fd8c:	fff80000 	.word	0xfff80000
 800fd90:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fd94:	69bb      	ldr	r3, [r7, #24]
 800fd96:	015a      	lsls	r2, r3, #5
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	4413      	add	r3, r2
 800fd9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda0:	691a      	ldr	r2, [r3, #16]
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	0159      	lsls	r1, r3, #5
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	440b      	add	r3, r1
 800fdaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdae:	4619      	mov	r1, r3
 800fdb0:	4b63      	ldr	r3, [pc, #396]	; (800ff40 <USB_EPStartXfer+0x494>)
 800fdb2:	4013      	ands	r3, r2
 800fdb4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fdb6:	69bb      	ldr	r3, [r7, #24]
 800fdb8:	015a      	lsls	r2, r3, #5
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc2:	691a      	ldr	r2, [r3, #16]
 800fdc4:	69bb      	ldr	r3, [r7, #24]
 800fdc6:	0159      	lsls	r1, r3, #5
 800fdc8:	69fb      	ldr	r3, [r7, #28]
 800fdca:	440b      	add	r3, r1
 800fdcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	4b5c      	ldr	r3, [pc, #368]	; (800ff44 <USB_EPStartXfer+0x498>)
 800fdd4:	4013      	ands	r3, r2
 800fdd6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	699b      	ldr	r3, [r3, #24]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d123      	bne.n	800fe28 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	015a      	lsls	r2, r3, #5
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	4413      	add	r3, r2
 800fde8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdec:	691a      	ldr	r2, [r3, #16]
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdf6:	69b9      	ldr	r1, [r7, #24]
 800fdf8:	0148      	lsls	r0, r1, #5
 800fdfa:	69f9      	ldr	r1, [r7, #28]
 800fdfc:	4401      	add	r1, r0
 800fdfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fe02:	4313      	orrs	r3, r2
 800fe04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	015a      	lsls	r2, r3, #5
 800fe0a:	69fb      	ldr	r3, [r7, #28]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	69ba      	ldr	r2, [r7, #24]
 800fe16:	0151      	lsls	r1, r2, #5
 800fe18:	69fa      	ldr	r2, [r7, #28]
 800fe1a:	440a      	add	r2, r1
 800fe1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe24:	6113      	str	r3, [r2, #16]
 800fe26:	e037      	b.n	800fe98 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	699a      	ldr	r2, [r3, #24]
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	68db      	ldr	r3, [r3, #12]
 800fe30:	4413      	add	r3, r2
 800fe32:	1e5a      	subs	r2, r3, #1
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe3c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	8afa      	ldrh	r2, [r7, #22]
 800fe44:	fb03 f202 	mul.w	r2, r3, r2
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	015a      	lsls	r2, r3, #5
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	4413      	add	r3, r2
 800fe54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe58:	691a      	ldr	r2, [r3, #16]
 800fe5a:	8afb      	ldrh	r3, [r7, #22]
 800fe5c:	04d9      	lsls	r1, r3, #19
 800fe5e:	4b3a      	ldr	r3, [pc, #232]	; (800ff48 <USB_EPStartXfer+0x49c>)
 800fe60:	400b      	ands	r3, r1
 800fe62:	69b9      	ldr	r1, [r7, #24]
 800fe64:	0148      	lsls	r0, r1, #5
 800fe66:	69f9      	ldr	r1, [r7, #28]
 800fe68:	4401      	add	r1, r0
 800fe6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800fe72:	69bb      	ldr	r3, [r7, #24]
 800fe74:	015a      	lsls	r2, r3, #5
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	4413      	add	r3, r2
 800fe7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe7e:	691a      	ldr	r2, [r3, #16]
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	69db      	ldr	r3, [r3, #28]
 800fe84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe88:	69b9      	ldr	r1, [r7, #24]
 800fe8a:	0148      	lsls	r0, r1, #5
 800fe8c:	69f9      	ldr	r1, [r7, #28]
 800fe8e:	4401      	add	r1, r0
 800fe90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fe94:	4313      	orrs	r3, r2
 800fe96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d10d      	bne.n	800feba <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	691b      	ldr	r3, [r3, #16]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d009      	beq.n	800feba <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	6919      	ldr	r1, [r3, #16]
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	015a      	lsls	r2, r3, #5
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	4413      	add	r3, r2
 800feb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feb6:	460a      	mov	r2, r1
 800feb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	791b      	ldrb	r3, [r3, #4]
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d128      	bne.n	800ff14 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d110      	bne.n	800fef4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	015a      	lsls	r2, r3, #5
 800fed6:	69fb      	ldr	r3, [r7, #28]
 800fed8:	4413      	add	r3, r2
 800feda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	69ba      	ldr	r2, [r7, #24]
 800fee2:	0151      	lsls	r1, r2, #5
 800fee4:	69fa      	ldr	r2, [r7, #28]
 800fee6:	440a      	add	r2, r1
 800fee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fef0:	6013      	str	r3, [r2, #0]
 800fef2:	e00f      	b.n	800ff14 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fef4:	69bb      	ldr	r3, [r7, #24]
 800fef6:	015a      	lsls	r2, r3, #5
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	4413      	add	r3, r2
 800fefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	69ba      	ldr	r2, [r7, #24]
 800ff04:	0151      	lsls	r1, r2, #5
 800ff06:	69fa      	ldr	r2, [r7, #28]
 800ff08:	440a      	add	r2, r1
 800ff0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ff14:	69bb      	ldr	r3, [r7, #24]
 800ff16:	015a      	lsls	r2, r3, #5
 800ff18:	69fb      	ldr	r3, [r7, #28]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	69ba      	ldr	r2, [r7, #24]
 800ff24:	0151      	lsls	r1, r2, #5
 800ff26:	69fa      	ldr	r2, [r7, #28]
 800ff28:	440a      	add	r2, r1
 800ff2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3720      	adds	r7, #32
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	fff80000 	.word	0xfff80000
 800ff44:	e007ffff 	.word	0xe007ffff
 800ff48:	1ff80000 	.word	0x1ff80000

0800ff4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b087      	sub	sp, #28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	4613      	mov	r3, r2
 800ff58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	785b      	ldrb	r3, [r3, #1]
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	f040 80ce 	bne.w	801010a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	699b      	ldr	r3, [r3, #24]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d132      	bne.n	800ffdc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	015a      	lsls	r2, r3, #5
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff82:	691a      	ldr	r2, [r3, #16]
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	0159      	lsls	r1, r3, #5
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	440b      	add	r3, r1
 800ff8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff90:	4619      	mov	r1, r3
 800ff92:	4b9a      	ldr	r3, [pc, #616]	; (80101fc <USB_EP0StartXfer+0x2b0>)
 800ff94:	4013      	ands	r3, r2
 800ff96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	015a      	lsls	r2, r3, #5
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	4413      	add	r3, r2
 800ffa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa4:	691b      	ldr	r3, [r3, #16]
 800ffa6:	693a      	ldr	r2, [r7, #16]
 800ffa8:	0151      	lsls	r1, r2, #5
 800ffaa:	697a      	ldr	r2, [r7, #20]
 800ffac:	440a      	add	r2, r1
 800ffae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ffb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	015a      	lsls	r2, r3, #5
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffc4:	691a      	ldr	r2, [r3, #16]
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	0159      	lsls	r1, r3, #5
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	440b      	add	r3, r1
 800ffce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	4b8a      	ldr	r3, [pc, #552]	; (8010200 <USB_EP0StartXfer+0x2b4>)
 800ffd6:	4013      	ands	r3, r2
 800ffd8:	610b      	str	r3, [r1, #16]
 800ffda:	e04e      	b.n	801007a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	015a      	lsls	r2, r3, #5
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffe8:	691a      	ldr	r2, [r3, #16]
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	0159      	lsls	r1, r3, #5
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	440b      	add	r3, r1
 800fff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fff6:	4619      	mov	r1, r3
 800fff8:	4b81      	ldr	r3, [pc, #516]	; (8010200 <USB_EP0StartXfer+0x2b4>)
 800fffa:	4013      	ands	r3, r2
 800fffc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	015a      	lsls	r2, r3, #5
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	4413      	add	r3, r2
 8010006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801000a:	691a      	ldr	r2, [r3, #16]
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	0159      	lsls	r1, r3, #5
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	440b      	add	r3, r1
 8010014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010018:	4619      	mov	r1, r3
 801001a:	4b78      	ldr	r3, [pc, #480]	; (80101fc <USB_EP0StartXfer+0x2b0>)
 801001c:	4013      	ands	r3, r2
 801001e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	699a      	ldr	r2, [r3, #24]
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	429a      	cmp	r2, r3
 801002a:	d903      	bls.n	8010034 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	68da      	ldr	r2, [r3, #12]
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	015a      	lsls	r2, r3, #5
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	4413      	add	r3, r2
 801003c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010040:	691b      	ldr	r3, [r3, #16]
 8010042:	693a      	ldr	r2, [r7, #16]
 8010044:	0151      	lsls	r1, r2, #5
 8010046:	697a      	ldr	r2, [r7, #20]
 8010048:	440a      	add	r2, r1
 801004a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801004e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	015a      	lsls	r2, r3, #5
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	4413      	add	r3, r2
 801005c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010060:	691a      	ldr	r2, [r3, #16]
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	699b      	ldr	r3, [r3, #24]
 8010066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801006a:	6939      	ldr	r1, [r7, #16]
 801006c:	0148      	lsls	r0, r1, #5
 801006e:	6979      	ldr	r1, [r7, #20]
 8010070:	4401      	add	r1, r0
 8010072:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010076:	4313      	orrs	r3, r2
 8010078:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801007a:	79fb      	ldrb	r3, [r7, #7]
 801007c:	2b01      	cmp	r3, #1
 801007e:	d11e      	bne.n	80100be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	695b      	ldr	r3, [r3, #20]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d009      	beq.n	801009c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	015a      	lsls	r2, r3, #5
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	4413      	add	r3, r2
 8010090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010094:	461a      	mov	r2, r3
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	695b      	ldr	r3, [r3, #20]
 801009a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	015a      	lsls	r2, r3, #5
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	4413      	add	r3, r2
 80100a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	693a      	ldr	r2, [r7, #16]
 80100ac:	0151      	lsls	r1, r2, #5
 80100ae:	697a      	ldr	r2, [r7, #20]
 80100b0:	440a      	add	r2, r1
 80100b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80100ba:	6013      	str	r3, [r2, #0]
 80100bc:	e097      	b.n	80101ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	015a      	lsls	r2, r3, #5
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	4413      	add	r3, r2
 80100c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	0151      	lsls	r1, r2, #5
 80100d0:	697a      	ldr	r2, [r7, #20]
 80100d2:	440a      	add	r2, r1
 80100d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80100dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	699b      	ldr	r3, [r3, #24]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	f000 8083 	beq.w	80101ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	f003 030f 	and.w	r3, r3, #15
 80100f8:	2101      	movs	r1, #1
 80100fa:	fa01 f303 	lsl.w	r3, r1, r3
 80100fe:	6979      	ldr	r1, [r7, #20]
 8010100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010104:	4313      	orrs	r3, r2
 8010106:	634b      	str	r3, [r1, #52]	; 0x34
 8010108:	e071      	b.n	80101ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	015a      	lsls	r2, r3, #5
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	4413      	add	r3, r2
 8010112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010116:	691a      	ldr	r2, [r3, #16]
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	0159      	lsls	r1, r3, #5
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	440b      	add	r3, r1
 8010120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010124:	4619      	mov	r1, r3
 8010126:	4b36      	ldr	r3, [pc, #216]	; (8010200 <USB_EP0StartXfer+0x2b4>)
 8010128:	4013      	ands	r3, r2
 801012a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	015a      	lsls	r2, r3, #5
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	4413      	add	r3, r2
 8010134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010138:	691a      	ldr	r2, [r3, #16]
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	0159      	lsls	r1, r3, #5
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	440b      	add	r3, r1
 8010142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010146:	4619      	mov	r1, r3
 8010148:	4b2c      	ldr	r3, [pc, #176]	; (80101fc <USB_EP0StartXfer+0x2b0>)
 801014a:	4013      	ands	r3, r2
 801014c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	699b      	ldr	r3, [r3, #24]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d003      	beq.n	801015e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	68da      	ldr	r2, [r3, #12]
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	68da      	ldr	r2, [r3, #12]
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	015a      	lsls	r2, r3, #5
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	4413      	add	r3, r2
 801016e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010172:	691b      	ldr	r3, [r3, #16]
 8010174:	693a      	ldr	r2, [r7, #16]
 8010176:	0151      	lsls	r1, r2, #5
 8010178:	697a      	ldr	r2, [r7, #20]
 801017a:	440a      	add	r2, r1
 801017c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010184:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	015a      	lsls	r2, r3, #5
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	4413      	add	r3, r2
 801018e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010192:	691a      	ldr	r2, [r3, #16]
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	69db      	ldr	r3, [r3, #28]
 8010198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801019c:	6939      	ldr	r1, [r7, #16]
 801019e:	0148      	lsls	r0, r1, #5
 80101a0:	6979      	ldr	r1, [r7, #20]
 80101a2:	4401      	add	r1, r0
 80101a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80101a8:	4313      	orrs	r3, r2
 80101aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80101ac:	79fb      	ldrb	r3, [r7, #7]
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d10d      	bne.n	80101ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	691b      	ldr	r3, [r3, #16]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d009      	beq.n	80101ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	6919      	ldr	r1, [r3, #16]
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	015a      	lsls	r2, r3, #5
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	4413      	add	r3, r2
 80101c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ca:	460a      	mov	r2, r1
 80101cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	015a      	lsls	r2, r3, #5
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	4413      	add	r3, r2
 80101d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	693a      	ldr	r2, [r7, #16]
 80101de:	0151      	lsls	r1, r2, #5
 80101e0:	697a      	ldr	r2, [r7, #20]
 80101e2:	440a      	add	r2, r1
 80101e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80101ee:	2300      	movs	r3, #0
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	371c      	adds	r7, #28
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr
 80101fc:	e007ffff 	.word	0xe007ffff
 8010200:	fff80000 	.word	0xfff80000

08010204 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010204:	b480      	push	{r7}
 8010206:	b087      	sub	sp, #28
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801020e:	2300      	movs	r3, #0
 8010210:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	785b      	ldrb	r3, [r3, #1]
 801021e:	2b01      	cmp	r3, #1
 8010220:	d14a      	bne.n	80102b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	015a      	lsls	r2, r3, #5
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	4413      	add	r3, r2
 801022c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801023a:	f040 8086 	bne.w	801034a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	015a      	lsls	r2, r3, #5
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	4413      	add	r3, r2
 8010248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	683a      	ldr	r2, [r7, #0]
 8010250:	7812      	ldrb	r2, [r2, #0]
 8010252:	0151      	lsls	r1, r2, #5
 8010254:	693a      	ldr	r2, [r7, #16]
 8010256:	440a      	add	r2, r1
 8010258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801025c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010260:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	015a      	lsls	r2, r3, #5
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	4413      	add	r3, r2
 801026c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	683a      	ldr	r2, [r7, #0]
 8010274:	7812      	ldrb	r2, [r2, #0]
 8010276:	0151      	lsls	r1, r2, #5
 8010278:	693a      	ldr	r2, [r7, #16]
 801027a:	440a      	add	r2, r1
 801027c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	3301      	adds	r3, #1
 801028a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f242 7210 	movw	r2, #10000	; 0x2710
 8010292:	4293      	cmp	r3, r2
 8010294:	d902      	bls.n	801029c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010296:	2301      	movs	r3, #1
 8010298:	75fb      	strb	r3, [r7, #23]
          break;
 801029a:	e056      	b.n	801034a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	015a      	lsls	r2, r3, #5
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	4413      	add	r3, r2
 80102a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80102b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102b4:	d0e7      	beq.n	8010286 <USB_EPStopXfer+0x82>
 80102b6:	e048      	b.n	801034a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	015a      	lsls	r2, r3, #5
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	4413      	add	r3, r2
 80102c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80102cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102d0:	d13b      	bne.n	801034a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	015a      	lsls	r2, r3, #5
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	4413      	add	r3, r2
 80102dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	683a      	ldr	r2, [r7, #0]
 80102e4:	7812      	ldrb	r2, [r2, #0]
 80102e6:	0151      	lsls	r1, r2, #5
 80102e8:	693a      	ldr	r2, [r7, #16]
 80102ea:	440a      	add	r2, r1
 80102ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80102f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	015a      	lsls	r2, r3, #5
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	4413      	add	r3, r2
 8010300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	683a      	ldr	r2, [r7, #0]
 8010308:	7812      	ldrb	r2, [r2, #0]
 801030a:	0151      	lsls	r1, r2, #5
 801030c:	693a      	ldr	r2, [r7, #16]
 801030e:	440a      	add	r2, r1
 8010310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010318:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	3301      	adds	r3, #1
 801031e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f242 7210 	movw	r2, #10000	; 0x2710
 8010326:	4293      	cmp	r3, r2
 8010328:	d902      	bls.n	8010330 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801032a:	2301      	movs	r3, #1
 801032c:	75fb      	strb	r3, [r7, #23]
          break;
 801032e:	e00c      	b.n	801034a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	015a      	lsls	r2, r3, #5
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	4413      	add	r3, r2
 801033a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010348:	d0e7      	beq.n	801031a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801034a:	7dfb      	ldrb	r3, [r7, #23]
}
 801034c:	4618      	mov	r0, r3
 801034e:	371c      	adds	r7, #28
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010358:	b480      	push	{r7}
 801035a:	b089      	sub	sp, #36	; 0x24
 801035c:	af00      	add	r7, sp, #0
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	60b9      	str	r1, [r7, #8]
 8010362:	4611      	mov	r1, r2
 8010364:	461a      	mov	r2, r3
 8010366:	460b      	mov	r3, r1
 8010368:	71fb      	strb	r3, [r7, #7]
 801036a:	4613      	mov	r3, r2
 801036c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010376:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801037a:	2b00      	cmp	r3, #0
 801037c:	d123      	bne.n	80103c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801037e:	88bb      	ldrh	r3, [r7, #4]
 8010380:	3303      	adds	r3, #3
 8010382:	089b      	lsrs	r3, r3, #2
 8010384:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010386:	2300      	movs	r3, #0
 8010388:	61bb      	str	r3, [r7, #24]
 801038a:	e018      	b.n	80103be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801038c:	79fb      	ldrb	r3, [r7, #7]
 801038e:	031a      	lsls	r2, r3, #12
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	4413      	add	r3, r2
 8010394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010398:	461a      	mov	r2, r3
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	3301      	adds	r3, #1
 80103a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	3301      	adds	r3, #1
 80103aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	3301      	adds	r3, #1
 80103b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	3301      	adds	r3, #1
 80103b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	3301      	adds	r3, #1
 80103bc:	61bb      	str	r3, [r7, #24]
 80103be:	69ba      	ldr	r2, [r7, #24]
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d3e2      	bcc.n	801038c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80103c6:	2300      	movs	r3, #0
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3724      	adds	r7, #36	; 0x24
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr

080103d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b08b      	sub	sp, #44	; 0x2c
 80103d8:	af00      	add	r7, sp, #0
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	60b9      	str	r1, [r7, #8]
 80103de:	4613      	mov	r3, r2
 80103e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80103ea:	88fb      	ldrh	r3, [r7, #6]
 80103ec:	089b      	lsrs	r3, r3, #2
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80103f2:	88fb      	ldrh	r3, [r7, #6]
 80103f4:	f003 0303 	and.w	r3, r3, #3
 80103f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80103fa:	2300      	movs	r3, #0
 80103fc:	623b      	str	r3, [r7, #32]
 80103fe:	e014      	b.n	801042a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010406:	681a      	ldr	r2, [r3, #0]
 8010408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040a:	601a      	str	r2, [r3, #0]
    pDest++;
 801040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040e:	3301      	adds	r3, #1
 8010410:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010414:	3301      	adds	r3, #1
 8010416:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041a:	3301      	adds	r3, #1
 801041c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010420:	3301      	adds	r3, #1
 8010422:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010424:	6a3b      	ldr	r3, [r7, #32]
 8010426:	3301      	adds	r3, #1
 8010428:	623b      	str	r3, [r7, #32]
 801042a:	6a3a      	ldr	r2, [r7, #32]
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	429a      	cmp	r2, r3
 8010430:	d3e6      	bcc.n	8010400 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010432:	8bfb      	ldrh	r3, [r7, #30]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d01e      	beq.n	8010476 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010438:	2300      	movs	r3, #0
 801043a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010442:	461a      	mov	r2, r3
 8010444:	f107 0310 	add.w	r3, r7, #16
 8010448:	6812      	ldr	r2, [r2, #0]
 801044a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801044c:	693a      	ldr	r2, [r7, #16]
 801044e:	6a3b      	ldr	r3, [r7, #32]
 8010450:	b2db      	uxtb	r3, r3
 8010452:	00db      	lsls	r3, r3, #3
 8010454:	fa22 f303 	lsr.w	r3, r2, r3
 8010458:	b2da      	uxtb	r2, r3
 801045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045c:	701a      	strb	r2, [r3, #0]
      i++;
 801045e:	6a3b      	ldr	r3, [r7, #32]
 8010460:	3301      	adds	r3, #1
 8010462:	623b      	str	r3, [r7, #32]
      pDest++;
 8010464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010466:	3301      	adds	r3, #1
 8010468:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801046a:	8bfb      	ldrh	r3, [r7, #30]
 801046c:	3b01      	subs	r3, #1
 801046e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010470:	8bfb      	ldrh	r3, [r7, #30]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1ea      	bne.n	801044c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010478:	4618      	mov	r0, r3
 801047a:	372c      	adds	r7, #44	; 0x2c
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr

08010484 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010484:	b480      	push	{r7}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	785b      	ldrb	r3, [r3, #1]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d12c      	bne.n	80104fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	015a      	lsls	r2, r3, #5
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	4413      	add	r3, r2
 80104a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	db12      	blt.n	80104d8 <USB_EPSetStall+0x54>
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d00f      	beq.n	80104d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	015a      	lsls	r2, r3, #5
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	4413      	add	r3, r2
 80104c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	68ba      	ldr	r2, [r7, #8]
 80104c8:	0151      	lsls	r1, r2, #5
 80104ca:	68fa      	ldr	r2, [r7, #12]
 80104cc:	440a      	add	r2, r1
 80104ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80104d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	015a      	lsls	r2, r3, #5
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	4413      	add	r3, r2
 80104e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	68ba      	ldr	r2, [r7, #8]
 80104e8:	0151      	lsls	r1, r2, #5
 80104ea:	68fa      	ldr	r2, [r7, #12]
 80104ec:	440a      	add	r2, r1
 80104ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80104f6:	6013      	str	r3, [r2, #0]
 80104f8:	e02b      	b.n	8010552 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	015a      	lsls	r2, r3, #5
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	4413      	add	r3, r2
 8010502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	db12      	blt.n	8010532 <USB_EPSetStall+0xae>
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d00f      	beq.n	8010532 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	015a      	lsls	r2, r3, #5
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	4413      	add	r3, r2
 801051a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	68ba      	ldr	r2, [r7, #8]
 8010522:	0151      	lsls	r1, r2, #5
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	440a      	add	r2, r1
 8010528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801052c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010530:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	015a      	lsls	r2, r3, #5
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	4413      	add	r3, r2
 801053a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	68ba      	ldr	r2, [r7, #8]
 8010542:	0151      	lsls	r1, r2, #5
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	440a      	add	r2, r1
 8010548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801054c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010550:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010552:	2300      	movs	r3, #0
}
 8010554:	4618      	mov	r0, r3
 8010556:	3714      	adds	r7, #20
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr

08010560 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010560:	b480      	push	{r7}
 8010562:	b085      	sub	sp, #20
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	785b      	ldrb	r3, [r3, #1]
 8010578:	2b01      	cmp	r3, #1
 801057a:	d128      	bne.n	80105ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	015a      	lsls	r2, r3, #5
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	4413      	add	r3, r2
 8010584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	0151      	lsls	r1, r2, #5
 801058e:	68fa      	ldr	r2, [r7, #12]
 8010590:	440a      	add	r2, r1
 8010592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010596:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801059a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	791b      	ldrb	r3, [r3, #4]
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d003      	beq.n	80105ac <USB_EPClearStall+0x4c>
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	791b      	ldrb	r3, [r3, #4]
 80105a8:	2b02      	cmp	r3, #2
 80105aa:	d138      	bne.n	801061e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	015a      	lsls	r2, r3, #5
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	4413      	add	r3, r2
 80105b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	0151      	lsls	r1, r2, #5
 80105be:	68fa      	ldr	r2, [r7, #12]
 80105c0:	440a      	add	r2, r1
 80105c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105ca:	6013      	str	r3, [r2, #0]
 80105cc:	e027      	b.n	801061e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	015a      	lsls	r2, r3, #5
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	4413      	add	r3, r2
 80105d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	68ba      	ldr	r2, [r7, #8]
 80105de:	0151      	lsls	r1, r2, #5
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	440a      	add	r2, r1
 80105e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80105ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	791b      	ldrb	r3, [r3, #4]
 80105f2:	2b03      	cmp	r3, #3
 80105f4:	d003      	beq.n	80105fe <USB_EPClearStall+0x9e>
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	791b      	ldrb	r3, [r3, #4]
 80105fa:	2b02      	cmp	r3, #2
 80105fc:	d10f      	bne.n	801061e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	015a      	lsls	r2, r3, #5
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	4413      	add	r3, r2
 8010606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	68ba      	ldr	r2, [r7, #8]
 801060e:	0151      	lsls	r1, r2, #5
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	440a      	add	r2, r1
 8010614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801061c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801061e:	2300      	movs	r3, #0
}
 8010620:	4618      	mov	r0, r3
 8010622:	3714      	adds	r7, #20
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801062c:	b480      	push	{r7}
 801062e:	b085      	sub	sp, #20
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	460b      	mov	r3, r1
 8010636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	68fa      	ldr	r2, [r7, #12]
 8010646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801064a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801064e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010656:	681a      	ldr	r2, [r3, #0]
 8010658:	78fb      	ldrb	r3, [r7, #3]
 801065a:	011b      	lsls	r3, r3, #4
 801065c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010660:	68f9      	ldr	r1, [r7, #12]
 8010662:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010666:	4313      	orrs	r3, r2
 8010668:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3714      	adds	r7, #20
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr

08010678 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010678:	b480      	push	{r7}
 801067a:	b085      	sub	sp, #20
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	68fa      	ldr	r2, [r7, #12]
 801068e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010692:	f023 0303 	bic.w	r3, r3, #3
 8010696:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80106a6:	f023 0302 	bic.w	r3, r3, #2
 80106aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80106ac:	2300      	movs	r3, #0
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3714      	adds	r7, #20
 80106b2:	46bd      	mov	sp, r7
 80106b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b8:	4770      	bx	lr

080106ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80106ba:	b480      	push	{r7}
 80106bc:	b085      	sub	sp, #20
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	68fa      	ldr	r2, [r7, #12]
 80106d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80106d4:	f023 0303 	bic.w	r3, r3, #3
 80106d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80106e8:	f043 0302 	orr.w	r3, r3, #2
 80106ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b085      	sub	sp, #20
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	695b      	ldr	r3, [r3, #20]
 8010708:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	68fa      	ldr	r2, [r7, #12]
 8010710:	4013      	ands	r3, r2
 8010712:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010714:	68fb      	ldr	r3, [r7, #12]
}
 8010716:	4618      	mov	r0, r3
 8010718:	3714      	adds	r7, #20
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010722:	b480      	push	{r7}
 8010724:	b085      	sub	sp, #20
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010734:	699b      	ldr	r3, [r3, #24]
 8010736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801073e:	69db      	ldr	r3, [r3, #28]
 8010740:	68ba      	ldr	r2, [r7, #8]
 8010742:	4013      	ands	r3, r2
 8010744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	0c1b      	lsrs	r3, r3, #16
}
 801074a:	4618      	mov	r0, r3
 801074c:	3714      	adds	r7, #20
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr

08010756 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010756:	b480      	push	{r7}
 8010758:	b085      	sub	sp, #20
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010768:	699b      	ldr	r3, [r3, #24]
 801076a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010772:	69db      	ldr	r3, [r3, #28]
 8010774:	68ba      	ldr	r2, [r7, #8]
 8010776:	4013      	ands	r3, r2
 8010778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	b29b      	uxth	r3, r3
}
 801077e:	4618      	mov	r0, r3
 8010780:	3714      	adds	r7, #20
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr

0801078a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801078a:	b480      	push	{r7}
 801078c:	b085      	sub	sp, #20
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
 8010792:	460b      	mov	r3, r1
 8010794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801079a:	78fb      	ldrb	r3, [r7, #3]
 801079c:	015a      	lsls	r2, r3, #5
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	4413      	add	r3, r2
 80107a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107b0:	695b      	ldr	r3, [r3, #20]
 80107b2:	68ba      	ldr	r2, [r7, #8]
 80107b4:	4013      	ands	r3, r2
 80107b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80107b8:	68bb      	ldr	r3, [r7, #8]
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3714      	adds	r7, #20
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr

080107c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80107c6:	b480      	push	{r7}
 80107c8:	b087      	sub	sp, #28
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]
 80107ce:	460b      	mov	r3, r1
 80107d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107dc:	691b      	ldr	r3, [r3, #16]
 80107de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80107ea:	78fb      	ldrb	r3, [r7, #3]
 80107ec:	f003 030f 	and.w	r3, r3, #15
 80107f0:	68fa      	ldr	r2, [r7, #12]
 80107f2:	fa22 f303 	lsr.w	r3, r2, r3
 80107f6:	01db      	lsls	r3, r3, #7
 80107f8:	b2db      	uxtb	r3, r3
 80107fa:	693a      	ldr	r2, [r7, #16]
 80107fc:	4313      	orrs	r3, r2
 80107fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010800:	78fb      	ldrb	r3, [r7, #3]
 8010802:	015a      	lsls	r2, r3, #5
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	4413      	add	r3, r2
 8010808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801080c:	689b      	ldr	r3, [r3, #8]
 801080e:	693a      	ldr	r2, [r7, #16]
 8010810:	4013      	ands	r3, r2
 8010812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010814:	68bb      	ldr	r3, [r7, #8]
}
 8010816:	4618      	mov	r0, r3
 8010818:	371c      	adds	r7, #28
 801081a:	46bd      	mov	sp, r7
 801081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010820:	4770      	bx	lr

08010822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010822:	b480      	push	{r7}
 8010824:	b083      	sub	sp, #12
 8010826:	af00      	add	r7, sp, #0
 8010828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	695b      	ldr	r3, [r3, #20]
 801082e:	f003 0301 	and.w	r3, r3, #1
}
 8010832:	4618      	mov	r0, r3
 8010834:	370c      	adds	r7, #12
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr
	...

08010840 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010840:	b480      	push	{r7}
 8010842:	b085      	sub	sp, #20
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801085a:	4619      	mov	r1, r3
 801085c:	4b09      	ldr	r3, [pc, #36]	; (8010884 <USB_ActivateSetup+0x44>)
 801085e:	4013      	ands	r3, r2
 8010860:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	68fa      	ldr	r2, [r7, #12]
 801086c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010876:	2300      	movs	r3, #0
}
 8010878:	4618      	mov	r0, r3
 801087a:	3714      	adds	r7, #20
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr
 8010884:	fffff800 	.word	0xfffff800

08010888 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010888:	b480      	push	{r7}
 801088a:	b087      	sub	sp, #28
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	460b      	mov	r3, r1
 8010892:	607a      	str	r2, [r7, #4]
 8010894:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	333c      	adds	r3, #60	; 0x3c
 801089e:	3304      	adds	r3, #4
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	4a26      	ldr	r2, [pc, #152]	; (8010940 <USB_EP0_OutStart+0xb8>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d90a      	bls.n	80108c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80108b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80108bc:	d101      	bne.n	80108c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	e037      	b.n	8010932 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108c8:	461a      	mov	r2, r3
 80108ca:	2300      	movs	r3, #0
 80108cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108d4:	691b      	ldr	r3, [r3, #16]
 80108d6:	697a      	ldr	r2, [r7, #20]
 80108d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80108e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108e8:	691b      	ldr	r3, [r3, #16]
 80108ea:	697a      	ldr	r2, [r7, #20]
 80108ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108f0:	f043 0318 	orr.w	r3, r3, #24
 80108f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108fc:	691b      	ldr	r3, [r3, #16]
 80108fe:	697a      	ldr	r2, [r7, #20]
 8010900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010904:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010908:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801090a:	7afb      	ldrb	r3, [r7, #11]
 801090c:	2b01      	cmp	r3, #1
 801090e:	d10f      	bne.n	8010930 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010916:	461a      	mov	r2, r3
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	697a      	ldr	r2, [r7, #20]
 8010926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801092a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801092e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010930:	2300      	movs	r3, #0
}
 8010932:	4618      	mov	r0, r3
 8010934:	371c      	adds	r7, #28
 8010936:	46bd      	mov	sp, r7
 8010938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093c:	4770      	bx	lr
 801093e:	bf00      	nop
 8010940:	4f54300a 	.word	0x4f54300a

08010944 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801094c:	2300      	movs	r3, #0
 801094e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	3301      	adds	r3, #1
 8010954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	4a13      	ldr	r2, [pc, #76]	; (80109a8 <USB_CoreReset+0x64>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d901      	bls.n	8010962 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801095e:	2303      	movs	r3, #3
 8010960:	e01b      	b.n	801099a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	691b      	ldr	r3, [r3, #16]
 8010966:	2b00      	cmp	r3, #0
 8010968:	daf2      	bge.n	8010950 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801096a:	2300      	movs	r3, #0
 801096c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	691b      	ldr	r3, [r3, #16]
 8010972:	f043 0201 	orr.w	r2, r3, #1
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	3301      	adds	r3, #1
 801097e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	4a09      	ldr	r2, [pc, #36]	; (80109a8 <USB_CoreReset+0x64>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d901      	bls.n	801098c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010988:	2303      	movs	r3, #3
 801098a:	e006      	b.n	801099a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	691b      	ldr	r3, [r3, #16]
 8010990:	f003 0301 	and.w	r3, r3, #1
 8010994:	2b01      	cmp	r3, #1
 8010996:	d0f0      	beq.n	801097a <USB_CoreReset+0x36>

  return HAL_OK;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3714      	adds	r7, #20
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	00030d40 	.word	0x00030d40

080109ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	460b      	mov	r3, r1
 80109b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80109b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80109bc:	f002 fc3a 	bl	8013234 <USBD_static_malloc>
 80109c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d109      	bne.n	80109dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	32b0      	adds	r2, #176	; 0xb0
 80109d2:	2100      	movs	r1, #0
 80109d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80109d8:	2302      	movs	r3, #2
 80109da:	e0d4      	b.n	8010b86 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80109dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80109e0:	2100      	movs	r1, #0
 80109e2:	68f8      	ldr	r0, [r7, #12]
 80109e4:	f002 fdda 	bl	801359c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	32b0      	adds	r2, #176	; 0xb0
 80109f2:	68f9      	ldr	r1, [r7, #12]
 80109f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	32b0      	adds	r2, #176	; 0xb0
 8010a02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	7c1b      	ldrb	r3, [r3, #16]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d138      	bne.n	8010a86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010a14:	4b5e      	ldr	r3, [pc, #376]	; (8010b90 <USBD_CDC_Init+0x1e4>)
 8010a16:	7819      	ldrb	r1, [r3, #0]
 8010a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a1c:	2202      	movs	r2, #2
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f002 fae5 	bl	8012fee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010a24:	4b5a      	ldr	r3, [pc, #360]	; (8010b90 <USBD_CDC_Init+0x1e4>)
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	f003 020f 	and.w	r2, r3, #15
 8010a2c:	6879      	ldr	r1, [r7, #4]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	4413      	add	r3, r2
 8010a34:	009b      	lsls	r3, r3, #2
 8010a36:	440b      	add	r3, r1
 8010a38:	3324      	adds	r3, #36	; 0x24
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010a3e:	4b55      	ldr	r3, [pc, #340]	; (8010b94 <USBD_CDC_Init+0x1e8>)
 8010a40:	7819      	ldrb	r1, [r3, #0]
 8010a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a46:	2202      	movs	r2, #2
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f002 fad0 	bl	8012fee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010a4e:	4b51      	ldr	r3, [pc, #324]	; (8010b94 <USBD_CDC_Init+0x1e8>)
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	f003 020f 	and.w	r2, r3, #15
 8010a56:	6879      	ldr	r1, [r7, #4]
 8010a58:	4613      	mov	r3, r2
 8010a5a:	009b      	lsls	r3, r3, #2
 8010a5c:	4413      	add	r3, r2
 8010a5e:	009b      	lsls	r3, r3, #2
 8010a60:	440b      	add	r3, r1
 8010a62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010a66:	2201      	movs	r2, #1
 8010a68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010a6a:	4b4b      	ldr	r3, [pc, #300]	; (8010b98 <USBD_CDC_Init+0x1ec>)
 8010a6c:	781b      	ldrb	r3, [r3, #0]
 8010a6e:	f003 020f 	and.w	r2, r3, #15
 8010a72:	6879      	ldr	r1, [r7, #4]
 8010a74:	4613      	mov	r3, r2
 8010a76:	009b      	lsls	r3, r3, #2
 8010a78:	4413      	add	r3, r2
 8010a7a:	009b      	lsls	r3, r3, #2
 8010a7c:	440b      	add	r3, r1
 8010a7e:	3326      	adds	r3, #38	; 0x26
 8010a80:	2210      	movs	r2, #16
 8010a82:	801a      	strh	r2, [r3, #0]
 8010a84:	e035      	b.n	8010af2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010a86:	4b42      	ldr	r3, [pc, #264]	; (8010b90 <USBD_CDC_Init+0x1e4>)
 8010a88:	7819      	ldrb	r1, [r3, #0]
 8010a8a:	2340      	movs	r3, #64	; 0x40
 8010a8c:	2202      	movs	r2, #2
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f002 faad 	bl	8012fee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010a94:	4b3e      	ldr	r3, [pc, #248]	; (8010b90 <USBD_CDC_Init+0x1e4>)
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	f003 020f 	and.w	r2, r3, #15
 8010a9c:	6879      	ldr	r1, [r7, #4]
 8010a9e:	4613      	mov	r3, r2
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	4413      	add	r3, r2
 8010aa4:	009b      	lsls	r3, r3, #2
 8010aa6:	440b      	add	r3, r1
 8010aa8:	3324      	adds	r3, #36	; 0x24
 8010aaa:	2201      	movs	r2, #1
 8010aac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010aae:	4b39      	ldr	r3, [pc, #228]	; (8010b94 <USBD_CDC_Init+0x1e8>)
 8010ab0:	7819      	ldrb	r1, [r3, #0]
 8010ab2:	2340      	movs	r3, #64	; 0x40
 8010ab4:	2202      	movs	r2, #2
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f002 fa99 	bl	8012fee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010abc:	4b35      	ldr	r3, [pc, #212]	; (8010b94 <USBD_CDC_Init+0x1e8>)
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	f003 020f 	and.w	r2, r3, #15
 8010ac4:	6879      	ldr	r1, [r7, #4]
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	4413      	add	r3, r2
 8010acc:	009b      	lsls	r3, r3, #2
 8010ace:	440b      	add	r3, r1
 8010ad0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010ad8:	4b2f      	ldr	r3, [pc, #188]	; (8010b98 <USBD_CDC_Init+0x1ec>)
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	f003 020f 	and.w	r2, r3, #15
 8010ae0:	6879      	ldr	r1, [r7, #4]
 8010ae2:	4613      	mov	r3, r2
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	4413      	add	r3, r2
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	440b      	add	r3, r1
 8010aec:	3326      	adds	r3, #38	; 0x26
 8010aee:	2210      	movs	r2, #16
 8010af0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010af2:	4b29      	ldr	r3, [pc, #164]	; (8010b98 <USBD_CDC_Init+0x1ec>)
 8010af4:	7819      	ldrb	r1, [r3, #0]
 8010af6:	2308      	movs	r3, #8
 8010af8:	2203      	movs	r2, #3
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f002 fa77 	bl	8012fee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010b00:	4b25      	ldr	r3, [pc, #148]	; (8010b98 <USBD_CDC_Init+0x1ec>)
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	f003 020f 	and.w	r2, r3, #15
 8010b08:	6879      	ldr	r1, [r7, #4]
 8010b0a:	4613      	mov	r3, r2
 8010b0c:	009b      	lsls	r3, r3, #2
 8010b0e:	4413      	add	r3, r2
 8010b10:	009b      	lsls	r3, r3, #2
 8010b12:	440b      	add	r3, r1
 8010b14:	3324      	adds	r3, #36	; 0x24
 8010b16:	2201      	movs	r2, #1
 8010b18:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	33b0      	adds	r3, #176	; 0xb0
 8010b2c:	009b      	lsls	r3, r3, #2
 8010b2e:	4413      	add	r3, r2
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2200      	movs	r2, #0
 8010b42:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d101      	bne.n	8010b54 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010b50:	2302      	movs	r3, #2
 8010b52:	e018      	b.n	8010b86 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	7c1b      	ldrb	r3, [r3, #16]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d10a      	bne.n	8010b72 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010b5c:	4b0d      	ldr	r3, [pc, #52]	; (8010b94 <USBD_CDC_Init+0x1e8>)
 8010b5e:	7819      	ldrb	r1, [r3, #0]
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f002 fb2e 	bl	80131cc <USBD_LL_PrepareReceive>
 8010b70:	e008      	b.n	8010b84 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010b72:	4b08      	ldr	r3, [pc, #32]	; (8010b94 <USBD_CDC_Init+0x1e8>)
 8010b74:	7819      	ldrb	r1, [r3, #0]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b7c:	2340      	movs	r3, #64	; 0x40
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f002 fb24 	bl	80131cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010b84:	2300      	movs	r3, #0
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3710      	adds	r7, #16
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	240010a3 	.word	0x240010a3
 8010b94:	240010a4 	.word	0x240010a4
 8010b98:	240010a5 	.word	0x240010a5

08010b9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010ba8:	4b3a      	ldr	r3, [pc, #232]	; (8010c94 <USBD_CDC_DeInit+0xf8>)
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	4619      	mov	r1, r3
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f002 fa43 	bl	801303a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010bb4:	4b37      	ldr	r3, [pc, #220]	; (8010c94 <USBD_CDC_DeInit+0xf8>)
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	f003 020f 	and.w	r2, r3, #15
 8010bbc:	6879      	ldr	r1, [r7, #4]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	4413      	add	r3, r2
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	440b      	add	r3, r1
 8010bc8:	3324      	adds	r3, #36	; 0x24
 8010bca:	2200      	movs	r2, #0
 8010bcc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010bce:	4b32      	ldr	r3, [pc, #200]	; (8010c98 <USBD_CDC_DeInit+0xfc>)
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f002 fa30 	bl	801303a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010bda:	4b2f      	ldr	r3, [pc, #188]	; (8010c98 <USBD_CDC_DeInit+0xfc>)
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	f003 020f 	and.w	r2, r3, #15
 8010be2:	6879      	ldr	r1, [r7, #4]
 8010be4:	4613      	mov	r3, r2
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	4413      	add	r3, r2
 8010bea:	009b      	lsls	r3, r3, #2
 8010bec:	440b      	add	r3, r1
 8010bee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010bf6:	4b29      	ldr	r3, [pc, #164]	; (8010c9c <USBD_CDC_DeInit+0x100>)
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f002 fa1c 	bl	801303a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010c02:	4b26      	ldr	r3, [pc, #152]	; (8010c9c <USBD_CDC_DeInit+0x100>)
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	f003 020f 	and.w	r2, r3, #15
 8010c0a:	6879      	ldr	r1, [r7, #4]
 8010c0c:	4613      	mov	r3, r2
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	4413      	add	r3, r2
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	440b      	add	r3, r1
 8010c16:	3324      	adds	r3, #36	; 0x24
 8010c18:	2200      	movs	r2, #0
 8010c1a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010c1c:	4b1f      	ldr	r3, [pc, #124]	; (8010c9c <USBD_CDC_DeInit+0x100>)
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	f003 020f 	and.w	r2, r3, #15
 8010c24:	6879      	ldr	r1, [r7, #4]
 8010c26:	4613      	mov	r3, r2
 8010c28:	009b      	lsls	r3, r3, #2
 8010c2a:	4413      	add	r3, r2
 8010c2c:	009b      	lsls	r3, r3, #2
 8010c2e:	440b      	add	r3, r1
 8010c30:	3326      	adds	r3, #38	; 0x26
 8010c32:	2200      	movs	r2, #0
 8010c34:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	32b0      	adds	r2, #176	; 0xb0
 8010c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d01f      	beq.n	8010c88 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	33b0      	adds	r3, #176	; 0xb0
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	4413      	add	r3, r2
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	32b0      	adds	r2, #176	; 0xb0
 8010c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f002 faf0 	bl	8013250 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	32b0      	adds	r2, #176	; 0xb0
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2200      	movs	r2, #0
 8010c84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010c88:	2300      	movs	r3, #0
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3708      	adds	r7, #8
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	240010a3 	.word	0x240010a3
 8010c98:	240010a4 	.word	0x240010a4
 8010c9c:	240010a5 	.word	0x240010a5

08010ca0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b086      	sub	sp, #24
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	32b0      	adds	r2, #176	; 0xb0
 8010cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cb8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d101      	bne.n	8010cd0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010ccc:	2303      	movs	r3, #3
 8010cce:	e0bf      	b.n	8010e50 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d050      	beq.n	8010d7e <USBD_CDC_Setup+0xde>
 8010cdc:	2b20      	cmp	r3, #32
 8010cde:	f040 80af 	bne.w	8010e40 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	88db      	ldrh	r3, [r3, #6]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d03a      	beq.n	8010d60 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	b25b      	sxtb	r3, r3
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	da1b      	bge.n	8010d2c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	33b0      	adds	r3, #176	; 0xb0
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	4413      	add	r3, r2
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	683a      	ldr	r2, [r7, #0]
 8010d08:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010d0a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010d0c:	683a      	ldr	r2, [r7, #0]
 8010d0e:	88d2      	ldrh	r2, [r2, #6]
 8010d10:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	88db      	ldrh	r3, [r3, #6]
 8010d16:	2b07      	cmp	r3, #7
 8010d18:	bf28      	it	cs
 8010d1a:	2307      	movcs	r3, #7
 8010d1c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	89fa      	ldrh	r2, [r7, #14]
 8010d22:	4619      	mov	r1, r3
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f001 fd5f 	bl	80127e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010d2a:	e090      	b.n	8010e4e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	785a      	ldrb	r2, [r3, #1]
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	88db      	ldrh	r3, [r3, #6]
 8010d3a:	2b3f      	cmp	r3, #63	; 0x3f
 8010d3c:	d803      	bhi.n	8010d46 <USBD_CDC_Setup+0xa6>
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	88db      	ldrh	r3, [r3, #6]
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	e000      	b.n	8010d48 <USBD_CDC_Setup+0xa8>
 8010d46:	2240      	movs	r2, #64	; 0x40
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010d4e:	6939      	ldr	r1, [r7, #16]
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010d56:	461a      	mov	r2, r3
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f001 fd71 	bl	8012840 <USBD_CtlPrepareRx>
      break;
 8010d5e:	e076      	b.n	8010e4e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010d66:	687a      	ldr	r2, [r7, #4]
 8010d68:	33b0      	adds	r3, #176	; 0xb0
 8010d6a:	009b      	lsls	r3, r3, #2
 8010d6c:	4413      	add	r3, r2
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	689b      	ldr	r3, [r3, #8]
 8010d72:	683a      	ldr	r2, [r7, #0]
 8010d74:	7850      	ldrb	r0, [r2, #1]
 8010d76:	2200      	movs	r2, #0
 8010d78:	6839      	ldr	r1, [r7, #0]
 8010d7a:	4798      	blx	r3
      break;
 8010d7c:	e067      	b.n	8010e4e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	785b      	ldrb	r3, [r3, #1]
 8010d82:	2b0b      	cmp	r3, #11
 8010d84:	d851      	bhi.n	8010e2a <USBD_CDC_Setup+0x18a>
 8010d86:	a201      	add	r2, pc, #4	; (adr r2, 8010d8c <USBD_CDC_Setup+0xec>)
 8010d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d8c:	08010dbd 	.word	0x08010dbd
 8010d90:	08010e39 	.word	0x08010e39
 8010d94:	08010e2b 	.word	0x08010e2b
 8010d98:	08010e2b 	.word	0x08010e2b
 8010d9c:	08010e2b 	.word	0x08010e2b
 8010da0:	08010e2b 	.word	0x08010e2b
 8010da4:	08010e2b 	.word	0x08010e2b
 8010da8:	08010e2b 	.word	0x08010e2b
 8010dac:	08010e2b 	.word	0x08010e2b
 8010db0:	08010e2b 	.word	0x08010e2b
 8010db4:	08010de7 	.word	0x08010de7
 8010db8:	08010e11 	.word	0x08010e11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	2b03      	cmp	r3, #3
 8010dc6:	d107      	bne.n	8010dd8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010dc8:	f107 030a 	add.w	r3, r7, #10
 8010dcc:	2202      	movs	r2, #2
 8010dce:	4619      	mov	r1, r3
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f001 fd09 	bl	80127e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010dd6:	e032      	b.n	8010e3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010dd8:	6839      	ldr	r1, [r7, #0]
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f001 fc93 	bl	8012706 <USBD_CtlError>
            ret = USBD_FAIL;
 8010de0:	2303      	movs	r3, #3
 8010de2:	75fb      	strb	r3, [r7, #23]
          break;
 8010de4:	e02b      	b.n	8010e3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	2b03      	cmp	r3, #3
 8010df0:	d107      	bne.n	8010e02 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010df2:	f107 030d 	add.w	r3, r7, #13
 8010df6:	2201      	movs	r2, #1
 8010df8:	4619      	mov	r1, r3
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f001 fcf4 	bl	80127e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010e00:	e01d      	b.n	8010e3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010e02:	6839      	ldr	r1, [r7, #0]
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f001 fc7e 	bl	8012706 <USBD_CtlError>
            ret = USBD_FAIL;
 8010e0a:	2303      	movs	r3, #3
 8010e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8010e0e:	e016      	b.n	8010e3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	2b03      	cmp	r3, #3
 8010e1a:	d00f      	beq.n	8010e3c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010e1c:	6839      	ldr	r1, [r7, #0]
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f001 fc71 	bl	8012706 <USBD_CtlError>
            ret = USBD_FAIL;
 8010e24:	2303      	movs	r3, #3
 8010e26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010e28:	e008      	b.n	8010e3c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010e2a:	6839      	ldr	r1, [r7, #0]
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f001 fc6a 	bl	8012706 <USBD_CtlError>
          ret = USBD_FAIL;
 8010e32:	2303      	movs	r3, #3
 8010e34:	75fb      	strb	r3, [r7, #23]
          break;
 8010e36:	e002      	b.n	8010e3e <USBD_CDC_Setup+0x19e>
          break;
 8010e38:	bf00      	nop
 8010e3a:	e008      	b.n	8010e4e <USBD_CDC_Setup+0x1ae>
          break;
 8010e3c:	bf00      	nop
      }
      break;
 8010e3e:	e006      	b.n	8010e4e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010e40:	6839      	ldr	r1, [r7, #0]
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f001 fc5f 	bl	8012706 <USBD_CtlError>
      ret = USBD_FAIL;
 8010e48:	2303      	movs	r3, #3
 8010e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8010e4c:	bf00      	nop
  }

  return (uint8_t)ret;
 8010e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3718      	adds	r7, #24
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	460b      	mov	r3, r1
 8010e62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	32b0      	adds	r2, #176	; 0xb0
 8010e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d101      	bne.n	8010e82 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010e7e:	2303      	movs	r3, #3
 8010e80:	e065      	b.n	8010f4e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	32b0      	adds	r2, #176	; 0xb0
 8010e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010e92:	78fb      	ldrb	r3, [r7, #3]
 8010e94:	f003 020f 	and.w	r2, r3, #15
 8010e98:	6879      	ldr	r1, [r7, #4]
 8010e9a:	4613      	mov	r3, r2
 8010e9c:	009b      	lsls	r3, r3, #2
 8010e9e:	4413      	add	r3, r2
 8010ea0:	009b      	lsls	r3, r3, #2
 8010ea2:	440b      	add	r3, r1
 8010ea4:	3318      	adds	r3, #24
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d02f      	beq.n	8010f0c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010eac:	78fb      	ldrb	r3, [r7, #3]
 8010eae:	f003 020f 	and.w	r2, r3, #15
 8010eb2:	6879      	ldr	r1, [r7, #4]
 8010eb4:	4613      	mov	r3, r2
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	4413      	add	r3, r2
 8010eba:	009b      	lsls	r3, r3, #2
 8010ebc:	440b      	add	r3, r1
 8010ebe:	3318      	adds	r3, #24
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	78fb      	ldrb	r3, [r7, #3]
 8010ec4:	f003 010f 	and.w	r1, r3, #15
 8010ec8:	68f8      	ldr	r0, [r7, #12]
 8010eca:	460b      	mov	r3, r1
 8010ecc:	00db      	lsls	r3, r3, #3
 8010ece:	440b      	add	r3, r1
 8010ed0:	009b      	lsls	r3, r3, #2
 8010ed2:	4403      	add	r3, r0
 8010ed4:	3348      	adds	r3, #72	; 0x48
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	fbb2 f1f3 	udiv	r1, r2, r3
 8010edc:	fb01 f303 	mul.w	r3, r1, r3
 8010ee0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d112      	bne.n	8010f0c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010ee6:	78fb      	ldrb	r3, [r7, #3]
 8010ee8:	f003 020f 	and.w	r2, r3, #15
 8010eec:	6879      	ldr	r1, [r7, #4]
 8010eee:	4613      	mov	r3, r2
 8010ef0:	009b      	lsls	r3, r3, #2
 8010ef2:	4413      	add	r3, r2
 8010ef4:	009b      	lsls	r3, r3, #2
 8010ef6:	440b      	add	r3, r1
 8010ef8:	3318      	adds	r3, #24
 8010efa:	2200      	movs	r2, #0
 8010efc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010efe:	78f9      	ldrb	r1, [r7, #3]
 8010f00:	2300      	movs	r3, #0
 8010f02:	2200      	movs	r2, #0
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f002 f940 	bl	801318a <USBD_LL_Transmit>
 8010f0a:	e01f      	b.n	8010f4c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	33b0      	adds	r3, #176	; 0xb0
 8010f1e:	009b      	lsls	r3, r3, #2
 8010f20:	4413      	add	r3, r2
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	691b      	ldr	r3, [r3, #16]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d010      	beq.n	8010f4c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010f30:	687a      	ldr	r2, [r7, #4]
 8010f32:	33b0      	adds	r3, #176	; 0xb0
 8010f34:	009b      	lsls	r3, r3, #2
 8010f36:	4413      	add	r3, r2
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	691b      	ldr	r3, [r3, #16]
 8010f3c:	68ba      	ldr	r2, [r7, #8]
 8010f3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010f42:	68ba      	ldr	r2, [r7, #8]
 8010f44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010f48:	78fa      	ldrb	r2, [r7, #3]
 8010f4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b084      	sub	sp, #16
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
 8010f5e:	460b      	mov	r3, r1
 8010f60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	32b0      	adds	r2, #176	; 0xb0
 8010f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	32b0      	adds	r2, #176	; 0xb0
 8010f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d101      	bne.n	8010f88 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010f84:	2303      	movs	r3, #3
 8010f86:	e01a      	b.n	8010fbe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010f88:	78fb      	ldrb	r3, [r7, #3]
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f002 f93e 	bl	801320e <USBD_LL_GetRxDataSize>
 8010f92:	4602      	mov	r2, r0
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	33b0      	adds	r3, #176	; 0xb0
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	4413      	add	r3, r2
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	68fa      	ldr	r2, [r7, #12]
 8010fae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010fb2:	68fa      	ldr	r2, [r7, #12]
 8010fb4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010fb8:	4611      	mov	r1, r2
 8010fba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010fbc:	2300      	movs	r3, #0
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3710      	adds	r7, #16
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}

08010fc6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010fc6:	b580      	push	{r7, lr}
 8010fc8:	b084      	sub	sp, #16
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	32b0      	adds	r2, #176	; 0xb0
 8010fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fdc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d101      	bne.n	8010fe8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	e025      	b.n	8011034 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	33b0      	adds	r3, #176	; 0xb0
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	4413      	add	r3, r2
 8010ff6:	685b      	ldr	r3, [r3, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d01a      	beq.n	8011032 <USBD_CDC_EP0_RxReady+0x6c>
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011002:	2bff      	cmp	r3, #255	; 0xff
 8011004:	d015      	beq.n	8011032 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	33b0      	adds	r3, #176	; 0xb0
 8011010:	009b      	lsls	r3, r3, #2
 8011012:	4413      	add	r3, r2
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	689b      	ldr	r3, [r3, #8]
 8011018:	68fa      	ldr	r2, [r7, #12]
 801101a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801101e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011020:	68fa      	ldr	r2, [r7, #12]
 8011022:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011026:	b292      	uxth	r2, r2
 8011028:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	22ff      	movs	r2, #255	; 0xff
 801102e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011032:	2300      	movs	r3, #0
}
 8011034:	4618      	mov	r0, r3
 8011036:	3710      	adds	r7, #16
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011044:	2182      	movs	r1, #130	; 0x82
 8011046:	4818      	ldr	r0, [pc, #96]	; (80110a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011048:	f000 fd25 	bl	8011a96 <USBD_GetEpDesc>
 801104c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801104e:	2101      	movs	r1, #1
 8011050:	4815      	ldr	r0, [pc, #84]	; (80110a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011052:	f000 fd20 	bl	8011a96 <USBD_GetEpDesc>
 8011056:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011058:	2181      	movs	r1, #129	; 0x81
 801105a:	4813      	ldr	r0, [pc, #76]	; (80110a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801105c:	f000 fd1b 	bl	8011a96 <USBD_GetEpDesc>
 8011060:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d002      	beq.n	801106e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	2210      	movs	r2, #16
 801106c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d006      	beq.n	8011082 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	2200      	movs	r2, #0
 8011078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801107c:	711a      	strb	r2, [r3, #4]
 801107e:	2200      	movs	r2, #0
 8011080:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d006      	beq.n	8011096 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2200      	movs	r2, #0
 801108c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011090:	711a      	strb	r2, [r3, #4]
 8011092:	2200      	movs	r2, #0
 8011094:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2243      	movs	r2, #67	; 0x43
 801109a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801109c:	4b02      	ldr	r3, [pc, #8]	; (80110a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3718      	adds	r7, #24
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	24001060 	.word	0x24001060

080110ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b086      	sub	sp, #24
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80110b4:	2182      	movs	r1, #130	; 0x82
 80110b6:	4818      	ldr	r0, [pc, #96]	; (8011118 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80110b8:	f000 fced 	bl	8011a96 <USBD_GetEpDesc>
 80110bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80110be:	2101      	movs	r1, #1
 80110c0:	4815      	ldr	r0, [pc, #84]	; (8011118 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80110c2:	f000 fce8 	bl	8011a96 <USBD_GetEpDesc>
 80110c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80110c8:	2181      	movs	r1, #129	; 0x81
 80110ca:	4813      	ldr	r0, [pc, #76]	; (8011118 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80110cc:	f000 fce3 	bl	8011a96 <USBD_GetEpDesc>
 80110d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	2210      	movs	r2, #16
 80110dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d006      	beq.n	80110f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	2200      	movs	r2, #0
 80110e8:	711a      	strb	r2, [r3, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	f042 0202 	orr.w	r2, r2, #2
 80110f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d006      	beq.n	8011106 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	2200      	movs	r2, #0
 80110fc:	711a      	strb	r2, [r3, #4]
 80110fe:	2200      	movs	r2, #0
 8011100:	f042 0202 	orr.w	r2, r2, #2
 8011104:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2243      	movs	r2, #67	; 0x43
 801110a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801110c:	4b02      	ldr	r3, [pc, #8]	; (8011118 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801110e:	4618      	mov	r0, r3
 8011110:	3718      	adds	r7, #24
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	24001060 	.word	0x24001060

0801111c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b086      	sub	sp, #24
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011124:	2182      	movs	r1, #130	; 0x82
 8011126:	4818      	ldr	r0, [pc, #96]	; (8011188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011128:	f000 fcb5 	bl	8011a96 <USBD_GetEpDesc>
 801112c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801112e:	2101      	movs	r1, #1
 8011130:	4815      	ldr	r0, [pc, #84]	; (8011188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011132:	f000 fcb0 	bl	8011a96 <USBD_GetEpDesc>
 8011136:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011138:	2181      	movs	r1, #129	; 0x81
 801113a:	4813      	ldr	r0, [pc, #76]	; (8011188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801113c:	f000 fcab 	bl	8011a96 <USBD_GetEpDesc>
 8011140:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d002      	beq.n	801114e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	2210      	movs	r2, #16
 801114c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d006      	beq.n	8011162 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	2200      	movs	r2, #0
 8011158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801115c:	711a      	strb	r2, [r3, #4]
 801115e:	2200      	movs	r2, #0
 8011160:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d006      	beq.n	8011176 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2200      	movs	r2, #0
 801116c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011170:	711a      	strb	r2, [r3, #4]
 8011172:	2200      	movs	r2, #0
 8011174:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2243      	movs	r2, #67	; 0x43
 801117a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801117c:	4b02      	ldr	r3, [pc, #8]	; (8011188 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801117e:	4618      	mov	r0, r3
 8011180:	3718      	adds	r7, #24
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	24001060 	.word	0x24001060

0801118c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801118c:	b480      	push	{r7}
 801118e:	b083      	sub	sp, #12
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	220a      	movs	r2, #10
 8011198:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801119a:	4b03      	ldr	r3, [pc, #12]	; (80111a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801119c:	4618      	mov	r0, r3
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr
 80111a8:	2400101c 	.word	0x2400101c

080111ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d101      	bne.n	80111c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80111bc:	2303      	movs	r3, #3
 80111be:	e009      	b.n	80111d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	33b0      	adds	r3, #176	; 0xb0
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	4413      	add	r3, r2
 80111ce:	683a      	ldr	r2, [r7, #0]
 80111d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80111d2:	2300      	movs	r3, #0
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b087      	sub	sp, #28
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	32b0      	adds	r2, #176	; 0xb0
 80111f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d101      	bne.n	8011206 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011202:	2303      	movs	r3, #3
 8011204:	e008      	b.n	8011218 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	68ba      	ldr	r2, [r7, #8]
 801120a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011216:	2300      	movs	r3, #0
}
 8011218:	4618      	mov	r0, r3
 801121a:	371c      	adds	r7, #28
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr

08011224 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011224:	b480      	push	{r7}
 8011226:	b085      	sub	sp, #20
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	32b0      	adds	r2, #176	; 0xb0
 8011238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801123c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d101      	bne.n	8011248 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011244:	2303      	movs	r3, #3
 8011246:	e004      	b.n	8011252 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	683a      	ldr	r2, [r7, #0]
 801124c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3714      	adds	r7, #20
 8011256:	46bd      	mov	sp, r7
 8011258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125c:	4770      	bx	lr
	...

08011260 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	32b0      	adds	r2, #176	; 0xb0
 8011272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011276:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	32b0      	adds	r2, #176	; 0xb0
 8011282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d101      	bne.n	801128e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801128a:	2303      	movs	r3, #3
 801128c:	e018      	b.n	80112c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	7c1b      	ldrb	r3, [r3, #16]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d10a      	bne.n	80112ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011296:	4b0c      	ldr	r3, [pc, #48]	; (80112c8 <USBD_CDC_ReceivePacket+0x68>)
 8011298:	7819      	ldrb	r1, [r3, #0]
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80112a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f001 ff91 	bl	80131cc <USBD_LL_PrepareReceive>
 80112aa:	e008      	b.n	80112be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80112ac:	4b06      	ldr	r3, [pc, #24]	; (80112c8 <USBD_CDC_ReceivePacket+0x68>)
 80112ae:	7819      	ldrb	r1, [r3, #0]
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80112b6:	2340      	movs	r3, #64	; 0x40
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f001 ff87 	bl	80131cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80112be:	2300      	movs	r3, #0
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	240010a4 	.word	0x240010a4

080112cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b086      	sub	sp, #24
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	60f8      	str	r0, [r7, #12]
 80112d4:	60b9      	str	r1, [r7, #8]
 80112d6:	4613      	mov	r3, r2
 80112d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d10a      	bne.n	80112f6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80112e0:	4817      	ldr	r0, [pc, #92]	; (8011340 <USBD_Init+0x74>)
 80112e2:	f002 f963 	bl	80135ac <iprintf>
 80112e6:	4817      	ldr	r0, [pc, #92]	; (8011344 <USBD_Init+0x78>)
 80112e8:	f002 f960 	bl	80135ac <iprintf>
 80112ec:	200a      	movs	r0, #10
 80112ee:	f002 f975 	bl	80135dc <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80112f2:	2303      	movs	r3, #3
 80112f4:	e01f      	b.n	8011336 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2200      	movs	r2, #0
 80112fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	2200      	movs	r2, #0
 8011302:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2200      	movs	r2, #0
 801130a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d003      	beq.n	801131c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	68ba      	ldr	r2, [r7, #8]
 8011318:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2201      	movs	r2, #1
 8011320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	79fa      	ldrb	r2, [r7, #7]
 8011328:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801132a:	68f8      	ldr	r0, [r7, #12]
 801132c:	f001 fdf2 	bl	8012f14 <USBD_LL_Init>
 8011330:	4603      	mov	r3, r0
 8011332:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011334:	7dfb      	ldrb	r3, [r7, #23]
}
 8011336:	4618      	mov	r0, r3
 8011338:	3718      	adds	r7, #24
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
 801133e:	bf00      	nop
 8011340:	0801460c 	.word	0x0801460c
 8011344:	08014614 	.word	0x08014614

08011348 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011352:	2300      	movs	r3, #0
 8011354:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d10a      	bne.n	8011372 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 801135c:	481a      	ldr	r0, [pc, #104]	; (80113c8 <USBD_RegisterClass+0x80>)
 801135e:	f002 f925 	bl	80135ac <iprintf>
 8011362:	481a      	ldr	r0, [pc, #104]	; (80113cc <USBD_RegisterClass+0x84>)
 8011364:	f002 f922 	bl	80135ac <iprintf>
 8011368:	200a      	movs	r0, #10
 801136a:	f002 f937 	bl	80135dc <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801136e:	2303      	movs	r3, #3
 8011370:	e025      	b.n	80113be <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	683a      	ldr	r2, [r7, #0]
 8011376:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	32ae      	adds	r2, #174	; 0xae
 8011384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00f      	beq.n	80113ae <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	32ae      	adds	r2, #174	; 0xae
 8011398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801139e:	f107 020e 	add.w	r2, r7, #14
 80113a2:	4610      	mov	r0, r2
 80113a4:	4798      	blx	r3
 80113a6:	4602      	mov	r2, r0
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80113b4:	1c5a      	adds	r2, r3, #1
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80113bc:	2300      	movs	r3, #0
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3710      	adds	r7, #16
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	0801460c 	.word	0x0801460c
 80113cc:	0801462c 	.word	0x0801462c

080113d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f001 fded 	bl	8012fb8 <USBD_LL_Start>
 80113de:	4603      	mov	r3, r0
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3708      	adds	r7, #8
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80113f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	370c      	adds	r7, #12
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr

080113fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113fe:	b580      	push	{r7, lr}
 8011400:	b084      	sub	sp, #16
 8011402:	af00      	add	r7, sp, #0
 8011404:	6078      	str	r0, [r7, #4]
 8011406:	460b      	mov	r3, r1
 8011408:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801140a:	2300      	movs	r3, #0
 801140c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011414:	2b00      	cmp	r3, #0
 8011416:	d009      	beq.n	801142c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	78fa      	ldrb	r2, [r7, #3]
 8011422:	4611      	mov	r1, r2
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	4798      	blx	r3
 8011428:	4603      	mov	r3, r0
 801142a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801142c:	7bfb      	ldrb	r3, [r7, #15]
}
 801142e:	4618      	mov	r0, r3
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}

08011436 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011436:	b580      	push	{r7, lr}
 8011438:	b084      	sub	sp, #16
 801143a:	af00      	add	r7, sp, #0
 801143c:	6078      	str	r0, [r7, #4]
 801143e:	460b      	mov	r3, r1
 8011440:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011442:	2300      	movs	r3, #0
 8011444:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	78fa      	ldrb	r2, [r7, #3]
 8011450:	4611      	mov	r1, r2
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	4798      	blx	r3
 8011456:	4603      	mov	r3, r0
 8011458:	2b00      	cmp	r3, #0
 801145a:	d001      	beq.n	8011460 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801145c:	2303      	movs	r3, #3
 801145e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011460:	7bfb      	ldrb	r3, [r7, #15]
}
 8011462:	4618      	mov	r0, r3
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801146a:	b580      	push	{r7, lr}
 801146c:	b084      	sub	sp, #16
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801147a:	6839      	ldr	r1, [r7, #0]
 801147c:	4618      	mov	r0, r3
 801147e:	f001 f908 	bl	8012692 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2201      	movs	r2, #1
 8011486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011490:	461a      	mov	r2, r3
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801149e:	f003 031f 	and.w	r3, r3, #31
 80114a2:	2b02      	cmp	r3, #2
 80114a4:	d01a      	beq.n	80114dc <USBD_LL_SetupStage+0x72>
 80114a6:	2b02      	cmp	r3, #2
 80114a8:	d822      	bhi.n	80114f0 <USBD_LL_SetupStage+0x86>
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d002      	beq.n	80114b4 <USBD_LL_SetupStage+0x4a>
 80114ae:	2b01      	cmp	r3, #1
 80114b0:	d00a      	beq.n	80114c8 <USBD_LL_SetupStage+0x5e>
 80114b2:	e01d      	b.n	80114f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80114ba:	4619      	mov	r1, r3
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f000 fb5f 	bl	8011b80 <USBD_StdDevReq>
 80114c2:	4603      	mov	r3, r0
 80114c4:	73fb      	strb	r3, [r7, #15]
      break;
 80114c6:	e020      	b.n	801150a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80114ce:	4619      	mov	r1, r3
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f000 fbc7 	bl	8011c64 <USBD_StdItfReq>
 80114d6:	4603      	mov	r3, r0
 80114d8:	73fb      	strb	r3, [r7, #15]
      break;
 80114da:	e016      	b.n	801150a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80114e2:	4619      	mov	r1, r3
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 fc29 	bl	8011d3c <USBD_StdEPReq>
 80114ea:	4603      	mov	r3, r0
 80114ec:	73fb      	strb	r3, [r7, #15]
      break;
 80114ee:	e00c      	b.n	801150a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80114f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	4619      	mov	r1, r3
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f001 fdba 	bl	8013078 <USBD_LL_StallEP>
 8011504:	4603      	mov	r3, r0
 8011506:	73fb      	strb	r3, [r7, #15]
      break;
 8011508:	bf00      	nop
  }

  return ret;
 801150a:	7bfb      	ldrb	r3, [r7, #15]
}
 801150c:	4618      	mov	r0, r3
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b086      	sub	sp, #24
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	460b      	mov	r3, r1
 801151e:	607a      	str	r2, [r7, #4]
 8011520:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011522:	2300      	movs	r3, #0
 8011524:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011526:	7afb      	ldrb	r3, [r7, #11]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d16e      	bne.n	801160a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011532:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801153a:	2b03      	cmp	r3, #3
 801153c:	f040 8098 	bne.w	8011670 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	689a      	ldr	r2, [r3, #8]
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	429a      	cmp	r2, r3
 801154a:	d913      	bls.n	8011574 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	689a      	ldr	r2, [r3, #8]
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	1ad2      	subs	r2, r2, r3
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	68da      	ldr	r2, [r3, #12]
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	689b      	ldr	r3, [r3, #8]
 8011562:	4293      	cmp	r3, r2
 8011564:	bf28      	it	cs
 8011566:	4613      	movcs	r3, r2
 8011568:	461a      	mov	r2, r3
 801156a:	6879      	ldr	r1, [r7, #4]
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	f001 f984 	bl	801287a <USBD_CtlContinueRx>
 8011572:	e07d      	b.n	8011670 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801157a:	f003 031f 	and.w	r3, r3, #31
 801157e:	2b02      	cmp	r3, #2
 8011580:	d014      	beq.n	80115ac <USBD_LL_DataOutStage+0x98>
 8011582:	2b02      	cmp	r3, #2
 8011584:	d81d      	bhi.n	80115c2 <USBD_LL_DataOutStage+0xae>
 8011586:	2b00      	cmp	r3, #0
 8011588:	d002      	beq.n	8011590 <USBD_LL_DataOutStage+0x7c>
 801158a:	2b01      	cmp	r3, #1
 801158c:	d003      	beq.n	8011596 <USBD_LL_DataOutStage+0x82>
 801158e:	e018      	b.n	80115c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011590:	2300      	movs	r3, #0
 8011592:	75bb      	strb	r3, [r7, #22]
            break;
 8011594:	e018      	b.n	80115c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801159c:	b2db      	uxtb	r3, r3
 801159e:	4619      	mov	r1, r3
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	f000 fa5e 	bl	8011a62 <USBD_CoreFindIF>
 80115a6:	4603      	mov	r3, r0
 80115a8:	75bb      	strb	r3, [r7, #22]
            break;
 80115aa:	e00d      	b.n	80115c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80115b2:	b2db      	uxtb	r3, r3
 80115b4:	4619      	mov	r1, r3
 80115b6:	68f8      	ldr	r0, [r7, #12]
 80115b8:	f000 fa60 	bl	8011a7c <USBD_CoreFindEP>
 80115bc:	4603      	mov	r3, r0
 80115be:	75bb      	strb	r3, [r7, #22]
            break;
 80115c0:	e002      	b.n	80115c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80115c2:	2300      	movs	r3, #0
 80115c4:	75bb      	strb	r3, [r7, #22]
            break;
 80115c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80115c8:	7dbb      	ldrb	r3, [r7, #22]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d119      	bne.n	8011602 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	2b03      	cmp	r3, #3
 80115d8:	d113      	bne.n	8011602 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80115da:	7dba      	ldrb	r2, [r7, #22]
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	32ae      	adds	r2, #174	; 0xae
 80115e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115e4:	691b      	ldr	r3, [r3, #16]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d00b      	beq.n	8011602 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80115ea:	7dba      	ldrb	r2, [r7, #22]
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80115f2:	7dba      	ldrb	r2, [r7, #22]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	32ae      	adds	r2, #174	; 0xae
 80115f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115fc:	691b      	ldr	r3, [r3, #16]
 80115fe:	68f8      	ldr	r0, [r7, #12]
 8011600:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	f001 f94a 	bl	801289c <USBD_CtlSendStatus>
 8011608:	e032      	b.n	8011670 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801160a:	7afb      	ldrb	r3, [r7, #11]
 801160c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011610:	b2db      	uxtb	r3, r3
 8011612:	4619      	mov	r1, r3
 8011614:	68f8      	ldr	r0, [r7, #12]
 8011616:	f000 fa31 	bl	8011a7c <USBD_CoreFindEP>
 801161a:	4603      	mov	r3, r0
 801161c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801161e:	7dbb      	ldrb	r3, [r7, #22]
 8011620:	2bff      	cmp	r3, #255	; 0xff
 8011622:	d025      	beq.n	8011670 <USBD_LL_DataOutStage+0x15c>
 8011624:	7dbb      	ldrb	r3, [r7, #22]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d122      	bne.n	8011670 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011630:	b2db      	uxtb	r3, r3
 8011632:	2b03      	cmp	r3, #3
 8011634:	d117      	bne.n	8011666 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011636:	7dba      	ldrb	r2, [r7, #22]
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	32ae      	adds	r2, #174	; 0xae
 801163c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011640:	699b      	ldr	r3, [r3, #24]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d00f      	beq.n	8011666 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011646:	7dba      	ldrb	r2, [r7, #22]
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801164e:	7dba      	ldrb	r2, [r7, #22]
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	32ae      	adds	r2, #174	; 0xae
 8011654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011658:	699b      	ldr	r3, [r3, #24]
 801165a:	7afa      	ldrb	r2, [r7, #11]
 801165c:	4611      	mov	r1, r2
 801165e:	68f8      	ldr	r0, [r7, #12]
 8011660:	4798      	blx	r3
 8011662:	4603      	mov	r3, r0
 8011664:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011666:	7dfb      	ldrb	r3, [r7, #23]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d001      	beq.n	8011670 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801166c:	7dfb      	ldrb	r3, [r7, #23]
 801166e:	e000      	b.n	8011672 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011670:	2300      	movs	r3, #0
}
 8011672:	4618      	mov	r0, r3
 8011674:	3718      	adds	r7, #24
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}

0801167a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801167a:	b580      	push	{r7, lr}
 801167c:	b086      	sub	sp, #24
 801167e:	af00      	add	r7, sp, #0
 8011680:	60f8      	str	r0, [r7, #12]
 8011682:	460b      	mov	r3, r1
 8011684:	607a      	str	r2, [r7, #4]
 8011686:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011688:	7afb      	ldrb	r3, [r7, #11]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d16f      	bne.n	801176e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	3314      	adds	r3, #20
 8011692:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801169a:	2b02      	cmp	r3, #2
 801169c:	d15a      	bne.n	8011754 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	689a      	ldr	r2, [r3, #8]
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d914      	bls.n	80116d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	689a      	ldr	r2, [r3, #8]
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	1ad2      	subs	r2, r2, r3
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	689b      	ldr	r3, [r3, #8]
 80116bc:	461a      	mov	r2, r3
 80116be:	6879      	ldr	r1, [r7, #4]
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	f001 f8ac 	bl	801281e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80116c6:	2300      	movs	r3, #0
 80116c8:	2200      	movs	r2, #0
 80116ca:	2100      	movs	r1, #0
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f001 fd7d 	bl	80131cc <USBD_LL_PrepareReceive>
 80116d2:	e03f      	b.n	8011754 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	68da      	ldr	r2, [r3, #12]
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	689b      	ldr	r3, [r3, #8]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d11c      	bne.n	801171a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	685a      	ldr	r2, [r3, #4]
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d316      	bcc.n	801171a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80116ec:	693b      	ldr	r3, [r7, #16]
 80116ee:	685a      	ldr	r2, [r3, #4]
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d20f      	bcs.n	801171a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80116fa:	2200      	movs	r2, #0
 80116fc:	2100      	movs	r1, #0
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f001 f88d 	bl	801281e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2200      	movs	r2, #0
 8011708:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801170c:	2300      	movs	r3, #0
 801170e:	2200      	movs	r2, #0
 8011710:	2100      	movs	r1, #0
 8011712:	68f8      	ldr	r0, [r7, #12]
 8011714:	f001 fd5a 	bl	80131cc <USBD_LL_PrepareReceive>
 8011718:	e01c      	b.n	8011754 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011720:	b2db      	uxtb	r3, r3
 8011722:	2b03      	cmp	r3, #3
 8011724:	d10f      	bne.n	8011746 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d009      	beq.n	8011746 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	2200      	movs	r2, #0
 8011736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011740:	68db      	ldr	r3, [r3, #12]
 8011742:	68f8      	ldr	r0, [r7, #12]
 8011744:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011746:	2180      	movs	r1, #128	; 0x80
 8011748:	68f8      	ldr	r0, [r7, #12]
 801174a:	f001 fc95 	bl	8013078 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801174e:	68f8      	ldr	r0, [r7, #12]
 8011750:	f001 f8b7 	bl	80128c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801175a:	2b00      	cmp	r3, #0
 801175c:	d03a      	beq.n	80117d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801175e:	68f8      	ldr	r0, [r7, #12]
 8011760:	f7ff fe42 	bl	80113e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	2200      	movs	r2, #0
 8011768:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801176c:	e032      	b.n	80117d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801176e:	7afb      	ldrb	r3, [r7, #11]
 8011770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011774:	b2db      	uxtb	r3, r3
 8011776:	4619      	mov	r1, r3
 8011778:	68f8      	ldr	r0, [r7, #12]
 801177a:	f000 f97f 	bl	8011a7c <USBD_CoreFindEP>
 801177e:	4603      	mov	r3, r0
 8011780:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011782:	7dfb      	ldrb	r3, [r7, #23]
 8011784:	2bff      	cmp	r3, #255	; 0xff
 8011786:	d025      	beq.n	80117d4 <USBD_LL_DataInStage+0x15a>
 8011788:	7dfb      	ldrb	r3, [r7, #23]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d122      	bne.n	80117d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011794:	b2db      	uxtb	r3, r3
 8011796:	2b03      	cmp	r3, #3
 8011798:	d11c      	bne.n	80117d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801179a:	7dfa      	ldrb	r2, [r7, #23]
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	32ae      	adds	r2, #174	; 0xae
 80117a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117a4:	695b      	ldr	r3, [r3, #20]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d014      	beq.n	80117d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80117aa:	7dfa      	ldrb	r2, [r7, #23]
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80117b2:	7dfa      	ldrb	r2, [r7, #23]
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	32ae      	adds	r2, #174	; 0xae
 80117b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117bc:	695b      	ldr	r3, [r3, #20]
 80117be:	7afa      	ldrb	r2, [r7, #11]
 80117c0:	4611      	mov	r1, r2
 80117c2:	68f8      	ldr	r0, [r7, #12]
 80117c4:	4798      	blx	r3
 80117c6:	4603      	mov	r3, r0
 80117c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80117ca:	7dbb      	ldrb	r3, [r7, #22]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d001      	beq.n	80117d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80117d0:	7dbb      	ldrb	r3, [r7, #22]
 80117d2:	e000      	b.n	80117d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80117d4:	2300      	movs	r3, #0
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80117de:	b580      	push	{r7, lr}
 80117e0:	b084      	sub	sp, #16
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80117e6:	2300      	movs	r3, #0
 80117e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2201      	movs	r2, #1
 80117ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2200      	movs	r2, #0
 8011804:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2200      	movs	r2, #0
 801180c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011816:	2b00      	cmp	r3, #0
 8011818:	d014      	beq.n	8011844 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d00e      	beq.n	8011844 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	6852      	ldr	r2, [r2, #4]
 8011832:	b2d2      	uxtb	r2, r2
 8011834:	4611      	mov	r1, r2
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	4798      	blx	r3
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d001      	beq.n	8011844 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011840:	2303      	movs	r3, #3
 8011842:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011844:	2340      	movs	r3, #64	; 0x40
 8011846:	2200      	movs	r2, #0
 8011848:	2100      	movs	r1, #0
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f001 fbcf 	bl	8012fee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2201      	movs	r2, #1
 8011854:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2240      	movs	r2, #64	; 0x40
 801185c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011860:	2340      	movs	r3, #64	; 0x40
 8011862:	2200      	movs	r2, #0
 8011864:	2180      	movs	r1, #128	; 0x80
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f001 fbc1 	bl	8012fee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2201      	movs	r2, #1
 8011870:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2240      	movs	r2, #64	; 0x40
 8011876:	621a      	str	r2, [r3, #32]

  return ret;
 8011878:	7bfb      	ldrb	r3, [r7, #15]
}
 801187a:	4618      	mov	r0, r3
 801187c:	3710      	adds	r7, #16
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011882:	b480      	push	{r7}
 8011884:	b083      	sub	sp, #12
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	460b      	mov	r3, r1
 801188c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	78fa      	ldrb	r2, [r7, #3]
 8011892:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011894:	2300      	movs	r3, #0
}
 8011896:	4618      	mov	r0, r3
 8011898:	370c      	adds	r7, #12
 801189a:	46bd      	mov	sp, r7
 801189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a0:	4770      	bx	lr

080118a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80118a2:	b480      	push	{r7}
 80118a4:	b083      	sub	sp, #12
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118b0:	b2da      	uxtb	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2204      	movs	r2, #4
 80118bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	370c      	adds	r7, #12
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr

080118ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80118ce:	b480      	push	{r7}
 80118d0:	b083      	sub	sp, #12
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118dc:	b2db      	uxtb	r3, r3
 80118de:	2b04      	cmp	r3, #4
 80118e0:	d106      	bne.n	80118f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80118f0:	2300      	movs	r3, #0
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	370c      	adds	r7, #12
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80118fe:	b580      	push	{r7, lr}
 8011900:	b082      	sub	sp, #8
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801190c:	b2db      	uxtb	r3, r3
 801190e:	2b03      	cmp	r3, #3
 8011910:	d110      	bne.n	8011934 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00b      	beq.n	8011934 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011922:	69db      	ldr	r3, [r3, #28]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d005      	beq.n	8011934 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801192e:	69db      	ldr	r3, [r3, #28]
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	3708      	adds	r7, #8
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}

0801193e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801193e:	b580      	push	{r7, lr}
 8011940:	b082      	sub	sp, #8
 8011942:	af00      	add	r7, sp, #0
 8011944:	6078      	str	r0, [r7, #4]
 8011946:	460b      	mov	r3, r1
 8011948:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	32ae      	adds	r2, #174	; 0xae
 8011954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d101      	bne.n	8011960 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801195c:	2303      	movs	r3, #3
 801195e:	e01c      	b.n	801199a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011966:	b2db      	uxtb	r3, r3
 8011968:	2b03      	cmp	r3, #3
 801196a:	d115      	bne.n	8011998 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	32ae      	adds	r2, #174	; 0xae
 8011976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801197a:	6a1b      	ldr	r3, [r3, #32]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d00b      	beq.n	8011998 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	32ae      	adds	r2, #174	; 0xae
 801198a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801198e:	6a1b      	ldr	r3, [r3, #32]
 8011990:	78fa      	ldrb	r2, [r7, #3]
 8011992:	4611      	mov	r1, r2
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011998:	2300      	movs	r3, #0
}
 801199a:	4618      	mov	r0, r3
 801199c:	3708      	adds	r7, #8
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}

080119a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b082      	sub	sp, #8
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
 80119aa:	460b      	mov	r3, r1
 80119ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	32ae      	adds	r2, #174	; 0xae
 80119b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d101      	bne.n	80119c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80119c0:	2303      	movs	r3, #3
 80119c2:	e01c      	b.n	80119fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	2b03      	cmp	r3, #3
 80119ce:	d115      	bne.n	80119fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	32ae      	adds	r2, #174	; 0xae
 80119da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d00b      	beq.n	80119fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	32ae      	adds	r2, #174	; 0xae
 80119ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119f4:	78fa      	ldrb	r2, [r7, #3]
 80119f6:	4611      	mov	r1, r2
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3708      	adds	r7, #8
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}

08011a06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011a06:	b480      	push	{r7}
 8011a08:	b083      	sub	sp, #12
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011a0e:	2300      	movs	r3, #0
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	370c      	adds	r7, #12
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr

08011a1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011a24:	2300      	movs	r3, #0
 8011a26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d00e      	beq.n	8011a58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	6852      	ldr	r2, [r2, #4]
 8011a46:	b2d2      	uxtb	r2, r2
 8011a48:	4611      	mov	r1, r2
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	4798      	blx	r3
 8011a4e:	4603      	mov	r3, r0
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d001      	beq.n	8011a58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011a54:	2303      	movs	r3, #3
 8011a56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3710      	adds	r7, #16
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}

08011a62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011a62:	b480      	push	{r7}
 8011a64:	b083      	sub	sp, #12
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	6078      	str	r0, [r7, #4]
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011a6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	370c      	adds	r7, #12
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr

08011a7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	460b      	mov	r3, r1
 8011a86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011a88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	370c      	adds	r7, #12
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr

08011a96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011a96:	b580      	push	{r7, lr}
 8011a98:	b086      	sub	sp, #24
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
 8011a9e:	460b      	mov	r3, r1
 8011aa0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	885b      	ldrh	r3, [r3, #2]
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d920      	bls.n	8011b00 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011ac6:	e013      	b.n	8011af0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011ac8:	f107 030a 	add.w	r3, r7, #10
 8011acc:	4619      	mov	r1, r3
 8011ace:	6978      	ldr	r0, [r7, #20]
 8011ad0:	f000 f81b 	bl	8011b0a <USBD_GetNextDesc>
 8011ad4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	785b      	ldrb	r3, [r3, #1]
 8011ada:	2b05      	cmp	r3, #5
 8011adc:	d108      	bne.n	8011af0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	789b      	ldrb	r3, [r3, #2]
 8011ae6:	78fa      	ldrb	r2, [r7, #3]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d008      	beq.n	8011afe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011aec:	2300      	movs	r3, #0
 8011aee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	885b      	ldrh	r3, [r3, #2]
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	897b      	ldrh	r3, [r7, #10]
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d8e5      	bhi.n	8011ac8 <USBD_GetEpDesc+0x32>
 8011afc:	e000      	b.n	8011b00 <USBD_GetEpDesc+0x6a>
          break;
 8011afe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011b00:	693b      	ldr	r3, [r7, #16]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3718      	adds	r7, #24
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}

08011b0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011b0a:	b480      	push	{r7}
 8011b0c:	b085      	sub	sp, #20
 8011b0e:	af00      	add	r7, sp, #0
 8011b10:	6078      	str	r0, [r7, #4]
 8011b12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	881a      	ldrh	r2, [r3, #0]
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	4413      	add	r3, r2
 8011b24:	b29a      	uxth	r2, r3
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	461a      	mov	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	4413      	add	r3, r2
 8011b34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011b36:	68fb      	ldr	r3, [r7, #12]
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3714      	adds	r7, #20
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr

08011b44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011b44:	b480      	push	{r7}
 8011b46:	b087      	sub	sp, #28
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	3301      	adds	r3, #1
 8011b5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011b62:	8a3b      	ldrh	r3, [r7, #16]
 8011b64:	021b      	lsls	r3, r3, #8
 8011b66:	b21a      	sxth	r2, r3
 8011b68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011b6c:	4313      	orrs	r3, r2
 8011b6e:	b21b      	sxth	r3, r3
 8011b70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011b72:	89fb      	ldrh	r3, [r7, #14]
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	371c      	adds	r7, #28
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr

08011b80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b96:	2b40      	cmp	r3, #64	; 0x40
 8011b98:	d005      	beq.n	8011ba6 <USBD_StdDevReq+0x26>
 8011b9a:	2b40      	cmp	r3, #64	; 0x40
 8011b9c:	d857      	bhi.n	8011c4e <USBD_StdDevReq+0xce>
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d00f      	beq.n	8011bc2 <USBD_StdDevReq+0x42>
 8011ba2:	2b20      	cmp	r3, #32
 8011ba4:	d153      	bne.n	8011c4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	32ae      	adds	r2, #174	; 0xae
 8011bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bb4:	689b      	ldr	r3, [r3, #8]
 8011bb6:	6839      	ldr	r1, [r7, #0]
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	4798      	blx	r3
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8011bc0:	e04a      	b.n	8011c58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	785b      	ldrb	r3, [r3, #1]
 8011bc6:	2b09      	cmp	r3, #9
 8011bc8:	d83b      	bhi.n	8011c42 <USBD_StdDevReq+0xc2>
 8011bca:	a201      	add	r2, pc, #4	; (adr r2, 8011bd0 <USBD_StdDevReq+0x50>)
 8011bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bd0:	08011c25 	.word	0x08011c25
 8011bd4:	08011c39 	.word	0x08011c39
 8011bd8:	08011c43 	.word	0x08011c43
 8011bdc:	08011c2f 	.word	0x08011c2f
 8011be0:	08011c43 	.word	0x08011c43
 8011be4:	08011c03 	.word	0x08011c03
 8011be8:	08011bf9 	.word	0x08011bf9
 8011bec:	08011c43 	.word	0x08011c43
 8011bf0:	08011c1b 	.word	0x08011c1b
 8011bf4:	08011c0d 	.word	0x08011c0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011bf8:	6839      	ldr	r1, [r7, #0]
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f000 fa3c 	bl	8012078 <USBD_GetDescriptor>
          break;
 8011c00:	e024      	b.n	8011c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011c02:	6839      	ldr	r1, [r7, #0]
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f000 fba1 	bl	801234c <USBD_SetAddress>
          break;
 8011c0a:	e01f      	b.n	8011c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011c0c:	6839      	ldr	r1, [r7, #0]
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f000 fbe0 	bl	80123d4 <USBD_SetConfig>
 8011c14:	4603      	mov	r3, r0
 8011c16:	73fb      	strb	r3, [r7, #15]
          break;
 8011c18:	e018      	b.n	8011c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011c1a:	6839      	ldr	r1, [r7, #0]
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f000 fc83 	bl	8012528 <USBD_GetConfig>
          break;
 8011c22:	e013      	b.n	8011c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011c24:	6839      	ldr	r1, [r7, #0]
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f000 fcb4 	bl	8012594 <USBD_GetStatus>
          break;
 8011c2c:	e00e      	b.n	8011c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011c2e:	6839      	ldr	r1, [r7, #0]
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f000 fce3 	bl	80125fc <USBD_SetFeature>
          break;
 8011c36:	e009      	b.n	8011c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011c38:	6839      	ldr	r1, [r7, #0]
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f000 fd07 	bl	801264e <USBD_ClrFeature>
          break;
 8011c40:	e004      	b.n	8011c4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011c42:	6839      	ldr	r1, [r7, #0]
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f000 fd5e 	bl	8012706 <USBD_CtlError>
          break;
 8011c4a:	bf00      	nop
      }
      break;
 8011c4c:	e004      	b.n	8011c58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011c4e:	6839      	ldr	r1, [r7, #0]
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f000 fd58 	bl	8012706 <USBD_CtlError>
      break;
 8011c56:	bf00      	nop
  }

  return ret;
 8011c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3710      	adds	r7, #16
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop

08011c64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b084      	sub	sp, #16
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	781b      	ldrb	r3, [r3, #0]
 8011c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011c7a:	2b40      	cmp	r3, #64	; 0x40
 8011c7c:	d005      	beq.n	8011c8a <USBD_StdItfReq+0x26>
 8011c7e:	2b40      	cmp	r3, #64	; 0x40
 8011c80:	d852      	bhi.n	8011d28 <USBD_StdItfReq+0xc4>
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d001      	beq.n	8011c8a <USBD_StdItfReq+0x26>
 8011c86:	2b20      	cmp	r3, #32
 8011c88:	d14e      	bne.n	8011d28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	3b01      	subs	r3, #1
 8011c94:	2b02      	cmp	r3, #2
 8011c96:	d840      	bhi.n	8011d1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	889b      	ldrh	r3, [r3, #4]
 8011c9c:	b2db      	uxtb	r3, r3
 8011c9e:	2b01      	cmp	r3, #1
 8011ca0:	d836      	bhi.n	8011d10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	889b      	ldrh	r3, [r3, #4]
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	4619      	mov	r1, r3
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f7ff fed9 	bl	8011a62 <USBD_CoreFindIF>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011cb4:	7bbb      	ldrb	r3, [r7, #14]
 8011cb6:	2bff      	cmp	r3, #255	; 0xff
 8011cb8:	d01d      	beq.n	8011cf6 <USBD_StdItfReq+0x92>
 8011cba:	7bbb      	ldrb	r3, [r7, #14]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d11a      	bne.n	8011cf6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011cc0:	7bba      	ldrb	r2, [r7, #14]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	32ae      	adds	r2, #174	; 0xae
 8011cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cca:	689b      	ldr	r3, [r3, #8]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d00f      	beq.n	8011cf0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011cd0:	7bba      	ldrb	r2, [r7, #14]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011cd8:	7bba      	ldrb	r2, [r7, #14]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	32ae      	adds	r2, #174	; 0xae
 8011cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ce2:	689b      	ldr	r3, [r3, #8]
 8011ce4:	6839      	ldr	r1, [r7, #0]
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	4798      	blx	r3
 8011cea:	4603      	mov	r3, r0
 8011cec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011cee:	e004      	b.n	8011cfa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011cf0:	2303      	movs	r3, #3
 8011cf2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011cf4:	e001      	b.n	8011cfa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011cf6:	2303      	movs	r3, #3
 8011cf8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	88db      	ldrh	r3, [r3, #6]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d110      	bne.n	8011d24 <USBD_StdItfReq+0xc0>
 8011d02:	7bfb      	ldrb	r3, [r7, #15]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d10d      	bne.n	8011d24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f000 fdc7 	bl	801289c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011d0e:	e009      	b.n	8011d24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011d10:	6839      	ldr	r1, [r7, #0]
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f000 fcf7 	bl	8012706 <USBD_CtlError>
          break;
 8011d18:	e004      	b.n	8011d24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011d1a:	6839      	ldr	r1, [r7, #0]
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 fcf2 	bl	8012706 <USBD_CtlError>
          break;
 8011d22:	e000      	b.n	8011d26 <USBD_StdItfReq+0xc2>
          break;
 8011d24:	bf00      	nop
      }
      break;
 8011d26:	e004      	b.n	8011d32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011d28:	6839      	ldr	r1, [r7, #0]
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 fceb 	bl	8012706 <USBD_CtlError>
      break;
 8011d30:	bf00      	nop
  }

  return ret;
 8011d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3710      	adds	r7, #16
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011d46:	2300      	movs	r3, #0
 8011d48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	889b      	ldrh	r3, [r3, #4]
 8011d4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d58:	2b40      	cmp	r3, #64	; 0x40
 8011d5a:	d007      	beq.n	8011d6c <USBD_StdEPReq+0x30>
 8011d5c:	2b40      	cmp	r3, #64	; 0x40
 8011d5e:	f200 817f 	bhi.w	8012060 <USBD_StdEPReq+0x324>
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d02a      	beq.n	8011dbc <USBD_StdEPReq+0x80>
 8011d66:	2b20      	cmp	r3, #32
 8011d68:	f040 817a 	bne.w	8012060 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011d6c:	7bbb      	ldrb	r3, [r7, #14]
 8011d6e:	4619      	mov	r1, r3
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f7ff fe83 	bl	8011a7c <USBD_CoreFindEP>
 8011d76:	4603      	mov	r3, r0
 8011d78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011d7a:	7b7b      	ldrb	r3, [r7, #13]
 8011d7c:	2bff      	cmp	r3, #255	; 0xff
 8011d7e:	f000 8174 	beq.w	801206a <USBD_StdEPReq+0x32e>
 8011d82:	7b7b      	ldrb	r3, [r7, #13]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	f040 8170 	bne.w	801206a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011d8a:	7b7a      	ldrb	r2, [r7, #13]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011d92:	7b7a      	ldrb	r2, [r7, #13]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	32ae      	adds	r2, #174	; 0xae
 8011d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d9c:	689b      	ldr	r3, [r3, #8]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f000 8163 	beq.w	801206a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011da4:	7b7a      	ldrb	r2, [r7, #13]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	32ae      	adds	r2, #174	; 0xae
 8011daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dae:	689b      	ldr	r3, [r3, #8]
 8011db0:	6839      	ldr	r1, [r7, #0]
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	4798      	blx	r3
 8011db6:	4603      	mov	r3, r0
 8011db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011dba:	e156      	b.n	801206a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	785b      	ldrb	r3, [r3, #1]
 8011dc0:	2b03      	cmp	r3, #3
 8011dc2:	d008      	beq.n	8011dd6 <USBD_StdEPReq+0x9a>
 8011dc4:	2b03      	cmp	r3, #3
 8011dc6:	f300 8145 	bgt.w	8012054 <USBD_StdEPReq+0x318>
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	f000 809b 	beq.w	8011f06 <USBD_StdEPReq+0x1ca>
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d03c      	beq.n	8011e4e <USBD_StdEPReq+0x112>
 8011dd4:	e13e      	b.n	8012054 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	2b02      	cmp	r3, #2
 8011de0:	d002      	beq.n	8011de8 <USBD_StdEPReq+0xac>
 8011de2:	2b03      	cmp	r3, #3
 8011de4:	d016      	beq.n	8011e14 <USBD_StdEPReq+0xd8>
 8011de6:	e02c      	b.n	8011e42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011de8:	7bbb      	ldrb	r3, [r7, #14]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d00d      	beq.n	8011e0a <USBD_StdEPReq+0xce>
 8011dee:	7bbb      	ldrb	r3, [r7, #14]
 8011df0:	2b80      	cmp	r3, #128	; 0x80
 8011df2:	d00a      	beq.n	8011e0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011df4:	7bbb      	ldrb	r3, [r7, #14]
 8011df6:	4619      	mov	r1, r3
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f001 f93d 	bl	8013078 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011dfe:	2180      	movs	r1, #128	; 0x80
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f001 f939 	bl	8013078 <USBD_LL_StallEP>
 8011e06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011e08:	e020      	b.n	8011e4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011e0a:	6839      	ldr	r1, [r7, #0]
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f000 fc7a 	bl	8012706 <USBD_CtlError>
              break;
 8011e12:	e01b      	b.n	8011e4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	885b      	ldrh	r3, [r3, #2]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d10e      	bne.n	8011e3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011e1c:	7bbb      	ldrb	r3, [r7, #14]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d00b      	beq.n	8011e3a <USBD_StdEPReq+0xfe>
 8011e22:	7bbb      	ldrb	r3, [r7, #14]
 8011e24:	2b80      	cmp	r3, #128	; 0x80
 8011e26:	d008      	beq.n	8011e3a <USBD_StdEPReq+0xfe>
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	88db      	ldrh	r3, [r3, #6]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d104      	bne.n	8011e3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011e30:	7bbb      	ldrb	r3, [r7, #14]
 8011e32:	4619      	mov	r1, r3
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f001 f91f 	bl	8013078 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 fd2e 	bl	801289c <USBD_CtlSendStatus>

              break;
 8011e40:	e004      	b.n	8011e4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011e42:	6839      	ldr	r1, [r7, #0]
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f000 fc5e 	bl	8012706 <USBD_CtlError>
              break;
 8011e4a:	bf00      	nop
          }
          break;
 8011e4c:	e107      	b.n	801205e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	2b02      	cmp	r3, #2
 8011e58:	d002      	beq.n	8011e60 <USBD_StdEPReq+0x124>
 8011e5a:	2b03      	cmp	r3, #3
 8011e5c:	d016      	beq.n	8011e8c <USBD_StdEPReq+0x150>
 8011e5e:	e04b      	b.n	8011ef8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e60:	7bbb      	ldrb	r3, [r7, #14]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d00d      	beq.n	8011e82 <USBD_StdEPReq+0x146>
 8011e66:	7bbb      	ldrb	r3, [r7, #14]
 8011e68:	2b80      	cmp	r3, #128	; 0x80
 8011e6a:	d00a      	beq.n	8011e82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011e6c:	7bbb      	ldrb	r3, [r7, #14]
 8011e6e:	4619      	mov	r1, r3
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f001 f901 	bl	8013078 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e76:	2180      	movs	r1, #128	; 0x80
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f001 f8fd 	bl	8013078 <USBD_LL_StallEP>
 8011e7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011e80:	e040      	b.n	8011f04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011e82:	6839      	ldr	r1, [r7, #0]
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f000 fc3e 	bl	8012706 <USBD_CtlError>
              break;
 8011e8a:	e03b      	b.n	8011f04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	885b      	ldrh	r3, [r3, #2]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d136      	bne.n	8011f02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011e94:	7bbb      	ldrb	r3, [r7, #14]
 8011e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d004      	beq.n	8011ea8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011e9e:	7bbb      	ldrb	r3, [r7, #14]
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f001 f907 	bl	80130b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 fcf7 	bl	801289c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011eae:	7bbb      	ldrb	r3, [r7, #14]
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f7ff fde2 	bl	8011a7c <USBD_CoreFindEP>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011ebc:	7b7b      	ldrb	r3, [r7, #13]
 8011ebe:	2bff      	cmp	r3, #255	; 0xff
 8011ec0:	d01f      	beq.n	8011f02 <USBD_StdEPReq+0x1c6>
 8011ec2:	7b7b      	ldrb	r3, [r7, #13]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d11c      	bne.n	8011f02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011ec8:	7b7a      	ldrb	r2, [r7, #13]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011ed0:	7b7a      	ldrb	r2, [r7, #13]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	32ae      	adds	r2, #174	; 0xae
 8011ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011eda:	689b      	ldr	r3, [r3, #8]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d010      	beq.n	8011f02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011ee0:	7b7a      	ldrb	r2, [r7, #13]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	32ae      	adds	r2, #174	; 0xae
 8011ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011eea:	689b      	ldr	r3, [r3, #8]
 8011eec:	6839      	ldr	r1, [r7, #0]
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	4798      	blx	r3
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011ef6:	e004      	b.n	8011f02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011ef8:	6839      	ldr	r1, [r7, #0]
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 fc03 	bl	8012706 <USBD_CtlError>
              break;
 8011f00:	e000      	b.n	8011f04 <USBD_StdEPReq+0x1c8>
              break;
 8011f02:	bf00      	nop
          }
          break;
 8011f04:	e0ab      	b.n	801205e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f0c:	b2db      	uxtb	r3, r3
 8011f0e:	2b02      	cmp	r3, #2
 8011f10:	d002      	beq.n	8011f18 <USBD_StdEPReq+0x1dc>
 8011f12:	2b03      	cmp	r3, #3
 8011f14:	d032      	beq.n	8011f7c <USBD_StdEPReq+0x240>
 8011f16:	e097      	b.n	8012048 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f18:	7bbb      	ldrb	r3, [r7, #14]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d007      	beq.n	8011f2e <USBD_StdEPReq+0x1f2>
 8011f1e:	7bbb      	ldrb	r3, [r7, #14]
 8011f20:	2b80      	cmp	r3, #128	; 0x80
 8011f22:	d004      	beq.n	8011f2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011f24:	6839      	ldr	r1, [r7, #0]
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 fbed 	bl	8012706 <USBD_CtlError>
                break;
 8011f2c:	e091      	b.n	8012052 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	da0b      	bge.n	8011f4e <USBD_StdEPReq+0x212>
 8011f36:	7bbb      	ldrb	r3, [r7, #14]
 8011f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011f3c:	4613      	mov	r3, r2
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	4413      	add	r3, r2
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	3310      	adds	r3, #16
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	4413      	add	r3, r2
 8011f4a:	3304      	adds	r3, #4
 8011f4c:	e00b      	b.n	8011f66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011f4e:	7bbb      	ldrb	r3, [r7, #14]
 8011f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f54:	4613      	mov	r3, r2
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	4413      	add	r3, r2
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011f60:	687a      	ldr	r2, [r7, #4]
 8011f62:	4413      	add	r3, r2
 8011f64:	3304      	adds	r3, #4
 8011f66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	2202      	movs	r2, #2
 8011f72:	4619      	mov	r1, r3
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f000 fc37 	bl	80127e8 <USBD_CtlSendData>
              break;
 8011f7a:	e06a      	b.n	8012052 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	da11      	bge.n	8011fa8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011f84:	7bbb      	ldrb	r3, [r7, #14]
 8011f86:	f003 020f 	and.w	r2, r3, #15
 8011f8a:	6879      	ldr	r1, [r7, #4]
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	009b      	lsls	r3, r3, #2
 8011f90:	4413      	add	r3, r2
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	440b      	add	r3, r1
 8011f96:	3324      	adds	r3, #36	; 0x24
 8011f98:	881b      	ldrh	r3, [r3, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d117      	bne.n	8011fce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011f9e:	6839      	ldr	r1, [r7, #0]
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f000 fbb0 	bl	8012706 <USBD_CtlError>
                  break;
 8011fa6:	e054      	b.n	8012052 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011fa8:	7bbb      	ldrb	r3, [r7, #14]
 8011faa:	f003 020f 	and.w	r2, r3, #15
 8011fae:	6879      	ldr	r1, [r7, #4]
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	4413      	add	r3, r2
 8011fb6:	009b      	lsls	r3, r3, #2
 8011fb8:	440b      	add	r3, r1
 8011fba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011fbe:	881b      	ldrh	r3, [r3, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d104      	bne.n	8011fce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011fc4:	6839      	ldr	r1, [r7, #0]
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f000 fb9d 	bl	8012706 <USBD_CtlError>
                  break;
 8011fcc:	e041      	b.n	8012052 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	da0b      	bge.n	8011fee <USBD_StdEPReq+0x2b2>
 8011fd6:	7bbb      	ldrb	r3, [r7, #14]
 8011fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fdc:	4613      	mov	r3, r2
 8011fde:	009b      	lsls	r3, r3, #2
 8011fe0:	4413      	add	r3, r2
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	3310      	adds	r3, #16
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	4413      	add	r3, r2
 8011fea:	3304      	adds	r3, #4
 8011fec:	e00b      	b.n	8012006 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011fee:	7bbb      	ldrb	r3, [r7, #14]
 8011ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ff4:	4613      	mov	r3, r2
 8011ff6:	009b      	lsls	r3, r3, #2
 8011ff8:	4413      	add	r3, r2
 8011ffa:	009b      	lsls	r3, r3, #2
 8011ffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	4413      	add	r3, r2
 8012004:	3304      	adds	r3, #4
 8012006:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012008:	7bbb      	ldrb	r3, [r7, #14]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d002      	beq.n	8012014 <USBD_StdEPReq+0x2d8>
 801200e:	7bbb      	ldrb	r3, [r7, #14]
 8012010:	2b80      	cmp	r3, #128	; 0x80
 8012012:	d103      	bne.n	801201c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	2200      	movs	r2, #0
 8012018:	601a      	str	r2, [r3, #0]
 801201a:	e00e      	b.n	801203a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801201c:	7bbb      	ldrb	r3, [r7, #14]
 801201e:	4619      	mov	r1, r3
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f001 f867 	bl	80130f4 <USBD_LL_IsStallEP>
 8012026:	4603      	mov	r3, r0
 8012028:	2b00      	cmp	r3, #0
 801202a:	d003      	beq.n	8012034 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	2201      	movs	r2, #1
 8012030:	601a      	str	r2, [r3, #0]
 8012032:	e002      	b.n	801203a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	2200      	movs	r2, #0
 8012038:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	2202      	movs	r2, #2
 801203e:	4619      	mov	r1, r3
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f000 fbd1 	bl	80127e8 <USBD_CtlSendData>
              break;
 8012046:	e004      	b.n	8012052 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012048:	6839      	ldr	r1, [r7, #0]
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f000 fb5b 	bl	8012706 <USBD_CtlError>
              break;
 8012050:	bf00      	nop
          }
          break;
 8012052:	e004      	b.n	801205e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012054:	6839      	ldr	r1, [r7, #0]
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f000 fb55 	bl	8012706 <USBD_CtlError>
          break;
 801205c:	bf00      	nop
      }
      break;
 801205e:	e005      	b.n	801206c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012060:	6839      	ldr	r1, [r7, #0]
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f000 fb4f 	bl	8012706 <USBD_CtlError>
      break;
 8012068:	e000      	b.n	801206c <USBD_StdEPReq+0x330>
      break;
 801206a:	bf00      	nop
  }

  return ret;
 801206c:	7bfb      	ldrb	r3, [r7, #15]
}
 801206e:	4618      	mov	r0, r3
 8012070:	3710      	adds	r7, #16
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
	...

08012078 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012082:	2300      	movs	r3, #0
 8012084:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012086:	2300      	movs	r3, #0
 8012088:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801208a:	2300      	movs	r3, #0
 801208c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	885b      	ldrh	r3, [r3, #2]
 8012092:	0a1b      	lsrs	r3, r3, #8
 8012094:	b29b      	uxth	r3, r3
 8012096:	3b01      	subs	r3, #1
 8012098:	2b06      	cmp	r3, #6
 801209a:	f200 8128 	bhi.w	80122ee <USBD_GetDescriptor+0x276>
 801209e:	a201      	add	r2, pc, #4	; (adr r2, 80120a4 <USBD_GetDescriptor+0x2c>)
 80120a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120a4:	080120c1 	.word	0x080120c1
 80120a8:	080120d9 	.word	0x080120d9
 80120ac:	08012119 	.word	0x08012119
 80120b0:	080122ef 	.word	0x080122ef
 80120b4:	080122ef 	.word	0x080122ef
 80120b8:	0801228f 	.word	0x0801228f
 80120bc:	080122bb 	.word	0x080122bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	687a      	ldr	r2, [r7, #4]
 80120ca:	7c12      	ldrb	r2, [r2, #16]
 80120cc:	f107 0108 	add.w	r1, r7, #8
 80120d0:	4610      	mov	r0, r2
 80120d2:	4798      	blx	r3
 80120d4:	60f8      	str	r0, [r7, #12]
      break;
 80120d6:	e112      	b.n	80122fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	7c1b      	ldrb	r3, [r3, #16]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d10d      	bne.n	80120fc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120e8:	f107 0208 	add.w	r2, r7, #8
 80120ec:	4610      	mov	r0, r2
 80120ee:	4798      	blx	r3
 80120f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	3301      	adds	r3, #1
 80120f6:	2202      	movs	r2, #2
 80120f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80120fa:	e100      	b.n	80122fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012104:	f107 0208 	add.w	r2, r7, #8
 8012108:	4610      	mov	r0, r2
 801210a:	4798      	blx	r3
 801210c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	3301      	adds	r3, #1
 8012112:	2202      	movs	r2, #2
 8012114:	701a      	strb	r2, [r3, #0]
      break;
 8012116:	e0f2      	b.n	80122fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	885b      	ldrh	r3, [r3, #2]
 801211c:	b2db      	uxtb	r3, r3
 801211e:	2b05      	cmp	r3, #5
 8012120:	f200 80ac 	bhi.w	801227c <USBD_GetDescriptor+0x204>
 8012124:	a201      	add	r2, pc, #4	; (adr r2, 801212c <USBD_GetDescriptor+0xb4>)
 8012126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801212a:	bf00      	nop
 801212c:	08012145 	.word	0x08012145
 8012130:	08012179 	.word	0x08012179
 8012134:	080121ad 	.word	0x080121ad
 8012138:	080121e1 	.word	0x080121e1
 801213c:	08012215 	.word	0x08012215
 8012140:	08012249 	.word	0x08012249
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801214a:	685b      	ldr	r3, [r3, #4]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d00b      	beq.n	8012168 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012156:	685b      	ldr	r3, [r3, #4]
 8012158:	687a      	ldr	r2, [r7, #4]
 801215a:	7c12      	ldrb	r2, [r2, #16]
 801215c:	f107 0108 	add.w	r1, r7, #8
 8012160:	4610      	mov	r0, r2
 8012162:	4798      	blx	r3
 8012164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012166:	e091      	b.n	801228c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012168:	6839      	ldr	r1, [r7, #0]
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f000 facb 	bl	8012706 <USBD_CtlError>
            err++;
 8012170:	7afb      	ldrb	r3, [r7, #11]
 8012172:	3301      	adds	r3, #1
 8012174:	72fb      	strb	r3, [r7, #11]
          break;
 8012176:	e089      	b.n	801228c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801217e:	689b      	ldr	r3, [r3, #8]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d00b      	beq.n	801219c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801218a:	689b      	ldr	r3, [r3, #8]
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	7c12      	ldrb	r2, [r2, #16]
 8012190:	f107 0108 	add.w	r1, r7, #8
 8012194:	4610      	mov	r0, r2
 8012196:	4798      	blx	r3
 8012198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801219a:	e077      	b.n	801228c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801219c:	6839      	ldr	r1, [r7, #0]
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 fab1 	bl	8012706 <USBD_CtlError>
            err++;
 80121a4:	7afb      	ldrb	r3, [r7, #11]
 80121a6:	3301      	adds	r3, #1
 80121a8:	72fb      	strb	r3, [r7, #11]
          break;
 80121aa:	e06f      	b.n	801228c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00b      	beq.n	80121d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	687a      	ldr	r2, [r7, #4]
 80121c2:	7c12      	ldrb	r2, [r2, #16]
 80121c4:	f107 0108 	add.w	r1, r7, #8
 80121c8:	4610      	mov	r0, r2
 80121ca:	4798      	blx	r3
 80121cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121ce:	e05d      	b.n	801228c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80121d0:	6839      	ldr	r1, [r7, #0]
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 fa97 	bl	8012706 <USBD_CtlError>
            err++;
 80121d8:	7afb      	ldrb	r3, [r7, #11]
 80121da:	3301      	adds	r3, #1
 80121dc:	72fb      	strb	r3, [r7, #11]
          break;
 80121de:	e055      	b.n	801228c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121e6:	691b      	ldr	r3, [r3, #16]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d00b      	beq.n	8012204 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121f2:	691b      	ldr	r3, [r3, #16]
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	7c12      	ldrb	r2, [r2, #16]
 80121f8:	f107 0108 	add.w	r1, r7, #8
 80121fc:	4610      	mov	r0, r2
 80121fe:	4798      	blx	r3
 8012200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012202:	e043      	b.n	801228c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012204:	6839      	ldr	r1, [r7, #0]
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f000 fa7d 	bl	8012706 <USBD_CtlError>
            err++;
 801220c:	7afb      	ldrb	r3, [r7, #11]
 801220e:	3301      	adds	r3, #1
 8012210:	72fb      	strb	r3, [r7, #11]
          break;
 8012212:	e03b      	b.n	801228c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801221a:	695b      	ldr	r3, [r3, #20]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d00b      	beq.n	8012238 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012226:	695b      	ldr	r3, [r3, #20]
 8012228:	687a      	ldr	r2, [r7, #4]
 801222a:	7c12      	ldrb	r2, [r2, #16]
 801222c:	f107 0108 	add.w	r1, r7, #8
 8012230:	4610      	mov	r0, r2
 8012232:	4798      	blx	r3
 8012234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012236:	e029      	b.n	801228c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012238:	6839      	ldr	r1, [r7, #0]
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f000 fa63 	bl	8012706 <USBD_CtlError>
            err++;
 8012240:	7afb      	ldrb	r3, [r7, #11]
 8012242:	3301      	adds	r3, #1
 8012244:	72fb      	strb	r3, [r7, #11]
          break;
 8012246:	e021      	b.n	801228c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801224e:	699b      	ldr	r3, [r3, #24]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d00b      	beq.n	801226c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801225a:	699b      	ldr	r3, [r3, #24]
 801225c:	687a      	ldr	r2, [r7, #4]
 801225e:	7c12      	ldrb	r2, [r2, #16]
 8012260:	f107 0108 	add.w	r1, r7, #8
 8012264:	4610      	mov	r0, r2
 8012266:	4798      	blx	r3
 8012268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801226a:	e00f      	b.n	801228c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801226c:	6839      	ldr	r1, [r7, #0]
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f000 fa49 	bl	8012706 <USBD_CtlError>
            err++;
 8012274:	7afb      	ldrb	r3, [r7, #11]
 8012276:	3301      	adds	r3, #1
 8012278:	72fb      	strb	r3, [r7, #11]
          break;
 801227a:	e007      	b.n	801228c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801227c:	6839      	ldr	r1, [r7, #0]
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f000 fa41 	bl	8012706 <USBD_CtlError>
          err++;
 8012284:	7afb      	ldrb	r3, [r7, #11]
 8012286:	3301      	adds	r3, #1
 8012288:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801228a:	bf00      	nop
      }
      break;
 801228c:	e037      	b.n	80122fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	7c1b      	ldrb	r3, [r3, #16]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d109      	bne.n	80122aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801229c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801229e:	f107 0208 	add.w	r2, r7, #8
 80122a2:	4610      	mov	r0, r2
 80122a4:	4798      	blx	r3
 80122a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80122a8:	e029      	b.n	80122fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80122aa:	6839      	ldr	r1, [r7, #0]
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f000 fa2a 	bl	8012706 <USBD_CtlError>
        err++;
 80122b2:	7afb      	ldrb	r3, [r7, #11]
 80122b4:	3301      	adds	r3, #1
 80122b6:	72fb      	strb	r3, [r7, #11]
      break;
 80122b8:	e021      	b.n	80122fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	7c1b      	ldrb	r3, [r3, #16]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d10d      	bne.n	80122de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122ca:	f107 0208 	add.w	r2, r7, #8
 80122ce:	4610      	mov	r0, r2
 80122d0:	4798      	blx	r3
 80122d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	3301      	adds	r3, #1
 80122d8:	2207      	movs	r2, #7
 80122da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80122dc:	e00f      	b.n	80122fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80122de:	6839      	ldr	r1, [r7, #0]
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 fa10 	bl	8012706 <USBD_CtlError>
        err++;
 80122e6:	7afb      	ldrb	r3, [r7, #11]
 80122e8:	3301      	adds	r3, #1
 80122ea:	72fb      	strb	r3, [r7, #11]
      break;
 80122ec:	e007      	b.n	80122fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80122ee:	6839      	ldr	r1, [r7, #0]
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 fa08 	bl	8012706 <USBD_CtlError>
      err++;
 80122f6:	7afb      	ldrb	r3, [r7, #11]
 80122f8:	3301      	adds	r3, #1
 80122fa:	72fb      	strb	r3, [r7, #11]
      break;
 80122fc:	bf00      	nop
  }

  if (err != 0U)
 80122fe:	7afb      	ldrb	r3, [r7, #11]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d11e      	bne.n	8012342 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	88db      	ldrh	r3, [r3, #6]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d016      	beq.n	801233a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801230c:	893b      	ldrh	r3, [r7, #8]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d00e      	beq.n	8012330 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	88da      	ldrh	r2, [r3, #6]
 8012316:	893b      	ldrh	r3, [r7, #8]
 8012318:	4293      	cmp	r3, r2
 801231a:	bf28      	it	cs
 801231c:	4613      	movcs	r3, r2
 801231e:	b29b      	uxth	r3, r3
 8012320:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012322:	893b      	ldrh	r3, [r7, #8]
 8012324:	461a      	mov	r2, r3
 8012326:	68f9      	ldr	r1, [r7, #12]
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f000 fa5d 	bl	80127e8 <USBD_CtlSendData>
 801232e:	e009      	b.n	8012344 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012330:	6839      	ldr	r1, [r7, #0]
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 f9e7 	bl	8012706 <USBD_CtlError>
 8012338:	e004      	b.n	8012344 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f000 faae 	bl	801289c <USBD_CtlSendStatus>
 8012340:	e000      	b.n	8012344 <USBD_GetDescriptor+0x2cc>
    return;
 8012342:	bf00      	nop
  }
}
 8012344:	3710      	adds	r7, #16
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop

0801234c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	889b      	ldrh	r3, [r3, #4]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d131      	bne.n	80123c2 <USBD_SetAddress+0x76>
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	88db      	ldrh	r3, [r3, #6]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d12d      	bne.n	80123c2 <USBD_SetAddress+0x76>
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	885b      	ldrh	r3, [r3, #2]
 801236a:	2b7f      	cmp	r3, #127	; 0x7f
 801236c:	d829      	bhi.n	80123c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	885b      	ldrh	r3, [r3, #2]
 8012372:	b2db      	uxtb	r3, r3
 8012374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012378:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012380:	b2db      	uxtb	r3, r3
 8012382:	2b03      	cmp	r3, #3
 8012384:	d104      	bne.n	8012390 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012386:	6839      	ldr	r1, [r7, #0]
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f000 f9bc 	bl	8012706 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801238e:	e01d      	b.n	80123cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	7bfa      	ldrb	r2, [r7, #15]
 8012394:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012398:	7bfb      	ldrb	r3, [r7, #15]
 801239a:	4619      	mov	r1, r3
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f000 fed5 	bl	801314c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f000 fa7a 	bl	801289c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80123a8:	7bfb      	ldrb	r3, [r7, #15]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d004      	beq.n	80123b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2202      	movs	r2, #2
 80123b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123b6:	e009      	b.n	80123cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2201      	movs	r2, #1
 80123bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123c0:	e004      	b.n	80123cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80123c2:	6839      	ldr	r1, [r7, #0]
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f000 f99e 	bl	8012706 <USBD_CtlError>
  }
}
 80123ca:	bf00      	nop
 80123cc:	bf00      	nop
 80123ce:	3710      	adds	r7, #16
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b084      	sub	sp, #16
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80123de:	2300      	movs	r3, #0
 80123e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	885b      	ldrh	r3, [r3, #2]
 80123e6:	b2da      	uxtb	r2, r3
 80123e8:	4b4e      	ldr	r3, [pc, #312]	; (8012524 <USBD_SetConfig+0x150>)
 80123ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80123ec:	4b4d      	ldr	r3, [pc, #308]	; (8012524 <USBD_SetConfig+0x150>)
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	2b01      	cmp	r3, #1
 80123f2:	d905      	bls.n	8012400 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80123f4:	6839      	ldr	r1, [r7, #0]
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f000 f985 	bl	8012706 <USBD_CtlError>
    return USBD_FAIL;
 80123fc:	2303      	movs	r3, #3
 80123fe:	e08c      	b.n	801251a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012406:	b2db      	uxtb	r3, r3
 8012408:	2b02      	cmp	r3, #2
 801240a:	d002      	beq.n	8012412 <USBD_SetConfig+0x3e>
 801240c:	2b03      	cmp	r3, #3
 801240e:	d029      	beq.n	8012464 <USBD_SetConfig+0x90>
 8012410:	e075      	b.n	80124fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012412:	4b44      	ldr	r3, [pc, #272]	; (8012524 <USBD_SetConfig+0x150>)
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d020      	beq.n	801245c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801241a:	4b42      	ldr	r3, [pc, #264]	; (8012524 <USBD_SetConfig+0x150>)
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	461a      	mov	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012424:	4b3f      	ldr	r3, [pc, #252]	; (8012524 <USBD_SetConfig+0x150>)
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	4619      	mov	r1, r3
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f7fe ffe7 	bl	80113fe <USBD_SetClassConfig>
 8012430:	4603      	mov	r3, r0
 8012432:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012434:	7bfb      	ldrb	r3, [r7, #15]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d008      	beq.n	801244c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801243a:	6839      	ldr	r1, [r7, #0]
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f000 f962 	bl	8012706 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2202      	movs	r2, #2
 8012446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801244a:	e065      	b.n	8012518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f000 fa25 	bl	801289c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2203      	movs	r2, #3
 8012456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801245a:	e05d      	b.n	8012518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f000 fa1d 	bl	801289c <USBD_CtlSendStatus>
      break;
 8012462:	e059      	b.n	8012518 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012464:	4b2f      	ldr	r3, [pc, #188]	; (8012524 <USBD_SetConfig+0x150>)
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d112      	bne.n	8012492 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2202      	movs	r2, #2
 8012470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012474:	4b2b      	ldr	r3, [pc, #172]	; (8012524 <USBD_SetConfig+0x150>)
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	461a      	mov	r2, r3
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801247e:	4b29      	ldr	r3, [pc, #164]	; (8012524 <USBD_SetConfig+0x150>)
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	4619      	mov	r1, r3
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f7fe ffd6 	bl	8011436 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f000 fa06 	bl	801289c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012490:	e042      	b.n	8012518 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012492:	4b24      	ldr	r3, [pc, #144]	; (8012524 <USBD_SetConfig+0x150>)
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	461a      	mov	r2, r3
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	429a      	cmp	r2, r3
 801249e:	d02a      	beq.n	80124f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	b2db      	uxtb	r3, r3
 80124a6:	4619      	mov	r1, r3
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f7fe ffc4 	bl	8011436 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80124ae:	4b1d      	ldr	r3, [pc, #116]	; (8012524 <USBD_SetConfig+0x150>)
 80124b0:	781b      	ldrb	r3, [r3, #0]
 80124b2:	461a      	mov	r2, r3
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80124b8:	4b1a      	ldr	r3, [pc, #104]	; (8012524 <USBD_SetConfig+0x150>)
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	4619      	mov	r1, r3
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f7fe ff9d 	bl	80113fe <USBD_SetClassConfig>
 80124c4:	4603      	mov	r3, r0
 80124c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80124c8:	7bfb      	ldrb	r3, [r7, #15]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00f      	beq.n	80124ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80124ce:	6839      	ldr	r1, [r7, #0]
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 f918 	bl	8012706 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	4619      	mov	r1, r3
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	f7fe ffa9 	bl	8011436 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2202      	movs	r2, #2
 80124e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80124ec:	e014      	b.n	8012518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 f9d4 	bl	801289c <USBD_CtlSendStatus>
      break;
 80124f4:	e010      	b.n	8012518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 f9d0 	bl	801289c <USBD_CtlSendStatus>
      break;
 80124fc:	e00c      	b.n	8012518 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80124fe:	6839      	ldr	r1, [r7, #0]
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f000 f900 	bl	8012706 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012506:	4b07      	ldr	r3, [pc, #28]	; (8012524 <USBD_SetConfig+0x150>)
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	4619      	mov	r1, r3
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f7fe ff92 	bl	8011436 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012512:	2303      	movs	r3, #3
 8012514:	73fb      	strb	r3, [r7, #15]
      break;
 8012516:	bf00      	nop
  }

  return ret;
 8012518:	7bfb      	ldrb	r3, [r7, #15]
}
 801251a:	4618      	mov	r0, r3
 801251c:	3710      	adds	r7, #16
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}
 8012522:	bf00      	nop
 8012524:	24001a1c 	.word	0x24001a1c

08012528 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	88db      	ldrh	r3, [r3, #6]
 8012536:	2b01      	cmp	r3, #1
 8012538:	d004      	beq.n	8012544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801253a:	6839      	ldr	r1, [r7, #0]
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f000 f8e2 	bl	8012706 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012542:	e023      	b.n	801258c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801254a:	b2db      	uxtb	r3, r3
 801254c:	2b02      	cmp	r3, #2
 801254e:	dc02      	bgt.n	8012556 <USBD_GetConfig+0x2e>
 8012550:	2b00      	cmp	r3, #0
 8012552:	dc03      	bgt.n	801255c <USBD_GetConfig+0x34>
 8012554:	e015      	b.n	8012582 <USBD_GetConfig+0x5a>
 8012556:	2b03      	cmp	r3, #3
 8012558:	d00b      	beq.n	8012572 <USBD_GetConfig+0x4a>
 801255a:	e012      	b.n	8012582 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2200      	movs	r2, #0
 8012560:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	3308      	adds	r3, #8
 8012566:	2201      	movs	r2, #1
 8012568:	4619      	mov	r1, r3
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f000 f93c 	bl	80127e8 <USBD_CtlSendData>
        break;
 8012570:	e00c      	b.n	801258c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	3304      	adds	r3, #4
 8012576:	2201      	movs	r2, #1
 8012578:	4619      	mov	r1, r3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 f934 	bl	80127e8 <USBD_CtlSendData>
        break;
 8012580:	e004      	b.n	801258c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012582:	6839      	ldr	r1, [r7, #0]
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f000 f8be 	bl	8012706 <USBD_CtlError>
        break;
 801258a:	bf00      	nop
}
 801258c:	bf00      	nop
 801258e:	3708      	adds	r7, #8
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	3b01      	subs	r3, #1
 80125a8:	2b02      	cmp	r3, #2
 80125aa:	d81e      	bhi.n	80125ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	88db      	ldrh	r3, [r3, #6]
 80125b0:	2b02      	cmp	r3, #2
 80125b2:	d004      	beq.n	80125be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80125b4:	6839      	ldr	r1, [r7, #0]
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 f8a5 	bl	8012706 <USBD_CtlError>
        break;
 80125bc:	e01a      	b.n	80125f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2201      	movs	r2, #1
 80125c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d005      	beq.n	80125da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	f043 0202 	orr.w	r2, r3, #2
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	330c      	adds	r3, #12
 80125de:	2202      	movs	r2, #2
 80125e0:	4619      	mov	r1, r3
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f000 f900 	bl	80127e8 <USBD_CtlSendData>
      break;
 80125e8:	e004      	b.n	80125f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80125ea:	6839      	ldr	r1, [r7, #0]
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f000 f88a 	bl	8012706 <USBD_CtlError>
      break;
 80125f2:	bf00      	nop
  }
}
 80125f4:	bf00      	nop
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	885b      	ldrh	r3, [r3, #2]
 801260a:	2b01      	cmp	r3, #1
 801260c:	d107      	bne.n	801261e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2201      	movs	r2, #1
 8012612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 f940 	bl	801289c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801261c:	e013      	b.n	8012646 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	885b      	ldrh	r3, [r3, #2]
 8012622:	2b02      	cmp	r3, #2
 8012624:	d10b      	bne.n	801263e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	889b      	ldrh	r3, [r3, #4]
 801262a:	0a1b      	lsrs	r3, r3, #8
 801262c:	b29b      	uxth	r3, r3
 801262e:	b2da      	uxtb	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f000 f930 	bl	801289c <USBD_CtlSendStatus>
}
 801263c:	e003      	b.n	8012646 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801263e:	6839      	ldr	r1, [r7, #0]
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 f860 	bl	8012706 <USBD_CtlError>
}
 8012646:	bf00      	nop
 8012648:	3708      	adds	r7, #8
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}

0801264e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801264e:	b580      	push	{r7, lr}
 8012650:	b082      	sub	sp, #8
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
 8012656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801265e:	b2db      	uxtb	r3, r3
 8012660:	3b01      	subs	r3, #1
 8012662:	2b02      	cmp	r3, #2
 8012664:	d80b      	bhi.n	801267e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	885b      	ldrh	r3, [r3, #2]
 801266a:	2b01      	cmp	r3, #1
 801266c:	d10c      	bne.n	8012688 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2200      	movs	r2, #0
 8012672:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f000 f910 	bl	801289c <USBD_CtlSendStatus>
      }
      break;
 801267c:	e004      	b.n	8012688 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801267e:	6839      	ldr	r1, [r7, #0]
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f000 f840 	bl	8012706 <USBD_CtlError>
      break;
 8012686:	e000      	b.n	801268a <USBD_ClrFeature+0x3c>
      break;
 8012688:	bf00      	nop
  }
}
 801268a:	bf00      	nop
 801268c:	3708      	adds	r7, #8
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}

08012692 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012692:	b580      	push	{r7, lr}
 8012694:	b084      	sub	sp, #16
 8012696:	af00      	add	r7, sp, #0
 8012698:	6078      	str	r0, [r7, #4]
 801269a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	781a      	ldrb	r2, [r3, #0]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	3301      	adds	r3, #1
 80126ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	781a      	ldrb	r2, [r3, #0]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	3301      	adds	r3, #1
 80126ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80126bc:	68f8      	ldr	r0, [r7, #12]
 80126be:	f7ff fa41 	bl	8011b44 <SWAPBYTE>
 80126c2:	4603      	mov	r3, r0
 80126c4:	461a      	mov	r2, r3
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	3301      	adds	r3, #1
 80126ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	3301      	adds	r3, #1
 80126d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80126d6:	68f8      	ldr	r0, [r7, #12]
 80126d8:	f7ff fa34 	bl	8011b44 <SWAPBYTE>
 80126dc:	4603      	mov	r3, r0
 80126de:	461a      	mov	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	3301      	adds	r3, #1
 80126e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	3301      	adds	r3, #1
 80126ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80126f0:	68f8      	ldr	r0, [r7, #12]
 80126f2:	f7ff fa27 	bl	8011b44 <SWAPBYTE>
 80126f6:	4603      	mov	r3, r0
 80126f8:	461a      	mov	r2, r3
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	80da      	strh	r2, [r3, #6]
}
 80126fe:	bf00      	nop
 8012700:	3710      	adds	r7, #16
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}

08012706 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012706:	b580      	push	{r7, lr}
 8012708:	b082      	sub	sp, #8
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
 801270e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012710:	2180      	movs	r1, #128	; 0x80
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f000 fcb0 	bl	8013078 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012718:	2100      	movs	r1, #0
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f000 fcac 	bl	8013078 <USBD_LL_StallEP>
}
 8012720:	bf00      	nop
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}

08012728 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b086      	sub	sp, #24
 801272c:	af00      	add	r7, sp, #0
 801272e:	60f8      	str	r0, [r7, #12]
 8012730:	60b9      	str	r1, [r7, #8]
 8012732:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012734:	2300      	movs	r3, #0
 8012736:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d036      	beq.n	80127ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012742:	6938      	ldr	r0, [r7, #16]
 8012744:	f000 f836 	bl	80127b4 <USBD_GetLen>
 8012748:	4603      	mov	r3, r0
 801274a:	3301      	adds	r3, #1
 801274c:	b29b      	uxth	r3, r3
 801274e:	005b      	lsls	r3, r3, #1
 8012750:	b29a      	uxth	r2, r3
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012756:	7dfb      	ldrb	r3, [r7, #23]
 8012758:	68ba      	ldr	r2, [r7, #8]
 801275a:	4413      	add	r3, r2
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	7812      	ldrb	r2, [r2, #0]
 8012760:	701a      	strb	r2, [r3, #0]
  idx++;
 8012762:	7dfb      	ldrb	r3, [r7, #23]
 8012764:	3301      	adds	r3, #1
 8012766:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012768:	7dfb      	ldrb	r3, [r7, #23]
 801276a:	68ba      	ldr	r2, [r7, #8]
 801276c:	4413      	add	r3, r2
 801276e:	2203      	movs	r2, #3
 8012770:	701a      	strb	r2, [r3, #0]
  idx++;
 8012772:	7dfb      	ldrb	r3, [r7, #23]
 8012774:	3301      	adds	r3, #1
 8012776:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012778:	e013      	b.n	80127a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801277a:	7dfb      	ldrb	r3, [r7, #23]
 801277c:	68ba      	ldr	r2, [r7, #8]
 801277e:	4413      	add	r3, r2
 8012780:	693a      	ldr	r2, [r7, #16]
 8012782:	7812      	ldrb	r2, [r2, #0]
 8012784:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	3301      	adds	r3, #1
 801278a:	613b      	str	r3, [r7, #16]
    idx++;
 801278c:	7dfb      	ldrb	r3, [r7, #23]
 801278e:	3301      	adds	r3, #1
 8012790:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012792:	7dfb      	ldrb	r3, [r7, #23]
 8012794:	68ba      	ldr	r2, [r7, #8]
 8012796:	4413      	add	r3, r2
 8012798:	2200      	movs	r2, #0
 801279a:	701a      	strb	r2, [r3, #0]
    idx++;
 801279c:	7dfb      	ldrb	r3, [r7, #23]
 801279e:	3301      	adds	r3, #1
 80127a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d1e7      	bne.n	801277a <USBD_GetString+0x52>
 80127aa:	e000      	b.n	80127ae <USBD_GetString+0x86>
    return;
 80127ac:	bf00      	nop
  }
}
 80127ae:	3718      	adds	r7, #24
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80127b4:	b480      	push	{r7}
 80127b6:	b085      	sub	sp, #20
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80127bc:	2300      	movs	r3, #0
 80127be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80127c4:	e005      	b.n	80127d2 <USBD_GetLen+0x1e>
  {
    len++;
 80127c6:	7bfb      	ldrb	r3, [r7, #15]
 80127c8:	3301      	adds	r3, #1
 80127ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	3301      	adds	r3, #1
 80127d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d1f5      	bne.n	80127c6 <USBD_GetLen+0x12>
  }

  return len;
 80127da:	7bfb      	ldrb	r3, [r7, #15]
}
 80127dc:	4618      	mov	r0, r3
 80127de:	3714      	adds	r7, #20
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b084      	sub	sp, #16
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	60b9      	str	r1, [r7, #8]
 80127f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	2202      	movs	r2, #2
 80127f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	687a      	ldr	r2, [r7, #4]
 8012800:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	68ba      	ldr	r2, [r7, #8]
 801280c:	2100      	movs	r1, #0
 801280e:	68f8      	ldr	r0, [r7, #12]
 8012810:	f000 fcbb 	bl	801318a <USBD_LL_Transmit>

  return USBD_OK;
 8012814:	2300      	movs	r3, #0
}
 8012816:	4618      	mov	r0, r3
 8012818:	3710      	adds	r7, #16
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}

0801281e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801281e:	b580      	push	{r7, lr}
 8012820:	b084      	sub	sp, #16
 8012822:	af00      	add	r7, sp, #0
 8012824:	60f8      	str	r0, [r7, #12]
 8012826:	60b9      	str	r1, [r7, #8]
 8012828:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	68ba      	ldr	r2, [r7, #8]
 801282e:	2100      	movs	r1, #0
 8012830:	68f8      	ldr	r0, [r7, #12]
 8012832:	f000 fcaa 	bl	801318a <USBD_LL_Transmit>

  return USBD_OK;
 8012836:	2300      	movs	r3, #0
}
 8012838:	4618      	mov	r0, r3
 801283a:	3710      	adds	r7, #16
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2203      	movs	r2, #3
 8012850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	68ba      	ldr	r2, [r7, #8]
 8012868:	2100      	movs	r1, #0
 801286a:	68f8      	ldr	r0, [r7, #12]
 801286c:	f000 fcae 	bl	80131cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012870:	2300      	movs	r3, #0
}
 8012872:	4618      	mov	r0, r3
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801287a:	b580      	push	{r7, lr}
 801287c:	b084      	sub	sp, #16
 801287e:	af00      	add	r7, sp, #0
 8012880:	60f8      	str	r0, [r7, #12]
 8012882:	60b9      	str	r1, [r7, #8]
 8012884:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	68ba      	ldr	r2, [r7, #8]
 801288a:	2100      	movs	r1, #0
 801288c:	68f8      	ldr	r0, [r7, #12]
 801288e:	f000 fc9d 	bl	80131cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012892:	2300      	movs	r3, #0
}
 8012894:	4618      	mov	r0, r3
 8012896:	3710      	adds	r7, #16
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2204      	movs	r2, #4
 80128a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80128ac:	2300      	movs	r3, #0
 80128ae:	2200      	movs	r2, #0
 80128b0:	2100      	movs	r1, #0
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f000 fc69 	bl	801318a <USBD_LL_Transmit>

  return USBD_OK;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3708      	adds	r7, #8
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80128c2:	b580      	push	{r7, lr}
 80128c4:	b082      	sub	sp, #8
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2205      	movs	r2, #5
 80128ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80128d2:	2300      	movs	r3, #0
 80128d4:	2200      	movs	r2, #0
 80128d6:	2100      	movs	r1, #0
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f000 fc77 	bl	80131cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80128de:	2300      	movs	r3, #0
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3708      	adds	r7, #8
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80128ec:	2201      	movs	r2, #1
 80128ee:	4913      	ldr	r1, [pc, #76]	; (801293c <MX_USB_DEVICE_Init+0x54>)
 80128f0:	4813      	ldr	r0, [pc, #76]	; (8012940 <MX_USB_DEVICE_Init+0x58>)
 80128f2:	f7fe fceb 	bl	80112cc <USBD_Init>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d001      	beq.n	8012900 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80128fc:	f7ef fb18 	bl	8001f30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8012900:	4910      	ldr	r1, [pc, #64]	; (8012944 <MX_USB_DEVICE_Init+0x5c>)
 8012902:	480f      	ldr	r0, [pc, #60]	; (8012940 <MX_USB_DEVICE_Init+0x58>)
 8012904:	f7fe fd20 	bl	8011348 <USBD_RegisterClass>
 8012908:	4603      	mov	r3, r0
 801290a:	2b00      	cmp	r3, #0
 801290c:	d001      	beq.n	8012912 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801290e:	f7ef fb0f 	bl	8001f30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8012912:	490d      	ldr	r1, [pc, #52]	; (8012948 <MX_USB_DEVICE_Init+0x60>)
 8012914:	480a      	ldr	r0, [pc, #40]	; (8012940 <MX_USB_DEVICE_Init+0x58>)
 8012916:	f7fe fc49 	bl	80111ac <USBD_CDC_RegisterInterface>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	d001      	beq.n	8012924 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012920:	f7ef fb06 	bl	8001f30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8012924:	4806      	ldr	r0, [pc, #24]	; (8012940 <MX_USB_DEVICE_Init+0x58>)
 8012926:	f7fe fd53 	bl	80113d0 <USBD_Start>
 801292a:	4603      	mov	r3, r0
 801292c:	2b00      	cmp	r3, #0
 801292e:	d001      	beq.n	8012934 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012930:	f7ef fafe 	bl	8001f30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012934:	f7f7 f970 	bl	8009c18 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012938:	bf00      	nop
 801293a:	bd80      	pop	{r7, pc}
 801293c:	240010bc 	.word	0x240010bc
 8012940:	24001a20 	.word	0x24001a20
 8012944:	24001028 	.word	0x24001028
 8012948:	240010a8 	.word	0x240010a8

0801294c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8012950:	2200      	movs	r2, #0
 8012952:	4905      	ldr	r1, [pc, #20]	; (8012968 <CDC_Init_HS+0x1c>)
 8012954:	4805      	ldr	r0, [pc, #20]	; (801296c <CDC_Init_HS+0x20>)
 8012956:	f7fe fc43 	bl	80111e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801295a:	4905      	ldr	r1, [pc, #20]	; (8012970 <CDC_Init_HS+0x24>)
 801295c:	4803      	ldr	r0, [pc, #12]	; (801296c <CDC_Init_HS+0x20>)
 801295e:	f7fe fc61 	bl	8011224 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012962:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012964:	4618      	mov	r0, r3
 8012966:	bd80      	pop	{r7, pc}
 8012968:	240024fc 	.word	0x240024fc
 801296c:	24001a20 	.word	0x24001a20
 8012970:	24001cfc 	.word	0x24001cfc

08012974 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8012974:	b480      	push	{r7}
 8012976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012978:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801297a:	4618      	mov	r0, r3
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr

08012984 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
 801298a:	4603      	mov	r3, r0
 801298c:	6039      	str	r1, [r7, #0]
 801298e:	71fb      	strb	r3, [r7, #7]
 8012990:	4613      	mov	r3, r2
 8012992:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8012994:	79fb      	ldrb	r3, [r7, #7]
 8012996:	2b23      	cmp	r3, #35	; 0x23
 8012998:	d84a      	bhi.n	8012a30 <CDC_Control_HS+0xac>
 801299a:	a201      	add	r2, pc, #4	; (adr r2, 80129a0 <CDC_Control_HS+0x1c>)
 801299c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129a0:	08012a31 	.word	0x08012a31
 80129a4:	08012a31 	.word	0x08012a31
 80129a8:	08012a31 	.word	0x08012a31
 80129ac:	08012a31 	.word	0x08012a31
 80129b0:	08012a31 	.word	0x08012a31
 80129b4:	08012a31 	.word	0x08012a31
 80129b8:	08012a31 	.word	0x08012a31
 80129bc:	08012a31 	.word	0x08012a31
 80129c0:	08012a31 	.word	0x08012a31
 80129c4:	08012a31 	.word	0x08012a31
 80129c8:	08012a31 	.word	0x08012a31
 80129cc:	08012a31 	.word	0x08012a31
 80129d0:	08012a31 	.word	0x08012a31
 80129d4:	08012a31 	.word	0x08012a31
 80129d8:	08012a31 	.word	0x08012a31
 80129dc:	08012a31 	.word	0x08012a31
 80129e0:	08012a31 	.word	0x08012a31
 80129e4:	08012a31 	.word	0x08012a31
 80129e8:	08012a31 	.word	0x08012a31
 80129ec:	08012a31 	.word	0x08012a31
 80129f0:	08012a31 	.word	0x08012a31
 80129f4:	08012a31 	.word	0x08012a31
 80129f8:	08012a31 	.word	0x08012a31
 80129fc:	08012a31 	.word	0x08012a31
 8012a00:	08012a31 	.word	0x08012a31
 8012a04:	08012a31 	.word	0x08012a31
 8012a08:	08012a31 	.word	0x08012a31
 8012a0c:	08012a31 	.word	0x08012a31
 8012a10:	08012a31 	.word	0x08012a31
 8012a14:	08012a31 	.word	0x08012a31
 8012a18:	08012a31 	.word	0x08012a31
 8012a1c:	08012a31 	.word	0x08012a31
 8012a20:	08012a31 	.word	0x08012a31
 8012a24:	08012a31 	.word	0x08012a31
 8012a28:	08012a31 	.word	0x08012a31
 8012a2c:	08012a31 	.word	0x08012a31
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012a30:	bf00      	nop
  }

  return (USBD_OK);
 8012a32:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	370c      	adds	r7, #12
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr

08012a40 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8012a4a:	6879      	ldr	r1, [r7, #4]
 8012a4c:	4805      	ldr	r0, [pc, #20]	; (8012a64 <CDC_Receive_HS+0x24>)
 8012a4e:	f7fe fbe9 	bl	8011224 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8012a52:	4804      	ldr	r0, [pc, #16]	; (8012a64 <CDC_Receive_HS+0x24>)
 8012a54:	f7fe fc04 	bl	8011260 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012a58:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3708      	adds	r7, #8
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	24001a20 	.word	0x24001a20

08012a68 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b087      	sub	sp, #28
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	4613      	mov	r3, r2
 8012a74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012a76:	2300      	movs	r3, #0
 8012a78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8012a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	371c      	adds	r7, #28
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr
	...

08012a8c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	4603      	mov	r3, r0
 8012a94:	6039      	str	r1, [r7, #0]
 8012a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	2212      	movs	r2, #18
 8012a9c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8012a9e:	4b03      	ldr	r3, [pc, #12]	; (8012aac <USBD_HS_DeviceDescriptor+0x20>)
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	370c      	adds	r7, #12
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aaa:	4770      	bx	lr
 8012aac:	240010d8 	.word	0x240010d8

08012ab0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	6039      	str	r1, [r7, #0]
 8012aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	2204      	movs	r2, #4
 8012ac0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012ac2:	4b03      	ldr	r3, [pc, #12]	; (8012ad0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	370c      	adds	r7, #12
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr
 8012ad0:	240010ec 	.word	0x240010ec

08012ad4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	4603      	mov	r3, r0
 8012adc:	6039      	str	r1, [r7, #0]
 8012ade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ae0:	79fb      	ldrb	r3, [r7, #7]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d105      	bne.n	8012af2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012ae6:	683a      	ldr	r2, [r7, #0]
 8012ae8:	4907      	ldr	r1, [pc, #28]	; (8012b08 <USBD_HS_ProductStrDescriptor+0x34>)
 8012aea:	4808      	ldr	r0, [pc, #32]	; (8012b0c <USBD_HS_ProductStrDescriptor+0x38>)
 8012aec:	f7ff fe1c 	bl	8012728 <USBD_GetString>
 8012af0:	e004      	b.n	8012afc <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012af2:	683a      	ldr	r2, [r7, #0]
 8012af4:	4904      	ldr	r1, [pc, #16]	; (8012b08 <USBD_HS_ProductStrDescriptor+0x34>)
 8012af6:	4805      	ldr	r0, [pc, #20]	; (8012b0c <USBD_HS_ProductStrDescriptor+0x38>)
 8012af8:	f7ff fe16 	bl	8012728 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012afc:	4b02      	ldr	r3, [pc, #8]	; (8012b08 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	3708      	adds	r7, #8
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	24002cfc 	.word	0x24002cfc
 8012b0c:	08014644 	.word	0x08014644

08012b10 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	4603      	mov	r3, r0
 8012b18:	6039      	str	r1, [r7, #0]
 8012b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012b1c:	683a      	ldr	r2, [r7, #0]
 8012b1e:	4904      	ldr	r1, [pc, #16]	; (8012b30 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8012b20:	4804      	ldr	r0, [pc, #16]	; (8012b34 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8012b22:	f7ff fe01 	bl	8012728 <USBD_GetString>
  return USBD_StrDesc;
 8012b26:	4b02      	ldr	r3, [pc, #8]	; (8012b30 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3708      	adds	r7, #8
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}
 8012b30:	24002cfc 	.word	0x24002cfc
 8012b34:	0801465c 	.word	0x0801465c

08012b38 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	4603      	mov	r3, r0
 8012b40:	6039      	str	r1, [r7, #0]
 8012b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	221a      	movs	r2, #26
 8012b48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012b4a:	f000 f843 	bl	8012bd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012b4e:	4b02      	ldr	r3, [pc, #8]	; (8012b58 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	240010f0 	.word	0x240010f0

08012b5c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	4603      	mov	r3, r0
 8012b64:	6039      	str	r1, [r7, #0]
 8012b66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012b68:	79fb      	ldrb	r3, [r7, #7]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d105      	bne.n	8012b7a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012b6e:	683a      	ldr	r2, [r7, #0]
 8012b70:	4907      	ldr	r1, [pc, #28]	; (8012b90 <USBD_HS_ConfigStrDescriptor+0x34>)
 8012b72:	4808      	ldr	r0, [pc, #32]	; (8012b94 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012b74:	f7ff fdd8 	bl	8012728 <USBD_GetString>
 8012b78:	e004      	b.n	8012b84 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012b7a:	683a      	ldr	r2, [r7, #0]
 8012b7c:	4904      	ldr	r1, [pc, #16]	; (8012b90 <USBD_HS_ConfigStrDescriptor+0x34>)
 8012b7e:	4805      	ldr	r0, [pc, #20]	; (8012b94 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012b80:	f7ff fdd2 	bl	8012728 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012b84:	4b02      	ldr	r3, [pc, #8]	; (8012b90 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	3708      	adds	r7, #8
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}
 8012b8e:	bf00      	nop
 8012b90:	24002cfc 	.word	0x24002cfc
 8012b94:	08014670 	.word	0x08014670

08012b98 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	6039      	str	r1, [r7, #0]
 8012ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ba4:	79fb      	ldrb	r3, [r7, #7]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d105      	bne.n	8012bb6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012baa:	683a      	ldr	r2, [r7, #0]
 8012bac:	4907      	ldr	r1, [pc, #28]	; (8012bcc <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012bae:	4808      	ldr	r0, [pc, #32]	; (8012bd0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012bb0:	f7ff fdba 	bl	8012728 <USBD_GetString>
 8012bb4:	e004      	b.n	8012bc0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012bb6:	683a      	ldr	r2, [r7, #0]
 8012bb8:	4904      	ldr	r1, [pc, #16]	; (8012bcc <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012bba:	4805      	ldr	r0, [pc, #20]	; (8012bd0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012bbc:	f7ff fdb4 	bl	8012728 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012bc0:	4b02      	ldr	r3, [pc, #8]	; (8012bcc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3708      	adds	r7, #8
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	24002cfc 	.word	0x24002cfc
 8012bd0:	0801467c 	.word	0x0801467c

08012bd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012bda:	4b0f      	ldr	r3, [pc, #60]	; (8012c18 <Get_SerialNum+0x44>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012be0:	4b0e      	ldr	r3, [pc, #56]	; (8012c1c <Get_SerialNum+0x48>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012be6:	4b0e      	ldr	r3, [pc, #56]	; (8012c20 <Get_SerialNum+0x4c>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012bec:	68fa      	ldr	r2, [r7, #12]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	4413      	add	r3, r2
 8012bf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d009      	beq.n	8012c0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012bfa:	2208      	movs	r2, #8
 8012bfc:	4909      	ldr	r1, [pc, #36]	; (8012c24 <Get_SerialNum+0x50>)
 8012bfe:	68f8      	ldr	r0, [r7, #12]
 8012c00:	f000 f814 	bl	8012c2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012c04:	2204      	movs	r2, #4
 8012c06:	4908      	ldr	r1, [pc, #32]	; (8012c28 <Get_SerialNum+0x54>)
 8012c08:	68b8      	ldr	r0, [r7, #8]
 8012c0a:	f000 f80f 	bl	8012c2c <IntToUnicode>
  }
}
 8012c0e:	bf00      	nop
 8012c10:	3710      	adds	r7, #16
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
 8012c16:	bf00      	nop
 8012c18:	1ff1e800 	.word	0x1ff1e800
 8012c1c:	1ff1e804 	.word	0x1ff1e804
 8012c20:	1ff1e808 	.word	0x1ff1e808
 8012c24:	240010f2 	.word	0x240010f2
 8012c28:	24001102 	.word	0x24001102

08012c2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b087      	sub	sp, #28
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	60f8      	str	r0, [r7, #12]
 8012c34:	60b9      	str	r1, [r7, #8]
 8012c36:	4613      	mov	r3, r2
 8012c38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012c3e:	2300      	movs	r3, #0
 8012c40:	75fb      	strb	r3, [r7, #23]
 8012c42:	e027      	b.n	8012c94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	0f1b      	lsrs	r3, r3, #28
 8012c48:	2b09      	cmp	r3, #9
 8012c4a:	d80b      	bhi.n	8012c64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	0f1b      	lsrs	r3, r3, #28
 8012c50:	b2da      	uxtb	r2, r3
 8012c52:	7dfb      	ldrb	r3, [r7, #23]
 8012c54:	005b      	lsls	r3, r3, #1
 8012c56:	4619      	mov	r1, r3
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	440b      	add	r3, r1
 8012c5c:	3230      	adds	r2, #48	; 0x30
 8012c5e:	b2d2      	uxtb	r2, r2
 8012c60:	701a      	strb	r2, [r3, #0]
 8012c62:	e00a      	b.n	8012c7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	0f1b      	lsrs	r3, r3, #28
 8012c68:	b2da      	uxtb	r2, r3
 8012c6a:	7dfb      	ldrb	r3, [r7, #23]
 8012c6c:	005b      	lsls	r3, r3, #1
 8012c6e:	4619      	mov	r1, r3
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	440b      	add	r3, r1
 8012c74:	3237      	adds	r2, #55	; 0x37
 8012c76:	b2d2      	uxtb	r2, r2
 8012c78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	011b      	lsls	r3, r3, #4
 8012c7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012c80:	7dfb      	ldrb	r3, [r7, #23]
 8012c82:	005b      	lsls	r3, r3, #1
 8012c84:	3301      	adds	r3, #1
 8012c86:	68ba      	ldr	r2, [r7, #8]
 8012c88:	4413      	add	r3, r2
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012c8e:	7dfb      	ldrb	r3, [r7, #23]
 8012c90:	3301      	adds	r3, #1
 8012c92:	75fb      	strb	r3, [r7, #23]
 8012c94:	7dfa      	ldrb	r2, [r7, #23]
 8012c96:	79fb      	ldrb	r3, [r7, #7]
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d3d3      	bcc.n	8012c44 <IntToUnicode+0x18>
  }
}
 8012c9c:	bf00      	nop
 8012c9e:	bf00      	nop
 8012ca0:	371c      	adds	r7, #28
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca8:	4770      	bx	lr
	...

08012cac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b0b0      	sub	sp, #192	; 0xc0
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012cb4:	f107 030c 	add.w	r3, r7, #12
 8012cb8:	22b4      	movs	r2, #180	; 0xb4
 8012cba:	2100      	movs	r1, #0
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f000 fc6d 	bl	801359c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	4a18      	ldr	r2, [pc, #96]	; (8012d28 <HAL_PCD_MspInit+0x7c>)
 8012cc8:	4293      	cmp	r3, r2
 8012cca:	d129      	bne.n	8012d20 <HAL_PCD_MspInit+0x74>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012ccc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012cd0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012cd2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8012cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012cda:	f107 030c 	add.w	r3, r7, #12
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7f7 feba 	bl	800aa58 <HAL_RCCEx_PeriphCLKConfig>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d001      	beq.n	8012cee <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 8012cea:	f7ef f921 	bl	8001f30 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012cee:	f7f6 ff93 	bl	8009c18 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012cf2:	4b0e      	ldr	r3, [pc, #56]	; (8012d2c <HAL_PCD_MspInit+0x80>)
 8012cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012cf8:	4a0c      	ldr	r2, [pc, #48]	; (8012d2c <HAL_PCD_MspInit+0x80>)
 8012cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012cfe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012d02:	4b0a      	ldr	r3, [pc, #40]	; (8012d2c <HAL_PCD_MspInit+0x80>)
 8012d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d0c:	60bb      	str	r3, [r7, #8]
 8012d0e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012d10:	2200      	movs	r2, #0
 8012d12:	2100      	movs	r1, #0
 8012d14:	204d      	movs	r0, #77	; 0x4d
 8012d16:	f7f2 fee4 	bl	8005ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012d1a:	204d      	movs	r0, #77	; 0x4d
 8012d1c:	f7f2 fefb 	bl	8005b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012d20:	bf00      	nop
 8012d22:	37c0      	adds	r7, #192	; 0xc0
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	40040000 	.word	0x40040000
 8012d2c:	58024400 	.word	0x58024400

08012d30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012d44:	4619      	mov	r1, r3
 8012d46:	4610      	mov	r0, r2
 8012d48:	f7fe fb8f 	bl	801146a <USBD_LL_SetupStage>
}
 8012d4c:	bf00      	nop
 8012d4e:	3708      	adds	r7, #8
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b082      	sub	sp, #8
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	460b      	mov	r3, r1
 8012d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012d66:	78fa      	ldrb	r2, [r7, #3]
 8012d68:	6879      	ldr	r1, [r7, #4]
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	00db      	lsls	r3, r3, #3
 8012d6e:	4413      	add	r3, r2
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	440b      	add	r3, r1
 8012d74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012d78:	681a      	ldr	r2, [r3, #0]
 8012d7a:	78fb      	ldrb	r3, [r7, #3]
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	f7fe fbc9 	bl	8011514 <USBD_LL_DataOutStage>
}
 8012d82:	bf00      	nop
 8012d84:	3708      	adds	r7, #8
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}

08012d8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d8a:	b580      	push	{r7, lr}
 8012d8c:	b082      	sub	sp, #8
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	6078      	str	r0, [r7, #4]
 8012d92:	460b      	mov	r3, r1
 8012d94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012d9c:	78fa      	ldrb	r2, [r7, #3]
 8012d9e:	6879      	ldr	r1, [r7, #4]
 8012da0:	4613      	mov	r3, r2
 8012da2:	00db      	lsls	r3, r3, #3
 8012da4:	4413      	add	r3, r2
 8012da6:	009b      	lsls	r3, r3, #2
 8012da8:	440b      	add	r3, r1
 8012daa:	334c      	adds	r3, #76	; 0x4c
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	78fb      	ldrb	r3, [r7, #3]
 8012db0:	4619      	mov	r1, r3
 8012db2:	f7fe fc62 	bl	801167a <USBD_LL_DataInStage>
}
 8012db6:	bf00      	nop
 8012db8:	3708      	adds	r7, #8
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b082      	sub	sp, #8
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7fe fd96 	bl	80118fe <USBD_LL_SOF>
}
 8012dd2:	bf00      	nop
 8012dd4:	3708      	adds	r7, #8
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}

08012dda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dda:	b580      	push	{r7, lr}
 8012ddc:	b084      	sub	sp, #16
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012de2:	2301      	movs	r3, #1
 8012de4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	68db      	ldr	r3, [r3, #12]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d102      	bne.n	8012df4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012dee:	2300      	movs	r3, #0
 8012df0:	73fb      	strb	r3, [r7, #15]
 8012df2:	e008      	b.n	8012e06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	2b02      	cmp	r3, #2
 8012dfa:	d102      	bne.n	8012e02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	73fb      	strb	r3, [r7, #15]
 8012e00:	e001      	b.n	8012e06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012e02:	f7ef f895 	bl	8001f30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012e0c:	7bfa      	ldrb	r2, [r7, #15]
 8012e0e:	4611      	mov	r1, r2
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7fe fd36 	bl	8011882 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7fe fcde 	bl	80117de <USBD_LL_Reset>
}
 8012e22:	bf00      	nop
 8012e24:	3710      	adds	r7, #16
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
	...

08012e2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fe fd31 	bl	80118a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	6812      	ldr	r2, [r2, #0]
 8012e4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012e52:	f043 0301 	orr.w	r3, r3, #1
 8012e56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6a1b      	ldr	r3, [r3, #32]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d005      	beq.n	8012e6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e60:	4b04      	ldr	r3, [pc, #16]	; (8012e74 <HAL_PCD_SuspendCallback+0x48>)
 8012e62:	691b      	ldr	r3, [r3, #16]
 8012e64:	4a03      	ldr	r2, [pc, #12]	; (8012e74 <HAL_PCD_SuspendCallback+0x48>)
 8012e66:	f043 0306 	orr.w	r3, r3, #6
 8012e6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012e6c:	bf00      	nop
 8012e6e:	3708      	adds	r7, #8
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	e000ed00 	.word	0xe000ed00

08012e78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7fe fd21 	bl	80118ce <USBD_LL_Resume>
}
 8012e8c:	bf00      	nop
 8012e8e:	3708      	adds	r7, #8
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	460b      	mov	r3, r1
 8012e9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012ea6:	78fa      	ldrb	r2, [r7, #3]
 8012ea8:	4611      	mov	r1, r2
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7fe fd79 	bl	80119a2 <USBD_LL_IsoOUTIncomplete>
}
 8012eb0:	bf00      	nop
 8012eb2:	3708      	adds	r7, #8
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012eca:	78fa      	ldrb	r2, [r7, #3]
 8012ecc:	4611      	mov	r1, r2
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7fe fd35 	bl	801193e <USBD_LL_IsoINIncomplete>
}
 8012ed4:	bf00      	nop
 8012ed6:	3708      	adds	r7, #8
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7fe fd8b 	bl	8011a06 <USBD_LL_DevConnected>
}
 8012ef0:	bf00      	nop
 8012ef2:	3708      	adds	r7, #8
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7fe fd88 	bl	8011a1c <USBD_LL_DevDisconnected>
}
 8012f0c:	bf00      	nop
 8012f0e:	3708      	adds	r7, #8
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	2b01      	cmp	r3, #1
 8012f22:	d140      	bne.n	8012fa6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8012f24:	4a22      	ldr	r2, [pc, #136]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	4a20      	ldr	r2, [pc, #128]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f30:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8012f34:	4b1e      	ldr	r3, [pc, #120]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f36:	4a1f      	ldr	r2, [pc, #124]	; (8012fb4 <USBD_LL_Init+0xa0>)
 8012f38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8012f3a:	4b1d      	ldr	r3, [pc, #116]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f3c:	2209      	movs	r2, #9
 8012f3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8012f40:	4b1b      	ldr	r3, [pc, #108]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f42:	2202      	movs	r2, #2
 8012f44:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8012f46:	4b1a      	ldr	r3, [pc, #104]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f48:	2200      	movs	r2, #0
 8012f4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8012f4c:	4b18      	ldr	r3, [pc, #96]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f4e:	2202      	movs	r2, #2
 8012f50:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8012f52:	4b17      	ldr	r3, [pc, #92]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f54:	2200      	movs	r2, #0
 8012f56:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8012f58:	4b15      	ldr	r3, [pc, #84]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8012f5e:	4b14      	ldr	r3, [pc, #80]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f60:	2200      	movs	r2, #0
 8012f62:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8012f64:	4b12      	ldr	r3, [pc, #72]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f66:	2200      	movs	r2, #0
 8012f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8012f6a:	4b11      	ldr	r3, [pc, #68]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8012f70:	4b0f      	ldr	r3, [pc, #60]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f72:	2200      	movs	r2, #0
 8012f74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8012f76:	480e      	ldr	r0, [pc, #56]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f78:	f7f5 fb3f 	bl	80085fa <HAL_PCD_Init>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d001      	beq.n	8012f86 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012f82:	f7ee ffd5 	bl	8001f30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8012f86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012f8a:	4809      	ldr	r0, [pc, #36]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f8c:	f7f6 fdc9 	bl	8009b22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8012f90:	2280      	movs	r2, #128	; 0x80
 8012f92:	2100      	movs	r1, #0
 8012f94:	4806      	ldr	r0, [pc, #24]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012f96:	f7f6 fd7d 	bl	8009a94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8012f9a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8012f9e:	2101      	movs	r1, #1
 8012fa0:	4803      	ldr	r0, [pc, #12]	; (8012fb0 <USBD_LL_Init+0x9c>)
 8012fa2:	f7f6 fd77 	bl	8009a94 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8012fa6:	2300      	movs	r3, #0
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3708      	adds	r7, #8
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	24002efc 	.word	0x24002efc
 8012fb4:	40040000 	.word	0x40040000

08012fb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7f5 fc37 	bl	8008842 <HAL_PCD_Start>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fd8:	7bfb      	ldrb	r3, [r7, #15]
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f000 f942 	bl	8013264 <USBD_Get_USB_Status>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}

08012fee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b084      	sub	sp, #16
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
 8012ff6:	4608      	mov	r0, r1
 8012ff8:	4611      	mov	r1, r2
 8012ffa:	461a      	mov	r2, r3
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	70fb      	strb	r3, [r7, #3]
 8013000:	460b      	mov	r3, r1
 8013002:	70bb      	strb	r3, [r7, #2]
 8013004:	4613      	mov	r3, r2
 8013006:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013008:	2300      	movs	r3, #0
 801300a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801300c:	2300      	movs	r3, #0
 801300e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013016:	78bb      	ldrb	r3, [r7, #2]
 8013018:	883a      	ldrh	r2, [r7, #0]
 801301a:	78f9      	ldrb	r1, [r7, #3]
 801301c:	f7f6 f935 	bl	800928a <HAL_PCD_EP_Open>
 8013020:	4603      	mov	r3, r0
 8013022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013024:	7bfb      	ldrb	r3, [r7, #15]
 8013026:	4618      	mov	r0, r3
 8013028:	f000 f91c 	bl	8013264 <USBD_Get_USB_Status>
 801302c:	4603      	mov	r3, r0
 801302e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013030:	7bbb      	ldrb	r3, [r7, #14]
}
 8013032:	4618      	mov	r0, r3
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}

0801303a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801303a:	b580      	push	{r7, lr}
 801303c:	b084      	sub	sp, #16
 801303e:	af00      	add	r7, sp, #0
 8013040:	6078      	str	r0, [r7, #4]
 8013042:	460b      	mov	r3, r1
 8013044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013046:	2300      	movs	r3, #0
 8013048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801304a:	2300      	movs	r3, #0
 801304c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013054:	78fa      	ldrb	r2, [r7, #3]
 8013056:	4611      	mov	r1, r2
 8013058:	4618      	mov	r0, r3
 801305a:	f7f6 f97e 	bl	800935a <HAL_PCD_EP_Close>
 801305e:	4603      	mov	r3, r0
 8013060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013062:	7bfb      	ldrb	r3, [r7, #15]
 8013064:	4618      	mov	r0, r3
 8013066:	f000 f8fd 	bl	8013264 <USBD_Get_USB_Status>
 801306a:	4603      	mov	r3, r0
 801306c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801306e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013070:	4618      	mov	r0, r3
 8013072:	3710      	adds	r7, #16
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}

08013078 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b084      	sub	sp, #16
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	460b      	mov	r3, r1
 8013082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013084:	2300      	movs	r3, #0
 8013086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013088:	2300      	movs	r3, #0
 801308a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013092:	78fa      	ldrb	r2, [r7, #3]
 8013094:	4611      	mov	r1, r2
 8013096:	4618      	mov	r0, r3
 8013098:	f7f6 fa56 	bl	8009548 <HAL_PCD_EP_SetStall>
 801309c:	4603      	mov	r3, r0
 801309e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80130a0:	7bfb      	ldrb	r3, [r7, #15]
 80130a2:	4618      	mov	r0, r3
 80130a4:	f000 f8de 	bl	8013264 <USBD_Get_USB_Status>
 80130a8:	4603      	mov	r3, r0
 80130aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3710      	adds	r7, #16
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}

080130b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80130b6:	b580      	push	{r7, lr}
 80130b8:	b084      	sub	sp, #16
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
 80130be:	460b      	mov	r3, r1
 80130c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130c2:	2300      	movs	r3, #0
 80130c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130c6:	2300      	movs	r3, #0
 80130c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80130d0:	78fa      	ldrb	r2, [r7, #3]
 80130d2:	4611      	mov	r1, r2
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7f6 fa9b 	bl	8009610 <HAL_PCD_EP_ClrStall>
 80130da:	4603      	mov	r3, r0
 80130dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80130de:	7bfb      	ldrb	r3, [r7, #15]
 80130e0:	4618      	mov	r0, r3
 80130e2:	f000 f8bf 	bl	8013264 <USBD_Get_USB_Status>
 80130e6:	4603      	mov	r3, r0
 80130e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3710      	adds	r7, #16
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}

080130f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80130f4:	b480      	push	{r7}
 80130f6:	b085      	sub	sp, #20
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	460b      	mov	r3, r1
 80130fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013106:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801310c:	2b00      	cmp	r3, #0
 801310e:	da0b      	bge.n	8013128 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013110:	78fb      	ldrb	r3, [r7, #3]
 8013112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013116:	68f9      	ldr	r1, [r7, #12]
 8013118:	4613      	mov	r3, r2
 801311a:	00db      	lsls	r3, r3, #3
 801311c:	4413      	add	r3, r2
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	440b      	add	r3, r1
 8013122:	333e      	adds	r3, #62	; 0x3e
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	e00b      	b.n	8013140 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013128:	78fb      	ldrb	r3, [r7, #3]
 801312a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801312e:	68f9      	ldr	r1, [r7, #12]
 8013130:	4613      	mov	r3, r2
 8013132:	00db      	lsls	r3, r3, #3
 8013134:	4413      	add	r3, r2
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	440b      	add	r3, r1
 801313a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801313e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013140:	4618      	mov	r0, r3
 8013142:	3714      	adds	r7, #20
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr

0801314c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b084      	sub	sp, #16
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	460b      	mov	r3, r1
 8013156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013158:	2300      	movs	r3, #0
 801315a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801315c:	2300      	movs	r3, #0
 801315e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013166:	78fa      	ldrb	r2, [r7, #3]
 8013168:	4611      	mov	r1, r2
 801316a:	4618      	mov	r0, r3
 801316c:	f7f6 f868 	bl	8009240 <HAL_PCD_SetAddress>
 8013170:	4603      	mov	r3, r0
 8013172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013174:	7bfb      	ldrb	r3, [r7, #15]
 8013176:	4618      	mov	r0, r3
 8013178:	f000 f874 	bl	8013264 <USBD_Get_USB_Status>
 801317c:	4603      	mov	r3, r0
 801317e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013180:	7bbb      	ldrb	r3, [r7, #14]
}
 8013182:	4618      	mov	r0, r3
 8013184:	3710      	adds	r7, #16
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}

0801318a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801318a:	b580      	push	{r7, lr}
 801318c:	b086      	sub	sp, #24
 801318e:	af00      	add	r7, sp, #0
 8013190:	60f8      	str	r0, [r7, #12]
 8013192:	607a      	str	r2, [r7, #4]
 8013194:	603b      	str	r3, [r7, #0]
 8013196:	460b      	mov	r3, r1
 8013198:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801319a:	2300      	movs	r3, #0
 801319c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801319e:	2300      	movs	r3, #0
 80131a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80131a8:	7af9      	ldrb	r1, [r7, #11]
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	f7f6 f981 	bl	80094b4 <HAL_PCD_EP_Transmit>
 80131b2:	4603      	mov	r3, r0
 80131b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131b6:	7dfb      	ldrb	r3, [r7, #23]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f000 f853 	bl	8013264 <USBD_Get_USB_Status>
 80131be:	4603      	mov	r3, r0
 80131c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80131c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3718      	adds	r7, #24
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b086      	sub	sp, #24
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	60f8      	str	r0, [r7, #12]
 80131d4:	607a      	str	r2, [r7, #4]
 80131d6:	603b      	str	r3, [r7, #0]
 80131d8:	460b      	mov	r3, r1
 80131da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131dc:	2300      	movs	r3, #0
 80131de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131e0:	2300      	movs	r3, #0
 80131e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80131ea:	7af9      	ldrb	r1, [r7, #11]
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	f7f6 f8fd 	bl	80093ee <HAL_PCD_EP_Receive>
 80131f4:	4603      	mov	r3, r0
 80131f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131f8:	7dfb      	ldrb	r3, [r7, #23]
 80131fa:	4618      	mov	r0, r3
 80131fc:	f000 f832 	bl	8013264 <USBD_Get_USB_Status>
 8013200:	4603      	mov	r3, r0
 8013202:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013204:	7dbb      	ldrb	r3, [r7, #22]
}
 8013206:	4618      	mov	r0, r3
 8013208:	3718      	adds	r7, #24
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}

0801320e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801320e:	b580      	push	{r7, lr}
 8013210:	b082      	sub	sp, #8
 8013212:	af00      	add	r7, sp, #0
 8013214:	6078      	str	r0, [r7, #4]
 8013216:	460b      	mov	r3, r1
 8013218:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013220:	78fa      	ldrb	r2, [r7, #3]
 8013222:	4611      	mov	r1, r2
 8013224:	4618      	mov	r0, r3
 8013226:	f7f6 f92d 	bl	8009484 <HAL_PCD_EP_GetRxCount>
 801322a:	4603      	mov	r3, r0
}
 801322c:	4618      	mov	r0, r3
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801323c:	4b03      	ldr	r3, [pc, #12]	; (801324c <USBD_static_malloc+0x18>)
}
 801323e:	4618      	mov	r0, r3
 8013240:	370c      	adds	r7, #12
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr
 801324a:	bf00      	nop
 801324c:	24003408 	.word	0x24003408

08013250 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013250:	b480      	push	{r7}
 8013252:	b083      	sub	sp, #12
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]

}
 8013258:	bf00      	nop
 801325a:	370c      	adds	r7, #12
 801325c:	46bd      	mov	sp, r7
 801325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013262:	4770      	bx	lr

08013264 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013264:	b480      	push	{r7}
 8013266:	b085      	sub	sp, #20
 8013268:	af00      	add	r7, sp, #0
 801326a:	4603      	mov	r3, r0
 801326c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801326e:	2300      	movs	r3, #0
 8013270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013272:	79fb      	ldrb	r3, [r7, #7]
 8013274:	2b03      	cmp	r3, #3
 8013276:	d817      	bhi.n	80132a8 <USBD_Get_USB_Status+0x44>
 8013278:	a201      	add	r2, pc, #4	; (adr r2, 8013280 <USBD_Get_USB_Status+0x1c>)
 801327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801327e:	bf00      	nop
 8013280:	08013291 	.word	0x08013291
 8013284:	08013297 	.word	0x08013297
 8013288:	0801329d 	.word	0x0801329d
 801328c:	080132a3 	.word	0x080132a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013290:	2300      	movs	r3, #0
 8013292:	73fb      	strb	r3, [r7, #15]
    break;
 8013294:	e00b      	b.n	80132ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013296:	2303      	movs	r3, #3
 8013298:	73fb      	strb	r3, [r7, #15]
    break;
 801329a:	e008      	b.n	80132ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801329c:	2301      	movs	r3, #1
 801329e:	73fb      	strb	r3, [r7, #15]
    break;
 80132a0:	e005      	b.n	80132ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80132a2:	2303      	movs	r3, #3
 80132a4:	73fb      	strb	r3, [r7, #15]
    break;
 80132a6:	e002      	b.n	80132ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80132a8:	2303      	movs	r3, #3
 80132aa:	73fb      	strb	r3, [r7, #15]
    break;
 80132ac:	bf00      	nop
  }
  return usb_status;
 80132ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3714      	adds	r7, #20
 80132b4:	46bd      	mov	sp, r7
 80132b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ba:	4770      	bx	lr
 80132bc:	0000      	movs	r0, r0
	...

080132c0 <fmod>:
 80132c0:	b508      	push	{r3, lr}
 80132c2:	ed2d 8b04 	vpush	{d8-d9}
 80132c6:	eeb0 9b40 	vmov.f64	d9, d0
 80132ca:	eeb0 8b41 	vmov.f64	d8, d1
 80132ce:	f000 f81b 	bl	8013308 <__ieee754_fmod>
 80132d2:	eeb4 9b48 	vcmp.f64	d9, d8
 80132d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132da:	d60c      	bvs.n	80132f6 <fmod+0x36>
 80132dc:	ed9f 9b08 	vldr	d9, [pc, #32]	; 8013300 <fmod+0x40>
 80132e0:	eeb4 8b49 	vcmp.f64	d8, d9
 80132e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e8:	d105      	bne.n	80132f6 <fmod+0x36>
 80132ea:	f000 f91f 	bl	801352c <__errno>
 80132ee:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80132f2:	2321      	movs	r3, #33	; 0x21
 80132f4:	6003      	str	r3, [r0, #0]
 80132f6:	ecbd 8b04 	vpop	{d8-d9}
 80132fa:	bd08      	pop	{r3, pc}
 80132fc:	f3af 8000 	nop.w
	...

08013308 <__ieee754_fmod>:
 8013308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801330c:	ed8d 1b00 	vstr	d1, [sp]
 8013310:	e9dd 6500 	ldrd	r6, r5, [sp]
 8013314:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8013318:	ea57 0306 	orrs.w	r3, r7, r6
 801331c:	46b4      	mov	ip, r6
 801331e:	d00d      	beq.n	801333c <__ieee754_fmod+0x34>
 8013320:	ee10 9a90 	vmov	r9, s1
 8013324:	4a7b      	ldr	r2, [pc, #492]	; (8013514 <__ieee754_fmod+0x20c>)
 8013326:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801332a:	4293      	cmp	r3, r2
 801332c:	dc06      	bgt.n	801333c <__ieee754_fmod+0x34>
 801332e:	4272      	negs	r2, r6
 8013330:	4879      	ldr	r0, [pc, #484]	; (8013518 <__ieee754_fmod+0x210>)
 8013332:	4332      	orrs	r2, r6
 8013334:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
 8013338:	4282      	cmp	r2, r0
 801333a:	d908      	bls.n	801334e <__ieee754_fmod+0x46>
 801333c:	ed9d 7b00 	vldr	d7, [sp]
 8013340:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013344:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8013348:	b003      	add	sp, #12
 801334a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801334e:	42bb      	cmp	r3, r7
 8013350:	ee10 ea10 	vmov	lr, s0
 8013354:	ee10 1a10 	vmov	r1, s0
 8013358:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 801335c:	dc09      	bgt.n	8013372 <__ieee754_fmod+0x6a>
 801335e:	dbf3      	blt.n	8013348 <__ieee754_fmod+0x40>
 8013360:	45b6      	cmp	lr, r6
 8013362:	d3f1      	bcc.n	8013348 <__ieee754_fmod+0x40>
 8013364:	d105      	bne.n	8013372 <__ieee754_fmod+0x6a>
 8013366:	4b6d      	ldr	r3, [pc, #436]	; (801351c <__ieee754_fmod+0x214>)
 8013368:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 801336c:	ed94 0b00 	vldr	d0, [r4]
 8013370:	e7ea      	b.n	8013348 <__ieee754_fmod+0x40>
 8013372:	ea19 0f00 	tst.w	r9, r0
 8013376:	d14d      	bne.n	8013414 <__ieee754_fmod+0x10c>
 8013378:	2b00      	cmp	r3, #0
 801337a:	d144      	bne.n	8013406 <__ieee754_fmod+0xfe>
 801337c:	4868      	ldr	r0, [pc, #416]	; (8013520 <__ieee754_fmod+0x218>)
 801337e:	4672      	mov	r2, lr
 8013380:	2a00      	cmp	r2, #0
 8013382:	dc3d      	bgt.n	8013400 <__ieee754_fmod+0xf8>
 8013384:	4a64      	ldr	r2, [pc, #400]	; (8013518 <__ieee754_fmod+0x210>)
 8013386:	402a      	ands	r2, r5
 8013388:	2a00      	cmp	r2, #0
 801338a:	d155      	bne.n	8013438 <__ieee754_fmod+0x130>
 801338c:	2f00      	cmp	r7, #0
 801338e:	d149      	bne.n	8013424 <__ieee754_fmod+0x11c>
 8013390:	46b0      	mov	r8, r6
 8013392:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8013396:	f1b8 0f00 	cmp.w	r8, #0
 801339a:	dc3f      	bgt.n	801341c <__ieee754_fmod+0x114>
 801339c:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8013524 <__ieee754_fmod+0x21c>
 80133a0:	4540      	cmp	r0, r8
 80133a2:	db4d      	blt.n	8013440 <__ieee754_fmod+0x138>
 80133a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80133ac:	f8df e174 	ldr.w	lr, [pc, #372]	; 8013524 <__ieee754_fmod+0x21c>
 80133b0:	4572      	cmp	r2, lr
 80133b2:	db59      	blt.n	8013468 <__ieee754_fmod+0x160>
 80133b4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80133b8:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80133bc:	1a80      	subs	r0, r0, r2
 80133be:	1b5e      	subs	r6, r3, r5
 80133c0:	eba1 070c 	sub.w	r7, r1, ip
 80133c4:	2800      	cmp	r0, #0
 80133c6:	d165      	bne.n	8013494 <__ieee754_fmod+0x18c>
 80133c8:	4561      	cmp	r1, ip
 80133ca:	bf38      	it	cc
 80133cc:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80133d0:	2e00      	cmp	r6, #0
 80133d2:	bfa4      	itt	ge
 80133d4:	4639      	movge	r1, r7
 80133d6:	4633      	movge	r3, r6
 80133d8:	ea53 0001 	orrs.w	r0, r3, r1
 80133dc:	d0c3      	beq.n	8013366 <__ieee754_fmod+0x5e>
 80133de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80133e2:	db6c      	blt.n	80134be <__ieee754_fmod+0x1b6>
 80133e4:	484f      	ldr	r0, [pc, #316]	; (8013524 <__ieee754_fmod+0x21c>)
 80133e6:	4282      	cmp	r2, r0
 80133e8:	db6f      	blt.n	80134ca <__ieee754_fmod+0x1c2>
 80133ea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80133ee:	4323      	orrs	r3, r4
 80133f0:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80133f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80133f8:	460c      	mov	r4, r1
 80133fa:	ec45 4b10 	vmov	d0, r4, r5
 80133fe:	e7a3      	b.n	8013348 <__ieee754_fmod+0x40>
 8013400:	3801      	subs	r0, #1
 8013402:	0052      	lsls	r2, r2, #1
 8013404:	e7bc      	b.n	8013380 <__ieee754_fmod+0x78>
 8013406:	4847      	ldr	r0, [pc, #284]	; (8013524 <__ieee754_fmod+0x21c>)
 8013408:	02da      	lsls	r2, r3, #11
 801340a:	2a00      	cmp	r2, #0
 801340c:	ddba      	ble.n	8013384 <__ieee754_fmod+0x7c>
 801340e:	3801      	subs	r0, #1
 8013410:	0052      	lsls	r2, r2, #1
 8013412:	e7fa      	b.n	801340a <__ieee754_fmod+0x102>
 8013414:	1518      	asrs	r0, r3, #20
 8013416:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801341a:	e7b3      	b.n	8013384 <__ieee754_fmod+0x7c>
 801341c:	3a01      	subs	r2, #1
 801341e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8013422:	e7b8      	b.n	8013396 <__ieee754_fmod+0x8e>
 8013424:	4a3f      	ldr	r2, [pc, #252]	; (8013524 <__ieee754_fmod+0x21c>)
 8013426:	ea4f 28c7 	mov.w	r8, r7, lsl #11
 801342a:	f1b8 0f00 	cmp.w	r8, #0
 801342e:	ddb5      	ble.n	801339c <__ieee754_fmod+0x94>
 8013430:	3a01      	subs	r2, #1
 8013432:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8013436:	e7f8      	b.n	801342a <__ieee754_fmod+0x122>
 8013438:	153a      	asrs	r2, r7, #20
 801343a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801343e:	e7ad      	b.n	801339c <__ieee754_fmod+0x94>
 8013440:	eba8 0100 	sub.w	r1, r8, r0
 8013444:	291f      	cmp	r1, #31
 8013446:	dc09      	bgt.n	801345c <__ieee754_fmod+0x154>
 8013448:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 801344c:	408b      	lsls	r3, r1
 801344e:	fa2e f808 	lsr.w	r8, lr, r8
 8013452:	ea48 0303 	orr.w	r3, r8, r3
 8013456:	fa0e f101 	lsl.w	r1, lr, r1
 801345a:	e7a7      	b.n	80133ac <__ieee754_fmod+0xa4>
 801345c:	4b32      	ldr	r3, [pc, #200]	; (8013528 <__ieee754_fmod+0x220>)
 801345e:	1a1b      	subs	r3, r3, r0
 8013460:	fa0e f303 	lsl.w	r3, lr, r3
 8013464:	2100      	movs	r1, #0
 8013466:	e7a1      	b.n	80133ac <__ieee754_fmod+0xa4>
 8013468:	ebae 0c02 	sub.w	ip, lr, r2
 801346c:	f1bc 0f1f 	cmp.w	ip, #31
 8013470:	dc09      	bgt.n	8013486 <__ieee754_fmod+0x17e>
 8013472:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8013476:	fa07 f70c 	lsl.w	r7, r7, ip
 801347a:	fa26 f505 	lsr.w	r5, r6, r5
 801347e:	433d      	orrs	r5, r7
 8013480:	fa06 fc0c 	lsl.w	ip, r6, ip
 8013484:	e79a      	b.n	80133bc <__ieee754_fmod+0xb4>
 8013486:	4d28      	ldr	r5, [pc, #160]	; (8013528 <__ieee754_fmod+0x220>)
 8013488:	1aad      	subs	r5, r5, r2
 801348a:	fa06 f505 	lsl.w	r5, r6, r5
 801348e:	f04f 0c00 	mov.w	ip, #0
 8013492:	e793      	b.n	80133bc <__ieee754_fmod+0xb4>
 8013494:	4561      	cmp	r1, ip
 8013496:	bf38      	it	cc
 8013498:	f106 36ff 	addcc.w	r6, r6, #4294967295
 801349c:	2e00      	cmp	r6, #0
 801349e:	da05      	bge.n	80134ac <__ieee754_fmod+0x1a4>
 80134a0:	0fce      	lsrs	r6, r1, #31
 80134a2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80134a6:	0049      	lsls	r1, r1, #1
 80134a8:	3801      	subs	r0, #1
 80134aa:	e788      	b.n	80133be <__ieee754_fmod+0xb6>
 80134ac:	ea56 0307 	orrs.w	r3, r6, r7
 80134b0:	f43f af59 	beq.w	8013366 <__ieee754_fmod+0x5e>
 80134b4:	0ffb      	lsrs	r3, r7, #31
 80134b6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80134ba:	0079      	lsls	r1, r7, #1
 80134bc:	e7f4      	b.n	80134a8 <__ieee754_fmod+0x1a0>
 80134be:	0fc8      	lsrs	r0, r1, #31
 80134c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80134c4:	0049      	lsls	r1, r1, #1
 80134c6:	3a01      	subs	r2, #1
 80134c8:	e789      	b.n	80133de <__ieee754_fmod+0xd6>
 80134ca:	1a80      	subs	r0, r0, r2
 80134cc:	2814      	cmp	r0, #20
 80134ce:	dc0c      	bgt.n	80134ea <__ieee754_fmod+0x1e2>
 80134d0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80134d4:	fa03 f202 	lsl.w	r2, r3, r2
 80134d8:	40c1      	lsrs	r1, r0
 80134da:	430a      	orrs	r2, r1
 80134dc:	4103      	asrs	r3, r0
 80134de:	ea43 0104 	orr.w	r1, r3, r4
 80134e2:	4610      	mov	r0, r2
 80134e4:	ec41 0b10 	vmov	d0, r0, r1
 80134e8:	e72e      	b.n	8013348 <__ieee754_fmod+0x40>
 80134ea:	281f      	cmp	r0, #31
 80134ec:	dc07      	bgt.n	80134fe <__ieee754_fmod+0x1f6>
 80134ee:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80134f2:	40c1      	lsrs	r1, r0
 80134f4:	fa03 f202 	lsl.w	r2, r3, r2
 80134f8:	430a      	orrs	r2, r1
 80134fa:	4623      	mov	r3, r4
 80134fc:	e7ef      	b.n	80134de <__ieee754_fmod+0x1d6>
 80134fe:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8013502:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013506:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801350a:	32e2      	adds	r2, #226	; 0xe2
 801350c:	fa43 f202 	asr.w	r2, r3, r2
 8013510:	e7f3      	b.n	80134fa <__ieee754_fmod+0x1f2>
 8013512:	bf00      	nop
 8013514:	7fefffff 	.word	0x7fefffff
 8013518:	7ff00000 	.word	0x7ff00000
 801351c:	080146a8 	.word	0x080146a8
 8013520:	fffffbed 	.word	0xfffffbed
 8013524:	fffffc02 	.word	0xfffffc02
 8013528:	fffffbe2 	.word	0xfffffbe2

0801352c <__errno>:
 801352c:	4b01      	ldr	r3, [pc, #4]	; (8013534 <__errno+0x8>)
 801352e:	6818      	ldr	r0, [r3, #0]
 8013530:	4770      	bx	lr
 8013532:	bf00      	nop
 8013534:	2400110c 	.word	0x2400110c

08013538 <__libc_init_array>:
 8013538:	b570      	push	{r4, r5, r6, lr}
 801353a:	4d0d      	ldr	r5, [pc, #52]	; (8013570 <__libc_init_array+0x38>)
 801353c:	4c0d      	ldr	r4, [pc, #52]	; (8013574 <__libc_init_array+0x3c>)
 801353e:	1b64      	subs	r4, r4, r5
 8013540:	10a4      	asrs	r4, r4, #2
 8013542:	2600      	movs	r6, #0
 8013544:	42a6      	cmp	r6, r4
 8013546:	d109      	bne.n	801355c <__libc_init_array+0x24>
 8013548:	4d0b      	ldr	r5, [pc, #44]	; (8013578 <__libc_init_array+0x40>)
 801354a:	4c0c      	ldr	r4, [pc, #48]	; (801357c <__libc_init_array+0x44>)
 801354c:	f001 f81a 	bl	8014584 <_init>
 8013550:	1b64      	subs	r4, r4, r5
 8013552:	10a4      	asrs	r4, r4, #2
 8013554:	2600      	movs	r6, #0
 8013556:	42a6      	cmp	r6, r4
 8013558:	d105      	bne.n	8013566 <__libc_init_array+0x2e>
 801355a:	bd70      	pop	{r4, r5, r6, pc}
 801355c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013560:	4798      	blx	r3
 8013562:	3601      	adds	r6, #1
 8013564:	e7ee      	b.n	8013544 <__libc_init_array+0xc>
 8013566:	f855 3b04 	ldr.w	r3, [r5], #4
 801356a:	4798      	blx	r3
 801356c:	3601      	adds	r6, #1
 801356e:	e7f2      	b.n	8013556 <__libc_init_array+0x1e>
 8013570:	08014750 	.word	0x08014750
 8013574:	08014750 	.word	0x08014750
 8013578:	08014750 	.word	0x08014750
 801357c:	08014754 	.word	0x08014754

08013580 <memcpy>:
 8013580:	440a      	add	r2, r1
 8013582:	4291      	cmp	r1, r2
 8013584:	f100 33ff 	add.w	r3, r0, #4294967295
 8013588:	d100      	bne.n	801358c <memcpy+0xc>
 801358a:	4770      	bx	lr
 801358c:	b510      	push	{r4, lr}
 801358e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013596:	4291      	cmp	r1, r2
 8013598:	d1f9      	bne.n	801358e <memcpy+0xe>
 801359a:	bd10      	pop	{r4, pc}

0801359c <memset>:
 801359c:	4402      	add	r2, r0
 801359e:	4603      	mov	r3, r0
 80135a0:	4293      	cmp	r3, r2
 80135a2:	d100      	bne.n	80135a6 <memset+0xa>
 80135a4:	4770      	bx	lr
 80135a6:	f803 1b01 	strb.w	r1, [r3], #1
 80135aa:	e7f9      	b.n	80135a0 <memset+0x4>

080135ac <iprintf>:
 80135ac:	b40f      	push	{r0, r1, r2, r3}
 80135ae:	4b0a      	ldr	r3, [pc, #40]	; (80135d8 <iprintf+0x2c>)
 80135b0:	b513      	push	{r0, r1, r4, lr}
 80135b2:	681c      	ldr	r4, [r3, #0]
 80135b4:	b124      	cbz	r4, 80135c0 <iprintf+0x14>
 80135b6:	69a3      	ldr	r3, [r4, #24]
 80135b8:	b913      	cbnz	r3, 80135c0 <iprintf+0x14>
 80135ba:	4620      	mov	r0, r4
 80135bc:	f000 f87c 	bl	80136b8 <__sinit>
 80135c0:	ab05      	add	r3, sp, #20
 80135c2:	9a04      	ldr	r2, [sp, #16]
 80135c4:	68a1      	ldr	r1, [r4, #8]
 80135c6:	9301      	str	r3, [sp, #4]
 80135c8:	4620      	mov	r0, r4
 80135ca:	f000 f9d3 	bl	8013974 <_vfiprintf_r>
 80135ce:	b002      	add	sp, #8
 80135d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135d4:	b004      	add	sp, #16
 80135d6:	4770      	bx	lr
 80135d8:	2400110c 	.word	0x2400110c

080135dc <putchar>:
 80135dc:	4b09      	ldr	r3, [pc, #36]	; (8013604 <putchar+0x28>)
 80135de:	b513      	push	{r0, r1, r4, lr}
 80135e0:	681c      	ldr	r4, [r3, #0]
 80135e2:	4601      	mov	r1, r0
 80135e4:	b134      	cbz	r4, 80135f4 <putchar+0x18>
 80135e6:	69a3      	ldr	r3, [r4, #24]
 80135e8:	b923      	cbnz	r3, 80135f4 <putchar+0x18>
 80135ea:	9001      	str	r0, [sp, #4]
 80135ec:	4620      	mov	r0, r4
 80135ee:	f000 f863 	bl	80136b8 <__sinit>
 80135f2:	9901      	ldr	r1, [sp, #4]
 80135f4:	68a2      	ldr	r2, [r4, #8]
 80135f6:	4620      	mov	r0, r4
 80135f8:	b002      	add	sp, #8
 80135fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135fe:	f000 bc7d 	b.w	8013efc <_putc_r>
 8013602:	bf00      	nop
 8013604:	2400110c 	.word	0x2400110c

08013608 <std>:
 8013608:	2300      	movs	r3, #0
 801360a:	b510      	push	{r4, lr}
 801360c:	4604      	mov	r4, r0
 801360e:	e9c0 3300 	strd	r3, r3, [r0]
 8013612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013616:	6083      	str	r3, [r0, #8]
 8013618:	8181      	strh	r1, [r0, #12]
 801361a:	6643      	str	r3, [r0, #100]	; 0x64
 801361c:	81c2      	strh	r2, [r0, #14]
 801361e:	6183      	str	r3, [r0, #24]
 8013620:	4619      	mov	r1, r3
 8013622:	2208      	movs	r2, #8
 8013624:	305c      	adds	r0, #92	; 0x5c
 8013626:	f7ff ffb9 	bl	801359c <memset>
 801362a:	4b05      	ldr	r3, [pc, #20]	; (8013640 <std+0x38>)
 801362c:	6263      	str	r3, [r4, #36]	; 0x24
 801362e:	4b05      	ldr	r3, [pc, #20]	; (8013644 <std+0x3c>)
 8013630:	62a3      	str	r3, [r4, #40]	; 0x28
 8013632:	4b05      	ldr	r3, [pc, #20]	; (8013648 <std+0x40>)
 8013634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013636:	4b05      	ldr	r3, [pc, #20]	; (801364c <std+0x44>)
 8013638:	6224      	str	r4, [r4, #32]
 801363a:	6323      	str	r3, [r4, #48]	; 0x30
 801363c:	bd10      	pop	{r4, pc}
 801363e:	bf00      	nop
 8013640:	08013fad 	.word	0x08013fad
 8013644:	08013fcf 	.word	0x08013fcf
 8013648:	08014007 	.word	0x08014007
 801364c:	0801402b 	.word	0x0801402b

08013650 <_cleanup_r>:
 8013650:	4901      	ldr	r1, [pc, #4]	; (8013658 <_cleanup_r+0x8>)
 8013652:	f000 b8af 	b.w	80137b4 <_fwalk_reent>
 8013656:	bf00      	nop
 8013658:	08014305 	.word	0x08014305

0801365c <__sfmoreglue>:
 801365c:	b570      	push	{r4, r5, r6, lr}
 801365e:	2268      	movs	r2, #104	; 0x68
 8013660:	1e4d      	subs	r5, r1, #1
 8013662:	4355      	muls	r5, r2
 8013664:	460e      	mov	r6, r1
 8013666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801366a:	f000 f8e5 	bl	8013838 <_malloc_r>
 801366e:	4604      	mov	r4, r0
 8013670:	b140      	cbz	r0, 8013684 <__sfmoreglue+0x28>
 8013672:	2100      	movs	r1, #0
 8013674:	e9c0 1600 	strd	r1, r6, [r0]
 8013678:	300c      	adds	r0, #12
 801367a:	60a0      	str	r0, [r4, #8]
 801367c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013680:	f7ff ff8c 	bl	801359c <memset>
 8013684:	4620      	mov	r0, r4
 8013686:	bd70      	pop	{r4, r5, r6, pc}

08013688 <__sfp_lock_acquire>:
 8013688:	4801      	ldr	r0, [pc, #4]	; (8013690 <__sfp_lock_acquire+0x8>)
 801368a:	f000 b8b3 	b.w	80137f4 <__retarget_lock_acquire_recursive>
 801368e:	bf00      	nop
 8013690:	24003629 	.word	0x24003629

08013694 <__sfp_lock_release>:
 8013694:	4801      	ldr	r0, [pc, #4]	; (801369c <__sfp_lock_release+0x8>)
 8013696:	f000 b8ae 	b.w	80137f6 <__retarget_lock_release_recursive>
 801369a:	bf00      	nop
 801369c:	24003629 	.word	0x24003629

080136a0 <__sinit_lock_acquire>:
 80136a0:	4801      	ldr	r0, [pc, #4]	; (80136a8 <__sinit_lock_acquire+0x8>)
 80136a2:	f000 b8a7 	b.w	80137f4 <__retarget_lock_acquire_recursive>
 80136a6:	bf00      	nop
 80136a8:	2400362a 	.word	0x2400362a

080136ac <__sinit_lock_release>:
 80136ac:	4801      	ldr	r0, [pc, #4]	; (80136b4 <__sinit_lock_release+0x8>)
 80136ae:	f000 b8a2 	b.w	80137f6 <__retarget_lock_release_recursive>
 80136b2:	bf00      	nop
 80136b4:	2400362a 	.word	0x2400362a

080136b8 <__sinit>:
 80136b8:	b510      	push	{r4, lr}
 80136ba:	4604      	mov	r4, r0
 80136bc:	f7ff fff0 	bl	80136a0 <__sinit_lock_acquire>
 80136c0:	69a3      	ldr	r3, [r4, #24]
 80136c2:	b11b      	cbz	r3, 80136cc <__sinit+0x14>
 80136c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136c8:	f7ff bff0 	b.w	80136ac <__sinit_lock_release>
 80136cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80136d0:	6523      	str	r3, [r4, #80]	; 0x50
 80136d2:	4b13      	ldr	r3, [pc, #76]	; (8013720 <__sinit+0x68>)
 80136d4:	4a13      	ldr	r2, [pc, #76]	; (8013724 <__sinit+0x6c>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80136da:	42a3      	cmp	r3, r4
 80136dc:	bf04      	itt	eq
 80136de:	2301      	moveq	r3, #1
 80136e0:	61a3      	streq	r3, [r4, #24]
 80136e2:	4620      	mov	r0, r4
 80136e4:	f000 f820 	bl	8013728 <__sfp>
 80136e8:	6060      	str	r0, [r4, #4]
 80136ea:	4620      	mov	r0, r4
 80136ec:	f000 f81c 	bl	8013728 <__sfp>
 80136f0:	60a0      	str	r0, [r4, #8]
 80136f2:	4620      	mov	r0, r4
 80136f4:	f000 f818 	bl	8013728 <__sfp>
 80136f8:	2200      	movs	r2, #0
 80136fa:	60e0      	str	r0, [r4, #12]
 80136fc:	2104      	movs	r1, #4
 80136fe:	6860      	ldr	r0, [r4, #4]
 8013700:	f7ff ff82 	bl	8013608 <std>
 8013704:	68a0      	ldr	r0, [r4, #8]
 8013706:	2201      	movs	r2, #1
 8013708:	2109      	movs	r1, #9
 801370a:	f7ff ff7d 	bl	8013608 <std>
 801370e:	68e0      	ldr	r0, [r4, #12]
 8013710:	2202      	movs	r2, #2
 8013712:	2112      	movs	r1, #18
 8013714:	f7ff ff78 	bl	8013608 <std>
 8013718:	2301      	movs	r3, #1
 801371a:	61a3      	str	r3, [r4, #24]
 801371c:	e7d2      	b.n	80136c4 <__sinit+0xc>
 801371e:	bf00      	nop
 8013720:	080146b8 	.word	0x080146b8
 8013724:	08013651 	.word	0x08013651

08013728 <__sfp>:
 8013728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801372a:	4607      	mov	r7, r0
 801372c:	f7ff ffac 	bl	8013688 <__sfp_lock_acquire>
 8013730:	4b1e      	ldr	r3, [pc, #120]	; (80137ac <__sfp+0x84>)
 8013732:	681e      	ldr	r6, [r3, #0]
 8013734:	69b3      	ldr	r3, [r6, #24]
 8013736:	b913      	cbnz	r3, 801373e <__sfp+0x16>
 8013738:	4630      	mov	r0, r6
 801373a:	f7ff ffbd 	bl	80136b8 <__sinit>
 801373e:	3648      	adds	r6, #72	; 0x48
 8013740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013744:	3b01      	subs	r3, #1
 8013746:	d503      	bpl.n	8013750 <__sfp+0x28>
 8013748:	6833      	ldr	r3, [r6, #0]
 801374a:	b30b      	cbz	r3, 8013790 <__sfp+0x68>
 801374c:	6836      	ldr	r6, [r6, #0]
 801374e:	e7f7      	b.n	8013740 <__sfp+0x18>
 8013750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013754:	b9d5      	cbnz	r5, 801378c <__sfp+0x64>
 8013756:	4b16      	ldr	r3, [pc, #88]	; (80137b0 <__sfp+0x88>)
 8013758:	60e3      	str	r3, [r4, #12]
 801375a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801375e:	6665      	str	r5, [r4, #100]	; 0x64
 8013760:	f000 f847 	bl	80137f2 <__retarget_lock_init_recursive>
 8013764:	f7ff ff96 	bl	8013694 <__sfp_lock_release>
 8013768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801376c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013770:	6025      	str	r5, [r4, #0]
 8013772:	61a5      	str	r5, [r4, #24]
 8013774:	2208      	movs	r2, #8
 8013776:	4629      	mov	r1, r5
 8013778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801377c:	f7ff ff0e 	bl	801359c <memset>
 8013780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013788:	4620      	mov	r0, r4
 801378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801378c:	3468      	adds	r4, #104	; 0x68
 801378e:	e7d9      	b.n	8013744 <__sfp+0x1c>
 8013790:	2104      	movs	r1, #4
 8013792:	4638      	mov	r0, r7
 8013794:	f7ff ff62 	bl	801365c <__sfmoreglue>
 8013798:	4604      	mov	r4, r0
 801379a:	6030      	str	r0, [r6, #0]
 801379c:	2800      	cmp	r0, #0
 801379e:	d1d5      	bne.n	801374c <__sfp+0x24>
 80137a0:	f7ff ff78 	bl	8013694 <__sfp_lock_release>
 80137a4:	230c      	movs	r3, #12
 80137a6:	603b      	str	r3, [r7, #0]
 80137a8:	e7ee      	b.n	8013788 <__sfp+0x60>
 80137aa:	bf00      	nop
 80137ac:	080146b8 	.word	0x080146b8
 80137b0:	ffff0001 	.word	0xffff0001

080137b4 <_fwalk_reent>:
 80137b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137b8:	4606      	mov	r6, r0
 80137ba:	4688      	mov	r8, r1
 80137bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80137c0:	2700      	movs	r7, #0
 80137c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80137c6:	f1b9 0901 	subs.w	r9, r9, #1
 80137ca:	d505      	bpl.n	80137d8 <_fwalk_reent+0x24>
 80137cc:	6824      	ldr	r4, [r4, #0]
 80137ce:	2c00      	cmp	r4, #0
 80137d0:	d1f7      	bne.n	80137c2 <_fwalk_reent+0xe>
 80137d2:	4638      	mov	r0, r7
 80137d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137d8:	89ab      	ldrh	r3, [r5, #12]
 80137da:	2b01      	cmp	r3, #1
 80137dc:	d907      	bls.n	80137ee <_fwalk_reent+0x3a>
 80137de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80137e2:	3301      	adds	r3, #1
 80137e4:	d003      	beq.n	80137ee <_fwalk_reent+0x3a>
 80137e6:	4629      	mov	r1, r5
 80137e8:	4630      	mov	r0, r6
 80137ea:	47c0      	blx	r8
 80137ec:	4307      	orrs	r7, r0
 80137ee:	3568      	adds	r5, #104	; 0x68
 80137f0:	e7e9      	b.n	80137c6 <_fwalk_reent+0x12>

080137f2 <__retarget_lock_init_recursive>:
 80137f2:	4770      	bx	lr

080137f4 <__retarget_lock_acquire_recursive>:
 80137f4:	4770      	bx	lr

080137f6 <__retarget_lock_release_recursive>:
 80137f6:	4770      	bx	lr

080137f8 <sbrk_aligned>:
 80137f8:	b570      	push	{r4, r5, r6, lr}
 80137fa:	4e0e      	ldr	r6, [pc, #56]	; (8013834 <sbrk_aligned+0x3c>)
 80137fc:	460c      	mov	r4, r1
 80137fe:	6831      	ldr	r1, [r6, #0]
 8013800:	4605      	mov	r5, r0
 8013802:	b911      	cbnz	r1, 801380a <sbrk_aligned+0x12>
 8013804:	f000 fbc2 	bl	8013f8c <_sbrk_r>
 8013808:	6030      	str	r0, [r6, #0]
 801380a:	4621      	mov	r1, r4
 801380c:	4628      	mov	r0, r5
 801380e:	f000 fbbd 	bl	8013f8c <_sbrk_r>
 8013812:	1c43      	adds	r3, r0, #1
 8013814:	d00a      	beq.n	801382c <sbrk_aligned+0x34>
 8013816:	1cc4      	adds	r4, r0, #3
 8013818:	f024 0403 	bic.w	r4, r4, #3
 801381c:	42a0      	cmp	r0, r4
 801381e:	d007      	beq.n	8013830 <sbrk_aligned+0x38>
 8013820:	1a21      	subs	r1, r4, r0
 8013822:	4628      	mov	r0, r5
 8013824:	f000 fbb2 	bl	8013f8c <_sbrk_r>
 8013828:	3001      	adds	r0, #1
 801382a:	d101      	bne.n	8013830 <sbrk_aligned+0x38>
 801382c:	f04f 34ff 	mov.w	r4, #4294967295
 8013830:	4620      	mov	r0, r4
 8013832:	bd70      	pop	{r4, r5, r6, pc}
 8013834:	24003630 	.word	0x24003630

08013838 <_malloc_r>:
 8013838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801383c:	1ccd      	adds	r5, r1, #3
 801383e:	f025 0503 	bic.w	r5, r5, #3
 8013842:	3508      	adds	r5, #8
 8013844:	2d0c      	cmp	r5, #12
 8013846:	bf38      	it	cc
 8013848:	250c      	movcc	r5, #12
 801384a:	2d00      	cmp	r5, #0
 801384c:	4607      	mov	r7, r0
 801384e:	db01      	blt.n	8013854 <_malloc_r+0x1c>
 8013850:	42a9      	cmp	r1, r5
 8013852:	d905      	bls.n	8013860 <_malloc_r+0x28>
 8013854:	230c      	movs	r3, #12
 8013856:	603b      	str	r3, [r7, #0]
 8013858:	2600      	movs	r6, #0
 801385a:	4630      	mov	r0, r6
 801385c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013860:	4e2e      	ldr	r6, [pc, #184]	; (801391c <_malloc_r+0xe4>)
 8013862:	f000 fe03 	bl	801446c <__malloc_lock>
 8013866:	6833      	ldr	r3, [r6, #0]
 8013868:	461c      	mov	r4, r3
 801386a:	bb34      	cbnz	r4, 80138ba <_malloc_r+0x82>
 801386c:	4629      	mov	r1, r5
 801386e:	4638      	mov	r0, r7
 8013870:	f7ff ffc2 	bl	80137f8 <sbrk_aligned>
 8013874:	1c43      	adds	r3, r0, #1
 8013876:	4604      	mov	r4, r0
 8013878:	d14d      	bne.n	8013916 <_malloc_r+0xde>
 801387a:	6834      	ldr	r4, [r6, #0]
 801387c:	4626      	mov	r6, r4
 801387e:	2e00      	cmp	r6, #0
 8013880:	d140      	bne.n	8013904 <_malloc_r+0xcc>
 8013882:	6823      	ldr	r3, [r4, #0]
 8013884:	4631      	mov	r1, r6
 8013886:	4638      	mov	r0, r7
 8013888:	eb04 0803 	add.w	r8, r4, r3
 801388c:	f000 fb7e 	bl	8013f8c <_sbrk_r>
 8013890:	4580      	cmp	r8, r0
 8013892:	d13a      	bne.n	801390a <_malloc_r+0xd2>
 8013894:	6821      	ldr	r1, [r4, #0]
 8013896:	3503      	adds	r5, #3
 8013898:	1a6d      	subs	r5, r5, r1
 801389a:	f025 0503 	bic.w	r5, r5, #3
 801389e:	3508      	adds	r5, #8
 80138a0:	2d0c      	cmp	r5, #12
 80138a2:	bf38      	it	cc
 80138a4:	250c      	movcc	r5, #12
 80138a6:	4629      	mov	r1, r5
 80138a8:	4638      	mov	r0, r7
 80138aa:	f7ff ffa5 	bl	80137f8 <sbrk_aligned>
 80138ae:	3001      	adds	r0, #1
 80138b0:	d02b      	beq.n	801390a <_malloc_r+0xd2>
 80138b2:	6823      	ldr	r3, [r4, #0]
 80138b4:	442b      	add	r3, r5
 80138b6:	6023      	str	r3, [r4, #0]
 80138b8:	e00e      	b.n	80138d8 <_malloc_r+0xa0>
 80138ba:	6822      	ldr	r2, [r4, #0]
 80138bc:	1b52      	subs	r2, r2, r5
 80138be:	d41e      	bmi.n	80138fe <_malloc_r+0xc6>
 80138c0:	2a0b      	cmp	r2, #11
 80138c2:	d916      	bls.n	80138f2 <_malloc_r+0xba>
 80138c4:	1961      	adds	r1, r4, r5
 80138c6:	42a3      	cmp	r3, r4
 80138c8:	6025      	str	r5, [r4, #0]
 80138ca:	bf18      	it	ne
 80138cc:	6059      	strne	r1, [r3, #4]
 80138ce:	6863      	ldr	r3, [r4, #4]
 80138d0:	bf08      	it	eq
 80138d2:	6031      	streq	r1, [r6, #0]
 80138d4:	5162      	str	r2, [r4, r5]
 80138d6:	604b      	str	r3, [r1, #4]
 80138d8:	4638      	mov	r0, r7
 80138da:	f104 060b 	add.w	r6, r4, #11
 80138de:	f000 fdcb 	bl	8014478 <__malloc_unlock>
 80138e2:	f026 0607 	bic.w	r6, r6, #7
 80138e6:	1d23      	adds	r3, r4, #4
 80138e8:	1af2      	subs	r2, r6, r3
 80138ea:	d0b6      	beq.n	801385a <_malloc_r+0x22>
 80138ec:	1b9b      	subs	r3, r3, r6
 80138ee:	50a3      	str	r3, [r4, r2]
 80138f0:	e7b3      	b.n	801385a <_malloc_r+0x22>
 80138f2:	6862      	ldr	r2, [r4, #4]
 80138f4:	42a3      	cmp	r3, r4
 80138f6:	bf0c      	ite	eq
 80138f8:	6032      	streq	r2, [r6, #0]
 80138fa:	605a      	strne	r2, [r3, #4]
 80138fc:	e7ec      	b.n	80138d8 <_malloc_r+0xa0>
 80138fe:	4623      	mov	r3, r4
 8013900:	6864      	ldr	r4, [r4, #4]
 8013902:	e7b2      	b.n	801386a <_malloc_r+0x32>
 8013904:	4634      	mov	r4, r6
 8013906:	6876      	ldr	r6, [r6, #4]
 8013908:	e7b9      	b.n	801387e <_malloc_r+0x46>
 801390a:	230c      	movs	r3, #12
 801390c:	603b      	str	r3, [r7, #0]
 801390e:	4638      	mov	r0, r7
 8013910:	f000 fdb2 	bl	8014478 <__malloc_unlock>
 8013914:	e7a1      	b.n	801385a <_malloc_r+0x22>
 8013916:	6025      	str	r5, [r4, #0]
 8013918:	e7de      	b.n	80138d8 <_malloc_r+0xa0>
 801391a:	bf00      	nop
 801391c:	2400362c 	.word	0x2400362c

08013920 <__sfputc_r>:
 8013920:	6893      	ldr	r3, [r2, #8]
 8013922:	3b01      	subs	r3, #1
 8013924:	2b00      	cmp	r3, #0
 8013926:	b410      	push	{r4}
 8013928:	6093      	str	r3, [r2, #8]
 801392a:	da08      	bge.n	801393e <__sfputc_r+0x1e>
 801392c:	6994      	ldr	r4, [r2, #24]
 801392e:	42a3      	cmp	r3, r4
 8013930:	db01      	blt.n	8013936 <__sfputc_r+0x16>
 8013932:	290a      	cmp	r1, #10
 8013934:	d103      	bne.n	801393e <__sfputc_r+0x1e>
 8013936:	f85d 4b04 	ldr.w	r4, [sp], #4
 801393a:	f000 bb7b 	b.w	8014034 <__swbuf_r>
 801393e:	6813      	ldr	r3, [r2, #0]
 8013940:	1c58      	adds	r0, r3, #1
 8013942:	6010      	str	r0, [r2, #0]
 8013944:	7019      	strb	r1, [r3, #0]
 8013946:	4608      	mov	r0, r1
 8013948:	f85d 4b04 	ldr.w	r4, [sp], #4
 801394c:	4770      	bx	lr

0801394e <__sfputs_r>:
 801394e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013950:	4606      	mov	r6, r0
 8013952:	460f      	mov	r7, r1
 8013954:	4614      	mov	r4, r2
 8013956:	18d5      	adds	r5, r2, r3
 8013958:	42ac      	cmp	r4, r5
 801395a:	d101      	bne.n	8013960 <__sfputs_r+0x12>
 801395c:	2000      	movs	r0, #0
 801395e:	e007      	b.n	8013970 <__sfputs_r+0x22>
 8013960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013964:	463a      	mov	r2, r7
 8013966:	4630      	mov	r0, r6
 8013968:	f7ff ffda 	bl	8013920 <__sfputc_r>
 801396c:	1c43      	adds	r3, r0, #1
 801396e:	d1f3      	bne.n	8013958 <__sfputs_r+0xa>
 8013970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013974 <_vfiprintf_r>:
 8013974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013978:	460d      	mov	r5, r1
 801397a:	b09d      	sub	sp, #116	; 0x74
 801397c:	4614      	mov	r4, r2
 801397e:	4698      	mov	r8, r3
 8013980:	4606      	mov	r6, r0
 8013982:	b118      	cbz	r0, 801398c <_vfiprintf_r+0x18>
 8013984:	6983      	ldr	r3, [r0, #24]
 8013986:	b90b      	cbnz	r3, 801398c <_vfiprintf_r+0x18>
 8013988:	f7ff fe96 	bl	80136b8 <__sinit>
 801398c:	4b89      	ldr	r3, [pc, #548]	; (8013bb4 <_vfiprintf_r+0x240>)
 801398e:	429d      	cmp	r5, r3
 8013990:	d11b      	bne.n	80139ca <_vfiprintf_r+0x56>
 8013992:	6875      	ldr	r5, [r6, #4]
 8013994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013996:	07d9      	lsls	r1, r3, #31
 8013998:	d405      	bmi.n	80139a6 <_vfiprintf_r+0x32>
 801399a:	89ab      	ldrh	r3, [r5, #12]
 801399c:	059a      	lsls	r2, r3, #22
 801399e:	d402      	bmi.n	80139a6 <_vfiprintf_r+0x32>
 80139a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139a2:	f7ff ff27 	bl	80137f4 <__retarget_lock_acquire_recursive>
 80139a6:	89ab      	ldrh	r3, [r5, #12]
 80139a8:	071b      	lsls	r3, r3, #28
 80139aa:	d501      	bpl.n	80139b0 <_vfiprintf_r+0x3c>
 80139ac:	692b      	ldr	r3, [r5, #16]
 80139ae:	b9eb      	cbnz	r3, 80139ec <_vfiprintf_r+0x78>
 80139b0:	4629      	mov	r1, r5
 80139b2:	4630      	mov	r0, r6
 80139b4:	f000 fba2 	bl	80140fc <__swsetup_r>
 80139b8:	b1c0      	cbz	r0, 80139ec <_vfiprintf_r+0x78>
 80139ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139bc:	07dc      	lsls	r4, r3, #31
 80139be:	d50e      	bpl.n	80139de <_vfiprintf_r+0x6a>
 80139c0:	f04f 30ff 	mov.w	r0, #4294967295
 80139c4:	b01d      	add	sp, #116	; 0x74
 80139c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ca:	4b7b      	ldr	r3, [pc, #492]	; (8013bb8 <_vfiprintf_r+0x244>)
 80139cc:	429d      	cmp	r5, r3
 80139ce:	d101      	bne.n	80139d4 <_vfiprintf_r+0x60>
 80139d0:	68b5      	ldr	r5, [r6, #8]
 80139d2:	e7df      	b.n	8013994 <_vfiprintf_r+0x20>
 80139d4:	4b79      	ldr	r3, [pc, #484]	; (8013bbc <_vfiprintf_r+0x248>)
 80139d6:	429d      	cmp	r5, r3
 80139d8:	bf08      	it	eq
 80139da:	68f5      	ldreq	r5, [r6, #12]
 80139dc:	e7da      	b.n	8013994 <_vfiprintf_r+0x20>
 80139de:	89ab      	ldrh	r3, [r5, #12]
 80139e0:	0598      	lsls	r0, r3, #22
 80139e2:	d4ed      	bmi.n	80139c0 <_vfiprintf_r+0x4c>
 80139e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139e6:	f7ff ff06 	bl	80137f6 <__retarget_lock_release_recursive>
 80139ea:	e7e9      	b.n	80139c0 <_vfiprintf_r+0x4c>
 80139ec:	2300      	movs	r3, #0
 80139ee:	9309      	str	r3, [sp, #36]	; 0x24
 80139f0:	2320      	movs	r3, #32
 80139f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80139f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80139fa:	2330      	movs	r3, #48	; 0x30
 80139fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013bc0 <_vfiprintf_r+0x24c>
 8013a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a04:	f04f 0901 	mov.w	r9, #1
 8013a08:	4623      	mov	r3, r4
 8013a0a:	469a      	mov	sl, r3
 8013a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a10:	b10a      	cbz	r2, 8013a16 <_vfiprintf_r+0xa2>
 8013a12:	2a25      	cmp	r2, #37	; 0x25
 8013a14:	d1f9      	bne.n	8013a0a <_vfiprintf_r+0x96>
 8013a16:	ebba 0b04 	subs.w	fp, sl, r4
 8013a1a:	d00b      	beq.n	8013a34 <_vfiprintf_r+0xc0>
 8013a1c:	465b      	mov	r3, fp
 8013a1e:	4622      	mov	r2, r4
 8013a20:	4629      	mov	r1, r5
 8013a22:	4630      	mov	r0, r6
 8013a24:	f7ff ff93 	bl	801394e <__sfputs_r>
 8013a28:	3001      	adds	r0, #1
 8013a2a:	f000 80aa 	beq.w	8013b82 <_vfiprintf_r+0x20e>
 8013a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a30:	445a      	add	r2, fp
 8013a32:	9209      	str	r2, [sp, #36]	; 0x24
 8013a34:	f89a 3000 	ldrb.w	r3, [sl]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	f000 80a2 	beq.w	8013b82 <_vfiprintf_r+0x20e>
 8013a3e:	2300      	movs	r3, #0
 8013a40:	f04f 32ff 	mov.w	r2, #4294967295
 8013a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a48:	f10a 0a01 	add.w	sl, sl, #1
 8013a4c:	9304      	str	r3, [sp, #16]
 8013a4e:	9307      	str	r3, [sp, #28]
 8013a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a54:	931a      	str	r3, [sp, #104]	; 0x68
 8013a56:	4654      	mov	r4, sl
 8013a58:	2205      	movs	r2, #5
 8013a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a5e:	4858      	ldr	r0, [pc, #352]	; (8013bc0 <_vfiprintf_r+0x24c>)
 8013a60:	f7ec fc5e 	bl	8000320 <memchr>
 8013a64:	9a04      	ldr	r2, [sp, #16]
 8013a66:	b9d8      	cbnz	r0, 8013aa0 <_vfiprintf_r+0x12c>
 8013a68:	06d1      	lsls	r1, r2, #27
 8013a6a:	bf44      	itt	mi
 8013a6c:	2320      	movmi	r3, #32
 8013a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a72:	0713      	lsls	r3, r2, #28
 8013a74:	bf44      	itt	mi
 8013a76:	232b      	movmi	r3, #43	; 0x2b
 8013a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8013a80:	2b2a      	cmp	r3, #42	; 0x2a
 8013a82:	d015      	beq.n	8013ab0 <_vfiprintf_r+0x13c>
 8013a84:	9a07      	ldr	r2, [sp, #28]
 8013a86:	4654      	mov	r4, sl
 8013a88:	2000      	movs	r0, #0
 8013a8a:	f04f 0c0a 	mov.w	ip, #10
 8013a8e:	4621      	mov	r1, r4
 8013a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a94:	3b30      	subs	r3, #48	; 0x30
 8013a96:	2b09      	cmp	r3, #9
 8013a98:	d94e      	bls.n	8013b38 <_vfiprintf_r+0x1c4>
 8013a9a:	b1b0      	cbz	r0, 8013aca <_vfiprintf_r+0x156>
 8013a9c:	9207      	str	r2, [sp, #28]
 8013a9e:	e014      	b.n	8013aca <_vfiprintf_r+0x156>
 8013aa0:	eba0 0308 	sub.w	r3, r0, r8
 8013aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8013aa8:	4313      	orrs	r3, r2
 8013aaa:	9304      	str	r3, [sp, #16]
 8013aac:	46a2      	mov	sl, r4
 8013aae:	e7d2      	b.n	8013a56 <_vfiprintf_r+0xe2>
 8013ab0:	9b03      	ldr	r3, [sp, #12]
 8013ab2:	1d19      	adds	r1, r3, #4
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	9103      	str	r1, [sp, #12]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	bfbb      	ittet	lt
 8013abc:	425b      	neglt	r3, r3
 8013abe:	f042 0202 	orrlt.w	r2, r2, #2
 8013ac2:	9307      	strge	r3, [sp, #28]
 8013ac4:	9307      	strlt	r3, [sp, #28]
 8013ac6:	bfb8      	it	lt
 8013ac8:	9204      	strlt	r2, [sp, #16]
 8013aca:	7823      	ldrb	r3, [r4, #0]
 8013acc:	2b2e      	cmp	r3, #46	; 0x2e
 8013ace:	d10c      	bne.n	8013aea <_vfiprintf_r+0x176>
 8013ad0:	7863      	ldrb	r3, [r4, #1]
 8013ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ad4:	d135      	bne.n	8013b42 <_vfiprintf_r+0x1ce>
 8013ad6:	9b03      	ldr	r3, [sp, #12]
 8013ad8:	1d1a      	adds	r2, r3, #4
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	9203      	str	r2, [sp, #12]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	bfb8      	it	lt
 8013ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8013ae6:	3402      	adds	r4, #2
 8013ae8:	9305      	str	r3, [sp, #20]
 8013aea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013bd0 <_vfiprintf_r+0x25c>
 8013aee:	7821      	ldrb	r1, [r4, #0]
 8013af0:	2203      	movs	r2, #3
 8013af2:	4650      	mov	r0, sl
 8013af4:	f7ec fc14 	bl	8000320 <memchr>
 8013af8:	b140      	cbz	r0, 8013b0c <_vfiprintf_r+0x198>
 8013afa:	2340      	movs	r3, #64	; 0x40
 8013afc:	eba0 000a 	sub.w	r0, r0, sl
 8013b00:	fa03 f000 	lsl.w	r0, r3, r0
 8013b04:	9b04      	ldr	r3, [sp, #16]
 8013b06:	4303      	orrs	r3, r0
 8013b08:	3401      	adds	r4, #1
 8013b0a:	9304      	str	r3, [sp, #16]
 8013b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b10:	482c      	ldr	r0, [pc, #176]	; (8013bc4 <_vfiprintf_r+0x250>)
 8013b12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b16:	2206      	movs	r2, #6
 8013b18:	f7ec fc02 	bl	8000320 <memchr>
 8013b1c:	2800      	cmp	r0, #0
 8013b1e:	d03f      	beq.n	8013ba0 <_vfiprintf_r+0x22c>
 8013b20:	4b29      	ldr	r3, [pc, #164]	; (8013bc8 <_vfiprintf_r+0x254>)
 8013b22:	bb1b      	cbnz	r3, 8013b6c <_vfiprintf_r+0x1f8>
 8013b24:	9b03      	ldr	r3, [sp, #12]
 8013b26:	3307      	adds	r3, #7
 8013b28:	f023 0307 	bic.w	r3, r3, #7
 8013b2c:	3308      	adds	r3, #8
 8013b2e:	9303      	str	r3, [sp, #12]
 8013b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b32:	443b      	add	r3, r7
 8013b34:	9309      	str	r3, [sp, #36]	; 0x24
 8013b36:	e767      	b.n	8013a08 <_vfiprintf_r+0x94>
 8013b38:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b3c:	460c      	mov	r4, r1
 8013b3e:	2001      	movs	r0, #1
 8013b40:	e7a5      	b.n	8013a8e <_vfiprintf_r+0x11a>
 8013b42:	2300      	movs	r3, #0
 8013b44:	3401      	adds	r4, #1
 8013b46:	9305      	str	r3, [sp, #20]
 8013b48:	4619      	mov	r1, r3
 8013b4a:	f04f 0c0a 	mov.w	ip, #10
 8013b4e:	4620      	mov	r0, r4
 8013b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b54:	3a30      	subs	r2, #48	; 0x30
 8013b56:	2a09      	cmp	r2, #9
 8013b58:	d903      	bls.n	8013b62 <_vfiprintf_r+0x1ee>
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d0c5      	beq.n	8013aea <_vfiprintf_r+0x176>
 8013b5e:	9105      	str	r1, [sp, #20]
 8013b60:	e7c3      	b.n	8013aea <_vfiprintf_r+0x176>
 8013b62:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b66:	4604      	mov	r4, r0
 8013b68:	2301      	movs	r3, #1
 8013b6a:	e7f0      	b.n	8013b4e <_vfiprintf_r+0x1da>
 8013b6c:	ab03      	add	r3, sp, #12
 8013b6e:	9300      	str	r3, [sp, #0]
 8013b70:	462a      	mov	r2, r5
 8013b72:	4b16      	ldr	r3, [pc, #88]	; (8013bcc <_vfiprintf_r+0x258>)
 8013b74:	a904      	add	r1, sp, #16
 8013b76:	4630      	mov	r0, r6
 8013b78:	f3af 8000 	nop.w
 8013b7c:	4607      	mov	r7, r0
 8013b7e:	1c78      	adds	r0, r7, #1
 8013b80:	d1d6      	bne.n	8013b30 <_vfiprintf_r+0x1bc>
 8013b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b84:	07d9      	lsls	r1, r3, #31
 8013b86:	d405      	bmi.n	8013b94 <_vfiprintf_r+0x220>
 8013b88:	89ab      	ldrh	r3, [r5, #12]
 8013b8a:	059a      	lsls	r2, r3, #22
 8013b8c:	d402      	bmi.n	8013b94 <_vfiprintf_r+0x220>
 8013b8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b90:	f7ff fe31 	bl	80137f6 <__retarget_lock_release_recursive>
 8013b94:	89ab      	ldrh	r3, [r5, #12]
 8013b96:	065b      	lsls	r3, r3, #25
 8013b98:	f53f af12 	bmi.w	80139c0 <_vfiprintf_r+0x4c>
 8013b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b9e:	e711      	b.n	80139c4 <_vfiprintf_r+0x50>
 8013ba0:	ab03      	add	r3, sp, #12
 8013ba2:	9300      	str	r3, [sp, #0]
 8013ba4:	462a      	mov	r2, r5
 8013ba6:	4b09      	ldr	r3, [pc, #36]	; (8013bcc <_vfiprintf_r+0x258>)
 8013ba8:	a904      	add	r1, sp, #16
 8013baa:	4630      	mov	r0, r6
 8013bac:	f000 f880 	bl	8013cb0 <_printf_i>
 8013bb0:	e7e4      	b.n	8013b7c <_vfiprintf_r+0x208>
 8013bb2:	bf00      	nop
 8013bb4:	080146dc 	.word	0x080146dc
 8013bb8:	080146fc 	.word	0x080146fc
 8013bbc:	080146bc 	.word	0x080146bc
 8013bc0:	0801471c 	.word	0x0801471c
 8013bc4:	08014726 	.word	0x08014726
 8013bc8:	00000000 	.word	0x00000000
 8013bcc:	0801394f 	.word	0x0801394f
 8013bd0:	08014722 	.word	0x08014722

08013bd4 <_printf_common>:
 8013bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bd8:	4616      	mov	r6, r2
 8013bda:	4699      	mov	r9, r3
 8013bdc:	688a      	ldr	r2, [r1, #8]
 8013bde:	690b      	ldr	r3, [r1, #16]
 8013be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013be4:	4293      	cmp	r3, r2
 8013be6:	bfb8      	it	lt
 8013be8:	4613      	movlt	r3, r2
 8013bea:	6033      	str	r3, [r6, #0]
 8013bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013bf0:	4607      	mov	r7, r0
 8013bf2:	460c      	mov	r4, r1
 8013bf4:	b10a      	cbz	r2, 8013bfa <_printf_common+0x26>
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	6033      	str	r3, [r6, #0]
 8013bfa:	6823      	ldr	r3, [r4, #0]
 8013bfc:	0699      	lsls	r1, r3, #26
 8013bfe:	bf42      	ittt	mi
 8013c00:	6833      	ldrmi	r3, [r6, #0]
 8013c02:	3302      	addmi	r3, #2
 8013c04:	6033      	strmi	r3, [r6, #0]
 8013c06:	6825      	ldr	r5, [r4, #0]
 8013c08:	f015 0506 	ands.w	r5, r5, #6
 8013c0c:	d106      	bne.n	8013c1c <_printf_common+0x48>
 8013c0e:	f104 0a19 	add.w	sl, r4, #25
 8013c12:	68e3      	ldr	r3, [r4, #12]
 8013c14:	6832      	ldr	r2, [r6, #0]
 8013c16:	1a9b      	subs	r3, r3, r2
 8013c18:	42ab      	cmp	r3, r5
 8013c1a:	dc26      	bgt.n	8013c6a <_printf_common+0x96>
 8013c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013c20:	1e13      	subs	r3, r2, #0
 8013c22:	6822      	ldr	r2, [r4, #0]
 8013c24:	bf18      	it	ne
 8013c26:	2301      	movne	r3, #1
 8013c28:	0692      	lsls	r2, r2, #26
 8013c2a:	d42b      	bmi.n	8013c84 <_printf_common+0xb0>
 8013c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013c30:	4649      	mov	r1, r9
 8013c32:	4638      	mov	r0, r7
 8013c34:	47c0      	blx	r8
 8013c36:	3001      	adds	r0, #1
 8013c38:	d01e      	beq.n	8013c78 <_printf_common+0xa4>
 8013c3a:	6823      	ldr	r3, [r4, #0]
 8013c3c:	68e5      	ldr	r5, [r4, #12]
 8013c3e:	6832      	ldr	r2, [r6, #0]
 8013c40:	f003 0306 	and.w	r3, r3, #6
 8013c44:	2b04      	cmp	r3, #4
 8013c46:	bf08      	it	eq
 8013c48:	1aad      	subeq	r5, r5, r2
 8013c4a:	68a3      	ldr	r3, [r4, #8]
 8013c4c:	6922      	ldr	r2, [r4, #16]
 8013c4e:	bf0c      	ite	eq
 8013c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c54:	2500      	movne	r5, #0
 8013c56:	4293      	cmp	r3, r2
 8013c58:	bfc4      	itt	gt
 8013c5a:	1a9b      	subgt	r3, r3, r2
 8013c5c:	18ed      	addgt	r5, r5, r3
 8013c5e:	2600      	movs	r6, #0
 8013c60:	341a      	adds	r4, #26
 8013c62:	42b5      	cmp	r5, r6
 8013c64:	d11a      	bne.n	8013c9c <_printf_common+0xc8>
 8013c66:	2000      	movs	r0, #0
 8013c68:	e008      	b.n	8013c7c <_printf_common+0xa8>
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	4652      	mov	r2, sl
 8013c6e:	4649      	mov	r1, r9
 8013c70:	4638      	mov	r0, r7
 8013c72:	47c0      	blx	r8
 8013c74:	3001      	adds	r0, #1
 8013c76:	d103      	bne.n	8013c80 <_printf_common+0xac>
 8013c78:	f04f 30ff 	mov.w	r0, #4294967295
 8013c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c80:	3501      	adds	r5, #1
 8013c82:	e7c6      	b.n	8013c12 <_printf_common+0x3e>
 8013c84:	18e1      	adds	r1, r4, r3
 8013c86:	1c5a      	adds	r2, r3, #1
 8013c88:	2030      	movs	r0, #48	; 0x30
 8013c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c8e:	4422      	add	r2, r4
 8013c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c98:	3302      	adds	r3, #2
 8013c9a:	e7c7      	b.n	8013c2c <_printf_common+0x58>
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	4622      	mov	r2, r4
 8013ca0:	4649      	mov	r1, r9
 8013ca2:	4638      	mov	r0, r7
 8013ca4:	47c0      	blx	r8
 8013ca6:	3001      	adds	r0, #1
 8013ca8:	d0e6      	beq.n	8013c78 <_printf_common+0xa4>
 8013caa:	3601      	adds	r6, #1
 8013cac:	e7d9      	b.n	8013c62 <_printf_common+0x8e>
	...

08013cb0 <_printf_i>:
 8013cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013cb4:	7e0f      	ldrb	r7, [r1, #24]
 8013cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013cb8:	2f78      	cmp	r7, #120	; 0x78
 8013cba:	4691      	mov	r9, r2
 8013cbc:	4680      	mov	r8, r0
 8013cbe:	460c      	mov	r4, r1
 8013cc0:	469a      	mov	sl, r3
 8013cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013cc6:	d807      	bhi.n	8013cd8 <_printf_i+0x28>
 8013cc8:	2f62      	cmp	r7, #98	; 0x62
 8013cca:	d80a      	bhi.n	8013ce2 <_printf_i+0x32>
 8013ccc:	2f00      	cmp	r7, #0
 8013cce:	f000 80d8 	beq.w	8013e82 <_printf_i+0x1d2>
 8013cd2:	2f58      	cmp	r7, #88	; 0x58
 8013cd4:	f000 80a3 	beq.w	8013e1e <_printf_i+0x16e>
 8013cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ce0:	e03a      	b.n	8013d58 <_printf_i+0xa8>
 8013ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013ce6:	2b15      	cmp	r3, #21
 8013ce8:	d8f6      	bhi.n	8013cd8 <_printf_i+0x28>
 8013cea:	a101      	add	r1, pc, #4	; (adr r1, 8013cf0 <_printf_i+0x40>)
 8013cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013cf0:	08013d49 	.word	0x08013d49
 8013cf4:	08013d5d 	.word	0x08013d5d
 8013cf8:	08013cd9 	.word	0x08013cd9
 8013cfc:	08013cd9 	.word	0x08013cd9
 8013d00:	08013cd9 	.word	0x08013cd9
 8013d04:	08013cd9 	.word	0x08013cd9
 8013d08:	08013d5d 	.word	0x08013d5d
 8013d0c:	08013cd9 	.word	0x08013cd9
 8013d10:	08013cd9 	.word	0x08013cd9
 8013d14:	08013cd9 	.word	0x08013cd9
 8013d18:	08013cd9 	.word	0x08013cd9
 8013d1c:	08013e69 	.word	0x08013e69
 8013d20:	08013d8d 	.word	0x08013d8d
 8013d24:	08013e4b 	.word	0x08013e4b
 8013d28:	08013cd9 	.word	0x08013cd9
 8013d2c:	08013cd9 	.word	0x08013cd9
 8013d30:	08013e8b 	.word	0x08013e8b
 8013d34:	08013cd9 	.word	0x08013cd9
 8013d38:	08013d8d 	.word	0x08013d8d
 8013d3c:	08013cd9 	.word	0x08013cd9
 8013d40:	08013cd9 	.word	0x08013cd9
 8013d44:	08013e53 	.word	0x08013e53
 8013d48:	682b      	ldr	r3, [r5, #0]
 8013d4a:	1d1a      	adds	r2, r3, #4
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	602a      	str	r2, [r5, #0]
 8013d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d58:	2301      	movs	r3, #1
 8013d5a:	e0a3      	b.n	8013ea4 <_printf_i+0x1f4>
 8013d5c:	6820      	ldr	r0, [r4, #0]
 8013d5e:	6829      	ldr	r1, [r5, #0]
 8013d60:	0606      	lsls	r6, r0, #24
 8013d62:	f101 0304 	add.w	r3, r1, #4
 8013d66:	d50a      	bpl.n	8013d7e <_printf_i+0xce>
 8013d68:	680e      	ldr	r6, [r1, #0]
 8013d6a:	602b      	str	r3, [r5, #0]
 8013d6c:	2e00      	cmp	r6, #0
 8013d6e:	da03      	bge.n	8013d78 <_printf_i+0xc8>
 8013d70:	232d      	movs	r3, #45	; 0x2d
 8013d72:	4276      	negs	r6, r6
 8013d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d78:	485e      	ldr	r0, [pc, #376]	; (8013ef4 <_printf_i+0x244>)
 8013d7a:	230a      	movs	r3, #10
 8013d7c:	e019      	b.n	8013db2 <_printf_i+0x102>
 8013d7e:	680e      	ldr	r6, [r1, #0]
 8013d80:	602b      	str	r3, [r5, #0]
 8013d82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d86:	bf18      	it	ne
 8013d88:	b236      	sxthne	r6, r6
 8013d8a:	e7ef      	b.n	8013d6c <_printf_i+0xbc>
 8013d8c:	682b      	ldr	r3, [r5, #0]
 8013d8e:	6820      	ldr	r0, [r4, #0]
 8013d90:	1d19      	adds	r1, r3, #4
 8013d92:	6029      	str	r1, [r5, #0]
 8013d94:	0601      	lsls	r1, r0, #24
 8013d96:	d501      	bpl.n	8013d9c <_printf_i+0xec>
 8013d98:	681e      	ldr	r6, [r3, #0]
 8013d9a:	e002      	b.n	8013da2 <_printf_i+0xf2>
 8013d9c:	0646      	lsls	r6, r0, #25
 8013d9e:	d5fb      	bpl.n	8013d98 <_printf_i+0xe8>
 8013da0:	881e      	ldrh	r6, [r3, #0]
 8013da2:	4854      	ldr	r0, [pc, #336]	; (8013ef4 <_printf_i+0x244>)
 8013da4:	2f6f      	cmp	r7, #111	; 0x6f
 8013da6:	bf0c      	ite	eq
 8013da8:	2308      	moveq	r3, #8
 8013daa:	230a      	movne	r3, #10
 8013dac:	2100      	movs	r1, #0
 8013dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013db2:	6865      	ldr	r5, [r4, #4]
 8013db4:	60a5      	str	r5, [r4, #8]
 8013db6:	2d00      	cmp	r5, #0
 8013db8:	bfa2      	ittt	ge
 8013dba:	6821      	ldrge	r1, [r4, #0]
 8013dbc:	f021 0104 	bicge.w	r1, r1, #4
 8013dc0:	6021      	strge	r1, [r4, #0]
 8013dc2:	b90e      	cbnz	r6, 8013dc8 <_printf_i+0x118>
 8013dc4:	2d00      	cmp	r5, #0
 8013dc6:	d04d      	beq.n	8013e64 <_printf_i+0x1b4>
 8013dc8:	4615      	mov	r5, r2
 8013dca:	fbb6 f1f3 	udiv	r1, r6, r3
 8013dce:	fb03 6711 	mls	r7, r3, r1, r6
 8013dd2:	5dc7      	ldrb	r7, [r0, r7]
 8013dd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013dd8:	4637      	mov	r7, r6
 8013dda:	42bb      	cmp	r3, r7
 8013ddc:	460e      	mov	r6, r1
 8013dde:	d9f4      	bls.n	8013dca <_printf_i+0x11a>
 8013de0:	2b08      	cmp	r3, #8
 8013de2:	d10b      	bne.n	8013dfc <_printf_i+0x14c>
 8013de4:	6823      	ldr	r3, [r4, #0]
 8013de6:	07de      	lsls	r6, r3, #31
 8013de8:	d508      	bpl.n	8013dfc <_printf_i+0x14c>
 8013dea:	6923      	ldr	r3, [r4, #16]
 8013dec:	6861      	ldr	r1, [r4, #4]
 8013dee:	4299      	cmp	r1, r3
 8013df0:	bfde      	ittt	le
 8013df2:	2330      	movle	r3, #48	; 0x30
 8013df4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013df8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013dfc:	1b52      	subs	r2, r2, r5
 8013dfe:	6122      	str	r2, [r4, #16]
 8013e00:	f8cd a000 	str.w	sl, [sp]
 8013e04:	464b      	mov	r3, r9
 8013e06:	aa03      	add	r2, sp, #12
 8013e08:	4621      	mov	r1, r4
 8013e0a:	4640      	mov	r0, r8
 8013e0c:	f7ff fee2 	bl	8013bd4 <_printf_common>
 8013e10:	3001      	adds	r0, #1
 8013e12:	d14c      	bne.n	8013eae <_printf_i+0x1fe>
 8013e14:	f04f 30ff 	mov.w	r0, #4294967295
 8013e18:	b004      	add	sp, #16
 8013e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e1e:	4835      	ldr	r0, [pc, #212]	; (8013ef4 <_printf_i+0x244>)
 8013e20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013e24:	6829      	ldr	r1, [r5, #0]
 8013e26:	6823      	ldr	r3, [r4, #0]
 8013e28:	f851 6b04 	ldr.w	r6, [r1], #4
 8013e2c:	6029      	str	r1, [r5, #0]
 8013e2e:	061d      	lsls	r5, r3, #24
 8013e30:	d514      	bpl.n	8013e5c <_printf_i+0x1ac>
 8013e32:	07df      	lsls	r7, r3, #31
 8013e34:	bf44      	itt	mi
 8013e36:	f043 0320 	orrmi.w	r3, r3, #32
 8013e3a:	6023      	strmi	r3, [r4, #0]
 8013e3c:	b91e      	cbnz	r6, 8013e46 <_printf_i+0x196>
 8013e3e:	6823      	ldr	r3, [r4, #0]
 8013e40:	f023 0320 	bic.w	r3, r3, #32
 8013e44:	6023      	str	r3, [r4, #0]
 8013e46:	2310      	movs	r3, #16
 8013e48:	e7b0      	b.n	8013dac <_printf_i+0xfc>
 8013e4a:	6823      	ldr	r3, [r4, #0]
 8013e4c:	f043 0320 	orr.w	r3, r3, #32
 8013e50:	6023      	str	r3, [r4, #0]
 8013e52:	2378      	movs	r3, #120	; 0x78
 8013e54:	4828      	ldr	r0, [pc, #160]	; (8013ef8 <_printf_i+0x248>)
 8013e56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013e5a:	e7e3      	b.n	8013e24 <_printf_i+0x174>
 8013e5c:	0659      	lsls	r1, r3, #25
 8013e5e:	bf48      	it	mi
 8013e60:	b2b6      	uxthmi	r6, r6
 8013e62:	e7e6      	b.n	8013e32 <_printf_i+0x182>
 8013e64:	4615      	mov	r5, r2
 8013e66:	e7bb      	b.n	8013de0 <_printf_i+0x130>
 8013e68:	682b      	ldr	r3, [r5, #0]
 8013e6a:	6826      	ldr	r6, [r4, #0]
 8013e6c:	6961      	ldr	r1, [r4, #20]
 8013e6e:	1d18      	adds	r0, r3, #4
 8013e70:	6028      	str	r0, [r5, #0]
 8013e72:	0635      	lsls	r5, r6, #24
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	d501      	bpl.n	8013e7c <_printf_i+0x1cc>
 8013e78:	6019      	str	r1, [r3, #0]
 8013e7a:	e002      	b.n	8013e82 <_printf_i+0x1d2>
 8013e7c:	0670      	lsls	r0, r6, #25
 8013e7e:	d5fb      	bpl.n	8013e78 <_printf_i+0x1c8>
 8013e80:	8019      	strh	r1, [r3, #0]
 8013e82:	2300      	movs	r3, #0
 8013e84:	6123      	str	r3, [r4, #16]
 8013e86:	4615      	mov	r5, r2
 8013e88:	e7ba      	b.n	8013e00 <_printf_i+0x150>
 8013e8a:	682b      	ldr	r3, [r5, #0]
 8013e8c:	1d1a      	adds	r2, r3, #4
 8013e8e:	602a      	str	r2, [r5, #0]
 8013e90:	681d      	ldr	r5, [r3, #0]
 8013e92:	6862      	ldr	r2, [r4, #4]
 8013e94:	2100      	movs	r1, #0
 8013e96:	4628      	mov	r0, r5
 8013e98:	f7ec fa42 	bl	8000320 <memchr>
 8013e9c:	b108      	cbz	r0, 8013ea2 <_printf_i+0x1f2>
 8013e9e:	1b40      	subs	r0, r0, r5
 8013ea0:	6060      	str	r0, [r4, #4]
 8013ea2:	6863      	ldr	r3, [r4, #4]
 8013ea4:	6123      	str	r3, [r4, #16]
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013eac:	e7a8      	b.n	8013e00 <_printf_i+0x150>
 8013eae:	6923      	ldr	r3, [r4, #16]
 8013eb0:	462a      	mov	r2, r5
 8013eb2:	4649      	mov	r1, r9
 8013eb4:	4640      	mov	r0, r8
 8013eb6:	47d0      	blx	sl
 8013eb8:	3001      	adds	r0, #1
 8013eba:	d0ab      	beq.n	8013e14 <_printf_i+0x164>
 8013ebc:	6823      	ldr	r3, [r4, #0]
 8013ebe:	079b      	lsls	r3, r3, #30
 8013ec0:	d413      	bmi.n	8013eea <_printf_i+0x23a>
 8013ec2:	68e0      	ldr	r0, [r4, #12]
 8013ec4:	9b03      	ldr	r3, [sp, #12]
 8013ec6:	4298      	cmp	r0, r3
 8013ec8:	bfb8      	it	lt
 8013eca:	4618      	movlt	r0, r3
 8013ecc:	e7a4      	b.n	8013e18 <_printf_i+0x168>
 8013ece:	2301      	movs	r3, #1
 8013ed0:	4632      	mov	r2, r6
 8013ed2:	4649      	mov	r1, r9
 8013ed4:	4640      	mov	r0, r8
 8013ed6:	47d0      	blx	sl
 8013ed8:	3001      	adds	r0, #1
 8013eda:	d09b      	beq.n	8013e14 <_printf_i+0x164>
 8013edc:	3501      	adds	r5, #1
 8013ede:	68e3      	ldr	r3, [r4, #12]
 8013ee0:	9903      	ldr	r1, [sp, #12]
 8013ee2:	1a5b      	subs	r3, r3, r1
 8013ee4:	42ab      	cmp	r3, r5
 8013ee6:	dcf2      	bgt.n	8013ece <_printf_i+0x21e>
 8013ee8:	e7eb      	b.n	8013ec2 <_printf_i+0x212>
 8013eea:	2500      	movs	r5, #0
 8013eec:	f104 0619 	add.w	r6, r4, #25
 8013ef0:	e7f5      	b.n	8013ede <_printf_i+0x22e>
 8013ef2:	bf00      	nop
 8013ef4:	0801472d 	.word	0x0801472d
 8013ef8:	0801473e 	.word	0x0801473e

08013efc <_putc_r>:
 8013efc:	b570      	push	{r4, r5, r6, lr}
 8013efe:	460d      	mov	r5, r1
 8013f00:	4614      	mov	r4, r2
 8013f02:	4606      	mov	r6, r0
 8013f04:	b118      	cbz	r0, 8013f0e <_putc_r+0x12>
 8013f06:	6983      	ldr	r3, [r0, #24]
 8013f08:	b90b      	cbnz	r3, 8013f0e <_putc_r+0x12>
 8013f0a:	f7ff fbd5 	bl	80136b8 <__sinit>
 8013f0e:	4b1c      	ldr	r3, [pc, #112]	; (8013f80 <_putc_r+0x84>)
 8013f10:	429c      	cmp	r4, r3
 8013f12:	d124      	bne.n	8013f5e <_putc_r+0x62>
 8013f14:	6874      	ldr	r4, [r6, #4]
 8013f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f18:	07d8      	lsls	r0, r3, #31
 8013f1a:	d405      	bmi.n	8013f28 <_putc_r+0x2c>
 8013f1c:	89a3      	ldrh	r3, [r4, #12]
 8013f1e:	0599      	lsls	r1, r3, #22
 8013f20:	d402      	bmi.n	8013f28 <_putc_r+0x2c>
 8013f22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f24:	f7ff fc66 	bl	80137f4 <__retarget_lock_acquire_recursive>
 8013f28:	68a3      	ldr	r3, [r4, #8]
 8013f2a:	3b01      	subs	r3, #1
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	60a3      	str	r3, [r4, #8]
 8013f30:	da05      	bge.n	8013f3e <_putc_r+0x42>
 8013f32:	69a2      	ldr	r2, [r4, #24]
 8013f34:	4293      	cmp	r3, r2
 8013f36:	db1c      	blt.n	8013f72 <_putc_r+0x76>
 8013f38:	b2eb      	uxtb	r3, r5
 8013f3a:	2b0a      	cmp	r3, #10
 8013f3c:	d019      	beq.n	8013f72 <_putc_r+0x76>
 8013f3e:	6823      	ldr	r3, [r4, #0]
 8013f40:	1c5a      	adds	r2, r3, #1
 8013f42:	6022      	str	r2, [r4, #0]
 8013f44:	701d      	strb	r5, [r3, #0]
 8013f46:	b2ed      	uxtb	r5, r5
 8013f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f4a:	07da      	lsls	r2, r3, #31
 8013f4c:	d405      	bmi.n	8013f5a <_putc_r+0x5e>
 8013f4e:	89a3      	ldrh	r3, [r4, #12]
 8013f50:	059b      	lsls	r3, r3, #22
 8013f52:	d402      	bmi.n	8013f5a <_putc_r+0x5e>
 8013f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f56:	f7ff fc4e 	bl	80137f6 <__retarget_lock_release_recursive>
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	bd70      	pop	{r4, r5, r6, pc}
 8013f5e:	4b09      	ldr	r3, [pc, #36]	; (8013f84 <_putc_r+0x88>)
 8013f60:	429c      	cmp	r4, r3
 8013f62:	d101      	bne.n	8013f68 <_putc_r+0x6c>
 8013f64:	68b4      	ldr	r4, [r6, #8]
 8013f66:	e7d6      	b.n	8013f16 <_putc_r+0x1a>
 8013f68:	4b07      	ldr	r3, [pc, #28]	; (8013f88 <_putc_r+0x8c>)
 8013f6a:	429c      	cmp	r4, r3
 8013f6c:	bf08      	it	eq
 8013f6e:	68f4      	ldreq	r4, [r6, #12]
 8013f70:	e7d1      	b.n	8013f16 <_putc_r+0x1a>
 8013f72:	4629      	mov	r1, r5
 8013f74:	4622      	mov	r2, r4
 8013f76:	4630      	mov	r0, r6
 8013f78:	f000 f85c 	bl	8014034 <__swbuf_r>
 8013f7c:	4605      	mov	r5, r0
 8013f7e:	e7e3      	b.n	8013f48 <_putc_r+0x4c>
 8013f80:	080146dc 	.word	0x080146dc
 8013f84:	080146fc 	.word	0x080146fc
 8013f88:	080146bc 	.word	0x080146bc

08013f8c <_sbrk_r>:
 8013f8c:	b538      	push	{r3, r4, r5, lr}
 8013f8e:	4d06      	ldr	r5, [pc, #24]	; (8013fa8 <_sbrk_r+0x1c>)
 8013f90:	2300      	movs	r3, #0
 8013f92:	4604      	mov	r4, r0
 8013f94:	4608      	mov	r0, r1
 8013f96:	602b      	str	r3, [r5, #0]
 8013f98:	f7ef fade 	bl	8003558 <_sbrk>
 8013f9c:	1c43      	adds	r3, r0, #1
 8013f9e:	d102      	bne.n	8013fa6 <_sbrk_r+0x1a>
 8013fa0:	682b      	ldr	r3, [r5, #0]
 8013fa2:	b103      	cbz	r3, 8013fa6 <_sbrk_r+0x1a>
 8013fa4:	6023      	str	r3, [r4, #0]
 8013fa6:	bd38      	pop	{r3, r4, r5, pc}
 8013fa8:	24003634 	.word	0x24003634

08013fac <__sread>:
 8013fac:	b510      	push	{r4, lr}
 8013fae:	460c      	mov	r4, r1
 8013fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fb4:	f000 fab2 	bl	801451c <_read_r>
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	bfab      	itete	ge
 8013fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8013fc0:	181b      	addge	r3, r3, r0
 8013fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013fc6:	bfac      	ite	ge
 8013fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013fca:	81a3      	strhlt	r3, [r4, #12]
 8013fcc:	bd10      	pop	{r4, pc}

08013fce <__swrite>:
 8013fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fd2:	461f      	mov	r7, r3
 8013fd4:	898b      	ldrh	r3, [r1, #12]
 8013fd6:	05db      	lsls	r3, r3, #23
 8013fd8:	4605      	mov	r5, r0
 8013fda:	460c      	mov	r4, r1
 8013fdc:	4616      	mov	r6, r2
 8013fde:	d505      	bpl.n	8013fec <__swrite+0x1e>
 8013fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fe4:	2302      	movs	r3, #2
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	f000 f9c8 	bl	801437c <_lseek_r>
 8013fec:	89a3      	ldrh	r3, [r4, #12]
 8013fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ff6:	81a3      	strh	r3, [r4, #12]
 8013ff8:	4632      	mov	r2, r6
 8013ffa:	463b      	mov	r3, r7
 8013ffc:	4628      	mov	r0, r5
 8013ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014002:	f000 b869 	b.w	80140d8 <_write_r>

08014006 <__sseek>:
 8014006:	b510      	push	{r4, lr}
 8014008:	460c      	mov	r4, r1
 801400a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801400e:	f000 f9b5 	bl	801437c <_lseek_r>
 8014012:	1c43      	adds	r3, r0, #1
 8014014:	89a3      	ldrh	r3, [r4, #12]
 8014016:	bf15      	itete	ne
 8014018:	6560      	strne	r0, [r4, #84]	; 0x54
 801401a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801401e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014022:	81a3      	strheq	r3, [r4, #12]
 8014024:	bf18      	it	ne
 8014026:	81a3      	strhne	r3, [r4, #12]
 8014028:	bd10      	pop	{r4, pc}

0801402a <__sclose>:
 801402a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801402e:	f000 b8d3 	b.w	80141d8 <_close_r>
	...

08014034 <__swbuf_r>:
 8014034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014036:	460e      	mov	r6, r1
 8014038:	4614      	mov	r4, r2
 801403a:	4605      	mov	r5, r0
 801403c:	b118      	cbz	r0, 8014046 <__swbuf_r+0x12>
 801403e:	6983      	ldr	r3, [r0, #24]
 8014040:	b90b      	cbnz	r3, 8014046 <__swbuf_r+0x12>
 8014042:	f7ff fb39 	bl	80136b8 <__sinit>
 8014046:	4b21      	ldr	r3, [pc, #132]	; (80140cc <__swbuf_r+0x98>)
 8014048:	429c      	cmp	r4, r3
 801404a:	d12b      	bne.n	80140a4 <__swbuf_r+0x70>
 801404c:	686c      	ldr	r4, [r5, #4]
 801404e:	69a3      	ldr	r3, [r4, #24]
 8014050:	60a3      	str	r3, [r4, #8]
 8014052:	89a3      	ldrh	r3, [r4, #12]
 8014054:	071a      	lsls	r2, r3, #28
 8014056:	d52f      	bpl.n	80140b8 <__swbuf_r+0x84>
 8014058:	6923      	ldr	r3, [r4, #16]
 801405a:	b36b      	cbz	r3, 80140b8 <__swbuf_r+0x84>
 801405c:	6923      	ldr	r3, [r4, #16]
 801405e:	6820      	ldr	r0, [r4, #0]
 8014060:	1ac0      	subs	r0, r0, r3
 8014062:	6963      	ldr	r3, [r4, #20]
 8014064:	b2f6      	uxtb	r6, r6
 8014066:	4283      	cmp	r3, r0
 8014068:	4637      	mov	r7, r6
 801406a:	dc04      	bgt.n	8014076 <__swbuf_r+0x42>
 801406c:	4621      	mov	r1, r4
 801406e:	4628      	mov	r0, r5
 8014070:	f000 f948 	bl	8014304 <_fflush_r>
 8014074:	bb30      	cbnz	r0, 80140c4 <__swbuf_r+0x90>
 8014076:	68a3      	ldr	r3, [r4, #8]
 8014078:	3b01      	subs	r3, #1
 801407a:	60a3      	str	r3, [r4, #8]
 801407c:	6823      	ldr	r3, [r4, #0]
 801407e:	1c5a      	adds	r2, r3, #1
 8014080:	6022      	str	r2, [r4, #0]
 8014082:	701e      	strb	r6, [r3, #0]
 8014084:	6963      	ldr	r3, [r4, #20]
 8014086:	3001      	adds	r0, #1
 8014088:	4283      	cmp	r3, r0
 801408a:	d004      	beq.n	8014096 <__swbuf_r+0x62>
 801408c:	89a3      	ldrh	r3, [r4, #12]
 801408e:	07db      	lsls	r3, r3, #31
 8014090:	d506      	bpl.n	80140a0 <__swbuf_r+0x6c>
 8014092:	2e0a      	cmp	r6, #10
 8014094:	d104      	bne.n	80140a0 <__swbuf_r+0x6c>
 8014096:	4621      	mov	r1, r4
 8014098:	4628      	mov	r0, r5
 801409a:	f000 f933 	bl	8014304 <_fflush_r>
 801409e:	b988      	cbnz	r0, 80140c4 <__swbuf_r+0x90>
 80140a0:	4638      	mov	r0, r7
 80140a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a4:	4b0a      	ldr	r3, [pc, #40]	; (80140d0 <__swbuf_r+0x9c>)
 80140a6:	429c      	cmp	r4, r3
 80140a8:	d101      	bne.n	80140ae <__swbuf_r+0x7a>
 80140aa:	68ac      	ldr	r4, [r5, #8]
 80140ac:	e7cf      	b.n	801404e <__swbuf_r+0x1a>
 80140ae:	4b09      	ldr	r3, [pc, #36]	; (80140d4 <__swbuf_r+0xa0>)
 80140b0:	429c      	cmp	r4, r3
 80140b2:	bf08      	it	eq
 80140b4:	68ec      	ldreq	r4, [r5, #12]
 80140b6:	e7ca      	b.n	801404e <__swbuf_r+0x1a>
 80140b8:	4621      	mov	r1, r4
 80140ba:	4628      	mov	r0, r5
 80140bc:	f000 f81e 	bl	80140fc <__swsetup_r>
 80140c0:	2800      	cmp	r0, #0
 80140c2:	d0cb      	beq.n	801405c <__swbuf_r+0x28>
 80140c4:	f04f 37ff 	mov.w	r7, #4294967295
 80140c8:	e7ea      	b.n	80140a0 <__swbuf_r+0x6c>
 80140ca:	bf00      	nop
 80140cc:	080146dc 	.word	0x080146dc
 80140d0:	080146fc 	.word	0x080146fc
 80140d4:	080146bc 	.word	0x080146bc

080140d8 <_write_r>:
 80140d8:	b538      	push	{r3, r4, r5, lr}
 80140da:	4d07      	ldr	r5, [pc, #28]	; (80140f8 <_write_r+0x20>)
 80140dc:	4604      	mov	r4, r0
 80140de:	4608      	mov	r0, r1
 80140e0:	4611      	mov	r1, r2
 80140e2:	2200      	movs	r2, #0
 80140e4:	602a      	str	r2, [r5, #0]
 80140e6:	461a      	mov	r2, r3
 80140e8:	f7ef f9e5 	bl	80034b6 <_write>
 80140ec:	1c43      	adds	r3, r0, #1
 80140ee:	d102      	bne.n	80140f6 <_write_r+0x1e>
 80140f0:	682b      	ldr	r3, [r5, #0]
 80140f2:	b103      	cbz	r3, 80140f6 <_write_r+0x1e>
 80140f4:	6023      	str	r3, [r4, #0]
 80140f6:	bd38      	pop	{r3, r4, r5, pc}
 80140f8:	24003634 	.word	0x24003634

080140fc <__swsetup_r>:
 80140fc:	4b32      	ldr	r3, [pc, #200]	; (80141c8 <__swsetup_r+0xcc>)
 80140fe:	b570      	push	{r4, r5, r6, lr}
 8014100:	681d      	ldr	r5, [r3, #0]
 8014102:	4606      	mov	r6, r0
 8014104:	460c      	mov	r4, r1
 8014106:	b125      	cbz	r5, 8014112 <__swsetup_r+0x16>
 8014108:	69ab      	ldr	r3, [r5, #24]
 801410a:	b913      	cbnz	r3, 8014112 <__swsetup_r+0x16>
 801410c:	4628      	mov	r0, r5
 801410e:	f7ff fad3 	bl	80136b8 <__sinit>
 8014112:	4b2e      	ldr	r3, [pc, #184]	; (80141cc <__swsetup_r+0xd0>)
 8014114:	429c      	cmp	r4, r3
 8014116:	d10f      	bne.n	8014138 <__swsetup_r+0x3c>
 8014118:	686c      	ldr	r4, [r5, #4]
 801411a:	89a3      	ldrh	r3, [r4, #12]
 801411c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014120:	0719      	lsls	r1, r3, #28
 8014122:	d42c      	bmi.n	801417e <__swsetup_r+0x82>
 8014124:	06dd      	lsls	r5, r3, #27
 8014126:	d411      	bmi.n	801414c <__swsetup_r+0x50>
 8014128:	2309      	movs	r3, #9
 801412a:	6033      	str	r3, [r6, #0]
 801412c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014130:	81a3      	strh	r3, [r4, #12]
 8014132:	f04f 30ff 	mov.w	r0, #4294967295
 8014136:	e03e      	b.n	80141b6 <__swsetup_r+0xba>
 8014138:	4b25      	ldr	r3, [pc, #148]	; (80141d0 <__swsetup_r+0xd4>)
 801413a:	429c      	cmp	r4, r3
 801413c:	d101      	bne.n	8014142 <__swsetup_r+0x46>
 801413e:	68ac      	ldr	r4, [r5, #8]
 8014140:	e7eb      	b.n	801411a <__swsetup_r+0x1e>
 8014142:	4b24      	ldr	r3, [pc, #144]	; (80141d4 <__swsetup_r+0xd8>)
 8014144:	429c      	cmp	r4, r3
 8014146:	bf08      	it	eq
 8014148:	68ec      	ldreq	r4, [r5, #12]
 801414a:	e7e6      	b.n	801411a <__swsetup_r+0x1e>
 801414c:	0758      	lsls	r0, r3, #29
 801414e:	d512      	bpl.n	8014176 <__swsetup_r+0x7a>
 8014150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014152:	b141      	cbz	r1, 8014166 <__swsetup_r+0x6a>
 8014154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014158:	4299      	cmp	r1, r3
 801415a:	d002      	beq.n	8014162 <__swsetup_r+0x66>
 801415c:	4630      	mov	r0, r6
 801415e:	f000 f991 	bl	8014484 <_free_r>
 8014162:	2300      	movs	r3, #0
 8014164:	6363      	str	r3, [r4, #52]	; 0x34
 8014166:	89a3      	ldrh	r3, [r4, #12]
 8014168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801416c:	81a3      	strh	r3, [r4, #12]
 801416e:	2300      	movs	r3, #0
 8014170:	6063      	str	r3, [r4, #4]
 8014172:	6923      	ldr	r3, [r4, #16]
 8014174:	6023      	str	r3, [r4, #0]
 8014176:	89a3      	ldrh	r3, [r4, #12]
 8014178:	f043 0308 	orr.w	r3, r3, #8
 801417c:	81a3      	strh	r3, [r4, #12]
 801417e:	6923      	ldr	r3, [r4, #16]
 8014180:	b94b      	cbnz	r3, 8014196 <__swsetup_r+0x9a>
 8014182:	89a3      	ldrh	r3, [r4, #12]
 8014184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801418c:	d003      	beq.n	8014196 <__swsetup_r+0x9a>
 801418e:	4621      	mov	r1, r4
 8014190:	4630      	mov	r0, r6
 8014192:	f000 f92b 	bl	80143ec <__smakebuf_r>
 8014196:	89a0      	ldrh	r0, [r4, #12]
 8014198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801419c:	f010 0301 	ands.w	r3, r0, #1
 80141a0:	d00a      	beq.n	80141b8 <__swsetup_r+0xbc>
 80141a2:	2300      	movs	r3, #0
 80141a4:	60a3      	str	r3, [r4, #8]
 80141a6:	6963      	ldr	r3, [r4, #20]
 80141a8:	425b      	negs	r3, r3
 80141aa:	61a3      	str	r3, [r4, #24]
 80141ac:	6923      	ldr	r3, [r4, #16]
 80141ae:	b943      	cbnz	r3, 80141c2 <__swsetup_r+0xc6>
 80141b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80141b4:	d1ba      	bne.n	801412c <__swsetup_r+0x30>
 80141b6:	bd70      	pop	{r4, r5, r6, pc}
 80141b8:	0781      	lsls	r1, r0, #30
 80141ba:	bf58      	it	pl
 80141bc:	6963      	ldrpl	r3, [r4, #20]
 80141be:	60a3      	str	r3, [r4, #8]
 80141c0:	e7f4      	b.n	80141ac <__swsetup_r+0xb0>
 80141c2:	2000      	movs	r0, #0
 80141c4:	e7f7      	b.n	80141b6 <__swsetup_r+0xba>
 80141c6:	bf00      	nop
 80141c8:	2400110c 	.word	0x2400110c
 80141cc:	080146dc 	.word	0x080146dc
 80141d0:	080146fc 	.word	0x080146fc
 80141d4:	080146bc 	.word	0x080146bc

080141d8 <_close_r>:
 80141d8:	b538      	push	{r3, r4, r5, lr}
 80141da:	4d06      	ldr	r5, [pc, #24]	; (80141f4 <_close_r+0x1c>)
 80141dc:	2300      	movs	r3, #0
 80141de:	4604      	mov	r4, r0
 80141e0:	4608      	mov	r0, r1
 80141e2:	602b      	str	r3, [r5, #0]
 80141e4:	f7ef f983 	bl	80034ee <_close>
 80141e8:	1c43      	adds	r3, r0, #1
 80141ea:	d102      	bne.n	80141f2 <_close_r+0x1a>
 80141ec:	682b      	ldr	r3, [r5, #0]
 80141ee:	b103      	cbz	r3, 80141f2 <_close_r+0x1a>
 80141f0:	6023      	str	r3, [r4, #0]
 80141f2:	bd38      	pop	{r3, r4, r5, pc}
 80141f4:	24003634 	.word	0x24003634

080141f8 <__sflush_r>:
 80141f8:	898a      	ldrh	r2, [r1, #12]
 80141fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141fe:	4605      	mov	r5, r0
 8014200:	0710      	lsls	r0, r2, #28
 8014202:	460c      	mov	r4, r1
 8014204:	d458      	bmi.n	80142b8 <__sflush_r+0xc0>
 8014206:	684b      	ldr	r3, [r1, #4]
 8014208:	2b00      	cmp	r3, #0
 801420a:	dc05      	bgt.n	8014218 <__sflush_r+0x20>
 801420c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801420e:	2b00      	cmp	r3, #0
 8014210:	dc02      	bgt.n	8014218 <__sflush_r+0x20>
 8014212:	2000      	movs	r0, #0
 8014214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801421a:	2e00      	cmp	r6, #0
 801421c:	d0f9      	beq.n	8014212 <__sflush_r+0x1a>
 801421e:	2300      	movs	r3, #0
 8014220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014224:	682f      	ldr	r7, [r5, #0]
 8014226:	602b      	str	r3, [r5, #0]
 8014228:	d032      	beq.n	8014290 <__sflush_r+0x98>
 801422a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801422c:	89a3      	ldrh	r3, [r4, #12]
 801422e:	075a      	lsls	r2, r3, #29
 8014230:	d505      	bpl.n	801423e <__sflush_r+0x46>
 8014232:	6863      	ldr	r3, [r4, #4]
 8014234:	1ac0      	subs	r0, r0, r3
 8014236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014238:	b10b      	cbz	r3, 801423e <__sflush_r+0x46>
 801423a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801423c:	1ac0      	subs	r0, r0, r3
 801423e:	2300      	movs	r3, #0
 8014240:	4602      	mov	r2, r0
 8014242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014244:	6a21      	ldr	r1, [r4, #32]
 8014246:	4628      	mov	r0, r5
 8014248:	47b0      	blx	r6
 801424a:	1c43      	adds	r3, r0, #1
 801424c:	89a3      	ldrh	r3, [r4, #12]
 801424e:	d106      	bne.n	801425e <__sflush_r+0x66>
 8014250:	6829      	ldr	r1, [r5, #0]
 8014252:	291d      	cmp	r1, #29
 8014254:	d82c      	bhi.n	80142b0 <__sflush_r+0xb8>
 8014256:	4a2a      	ldr	r2, [pc, #168]	; (8014300 <__sflush_r+0x108>)
 8014258:	40ca      	lsrs	r2, r1
 801425a:	07d6      	lsls	r6, r2, #31
 801425c:	d528      	bpl.n	80142b0 <__sflush_r+0xb8>
 801425e:	2200      	movs	r2, #0
 8014260:	6062      	str	r2, [r4, #4]
 8014262:	04d9      	lsls	r1, r3, #19
 8014264:	6922      	ldr	r2, [r4, #16]
 8014266:	6022      	str	r2, [r4, #0]
 8014268:	d504      	bpl.n	8014274 <__sflush_r+0x7c>
 801426a:	1c42      	adds	r2, r0, #1
 801426c:	d101      	bne.n	8014272 <__sflush_r+0x7a>
 801426e:	682b      	ldr	r3, [r5, #0]
 8014270:	b903      	cbnz	r3, 8014274 <__sflush_r+0x7c>
 8014272:	6560      	str	r0, [r4, #84]	; 0x54
 8014274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014276:	602f      	str	r7, [r5, #0]
 8014278:	2900      	cmp	r1, #0
 801427a:	d0ca      	beq.n	8014212 <__sflush_r+0x1a>
 801427c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014280:	4299      	cmp	r1, r3
 8014282:	d002      	beq.n	801428a <__sflush_r+0x92>
 8014284:	4628      	mov	r0, r5
 8014286:	f000 f8fd 	bl	8014484 <_free_r>
 801428a:	2000      	movs	r0, #0
 801428c:	6360      	str	r0, [r4, #52]	; 0x34
 801428e:	e7c1      	b.n	8014214 <__sflush_r+0x1c>
 8014290:	6a21      	ldr	r1, [r4, #32]
 8014292:	2301      	movs	r3, #1
 8014294:	4628      	mov	r0, r5
 8014296:	47b0      	blx	r6
 8014298:	1c41      	adds	r1, r0, #1
 801429a:	d1c7      	bne.n	801422c <__sflush_r+0x34>
 801429c:	682b      	ldr	r3, [r5, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d0c4      	beq.n	801422c <__sflush_r+0x34>
 80142a2:	2b1d      	cmp	r3, #29
 80142a4:	d001      	beq.n	80142aa <__sflush_r+0xb2>
 80142a6:	2b16      	cmp	r3, #22
 80142a8:	d101      	bne.n	80142ae <__sflush_r+0xb6>
 80142aa:	602f      	str	r7, [r5, #0]
 80142ac:	e7b1      	b.n	8014212 <__sflush_r+0x1a>
 80142ae:	89a3      	ldrh	r3, [r4, #12]
 80142b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142b4:	81a3      	strh	r3, [r4, #12]
 80142b6:	e7ad      	b.n	8014214 <__sflush_r+0x1c>
 80142b8:	690f      	ldr	r7, [r1, #16]
 80142ba:	2f00      	cmp	r7, #0
 80142bc:	d0a9      	beq.n	8014212 <__sflush_r+0x1a>
 80142be:	0793      	lsls	r3, r2, #30
 80142c0:	680e      	ldr	r6, [r1, #0]
 80142c2:	bf08      	it	eq
 80142c4:	694b      	ldreq	r3, [r1, #20]
 80142c6:	600f      	str	r7, [r1, #0]
 80142c8:	bf18      	it	ne
 80142ca:	2300      	movne	r3, #0
 80142cc:	eba6 0807 	sub.w	r8, r6, r7
 80142d0:	608b      	str	r3, [r1, #8]
 80142d2:	f1b8 0f00 	cmp.w	r8, #0
 80142d6:	dd9c      	ble.n	8014212 <__sflush_r+0x1a>
 80142d8:	6a21      	ldr	r1, [r4, #32]
 80142da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80142dc:	4643      	mov	r3, r8
 80142de:	463a      	mov	r2, r7
 80142e0:	4628      	mov	r0, r5
 80142e2:	47b0      	blx	r6
 80142e4:	2800      	cmp	r0, #0
 80142e6:	dc06      	bgt.n	80142f6 <__sflush_r+0xfe>
 80142e8:	89a3      	ldrh	r3, [r4, #12]
 80142ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142ee:	81a3      	strh	r3, [r4, #12]
 80142f0:	f04f 30ff 	mov.w	r0, #4294967295
 80142f4:	e78e      	b.n	8014214 <__sflush_r+0x1c>
 80142f6:	4407      	add	r7, r0
 80142f8:	eba8 0800 	sub.w	r8, r8, r0
 80142fc:	e7e9      	b.n	80142d2 <__sflush_r+0xda>
 80142fe:	bf00      	nop
 8014300:	20400001 	.word	0x20400001

08014304 <_fflush_r>:
 8014304:	b538      	push	{r3, r4, r5, lr}
 8014306:	690b      	ldr	r3, [r1, #16]
 8014308:	4605      	mov	r5, r0
 801430a:	460c      	mov	r4, r1
 801430c:	b913      	cbnz	r3, 8014314 <_fflush_r+0x10>
 801430e:	2500      	movs	r5, #0
 8014310:	4628      	mov	r0, r5
 8014312:	bd38      	pop	{r3, r4, r5, pc}
 8014314:	b118      	cbz	r0, 801431e <_fflush_r+0x1a>
 8014316:	6983      	ldr	r3, [r0, #24]
 8014318:	b90b      	cbnz	r3, 801431e <_fflush_r+0x1a>
 801431a:	f7ff f9cd 	bl	80136b8 <__sinit>
 801431e:	4b14      	ldr	r3, [pc, #80]	; (8014370 <_fflush_r+0x6c>)
 8014320:	429c      	cmp	r4, r3
 8014322:	d11b      	bne.n	801435c <_fflush_r+0x58>
 8014324:	686c      	ldr	r4, [r5, #4]
 8014326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d0ef      	beq.n	801430e <_fflush_r+0xa>
 801432e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014330:	07d0      	lsls	r0, r2, #31
 8014332:	d404      	bmi.n	801433e <_fflush_r+0x3a>
 8014334:	0599      	lsls	r1, r3, #22
 8014336:	d402      	bmi.n	801433e <_fflush_r+0x3a>
 8014338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801433a:	f7ff fa5b 	bl	80137f4 <__retarget_lock_acquire_recursive>
 801433e:	4628      	mov	r0, r5
 8014340:	4621      	mov	r1, r4
 8014342:	f7ff ff59 	bl	80141f8 <__sflush_r>
 8014346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014348:	07da      	lsls	r2, r3, #31
 801434a:	4605      	mov	r5, r0
 801434c:	d4e0      	bmi.n	8014310 <_fflush_r+0xc>
 801434e:	89a3      	ldrh	r3, [r4, #12]
 8014350:	059b      	lsls	r3, r3, #22
 8014352:	d4dd      	bmi.n	8014310 <_fflush_r+0xc>
 8014354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014356:	f7ff fa4e 	bl	80137f6 <__retarget_lock_release_recursive>
 801435a:	e7d9      	b.n	8014310 <_fflush_r+0xc>
 801435c:	4b05      	ldr	r3, [pc, #20]	; (8014374 <_fflush_r+0x70>)
 801435e:	429c      	cmp	r4, r3
 8014360:	d101      	bne.n	8014366 <_fflush_r+0x62>
 8014362:	68ac      	ldr	r4, [r5, #8]
 8014364:	e7df      	b.n	8014326 <_fflush_r+0x22>
 8014366:	4b04      	ldr	r3, [pc, #16]	; (8014378 <_fflush_r+0x74>)
 8014368:	429c      	cmp	r4, r3
 801436a:	bf08      	it	eq
 801436c:	68ec      	ldreq	r4, [r5, #12]
 801436e:	e7da      	b.n	8014326 <_fflush_r+0x22>
 8014370:	080146dc 	.word	0x080146dc
 8014374:	080146fc 	.word	0x080146fc
 8014378:	080146bc 	.word	0x080146bc

0801437c <_lseek_r>:
 801437c:	b538      	push	{r3, r4, r5, lr}
 801437e:	4d07      	ldr	r5, [pc, #28]	; (801439c <_lseek_r+0x20>)
 8014380:	4604      	mov	r4, r0
 8014382:	4608      	mov	r0, r1
 8014384:	4611      	mov	r1, r2
 8014386:	2200      	movs	r2, #0
 8014388:	602a      	str	r2, [r5, #0]
 801438a:	461a      	mov	r2, r3
 801438c:	f7ef f8d6 	bl	800353c <_lseek>
 8014390:	1c43      	adds	r3, r0, #1
 8014392:	d102      	bne.n	801439a <_lseek_r+0x1e>
 8014394:	682b      	ldr	r3, [r5, #0]
 8014396:	b103      	cbz	r3, 801439a <_lseek_r+0x1e>
 8014398:	6023      	str	r3, [r4, #0]
 801439a:	bd38      	pop	{r3, r4, r5, pc}
 801439c:	24003634 	.word	0x24003634

080143a0 <__swhatbuf_r>:
 80143a0:	b570      	push	{r4, r5, r6, lr}
 80143a2:	460e      	mov	r6, r1
 80143a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143a8:	2900      	cmp	r1, #0
 80143aa:	b096      	sub	sp, #88	; 0x58
 80143ac:	4614      	mov	r4, r2
 80143ae:	461d      	mov	r5, r3
 80143b0:	da08      	bge.n	80143c4 <__swhatbuf_r+0x24>
 80143b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80143b6:	2200      	movs	r2, #0
 80143b8:	602a      	str	r2, [r5, #0]
 80143ba:	061a      	lsls	r2, r3, #24
 80143bc:	d410      	bmi.n	80143e0 <__swhatbuf_r+0x40>
 80143be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143c2:	e00e      	b.n	80143e2 <__swhatbuf_r+0x42>
 80143c4:	466a      	mov	r2, sp
 80143c6:	f000 f8bb 	bl	8014540 <_fstat_r>
 80143ca:	2800      	cmp	r0, #0
 80143cc:	dbf1      	blt.n	80143b2 <__swhatbuf_r+0x12>
 80143ce:	9a01      	ldr	r2, [sp, #4]
 80143d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80143d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80143d8:	425a      	negs	r2, r3
 80143da:	415a      	adcs	r2, r3
 80143dc:	602a      	str	r2, [r5, #0]
 80143de:	e7ee      	b.n	80143be <__swhatbuf_r+0x1e>
 80143e0:	2340      	movs	r3, #64	; 0x40
 80143e2:	2000      	movs	r0, #0
 80143e4:	6023      	str	r3, [r4, #0]
 80143e6:	b016      	add	sp, #88	; 0x58
 80143e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080143ec <__smakebuf_r>:
 80143ec:	898b      	ldrh	r3, [r1, #12]
 80143ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80143f0:	079d      	lsls	r5, r3, #30
 80143f2:	4606      	mov	r6, r0
 80143f4:	460c      	mov	r4, r1
 80143f6:	d507      	bpl.n	8014408 <__smakebuf_r+0x1c>
 80143f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80143fc:	6023      	str	r3, [r4, #0]
 80143fe:	6123      	str	r3, [r4, #16]
 8014400:	2301      	movs	r3, #1
 8014402:	6163      	str	r3, [r4, #20]
 8014404:	b002      	add	sp, #8
 8014406:	bd70      	pop	{r4, r5, r6, pc}
 8014408:	ab01      	add	r3, sp, #4
 801440a:	466a      	mov	r2, sp
 801440c:	f7ff ffc8 	bl	80143a0 <__swhatbuf_r>
 8014410:	9900      	ldr	r1, [sp, #0]
 8014412:	4605      	mov	r5, r0
 8014414:	4630      	mov	r0, r6
 8014416:	f7ff fa0f 	bl	8013838 <_malloc_r>
 801441a:	b948      	cbnz	r0, 8014430 <__smakebuf_r+0x44>
 801441c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014420:	059a      	lsls	r2, r3, #22
 8014422:	d4ef      	bmi.n	8014404 <__smakebuf_r+0x18>
 8014424:	f023 0303 	bic.w	r3, r3, #3
 8014428:	f043 0302 	orr.w	r3, r3, #2
 801442c:	81a3      	strh	r3, [r4, #12]
 801442e:	e7e3      	b.n	80143f8 <__smakebuf_r+0xc>
 8014430:	4b0d      	ldr	r3, [pc, #52]	; (8014468 <__smakebuf_r+0x7c>)
 8014432:	62b3      	str	r3, [r6, #40]	; 0x28
 8014434:	89a3      	ldrh	r3, [r4, #12]
 8014436:	6020      	str	r0, [r4, #0]
 8014438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801443c:	81a3      	strh	r3, [r4, #12]
 801443e:	9b00      	ldr	r3, [sp, #0]
 8014440:	6163      	str	r3, [r4, #20]
 8014442:	9b01      	ldr	r3, [sp, #4]
 8014444:	6120      	str	r0, [r4, #16]
 8014446:	b15b      	cbz	r3, 8014460 <__smakebuf_r+0x74>
 8014448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801444c:	4630      	mov	r0, r6
 801444e:	f000 f889 	bl	8014564 <_isatty_r>
 8014452:	b128      	cbz	r0, 8014460 <__smakebuf_r+0x74>
 8014454:	89a3      	ldrh	r3, [r4, #12]
 8014456:	f023 0303 	bic.w	r3, r3, #3
 801445a:	f043 0301 	orr.w	r3, r3, #1
 801445e:	81a3      	strh	r3, [r4, #12]
 8014460:	89a0      	ldrh	r0, [r4, #12]
 8014462:	4305      	orrs	r5, r0
 8014464:	81a5      	strh	r5, [r4, #12]
 8014466:	e7cd      	b.n	8014404 <__smakebuf_r+0x18>
 8014468:	08013651 	.word	0x08013651

0801446c <__malloc_lock>:
 801446c:	4801      	ldr	r0, [pc, #4]	; (8014474 <__malloc_lock+0x8>)
 801446e:	f7ff b9c1 	b.w	80137f4 <__retarget_lock_acquire_recursive>
 8014472:	bf00      	nop
 8014474:	24003628 	.word	0x24003628

08014478 <__malloc_unlock>:
 8014478:	4801      	ldr	r0, [pc, #4]	; (8014480 <__malloc_unlock+0x8>)
 801447a:	f7ff b9bc 	b.w	80137f6 <__retarget_lock_release_recursive>
 801447e:	bf00      	nop
 8014480:	24003628 	.word	0x24003628

08014484 <_free_r>:
 8014484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014486:	2900      	cmp	r1, #0
 8014488:	d044      	beq.n	8014514 <_free_r+0x90>
 801448a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801448e:	9001      	str	r0, [sp, #4]
 8014490:	2b00      	cmp	r3, #0
 8014492:	f1a1 0404 	sub.w	r4, r1, #4
 8014496:	bfb8      	it	lt
 8014498:	18e4      	addlt	r4, r4, r3
 801449a:	f7ff ffe7 	bl	801446c <__malloc_lock>
 801449e:	4a1e      	ldr	r2, [pc, #120]	; (8014518 <_free_r+0x94>)
 80144a0:	9801      	ldr	r0, [sp, #4]
 80144a2:	6813      	ldr	r3, [r2, #0]
 80144a4:	b933      	cbnz	r3, 80144b4 <_free_r+0x30>
 80144a6:	6063      	str	r3, [r4, #4]
 80144a8:	6014      	str	r4, [r2, #0]
 80144aa:	b003      	add	sp, #12
 80144ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144b0:	f7ff bfe2 	b.w	8014478 <__malloc_unlock>
 80144b4:	42a3      	cmp	r3, r4
 80144b6:	d908      	bls.n	80144ca <_free_r+0x46>
 80144b8:	6825      	ldr	r5, [r4, #0]
 80144ba:	1961      	adds	r1, r4, r5
 80144bc:	428b      	cmp	r3, r1
 80144be:	bf01      	itttt	eq
 80144c0:	6819      	ldreq	r1, [r3, #0]
 80144c2:	685b      	ldreq	r3, [r3, #4]
 80144c4:	1949      	addeq	r1, r1, r5
 80144c6:	6021      	streq	r1, [r4, #0]
 80144c8:	e7ed      	b.n	80144a6 <_free_r+0x22>
 80144ca:	461a      	mov	r2, r3
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	b10b      	cbz	r3, 80144d4 <_free_r+0x50>
 80144d0:	42a3      	cmp	r3, r4
 80144d2:	d9fa      	bls.n	80144ca <_free_r+0x46>
 80144d4:	6811      	ldr	r1, [r2, #0]
 80144d6:	1855      	adds	r5, r2, r1
 80144d8:	42a5      	cmp	r5, r4
 80144da:	d10b      	bne.n	80144f4 <_free_r+0x70>
 80144dc:	6824      	ldr	r4, [r4, #0]
 80144de:	4421      	add	r1, r4
 80144e0:	1854      	adds	r4, r2, r1
 80144e2:	42a3      	cmp	r3, r4
 80144e4:	6011      	str	r1, [r2, #0]
 80144e6:	d1e0      	bne.n	80144aa <_free_r+0x26>
 80144e8:	681c      	ldr	r4, [r3, #0]
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	6053      	str	r3, [r2, #4]
 80144ee:	4421      	add	r1, r4
 80144f0:	6011      	str	r1, [r2, #0]
 80144f2:	e7da      	b.n	80144aa <_free_r+0x26>
 80144f4:	d902      	bls.n	80144fc <_free_r+0x78>
 80144f6:	230c      	movs	r3, #12
 80144f8:	6003      	str	r3, [r0, #0]
 80144fa:	e7d6      	b.n	80144aa <_free_r+0x26>
 80144fc:	6825      	ldr	r5, [r4, #0]
 80144fe:	1961      	adds	r1, r4, r5
 8014500:	428b      	cmp	r3, r1
 8014502:	bf04      	itt	eq
 8014504:	6819      	ldreq	r1, [r3, #0]
 8014506:	685b      	ldreq	r3, [r3, #4]
 8014508:	6063      	str	r3, [r4, #4]
 801450a:	bf04      	itt	eq
 801450c:	1949      	addeq	r1, r1, r5
 801450e:	6021      	streq	r1, [r4, #0]
 8014510:	6054      	str	r4, [r2, #4]
 8014512:	e7ca      	b.n	80144aa <_free_r+0x26>
 8014514:	b003      	add	sp, #12
 8014516:	bd30      	pop	{r4, r5, pc}
 8014518:	2400362c 	.word	0x2400362c

0801451c <_read_r>:
 801451c:	b538      	push	{r3, r4, r5, lr}
 801451e:	4d07      	ldr	r5, [pc, #28]	; (801453c <_read_r+0x20>)
 8014520:	4604      	mov	r4, r0
 8014522:	4608      	mov	r0, r1
 8014524:	4611      	mov	r1, r2
 8014526:	2200      	movs	r2, #0
 8014528:	602a      	str	r2, [r5, #0]
 801452a:	461a      	mov	r2, r3
 801452c:	f7ee ffa6 	bl	800347c <_read>
 8014530:	1c43      	adds	r3, r0, #1
 8014532:	d102      	bne.n	801453a <_read_r+0x1e>
 8014534:	682b      	ldr	r3, [r5, #0]
 8014536:	b103      	cbz	r3, 801453a <_read_r+0x1e>
 8014538:	6023      	str	r3, [r4, #0]
 801453a:	bd38      	pop	{r3, r4, r5, pc}
 801453c:	24003634 	.word	0x24003634

08014540 <_fstat_r>:
 8014540:	b538      	push	{r3, r4, r5, lr}
 8014542:	4d07      	ldr	r5, [pc, #28]	; (8014560 <_fstat_r+0x20>)
 8014544:	2300      	movs	r3, #0
 8014546:	4604      	mov	r4, r0
 8014548:	4608      	mov	r0, r1
 801454a:	4611      	mov	r1, r2
 801454c:	602b      	str	r3, [r5, #0]
 801454e:	f7ee ffda 	bl	8003506 <_fstat>
 8014552:	1c43      	adds	r3, r0, #1
 8014554:	d102      	bne.n	801455c <_fstat_r+0x1c>
 8014556:	682b      	ldr	r3, [r5, #0]
 8014558:	b103      	cbz	r3, 801455c <_fstat_r+0x1c>
 801455a:	6023      	str	r3, [r4, #0]
 801455c:	bd38      	pop	{r3, r4, r5, pc}
 801455e:	bf00      	nop
 8014560:	24003634 	.word	0x24003634

08014564 <_isatty_r>:
 8014564:	b538      	push	{r3, r4, r5, lr}
 8014566:	4d06      	ldr	r5, [pc, #24]	; (8014580 <_isatty_r+0x1c>)
 8014568:	2300      	movs	r3, #0
 801456a:	4604      	mov	r4, r0
 801456c:	4608      	mov	r0, r1
 801456e:	602b      	str	r3, [r5, #0]
 8014570:	f7ee ffd9 	bl	8003526 <_isatty>
 8014574:	1c43      	adds	r3, r0, #1
 8014576:	d102      	bne.n	801457e <_isatty_r+0x1a>
 8014578:	682b      	ldr	r3, [r5, #0]
 801457a:	b103      	cbz	r3, 801457e <_isatty_r+0x1a>
 801457c:	6023      	str	r3, [r4, #0]
 801457e:	bd38      	pop	{r3, r4, r5, pc}
 8014580:	24003634 	.word	0x24003634

08014584 <_init>:
 8014584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014586:	bf00      	nop
 8014588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801458a:	bc08      	pop	{r3}
 801458c:	469e      	mov	lr, r3
 801458e:	4770      	bx	lr

08014590 <_fini>:
 8014590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014592:	bf00      	nop
 8014594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014596:	bc08      	pop	{r3}
 8014598:	469e      	mov	lr, r3
 801459a:	4770      	bx	lr
