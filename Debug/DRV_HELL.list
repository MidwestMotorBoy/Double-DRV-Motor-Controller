
DRV_HELL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d14  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08012fe4  08012fe4  00022fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013180  08013180  00023180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013184  08013184  00023184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  24000000  08013188  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000024d0  240001f0  08013378  000301f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240026c0  08013378  000326c0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00043503  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000060e9  00000000  00000000  00073721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000023d8  00000000  00000000  00079810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000021c0  00000000  00000000  0007bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00008ea0  00000000  00000000  0007dda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002be91  00000000  00000000  00086c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00178de4  00000000  00000000  000b2ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0022b8bd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000a424  00000000  00000000  0022b910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f0 	.word	0x240001f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012fcc 	.word	0x08012fcc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f4 	.word	0x240001f4
 800030c:	08012fcc 	.word	0x08012fcc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b096      	sub	sp, #88	; 0x58
 80003c4:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003c6:	4bb8      	ldr	r3, [pc, #736]	; (80006a8 <main+0x2e8>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d11b      	bne.n	800040a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003d2:	f3bf 8f4f 	dsb	sy
}
 80003d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003d8:	f3bf 8f6f 	isb	sy
}
 80003dc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003de:	4bb2      	ldr	r3, [pc, #712]	; (80006a8 <main+0x2e8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003e6:	f3bf 8f4f 	dsb	sy
}
 80003ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ec:	f3bf 8f6f 	isb	sy
}
 80003f0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003f2:	4bad      	ldr	r3, [pc, #692]	; (80006a8 <main+0x2e8>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4aac      	ldr	r2, [pc, #688]	; (80006a8 <main+0x2e8>)
 80003f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003fe:	f3bf 8f4f 	dsb	sy
}
 8000402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000404:	f3bf 8f6f 	isb	sy
}
 8000408:	e000      	b.n	800040c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800040a:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040c:	f002 fb22 	bl	8002a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000410:	f000 f980 	bl	8000714 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000414:	f000 f9f2 	bl	80007fc <PeriphCommonClock_Config>
//  volatile uint32_t adc1;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000418:	f001 f9ba 	bl	8001790 <MX_GPIO_Init>
  MX_ADC1_Init();
 800041c:	f000 fa0a 	bl	8000834 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000420:	f000 fab0 	bl	8000984 <MX_ADC2_Init>
  MX_CORDIC_Init();
 8000424:	f000 fbb4 	bl	8000b90 <MX_CORDIC_Init>
  MX_DFSDM1_Init();
 8000428:	f000 fbc6 	bl	8000bb8 <MX_DFSDM1_Init>
  MX_FDCAN1_Init();
 800042c:	f000 fd54 	bl	8000ed8 <MX_FDCAN1_Init>
  MX_FMAC_Init();
 8000430:	f000 fdb6 	bl	8000fa0 <MX_FMAC_Init>
  MX_SPI2_Init();
 8000434:	f000 fdc8 	bl	8000fc8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000438:	f000 fe1c 	bl	8001074 <MX_SPI3_Init>
  MX_SPI4_Init();
 800043c:	f000 fe70 	bl	8001120 <MX_SPI4_Init>
  MX_SPI6_Init();
 8000440:	f000 fec6 	bl	80011d0 <MX_SPI6_Init>
  MX_TIM1_Init();
 8000444:	f000 ff1c 	bl	8001280 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000448:	f001 f8a4 	bl	8001594 <MX_TIM8_Init>
  MX_ADC3_Init();
 800044c:	f000 fb20 	bl	8000a90 <MX_ADC3_Init>
  MX_DMA_Init();
 8000450:	f001 f96e 	bl	8001730 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000454:	f011 f8d8 	bl	8011608 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000458:	f001 f824 	bl	80014a4 <MX_TIM4_Init>
  MX_TIM2_Init();
 800045c:	f000 ffd4 	bl	8001408 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_SET);
 8000460:	2201      	movs	r2, #1
 8000462:	2102      	movs	r1, #2
 8000464:	4891      	ldr	r0, [pc, #580]	; (80006ac <main+0x2ec>)
 8000466:	f007 ff19 	bl	800829c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRD_EN_GPIO_Port, BRD_EN_Pin, GPIO_PIN_SET);
 800046a:	2201      	movs	r2, #1
 800046c:	2104      	movs	r1, #4
 800046e:	488f      	ldr	r0, [pc, #572]	; (80006ac <main+0x2ec>)
 8000470:	f007 ff14 	bl	800829c <HAL_GPIO_WritePin>
  HAL_Delay (100);
 8000474:	2064      	movs	r0, #100	; 0x64
 8000476:	f002 fb7f 	bl	8002b78 <HAL_Delay>
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0) != HAL_OK){
 800047a:	488d      	ldr	r0, [pc, #564]	; (80006b0 <main+0x2f0>)
 800047c:	f004 ffa8 	bl	80053d0 <HAL_DFSDM_FilterRegularStart>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <main+0xca>
	  Error_Handler();
 8000486:	f001 fa3f 	bl	8001908 <Error_Handler>
  }
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1) != HAL_OK){
 800048a:	488a      	ldr	r0, [pc, #552]	; (80006b4 <main+0x2f4>)
 800048c:	f004 ffa0 	bl	80053d0 <HAL_DFSDM_FilterRegularStart>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <main+0xda>
	  Error_Handler();
 8000496:	f001 fa37 	bl	8001908 <Error_Handler>
  }
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter2) != HAL_OK){
 800049a:	4887      	ldr	r0, [pc, #540]	; (80006b8 <main+0x2f8>)
 800049c:	f004 ff98 	bl	80053d0 <HAL_DFSDM_FilterRegularStart>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <main+0xea>
	  Error_Handler();
 80004a6:	f001 fa2f 	bl	8001908 <Error_Handler>
  }
  if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter3) != HAL_OK){
 80004aa:	4884      	ldr	r0, [pc, #528]	; (80006bc <main+0x2fc>)
 80004ac:	f004 ff90 	bl	80053d0 <HAL_DFSDM_FilterRegularStart>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <main+0xfa>
	  Error_Handler();
 80004b6:	f001 fa27 	bl	8001908 <Error_Handler>
  }
  HAL_TIM_Base_Start_IT(&htim1);
 80004ba:	4881      	ldr	r0, [pc, #516]	; (80006c0 <main+0x300>)
 80004bc:	f00c fe5a 	bl	800d174 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80004c0:	4880      	ldr	r0, [pc, #512]	; (80006c4 <main+0x304>)
 80004c2:	f00c fe57 	bl	800d174 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 80004c6:	4880      	ldr	r0, [pc, #512]	; (80006c8 <main+0x308>)
 80004c8:	f00c fdd6 	bl	800d078 <HAL_TIM_Base_Start>
//  HAL_TIM_Base_Start_IT(&htim8);
  TIM4->CCER = 0b0000010101010101;
 80004cc:	4b7f      	ldr	r3, [pc, #508]	; (80006cc <main+0x30c>)
 80004ce:	f240 5255 	movw	r2, #1365	; 0x555
 80004d2:	621a      	str	r2, [r3, #32]
  TIM4->CCR1 = 10000;
 80004d4:	4b7d      	ldr	r3, [pc, #500]	; (80006cc <main+0x30c>)
 80004d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80004da:	635a      	str	r2, [r3, #52]	; 0x34
  uint8_t *data = "Hello World from USB CDC123\n";
 80004dc:	4b7c      	ldr	r3, [pc, #496]	; (80006d0 <main+0x310>)
 80004de:	643b      	str	r3, [r7, #64]	; 0x40
  int bad_ret=0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float current_C1 = 0,current_A1 = 0,current_C2 = 0,current_A2 = 0;
 80004e4:	f04f 0300 	mov.w	r3, #0
 80004e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80004ea:	f04f 0300 	mov.w	r3, #0
 80004ee:	637b      	str	r3, [r7, #52]	; 0x34
 80004f0:	f04f 0300 	mov.w	r3, #0
 80004f4:	633b      	str	r3, [r7, #48]	; 0x30
 80004f6:	f04f 0300 	mov.w	r3, #0
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  float prev_angle,angle_sum;
  uint8_t result=0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t channel1 = 0,channel2 = 0,channel4 = 0,channel5 = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
  uint16_t length=strlen(data);
 8000512:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000514:	f7ff fefc 	bl	8000310 <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	853b      	strh	r3, [r7, #40]	; 0x28

  HAL_ADC_Start_DMA(&hadc1, adc1, 4);
 800051c:	2204      	movs	r2, #4
 800051e:	496d      	ldr	r1, [pc, #436]	; (80006d4 <main+0x314>)
 8000520:	486d      	ldr	r0, [pc, #436]	; (80006d8 <main+0x318>)
 8000522:	f003 f87b 	bl	800361c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adc2, 3);
 8000526:	2203      	movs	r2, #3
 8000528:	496c      	ldr	r1, [pc, #432]	; (80006dc <main+0x31c>)
 800052a:	486d      	ldr	r0, [pc, #436]	; (80006e0 <main+0x320>)
 800052c:	f003 f876 	bl	800361c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, adc3, 2);
 8000530:	2202      	movs	r2, #2
 8000532:	496c      	ldr	r1, [pc, #432]	; (80006e4 <main+0x324>)
 8000534:	486c      	ldr	r0, [pc, #432]	; (80006e8 <main+0x328>)
 8000536:	f003 f871 	bl	800361c <HAL_ADC_Start_DMA>
  while (1)
  {
//	  CDC_Transmit_HS(data,length);
//	  uint32_t debug_A1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1, &channel2);
//	  uint32_t debug_C1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &channel1);
	current_C1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &channel1)*0.0016;
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	485b      	ldr	r0, [pc, #364]	; (80006b0 <main+0x2f0>)
 8000542:	f004 ff60 	bl	8005406 <HAL_DFSDM_FilterGetRegularValue>
 8000546:	ee07 0a90 	vmov	s15, r0
 800054a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800054e:	ed9f 6b54 	vldr	d6, [pc, #336]	; 80006a0 <main+0x2e0>
 8000552:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000556:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800055a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	current_A1 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1, &channel2)*0.0016;
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	4619      	mov	r1, r3
 8000564:	4853      	ldr	r0, [pc, #332]	; (80006b4 <main+0x2f4>)
 8000566:	f004 ff4e 	bl	8005406 <HAL_DFSDM_FilterGetRegularValue>
 800056a:	ee07 0a90 	vmov	s15, r0
 800056e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000572:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80006a0 <main+0x2e0>
 8000576:	ee27 7b06 	vmul.f64	d7, d7, d6
 800057a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800057e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	current_C2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter2, &channel4)*0.0016;
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	4619      	mov	r1, r3
 8000588:	484b      	ldr	r0, [pc, #300]	; (80006b8 <main+0x2f8>)
 800058a:	f004 ff3c 	bl	8005406 <HAL_DFSDM_FilterGetRegularValue>
 800058e:	ee07 0a90 	vmov	s15, r0
 8000592:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000596:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80006a0 <main+0x2e0>
 800059a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800059e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	current_A2 = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter3, &channel5)*0.0016;
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	4619      	mov	r1, r3
 80005aa:	4844      	ldr	r0, [pc, #272]	; (80006bc <main+0x2fc>)
 80005ac:	f004 ff2b 	bl	8005406 <HAL_DFSDM_FilterGetRegularValue>
 80005b0:	ee07 0a90 	vmov	s15, r0
 80005b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80005b8:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80006a0 <main+0x2e0>
 80005bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005c4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	int debug1 = adc1[0];
 80005c8:	4b42      	ldr	r3, [pc, #264]	; (80006d4 <main+0x314>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
	int debug2 = adc2[0];
 80005ce:	4b43      	ldr	r3, [pc, #268]	; (80006dc <main+0x31c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	623b      	str	r3, [r7, #32]
	int debug3 = adc3[0];
 80005d4:	4b43      	ldr	r3, [pc, #268]	; (80006e4 <main+0x324>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	61fb      	str	r3, [r7, #28]

	HAL_StatusTypeDef spi_rsp = HAL_SPI_TransmitReceive(&hspi6, &request_pos, (uint8_t*) &position, 1, 100);
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	4a42      	ldr	r2, [pc, #264]	; (80006ec <main+0x32c>)
 80005e2:	4943      	ldr	r1, [pc, #268]	; (80006f0 <main+0x330>)
 80005e4:	4843      	ldr	r0, [pc, #268]	; (80006f4 <main+0x334>)
 80005e6:	f00c f91b 	bl	800c820 <HAL_SPI_TransmitReceive>
 80005ea:	4603      	mov	r3, r0
 80005ec:	76fb      	strb	r3, [r7, #27]
	HAL_StatusTypeDef spi_rsp_2 = HAL_SPI_TransmitReceive(&hspi4, &request_pos, (uint8_t*) &position_2, 1, 100);
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	4a40      	ldr	r2, [pc, #256]	; (80006f8 <main+0x338>)
 80005f6:	493e      	ldr	r1, [pc, #248]	; (80006f0 <main+0x330>)
 80005f8:	4840      	ldr	r0, [pc, #256]	; (80006fc <main+0x33c>)
 80005fa:	f00c f911 	bl	800c820 <HAL_SPI_TransmitReceive>
 80005fe:	4603      	mov	r3, r0
 8000600:	76bb      	strb	r3, [r7, #26]
	float position_temp = position >> 4;
 8000602:	4b3a      	ldr	r3, [pc, #232]	; (80006ec <main+0x32c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	111b      	asrs	r3, r3, #4
 8000608:	ee07 3a90 	vmov	s15, r3
 800060c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000610:	edc7 7a05 	vstr	s15, [r7, #20]
	angle = data2angle * position_temp;
 8000614:	4b3a      	ldr	r3, [pc, #232]	; (8000700 <main+0x340>)
 8000616:	ed93 7a00 	vldr	s14, [r3]
 800061a:	edd7 7a05 	vldr	s15, [r7, #20]
 800061e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <main+0x344>)
 8000624:	edc3 7a00 	vstr	s15, [r3]
	//speed cal
	float diff_angle=angle-prev_angle;
 8000628:	4b36      	ldr	r3, [pc, #216]	; (8000704 <main+0x344>)
 800062a:	ed93 7a00 	vldr	s14, [r3]
 800062e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000636:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if(diff_angle>180){
 800063a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800063e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000708 <main+0x348>
 8000642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064a:	dd08      	ble.n	800065e <main+0x29e>
		diff_angle-=360;
 800064c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000650:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800070c <main+0x34c>
 8000654:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000658:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 800065c:	e010      	b.n	8000680 <main+0x2c0>
	}
	else if(diff_angle<-180){
 800065e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000662:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000710 <main+0x350>
 8000666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066e:	d507      	bpl.n	8000680 <main+0x2c0>
		diff_angle+=360;
 8000670:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000674:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800070c <main+0x34c>
 8000678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800067c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}
	angle_sum+=diff_angle;
 8000680:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000684:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800068c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	prev_angle=angle;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <main+0x344>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
//	  uint32_t *adc1_add = adc1;
	  HAL_Delay (100);
 8000696:	2064      	movs	r0, #100	; 0x64
 8000698:	f002 fa6e 	bl	8002b78 <HAL_Delay>
  {
 800069c:	e74d      	b.n	800053a <main+0x17a>
 800069e:	bf00      	nop
 80006a0:	eb1c432d 	.word	0xeb1c432d
 80006a4:	3f5a36e2 	.word	0x3f5a36e2
 80006a8:	e000ed00 	.word	0xe000ed00
 80006ac:	58020000 	.word	0x58020000
 80006b0:	2400069c 	.word	0x2400069c
 80006b4:	24000a00 	.word	0x24000a00
 80006b8:	240008e8 	.word	0x240008e8
 80006bc:	240009ac 	.word	0x240009ac
 80006c0:	24000c8c 	.word	0x24000c8c
 80006c4:	24000cd8 	.word	0x24000cd8
 80006c8:	240005a8 	.word	0x240005a8
 80006cc:	40000800 	.word	0x40000800
 80006d0:	08012fe4 	.word	0x08012fe4
 80006d4:	2400020c 	.word	0x2400020c
 80006d8:	24000878 	.word	0x24000878
 80006dc:	2400021c 	.word	0x2400021c
 80006e0:	240005f4 	.word	0x240005f4
 80006e4:	24000228 	.word	0x24000228
 80006e8:	2400093c 	.word	0x2400093c
 80006ec:	24000230 	.word	0x24000230
 80006f0:	24000000 	.word	0x24000000
 80006f4:	240006f0 	.word	0x240006f0
 80006f8:	24000234 	.word	0x24000234
 80006fc:	24000a8c 	.word	0x24000a8c
 8000700:	24000004 	.word	0x24000004
 8000704:	24000238 	.word	0x24000238
 8000708:	43340000 	.word	0x43340000
 800070c:	43b40000 	.word	0x43b40000
 8000710:	c3340000 	.word	0xc3340000

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b09c      	sub	sp, #112	; 0x70
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071e:	224c      	movs	r2, #76	; 0x4c
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f011 fc96 	bl	8012054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2220      	movs	r2, #32
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f011 fc90 	bl	8012054 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000734:	2002      	movs	r0, #2
 8000736:	f008 ffa5 	bl	8009684 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <SystemClock_Config+0xe4>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a2d      	ldr	r2, [pc, #180]	; (80007f8 <SystemClock_Config+0xe4>)
 8000744:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <SystemClock_Config+0xe4>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000756:	bf00      	nop
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <SystemClock_Config+0xe4>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000764:	d1f8      	bne.n	8000758 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI
 8000766:	2331      	movs	r3, #49	; 0x31
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800076a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000778:	2310      	movs	r3, #16
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000780:	2302      	movs	r3, #2
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000784:	2303      	movs	r3, #3
 8000786:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 73;
 8000788:	2349      	movs	r3, #73	; 0x49
 800078a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800078c:	2301      	movs	r3, #1
 800078e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000790:	230a      	movs	r3, #10
 8000792:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 10;
 8000794:	230a      	movs	r3, #10
 8000796:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000798:	2308      	movs	r3, #8
 800079a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079c:	2300      	movs	r3, #0
 800079e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6126;
 80007a0:	f241 73ee 	movw	r3, #6126	; 0x17ee
 80007a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4618      	mov	r0, r3
 80007ac:	f008 ffb4 	bl	8009718 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007b6:	f001 f8a7 	bl	8001908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	233f      	movs	r3, #63	; 0x3f
 80007bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2303      	movs	r3, #3
 80007c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c6:	2308      	movs	r3, #8
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ce:	2340      	movs	r3, #64	; 0x40
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d8:	2340      	movs	r3, #64	; 0x40
 80007da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2103      	movs	r1, #3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f009 fb29 	bl	8009e38 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007ec:	f001 f88c 	bl	8001908 <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3770      	adds	r7, #112	; 0x70
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58024800 	.word	0x58024800

080007fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0ae      	sub	sp, #184	; 0xb8
 8000800:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	22b4      	movs	r2, #180	; 0xb4
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f011 fc23 	bl	8012054 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800080e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000812:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_CSI;
 8000814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4618      	mov	r0, r3
 800081e:	f009 fe6b 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000828:	f001 f86e 	bl	8001908 <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	37b8      	adds	r7, #184	; 0xb8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2224      	movs	r2, #36	; 0x24
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f011 fc01 	bl	8012054 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000852:	4b46      	ldr	r3, [pc, #280]	; (800096c <MX_ADC1_Init+0x138>)
 8000854:	4a46      	ldr	r2, [pc, #280]	; (8000970 <MX_ADC1_Init+0x13c>)
 8000856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000858:	4b44      	ldr	r3, [pc, #272]	; (800096c <MX_ADC1_Init+0x138>)
 800085a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800085e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000860:	4b42      	ldr	r3, [pc, #264]	; (800096c <MX_ADC1_Init+0x138>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000866:	4b41      	ldr	r3, [pc, #260]	; (800096c <MX_ADC1_Init+0x138>)
 8000868:	2201      	movs	r2, #1
 800086a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086c:	4b3f      	ldr	r3, [pc, #252]	; (800096c <MX_ADC1_Init+0x138>)
 800086e:	2204      	movs	r2, #4
 8000870:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000872:	4b3e      	ldr	r3, [pc, #248]	; (800096c <MX_ADC1_Init+0x138>)
 8000874:	2200      	movs	r2, #0
 8000876:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000878:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_ADC1_Init+0x138>)
 800087a:	2201      	movs	r2, #1
 800087c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800087e:	4b3b      	ldr	r3, [pc, #236]	; (800096c <MX_ADC1_Init+0x138>)
 8000880:	2204      	movs	r2, #4
 8000882:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000884:	4b39      	ldr	r3, [pc, #228]	; (800096c <MX_ADC1_Init+0x138>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <MX_ADC1_Init+0x138>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000892:	4b36      	ldr	r3, [pc, #216]	; (800096c <MX_ADC1_Init+0x138>)
 8000894:	2200      	movs	r2, #0
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_ADC1_Init+0x138>)
 800089a:	2203      	movs	r2, #3
 800089c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <MX_ADC1_Init+0x138>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a4:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_ADC1_Init+0x138>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_ADC1_Init+0x138>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b2:	482e      	ldr	r0, [pc, #184]	; (800096c <MX_ADC1_Init+0x138>)
 80008b4:	f002 fcaa 	bl	800320c <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008be:	f001 f823 	bl	8001908 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	4827      	ldr	r0, [pc, #156]	; (800096c <MX_ADC1_Init+0x138>)
 80008ce:	f004 f971 	bl	8004bb4 <HAL_ADCEx_MultiModeConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80008d8:	f001 f816 	bl	8001908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_ADC1_Init+0x140>)
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e0:	2306      	movs	r3, #6
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80008e4:	2305      	movs	r3, #5
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ee:	2304      	movs	r3, #4
 80008f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	481a      	ldr	r0, [pc, #104]	; (800096c <MX_ADC1_Init+0x138>)
 8000902:	f003 f9c9 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800090c:	f000 fffc 	bl	8001908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_ADC1_Init+0x144>)
 8000912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000914:	230c      	movs	r3, #12
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_ADC1_Init+0x138>)
 800091e:	f003 f9bb 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000928:	f000 ffee 	bl	8001908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_ADC1_Init+0x148>)
 800092e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000930:	2312      	movs	r3, #18
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_ADC1_Init+0x138>)
 800093a:	f003 f9ad 	bl	8003c98 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000944:	f000 ffe0 	bl	8001908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_ADC1_Init+0x14c>)
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800094c:	2318      	movs	r3, #24
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_ADC1_Init+0x138>)
 8000956:	f003 f99f 	bl	8003c98 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000960:	f000 ffd2 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	24000878 	.word	0x24000878
 8000970:	40022000 	.word	0x40022000
 8000974:	10c00010 	.word	0x10c00010
 8000978:	21800100 	.word	0x21800100
 800097c:	25b00200 	.word	0x25b00200
 8000980:	43210000 	.word	0x43210000

08000984 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2224      	movs	r2, #36	; 0x24
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f011 fb5f 	bl	8012054 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000996:	4b39      	ldr	r3, [pc, #228]	; (8000a7c <MX_ADC2_Init+0xf8>)
 8000998:	4a39      	ldr	r2, [pc, #228]	; (8000a80 <MX_ADC2_Init+0xfc>)
 800099a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 800099c:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <MX_ADC2_Init+0xf8>)
 800099e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80009a4:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009aa:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009b0:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009b2:	2208      	movs	r2, #8
 80009b4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009be:	2201      	movs	r2, #1
 80009c0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009c4:	2203      	movs	r2, #3
 80009c6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009c8:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009dc:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009de:	2203      	movs	r2, #3
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009f8:	4820      	ldr	r0, [pc, #128]	; (8000a7c <MX_ADC2_Init+0xf8>)
 80009fa:	f002 fc07 	bl	800320c <HAL_ADC_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000a04:	f000 ff80 	bl	8001908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_ADC2_Init+0x100>)
 8000a0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0c:	2306      	movs	r3, #6
 8000a0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8000a10:	2302      	movs	r3, #2
 8000a12:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a14:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4813      	ldr	r0, [pc, #76]	; (8000a7c <MX_ADC2_Init+0xf8>)
 8000a2e:	f003 f933 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000a38:	f000 ff66 	bl	8001908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_ADC2_Init+0x104>)
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a40:	230c      	movs	r3, #12
 8000a42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <MX_ADC2_Init+0xf8>)
 8000a4a:	f003 f925 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000a54:	f000 ff58 	bl	8001908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_ADC2_Init+0x108>)
 8000a5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_ADC2_Init+0xf8>)
 8000a66:	f003 f917 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8000a70:	f000 ff4a 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	; 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	240005f4 	.word	0x240005f4
 8000a80:	40022100 	.word	0x40022100
 8000a84:	2a000400 	.word	0x2a000400
 8000a88:	2e300800 	.word	0x2e300800
 8000a8c:	3ef08000 	.word	0x3ef08000

08000a90 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2224      	movs	r2, #36	; 0x24
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f011 fad9 	bl	8012054 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000aa4:	4a38      	ldr	r2, [pc, #224]	; (8000b88 <MX_ADC3_Init+0xf8>)
 8000aa6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000aa8:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000aaa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000aae:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000abc:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000abe:	2208      	movs	r2, #8
 8000ac0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ac2:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 2;
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000af8:	2203      	movs	r2, #3
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b10:	481c      	ldr	r0, [pc, #112]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000b12:	f002 fb7b 	bl	800320c <HAL_ADC_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000b1c:	f000 fef4 	bl	8001908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b20:	2301      	movs	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b24:	2306      	movs	r3, #6
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b30:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b32:	2304      	movs	r3, #4
 8000b34:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000b50:	f003 f8a2 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000b5a:	f000 fed5 	bl	8001908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_ADC3_Init+0xfc>)
 8000b60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b62:	230c      	movs	r3, #12
 8000b64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <MX_ADC3_Init+0xf4>)
 8000b6c:	f003 f894 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8000b76:	f000 fec7 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2400093c 	.word	0x2400093c
 8000b88:	58026000 	.word	0x58026000
 8000b8c:	04300002 	.word	0x04300002

08000b90 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_CORDIC_Init+0x20>)
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <MX_CORDIC_Init+0x24>)
 8000b98:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_CORDIC_Init+0x20>)
 8000b9c:	f004 f8ec 	bl	8004d78 <HAL_CORDIC_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000ba6:	f000 feaf 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	24000b8c 	.word	0x24000b8c
 8000bb4:	48024400 	.word	0x48024400

08000bb8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000bbc:	4ba4      	ldr	r3, [pc, #656]	; (8000e50 <MX_DFSDM1_Init+0x298>)
 8000bbe:	4aa5      	ldr	r2, [pc, #660]	; (8000e54 <MX_DFSDM1_Init+0x29c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000bc2:	4ba3      	ldr	r3, [pc, #652]	; (8000e50 <MX_DFSDM1_Init+0x298>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8000bc8:	4ba1      	ldr	r3, [pc, #644]	; (8000e50 <MX_DFSDM1_Init+0x298>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8000bce:	4ba0      	ldr	r3, [pc, #640]	; (8000e50 <MX_DFSDM1_Init+0x298>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000bd4:	4b9e      	ldr	r3, [pc, #632]	; (8000e50 <MX_DFSDM1_Init+0x298>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 256;
 8000bda:	4b9d      	ldr	r3, [pc, #628]	; (8000e50 <MX_DFSDM1_Init+0x298>)
 8000bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000be2:	4b9b      	ldr	r3, [pc, #620]	; (8000e50 <MX_DFSDM1_Init+0x298>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000be8:	4899      	ldr	r0, [pc, #612]	; (8000e50 <MX_DFSDM1_Init+0x298>)
 8000bea:	f004 facf 	bl	800518c <HAL_DFSDM_FilterInit>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000bf4:	f000 fe88 	bl	8001908 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000bf8:	4b97      	ldr	r3, [pc, #604]	; (8000e58 <MX_DFSDM1_Init+0x2a0>)
 8000bfa:	4a98      	ldr	r2, [pc, #608]	; (8000e5c <MX_DFSDM1_Init+0x2a4>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000bfe:	4b96      	ldr	r3, [pc, #600]	; (8000e58 <MX_DFSDM1_Init+0x2a0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = DISABLE;
 8000c04:	4b94      	ldr	r3, [pc, #592]	; (8000e58 <MX_DFSDM1_Init+0x2a0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 8000c0a:	4b93      	ldr	r3, [pc, #588]	; (8000e58 <MX_DFSDM1_Init+0x2a0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000c10:	4b91      	ldr	r3, [pc, #580]	; (8000e58 <MX_DFSDM1_Init+0x2a0>)
 8000c12:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c16:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 256;
 8000c18:	4b8f      	ldr	r3, [pc, #572]	; (8000e58 <MX_DFSDM1_Init+0x2a0>)
 8000c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1e:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000c20:	4b8d      	ldr	r3, [pc, #564]	; (8000e58 <MX_DFSDM1_Init+0x2a0>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8000c26:	488c      	ldr	r0, [pc, #560]	; (8000e58 <MX_DFSDM1_Init+0x2a0>)
 8000c28:	f004 fab0 	bl	800518c <HAL_DFSDM_FilterInit>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_DFSDM1_Init+0x7e>
  {
    Error_Handler();
 8000c32:	f000 fe69 	bl	8001908 <Error_Handler>
  }
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 8000c36:	4b8a      	ldr	r3, [pc, #552]	; (8000e60 <MX_DFSDM1_Init+0x2a8>)
 8000c38:	4a8a      	ldr	r2, [pc, #552]	; (8000e64 <MX_DFSDM1_Init+0x2ac>)
 8000c3a:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000c3c:	4b88      	ldr	r3, [pc, #544]	; (8000e60 <MX_DFSDM1_Init+0x2a8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter2.Init.RegularParam.FastMode = DISABLE;
 8000c42:	4b87      	ldr	r3, [pc, #540]	; (8000e60 <MX_DFSDM1_Init+0x2a8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter2.Init.RegularParam.DmaMode = DISABLE;
 8000c48:	4b85      	ldr	r3, [pc, #532]	; (8000e60 <MX_DFSDM1_Init+0x2a8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000c4e:	4b84      	ldr	r3, [pc, #528]	; (8000e60 <MX_DFSDM1_Init+0x2a8>)
 8000c50:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c54:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 256;
 8000c56:	4b82      	ldr	r3, [pc, #520]	; (8000e60 <MX_DFSDM1_Init+0x2a8>)
 8000c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c5c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
 8000c5e:	4b80      	ldr	r3, [pc, #512]	; (8000e60 <MX_DFSDM1_Init+0x2a8>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 8000c64:	487e      	ldr	r0, [pc, #504]	; (8000e60 <MX_DFSDM1_Init+0x2a8>)
 8000c66:	f004 fa91 	bl	800518c <HAL_DFSDM_FilterInit>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_DFSDM1_Init+0xbc>
  {
    Error_Handler();
 8000c70:	f000 fe4a 	bl	8001908 <Error_Handler>
  }
  hdfsdm1_filter3.Instance = DFSDM1_Filter3;
 8000c74:	4b7c      	ldr	r3, [pc, #496]	; (8000e68 <MX_DFSDM1_Init+0x2b0>)
 8000c76:	4a7d      	ldr	r2, [pc, #500]	; (8000e6c <MX_DFSDM1_Init+0x2b4>)
 8000c78:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter3.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000c7a:	4b7b      	ldr	r3, [pc, #492]	; (8000e68 <MX_DFSDM1_Init+0x2b0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter3.Init.RegularParam.FastMode = DISABLE;
 8000c80:	4b79      	ldr	r3, [pc, #484]	; (8000e68 <MX_DFSDM1_Init+0x2b0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter3.Init.RegularParam.DmaMode = DISABLE;
 8000c86:	4b78      	ldr	r3, [pc, #480]	; (8000e68 <MX_DFSDM1_Init+0x2b0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter3.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000c8c:	4b76      	ldr	r3, [pc, #472]	; (8000e68 <MX_DFSDM1_Init+0x2b0>)
 8000c8e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c92:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter3.Init.FilterParam.Oversampling = 256;
 8000c94:	4b74      	ldr	r3, [pc, #464]	; (8000e68 <MX_DFSDM1_Init+0x2b0>)
 8000c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9a:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter3.Init.FilterParam.IntOversampling = 1;
 8000c9c:	4b72      	ldr	r3, [pc, #456]	; (8000e68 <MX_DFSDM1_Init+0x2b0>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter3) != HAL_OK)
 8000ca2:	4871      	ldr	r0, [pc, #452]	; (8000e68 <MX_DFSDM1_Init+0x2b0>)
 8000ca4:	f004 fa72 	bl	800518c <HAL_DFSDM_FilterInit>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_DFSDM1_Init+0xfa>
  {
    Error_Handler();
 8000cae:	f000 fe2b 	bl	8001908 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000cb2:	4b6f      	ldr	r3, [pc, #444]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cb4:	4a6f      	ldr	r2, [pc, #444]	; (8000e74 <MX_DFSDM1_Init+0x2bc>)
 8000cb6:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = DISABLE;
 8000cb8:	4b6d      	ldr	r3, [pc, #436]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000cbe:	4b6c      	ldr	r3, [pc, #432]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000cc4:	4b6a      	ldr	r3, [pc, #424]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000cca:	4b69      	ldr	r3, [pc, #420]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000cd0:	4b67      	ldr	r3, [pc, #412]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000cd6:	4b66      	ldr	r3, [pc, #408]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000cdc:	4b64      	ldr	r3, [pc, #400]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000ce2:	4b63      	ldr	r3, [pc, #396]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ce8:	4b61      	ldr	r3, [pc, #388]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000cee:	4b60      	ldr	r3, [pc, #384]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000cf4:	4b5e      	ldr	r3, [pc, #376]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000cfa:	4b5d      	ldr	r3, [pc, #372]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000d00:	485b      	ldr	r0, [pc, #364]	; (8000e70 <MX_DFSDM1_Init+0x2b8>)
 8000d02:	f004 f97b 	bl	8004ffc <HAL_DFSDM_ChannelInit>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_DFSDM1_Init+0x158>
  {
    Error_Handler();
 8000d0c:	f000 fdfc 	bl	8001908 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000d10:	4b59      	ldr	r3, [pc, #356]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d12:	4a5a      	ldr	r2, [pc, #360]	; (8000e7c <MX_DFSDM1_Init+0x2c4>)
 8000d14:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = DISABLE;
 8000d16:	4b58      	ldr	r3, [pc, #352]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d1c:	4b56      	ldr	r3, [pc, #344]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000d22:	4b55      	ldr	r3, [pc, #340]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d24:	2202      	movs	r2, #2
 8000d26:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d28:	4b53      	ldr	r3, [pc, #332]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d2e:	4b52      	ldr	r3, [pc, #328]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000d34:	4b50      	ldr	r3, [pc, #320]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d3a:	4b4f      	ldr	r3, [pc, #316]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000d40:	4b4d      	ldr	r3, [pc, #308]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d46:	4b4c      	ldr	r3, [pc, #304]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000d4c:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000d52:	4b49      	ldr	r3, [pc, #292]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000d58:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000d5e:	4846      	ldr	r0, [pc, #280]	; (8000e78 <MX_DFSDM1_Init+0x2c0>)
 8000d60:	f004 f94c 	bl	8004ffc <HAL_DFSDM_ChannelInit>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_DFSDM1_Init+0x1b6>
  {
    Error_Handler();
 8000d6a:	f000 fdcd 	bl	8001908 <Error_Handler>
  }
  hdfsdm1_channel4.Instance = DFSDM1_Channel4;
 8000d6e:	4b44      	ldr	r3, [pc, #272]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000d70:	4a44      	ldr	r2, [pc, #272]	; (8000e84 <MX_DFSDM1_Init+0x2cc>)
 8000d72:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel4.Init.OutputClock.Activation = DISABLE;
 8000d74:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel4.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel4.Init.OutputClock.Divider = 2;
 8000d80:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel4.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d86:	4b3e      	ldr	r3, [pc, #248]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel4.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel4.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000d92:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel4.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d98:	4b39      	ldr	r3, [pc, #228]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel4.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000d9e:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel4.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000da4:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel4.Init.Awd.Oversampling = 1;
 8000daa:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel4.Init.Offset = 0;
 8000db0:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel4.Init.RightBitShift = 0x00;
 8000db6:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel4) != HAL_OK)
 8000dbc:	4830      	ldr	r0, [pc, #192]	; (8000e80 <MX_DFSDM1_Init+0x2c8>)
 8000dbe:	f004 f91d 	bl	8004ffc <HAL_DFSDM_ChannelInit>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_DFSDM1_Init+0x214>
  {
    Error_Handler();
 8000dc8:	f000 fd9e 	bl	8001908 <Error_Handler>
  }
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 8000dcc:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000dce:	4a2f      	ldr	r2, [pc, #188]	; (8000e8c <MX_DFSDM1_Init+0x2d4>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = DISABLE;
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 2;
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 8000e1a:	481b      	ldr	r0, [pc, #108]	; (8000e88 <MX_DFSDM1_Init+0x2d0>)
 8000e1c:	f004 f8ee 	bl	8004ffc <HAL_DFSDM_ChannelInit>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_DFSDM1_Init+0x272>
  {
    Error_Handler();
 8000e26:	f000 fd6f 	bl	8001908 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4918      	ldr	r1, [pc, #96]	; (8000e90 <MX_DFSDM1_Init+0x2d8>)
 8000e2e:	4808      	ldr	r0, [pc, #32]	; (8000e50 <MX_DFSDM1_Init+0x298>)
 8000e30:	f004 fa88 	bl	8005344 <HAL_DFSDM_FilterConfigRegChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_DFSDM1_Init+0x286>
  {
    Error_Handler();
 8000e3a:	f000 fd65 	bl	8001908 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4914      	ldr	r1, [pc, #80]	; (8000e94 <MX_DFSDM1_Init+0x2dc>)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_DFSDM1_Init+0x2a0>)
 8000e44:	f004 fa7e 	bl	8005344 <HAL_DFSDM_FilterConfigRegChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d026      	beq.n	8000e9c <MX_DFSDM1_Init+0x2e4>
 8000e4e:	e023      	b.n	8000e98 <MX_DFSDM1_Init+0x2e0>
 8000e50:	2400069c 	.word	0x2400069c
 8000e54:	40017900 	.word	0x40017900
 8000e58:	24000a00 	.word	0x24000a00
 8000e5c:	40017980 	.word	0x40017980
 8000e60:	240008e8 	.word	0x240008e8
 8000e64:	40017a00 	.word	0x40017a00
 8000e68:	240009ac 	.word	0x240009ac
 8000e6c:	40017a80 	.word	0x40017a80
 8000e70:	2400049c 	.word	0x2400049c
 8000e74:	40017820 	.word	0x40017820
 8000e78:	24000d9c 	.word	0x24000d9c
 8000e7c:	40017840 	.word	0x40017840
 8000e80:	24000664 	.word	0x24000664
 8000e84:	40017880 	.word	0x40017880
 8000e88:	24000a54 	.word	0x24000a54
 8000e8c:	400178a0 	.word	0x400178a0
 8000e90:	00010002 	.word	0x00010002
 8000e94:	00020004 	.word	0x00020004
  {
    Error_Handler();
 8000e98:	f000 fd36 	bl	8001908 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_4, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	490a      	ldr	r1, [pc, #40]	; (8000ec8 <MX_DFSDM1_Init+0x310>)
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <MX_DFSDM1_Init+0x314>)
 8000ea2:	f004 fa4f 	bl	8005344 <HAL_DFSDM_FilterConfigRegChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_DFSDM1_Init+0x2f8>
  {
    Error_Handler();
 8000eac:	f000 fd2c 	bl	8001908 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter3, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <MX_DFSDM1_Init+0x318>)
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <MX_DFSDM1_Init+0x31c>)
 8000eb6:	f004 fa45 	bl	8005344 <HAL_DFSDM_FilterConfigRegChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_DFSDM1_Init+0x30c>
  {
    Error_Handler();
 8000ec0:	f000 fd22 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	00040010 	.word	0x00040010
 8000ecc:	240008e8 	.word	0x240008e8
 8000ed0:	00050020 	.word	0x00050020
 8000ed4:	240009ac 	.word	0x240009ac

08000ed8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000edc:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <MX_FDCAN1_Init+0xc4>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ef4:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f14:	2202      	movs	r2, #2
 8000f16:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f62:	2204      	movs	r2, #4
 8000f64:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_FDCAN1_Init+0xc0>)
 8000f86:	f006 fbd5 	bl	8007734 <HAL_FDCAN_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000f90:	f000 fcba 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	24000bec 	.word	0x24000bec
 8000f9c:	4000a000 	.word	0x4000a000

08000fa0 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_FMAC_Init+0x20>)
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <MX_FMAC_Init+0x24>)
 8000fa8:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_FMAC_Init+0x20>)
 8000fac:	f006 ff2a 	bl	8007e04 <HAL_FMAC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8000fb6:	f000 fca7 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	24000bb4 	.word	0x24000bb4
 8000fc4:	48024000 	.word	0x48024000

08000fc8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_SPI2_Init+0xa4>)
 8000fce:	4a28      	ldr	r2, [pc, #160]	; (8001070 <MX_SPI2_Init+0xa8>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <MX_SPI2_Init+0xa4>)
 8000fd4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fd8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <MX_SPI2_Init+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_SPI2_Init+0xa4>)
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_SPI2_Init+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_SPI2_Init+0xa4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_SPI2_Init+0xa4>)
 8000ff4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ff8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_SPI2_Init+0xa4>)
 8000ffc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001000:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_SPI2_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_SPI2_Init+0xa4>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_SPI2_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_SPI2_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_SPI2_Init+0xa4>)
 800101c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_SPI2_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001028:	4b10      	ldr	r3, [pc, #64]	; (800106c <MX_SPI2_Init+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_SPI2_Init+0xa4>)
 8001030:	2200      	movs	r2, #0
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <MX_SPI2_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_SPI2_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <MX_SPI2_Init+0xa4>)
 8001042:	2200      	movs	r2, #0
 8001044:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_SPI2_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <MX_SPI2_Init+0xa4>)
 800104e:	2200      	movs	r2, #0
 8001050:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_SPI2_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_SPI2_Init+0xa4>)
 800105a:	f00b fadf 	bl	800c61c <HAL_SPI_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001064:	f000 fc50 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	240004d4 	.word	0x240004d4
 8001070:	40003800 	.word	0x40003800

08001074 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <MX_SPI3_Init+0xa4>)
 800107a:	4a28      	ldr	r2, [pc, #160]	; (800111c <MX_SPI3_Init+0xa8>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <MX_SPI3_Init+0xa4>)
 8001080:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001084:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b24      	ldr	r3, [pc, #144]	; (8001118 <MX_SPI3_Init+0xa4>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_SPI3_Init+0xa4>)
 800108e:	220f      	movs	r2, #15
 8001090:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_SPI3_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_SPI3_Init+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80010a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80010ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <MX_SPI3_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_SPI3_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_SPI3_Init+0xa4>)
 8001106:	f00b fa89 	bl	800c61c <HAL_SPI_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001110:	f000 fbfa 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	240007f0 	.word	0x240007f0
 800111c:	40003c00 	.word	0x40003c00

08001120 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001126:	4a29      	ldr	r2, [pc, #164]	; (80011cc <MX_SPI4_Init+0xac>)
 8001128:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <MX_SPI4_Init+0xa8>)
 800112c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001130:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <MX_SPI4_Init+0xa8>)
 800113a:	220f      	movs	r2, #15
 800113c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001144:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001148:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800114c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001150:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001154:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800115c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_SPI4_Init+0xa8>)
 800116c:	2200      	movs	r2, #0
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001178:	2200      	movs	r2, #0
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_SPI4_Init+0xa8>)
 800117e:	2200      	movs	r2, #0
 8001180:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001184:	2200      	movs	r2, #0
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_SPI4_Init+0xa8>)
 800118a:	2200      	movs	r2, #0
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001190:	2200      	movs	r2, #0
 8001192:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_SPI4_Init+0xa8>)
 8001196:	2200      	movs	r2, #0
 8001198:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_SPI4_Init+0xa8>)
 800119c:	2200      	movs	r2, #0
 800119e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_SPI4_Init+0xa8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_SPI4_Init+0xa8>)
 80011a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_SPI4_Init+0xa8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_SPI4_Init+0xa8>)
 80011b6:	f00b fa31 	bl	800c61c <HAL_SPI_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 80011c0:	f000 fba2 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	24000a8c 	.word	0x24000a8c
 80011cc:	40013400 	.word	0x40013400

080011d0 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_SPI6_Init+0xa8>)
 80011d6:	4a29      	ldr	r2, [pc, #164]	; (800127c <MX_SPI6_Init+0xac>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <MX_SPI6_Init+0xa8>)
 80011dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011e0:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_SPI6_Init+0xa8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_SPI6_Init+0xa8>)
 80011ea:	220f      	movs	r2, #15
 80011ec:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_SPI6_Init+0xa8>)
 80011f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011f4:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_SPI6_Init+0xa8>)
 80011f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011fc:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001200:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001204:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800120c:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_SPI6_Init+0xa8>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001222:	2200      	movs	r2, #0
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001228:	2200      	movs	r2, #0
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_SPI6_Init+0xa8>)
 800122e:	2200      	movs	r2, #0
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_SPI6_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001246:	2200      	movs	r2, #0
 8001248:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_SPI6_Init+0xa8>)
 800124c:	2200      	movs	r2, #0
 800124e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001252:	2200      	movs	r2, #0
 8001254:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001258:	2200      	movs	r2, #0
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_SPI6_Init+0xa8>)
 800125e:	2200      	movs	r2, #0
 8001260:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_SPI6_Init+0xa8>)
 8001264:	f00b f9da 	bl	800c61c <HAL_SPI_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_SPI6_Init+0xa2>
  {
    Error_Handler();
 800126e:	f000 fb4b 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	240006f0 	.word	0x240006f0
 800127c:	58001400 	.word	0x58001400

08001280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b09a      	sub	sp, #104	; 0x68
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	222c      	movs	r2, #44	; 0x2c
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f010 feca 	bl	8012054 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c0:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <MX_TIM1_Init+0x180>)
 80012c2:	4a50      	ldr	r2, [pc, #320]	; (8001404 <MX_TIM1_Init+0x184>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012c6:	4b4e      	ldr	r3, [pc, #312]	; (8001400 <MX_TIM1_Init+0x180>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b4c      	ldr	r3, [pc, #304]	; (8001400 <MX_TIM1_Init+0x180>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <MX_TIM1_Init+0x180>)
 80012d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b49      	ldr	r3, [pc, #292]	; (8001400 <MX_TIM1_Init+0x180>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e0:	4b47      	ldr	r3, [pc, #284]	; (8001400 <MX_TIM1_Init+0x180>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b46      	ldr	r3, [pc, #280]	; (8001400 <MX_TIM1_Init+0x180>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ec:	4844      	ldr	r0, [pc, #272]	; (8001400 <MX_TIM1_Init+0x180>)
 80012ee:	f00b fe6c 	bl	800cfca <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012f8:	f000 fb06 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001300:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001302:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001306:	4619      	mov	r1, r3
 8001308:	483d      	ldr	r0, [pc, #244]	; (8001400 <MX_TIM1_Init+0x180>)
 800130a:	f00c fb21 	bl	800d950 <HAL_TIM_ConfigClockSource>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001314:	f000 faf8 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001318:	4839      	ldr	r0, [pc, #228]	; (8001400 <MX_TIM1_Init+0x180>)
 800131a:	f00c f812 	bl	800d342 <HAL_TIM_PWM_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001324:	f000 faf0 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001334:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001338:	4619      	mov	r1, r3
 800133a:	4831      	ldr	r0, [pc, #196]	; (8001400 <MX_TIM1_Init+0x180>)
 800133c:	f00d f840 	bl	800e3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001346:	f000 fadf 	bl	8001908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134a:	2360      	movs	r3, #96	; 0x60
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001352:	2300      	movs	r3, #0
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001356:	2300      	movs	r3, #0
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800136a:	2200      	movs	r2, #0
 800136c:	4619      	mov	r1, r3
 800136e:	4824      	ldr	r0, [pc, #144]	; (8001400 <MX_TIM1_Init+0x180>)
 8001370:	f00c f9de 	bl	800d730 <HAL_TIM_PWM_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800137a:	f000 fac5 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800137e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001382:	2204      	movs	r2, #4
 8001384:	4619      	mov	r1, r3
 8001386:	481e      	ldr	r0, [pc, #120]	; (8001400 <MX_TIM1_Init+0x180>)
 8001388:	f00c f9d2 	bl	800d730 <HAL_TIM_PWM_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001392:	f000 fab9 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139a:	2208      	movs	r2, #8
 800139c:	4619      	mov	r1, r3
 800139e:	4818      	ldr	r0, [pc, #96]	; (8001400 <MX_TIM1_Init+0x180>)
 80013a0:	f00c f9c6 	bl	800d730 <HAL_TIM_PWM_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80013aa:	f000 faad 	bl	8001908 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <MX_TIM1_Init+0x180>)
 80013e4:	f00d f888 	bl	800e4f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80013ee:	f000 fa8b 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f2:	4803      	ldr	r0, [pc, #12]	; (8001400 <MX_TIM1_Init+0x180>)
 80013f4:	f001 f8e0 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 80013f8:	bf00      	nop
 80013fa:	3768      	adds	r7, #104	; 0x68
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	24000c8c 	.word	0x24000c8c
 8001404:	40010000 	.word	0x40010000

08001408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <MX_TIM2_Init+0x94>)
 8001428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_TIM2_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <MX_TIM2_Init+0x94>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 655350;
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_TIM2_Init+0x94>)
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <MX_TIM2_Init+0x98>)
 800143e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <MX_TIM2_Init+0x94>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_TIM2_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <MX_TIM2_Init+0x94>)
 800144e:	f00b fdbc 	bl	800cfca <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001458:	f000 fa56 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <MX_TIM2_Init+0x94>)
 800146a:	f00c fa71 	bl	800d950 <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001474:	f000 fa48 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_TIM2_Init+0x94>)
 8001486:	f00c ff9b 	bl	800e3c0 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001490:	f000 fa3a 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	24000cd8 	.word	0x24000cd8
 80014a0:	0009fff6 	.word	0x0009fff6

080014a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	; 0x38
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <MX_TIM4_Init+0xe8>)
 80014d8:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <MX_TIM4_Init+0xec>)
 80014da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 27500;
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <MX_TIM4_Init+0xe8>)
 80014de:	f646 326c 	movw	r2, #27500	; 0x6b6c
 80014e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <MX_TIM4_Init+0xe8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <MX_TIM4_Init+0xe8>)
 80014ec:	f644 6220 	movw	r2, #20000	; 0x4e20
 80014f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <MX_TIM4_Init+0xe8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <MX_TIM4_Init+0xe8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <MX_TIM4_Init+0xe8>)
 8001500:	f00b fd63 	bl	800cfca <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800150a:	f000 f9fd 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001518:	4619      	mov	r1, r3
 800151a:	481c      	ldr	r0, [pc, #112]	; (800158c <MX_TIM4_Init+0xe8>)
 800151c:	f00c fa18 	bl	800d950 <HAL_TIM_ConfigClockSource>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8001526:	f000 f9ef 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800152a:	4818      	ldr	r0, [pc, #96]	; (800158c <MX_TIM4_Init+0xe8>)
 800152c:	f00b ff09 	bl	800d342 <HAL_TIM_PWM_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001536:	f000 f9e7 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <MX_TIM4_Init+0xe8>)
 800154a:	f00c ff39 	bl	800e3c0 <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001554:	f000 f9d8 	bl	8001908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	; 0x60
 800155a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM4_Init+0xe8>)
 8001570:	f00c f8de 	bl	800d730 <HAL_TIM_PWM_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800157a:	f000 f9c5 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM4_Init+0xe8>)
 8001580:	f001 f81a 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 8001584:	bf00      	nop
 8001586:	3738      	adds	r7, #56	; 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	240005a8 	.word	0x240005a8
 8001590:	40000800 	.word	0x40000800

08001594 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b09a      	sub	sp, #104	; 0x68
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	615a      	str	r2, [r3, #20]
 80015c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	222c      	movs	r2, #44	; 0x2c
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f010 fd40 	bl	8012054 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015d4:	4b54      	ldr	r3, [pc, #336]	; (8001728 <MX_TIM8_Init+0x194>)
 80015d6:	4a55      	ldr	r2, [pc, #340]	; (800172c <MX_TIM8_Init+0x198>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <MX_TIM8_Init+0x194>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b51      	ldr	r3, [pc, #324]	; (8001728 <MX_TIM8_Init+0x194>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015e6:	4b50      	ldr	r3, [pc, #320]	; (8001728 <MX_TIM8_Init+0x194>)
 80015e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b4e      	ldr	r3, [pc, #312]	; (8001728 <MX_TIM8_Init+0x194>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015f4:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <MX_TIM8_Init+0x194>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <MX_TIM8_Init+0x194>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001600:	4849      	ldr	r0, [pc, #292]	; (8001728 <MX_TIM8_Init+0x194>)
 8001602:	f00b fce2 	bl	800cfca <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800160c:	f000 f97c 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001614:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001616:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800161a:	4619      	mov	r1, r3
 800161c:	4842      	ldr	r0, [pc, #264]	; (8001728 <MX_TIM8_Init+0x194>)
 800161e:	f00c f997 	bl	800d950 <HAL_TIM_ConfigClockSource>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001628:	f000 f96e 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800162c:	483e      	ldr	r0, [pc, #248]	; (8001728 <MX_TIM8_Init+0x194>)
 800162e:	f00b fe88 	bl	800d342 <HAL_TIM_PWM_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001638:	f000 f966 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800163c:	483a      	ldr	r0, [pc, #232]	; (8001728 <MX_TIM8_Init+0x194>)
 800163e:	f00b fe1f 	bl	800d280 <HAL_TIM_OC_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8001648:	f000 f95e 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800165c:	4619      	mov	r1, r3
 800165e:	4832      	ldr	r0, [pc, #200]	; (8001728 <MX_TIM8_Init+0x194>)
 8001660:	f00c feae 	bl	800e3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 800166a:	f000 f94d 	bl	8001908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	; 0x60
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800167a:	2300      	movs	r3, #0
 800167c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800168a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	4825      	ldr	r0, [pc, #148]	; (8001728 <MX_TIM8_Init+0x194>)
 8001694:	f00c f84c 	bl	800d730 <HAL_TIM_PWM_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 800169e:	f000 f933 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016a6:	2204      	movs	r2, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	481f      	ldr	r0, [pc, #124]	; (8001728 <MX_TIM8_Init+0x194>)
 80016ac:	f00c f840 	bl	800d730 <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80016b6:	f000 f927 	bl	8001908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c2:	2208      	movs	r2, #8
 80016c4:	4619      	mov	r1, r3
 80016c6:	4818      	ldr	r0, [pc, #96]	; (8001728 <MX_TIM8_Init+0x194>)
 80016c8:	f00b ffbc 	bl	800d644 <HAL_TIM_OC_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80016d2:	f000 f919 	bl	8001908 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	4619      	mov	r1, r3
 800170a:	4807      	ldr	r0, [pc, #28]	; (8001728 <MX_TIM8_Init+0x194>)
 800170c:	f00c fef4 	bl	800e4f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM8_Init+0x186>
  {
    Error_Handler();
 8001716:	f000 f8f7 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <MX_TIM8_Init+0x194>)
 800171c:	f000 ff4c 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 8001720:	bf00      	nop
 8001722:	3768      	adds	r7, #104	; 0x68
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2400055c 	.word	0x2400055c
 800172c:	40010400 	.word	0x40010400

08001730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_DMA_Init+0x5c>)
 8001738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <MX_DMA_Init+0x5c>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_DMA_Init+0x5c>)
 8001748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	200b      	movs	r0, #11
 800175a:	f003 fc1a 	bl	8004f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800175e:	200b      	movs	r0, #11
 8001760:	f003 fc31 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	200c      	movs	r0, #12
 800176a:	f003 fc12 	bl	8004f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800176e:	200c      	movs	r0, #12
 8001770:	f003 fc29 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	200d      	movs	r0, #13
 800177a:	f003 fc0a 	bl	8004f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800177e:	200d      	movs	r0, #13
 8001780:	f003 fc21 	bl	8004fc6 <HAL_NVIC_EnableIRQ>

}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58024400 	.word	0x58024400

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <MX_GPIO_Init+0x168>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ac:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <MX_GPIO_Init+0x168>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b6:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <MX_GPIO_Init+0x168>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c4:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <MX_GPIO_Init+0x168>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ca:	4a4b      	ldr	r2, [pc, #300]	; (80018f8 <MX_GPIO_Init+0x168>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d4:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <MX_GPIO_Init+0x168>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <MX_GPIO_Init+0x168>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	4a43      	ldr	r2, [pc, #268]	; (80018f8 <MX_GPIO_Init+0x168>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <MX_GPIO_Init+0x168>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <MX_GPIO_Init+0x168>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001806:	4a3c      	ldr	r2, [pc, #240]	; (80018f8 <MX_GPIO_Init+0x168>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <MX_GPIO_Init+0x168>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <MX_GPIO_Init+0x168>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001824:	4a34      	ldr	r2, [pc, #208]	; (80018f8 <MX_GPIO_Init+0x168>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <MX_GPIO_Init+0x168>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183c:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <MX_GPIO_Init+0x168>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001842:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <MX_GPIO_Init+0x168>)
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <MX_GPIO_Init+0x168>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FAULT_LED_Pin|BRD_EN_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2106      	movs	r1, #6
 800185e:	4827      	ldr	r0, [pc, #156]	; (80018fc <MX_GPIO_Init+0x16c>)
 8001860:	f006 fd1c 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|INV2_EN_Pin|DRV2_EN_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	f248 2108 	movw	r1, #33288	; 0x8208
 800186a:	4825      	ldr	r0, [pc, #148]	; (8001900 <MX_GPIO_Init+0x170>)
 800186c:	f006 fd16 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INV1_EN_GPIO_Port, INV1_EN_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001876:	4823      	ldr	r0, [pc, #140]	; (8001904 <MX_GPIO_Init+0x174>)
 8001878:	f006 fd10 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FAULT_LED_Pin BRD_EN_Pin */
  GPIO_InitStruct.Pin = FAULT_LED_Pin|BRD_EN_Pin;
 800187c:	2306      	movs	r3, #6
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	481a      	ldr	r0, [pc, #104]	; (80018fc <MX_GPIO_Init+0x16c>)
 8001894:	f006 fb5a 	bl	8007f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 nFault2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|nFault2_Pin;
 8001898:	f44f 7382 	mov.w	r3, #260	; 0x104
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4814      	ldr	r0, [pc, #80]	; (8001900 <MX_GPIO_Init+0x170>)
 80018ae:	f006 fb4d 	bl	8007f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 INV2_EN_Pin DRV2_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|INV2_EN_Pin|DRV2_EN_Pin;
 80018b2:	f248 2308 	movw	r3, #33288	; 0x8208
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <MX_GPIO_Init+0x170>)
 80018cc:	f006 fb3e 	bl	8007f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : INV1_EN_Pin */
  GPIO_InitStruct.Pin = INV1_EN_Pin;
 80018d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(INV1_EN_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	4806      	ldr	r0, [pc, #24]	; (8001904 <MX_GPIO_Init+0x174>)
 80018ea:	f006 fb2f 	bl	8007f4c <HAL_GPIO_Init>

}
 80018ee:	bf00      	nop
 80018f0:	3730      	adds	r7, #48	; 0x30
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	58024400 	.word	0x58024400
 80018fc:	58020000 	.word	0x58020000
 8001900:	58020c00 	.word	0x58020c00
 8001904:	58020800 	.word	0x58020800

08001908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2102      	movs	r1, #2
 8001914:	4801      	ldr	r0, [pc, #4]	; (800191c <Error_Handler+0x14>)
 8001916:	f006 fcc1 	bl	800829c <HAL_GPIO_WritePin>
  while (1)
 800191a:	e7fe      	b.n	800191a <Error_Handler+0x12>
 800191c:	58020000 	.word	0x58020000

08001920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <HAL_MspInit+0x54>)
 8001928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800192c:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_MspInit+0x54>)
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_MspInit+0x54>)
 8001938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_MspInit+0x54>)
 8001946:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_MspInit+0x54>)
 800194c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001950:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_MspInit+0x54>)
 8001956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800195a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001962:	f001 f941 	bl	8002be8 <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001966:	2000      	movs	r0, #0
 8001968:	f001 f92a 	bl	8002bc0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	58024400 	.word	0x58024400

08001978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b0be      	sub	sp, #248	; 0xf8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001994:	22b4      	movs	r2, #180	; 0xb4
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f010 fb5b 	bl	8012054 <memset>
  if(hadc->Instance==ADC1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4ab3      	ldr	r2, [pc, #716]	; (8001c70 <HAL_ADC_MspInit+0x2f8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	f040 80bd 	bne.w	8001b24 <HAL_ADC_MspInit+0x1ac>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80019b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019bc:	4618      	mov	r0, r3
 80019be:	f008 fd9b 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 80019c8:	f7ff ff9e 	bl	8001908 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019cc:	4ba9      	ldr	r3, [pc, #676]	; (8001c74 <HAL_ADC_MspInit+0x2fc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	4aa8      	ldr	r2, [pc, #672]	; (8001c74 <HAL_ADC_MspInit+0x2fc>)
 80019d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019d6:	4ba7      	ldr	r3, [pc, #668]	; (8001c74 <HAL_ADC_MspInit+0x2fc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d10e      	bne.n	80019fc <HAL_ADC_MspInit+0x84>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019de:	4ba6      	ldr	r3, [pc, #664]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 80019e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019e4:	4aa4      	ldr	r2, [pc, #656]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019ee:	4ba2      	ldr	r3, [pc, #648]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 80019f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b9e      	ldr	r3, [pc, #632]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a02:	4a9d      	ldr	r2, [pc, #628]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0c:	4b9a      	ldr	r3, [pc, #616]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	4b97      	ldr	r3, [pc, #604]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a20:	4a95      	ldr	r2, [pc, #596]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2a:	4b93      	ldr	r3, [pc, #588]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b8f      	ldr	r3, [pc, #572]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3e:	4a8e      	ldr	r2, [pc, #568]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a48:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	623b      	str	r3, [r7, #32]
 8001a54:	6a3b      	ldr	r3, [r7, #32]
    PA0     ------> ADC1_INP16
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4883      	ldr	r0, [pc, #524]	; (8001c7c <HAL_ADC_MspInit+0x304>)
 8001a70:	f006 fa6c 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a74:	2330      	movs	r3, #48	; 0x30
 8001a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	487c      	ldr	r0, [pc, #496]	; (8001c80 <HAL_ADC_MspInit+0x308>)
 8001a8e:	f006 fa5d 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a92:	2301      	movs	r3, #1
 8001a94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4876      	ldr	r0, [pc, #472]	; (8001c84 <HAL_ADC_MspInit+0x30c>)
 8001aac:	f006 fa4e 	bl	8007f4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001ab2:	4a76      	ldr	r2, [pc, #472]	; (8001c8c <HAL_ADC_MspInit+0x314>)
 8001ab4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ab6:	4b74      	ldr	r3, [pc, #464]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001ab8:	2209      	movs	r2, #9
 8001aba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001abc:	4b72      	ldr	r3, [pc, #456]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac2:	4b71      	ldr	r3, [pc, #452]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ac8:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ace:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ad0:	4b6d      	ldr	r3, [pc, #436]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001ad2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ad8:	4b6b      	ldr	r3, [pc, #428]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ade:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ae0:	4b69      	ldr	r3, [pc, #420]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ae8:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001aea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af0:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001af6:	4864      	ldr	r0, [pc, #400]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001af8:	f003 fd46 	bl	8005588 <HAL_DMA_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_ADC_MspInit+0x18e>
    {
      Error_Handler();
 8001b02:	f7ff ff01 	bl	8001908 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a5f      	ldr	r2, [pc, #380]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b0c:	4a5e      	ldr	r2, [pc, #376]	; (8001c88 <HAL_ADC_MspInit+0x310>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2012      	movs	r0, #18
 8001b18:	f003 fa3b 	bl	8004f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b1c:	2012      	movs	r0, #18
 8001b1e:	f003 fa52 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b22:	e13d      	b.n	8001da0 <HAL_ADC_MspInit+0x428>
  else if(hadc->Instance==ADC2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a59      	ldr	r2, [pc, #356]	; (8001c90 <HAL_ADC_MspInit+0x318>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	f040 80b6 	bne.w	8001c9c <HAL_ADC_MspInit+0x324>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b42:	4618      	mov	r0, r3
 8001b44:	f008 fcd8 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_ADC_MspInit+0x1da>
      Error_Handler();
 8001b4e:	f7ff fedb 	bl	8001908 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b52:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <HAL_ADC_MspInit+0x2fc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	4a46      	ldr	r2, [pc, #280]	; (8001c74 <HAL_ADC_MspInit+0x2fc>)
 8001b5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b5c:	4b45      	ldr	r3, [pc, #276]	; (8001c74 <HAL_ADC_MspInit+0x2fc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d10e      	bne.n	8001b82 <HAL_ADC_MspInit+0x20a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b64:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b6a:	4a43      	ldr	r2, [pc, #268]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b74:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b88:	4a3b      	ldr	r2, [pc, #236]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b92:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba6:	4a34      	ldr	r2, [pc, #208]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_ADC_MspInit+0x300>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	482a      	ldr	r0, [pc, #168]	; (8001c80 <HAL_ADC_MspInit+0x308>)
 8001bd8:	f006 f9b8 	bl	8007f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be2:	2303      	movs	r3, #3
 8001be4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4821      	ldr	r0, [pc, #132]	; (8001c7c <HAL_ADC_MspInit+0x304>)
 8001bf6:	f006 f9a9 	bl	8007f4c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001bfc:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <HAL_ADC_MspInit+0x320>)
 8001bfe:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c02:	220a      	movs	r2, #10
 8001c04:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c18:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c20:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c28:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c30:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c38:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001c40:	4814      	ldr	r0, [pc, #80]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c42:	f003 fca1 	bl	8005588 <HAL_DMA_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_ADC_MspInit+0x2d8>
      Error_Handler();
 8001c4c:	f7ff fe5c 	bl	8001908 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c54:	659a      	str	r2, [r3, #88]	; 0x58
 8001c56:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_ADC_MspInit+0x31c>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2012      	movs	r0, #18
 8001c62:	f003 f996 	bl	8004f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c66:	2012      	movs	r0, #18
 8001c68:	f003 f9ad 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
}
 8001c6c:	e098      	b.n	8001da0 <HAL_ADC_MspInit+0x428>
 8001c6e:	bf00      	nop
 8001c70:	40022000 	.word	0x40022000
 8001c74:	2400023c 	.word	0x2400023c
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	58020000 	.word	0x58020000
 8001c80:	58020800 	.word	0x58020800
 8001c84:	58020400 	.word	0x58020400
 8001c88:	24000b14 	.word	0x24000b14
 8001c8c:	40020010 	.word	0x40020010
 8001c90:	40022100 	.word	0x40022100
 8001c94:	24000d24 	.word	0x24000d24
 8001c98:	40020028 	.word	0x40020028
  else if(hadc->Instance==ADC3)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a41      	ldr	r2, [pc, #260]	; (8001da8 <HAL_ADC_MspInit+0x430>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d17c      	bne.n	8001da0 <HAL_ADC_MspInit+0x428>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ca6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f008 fc1d 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_ADC_MspInit+0x350>
      Error_Handler();
 8001cc4:	f7ff fe20 	bl	8001908 <Error_Handler>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_ADC_MspInit+0x434>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	4a37      	ldr	r2, [pc, #220]	; (8001dac <HAL_ADC_MspInit+0x434>)
 8001cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_ADC_MspInit+0x434>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_ADC_MspInit+0x434>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	4a2f      	ldr	r2, [pc, #188]	; (8001dac <HAL_ADC_MspInit+0x434>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_ADC_MspInit+0x434>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001d04:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001d08:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001d0c:	f000 ff7c 	bl	8002c08 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001d10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001d14:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001d18:	f000 ff76 	bl	8002c08 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d1e:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <HAL_ADC_MspInit+0x43c>)
 8001d20:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d24:	2273      	movs	r2, #115	; 0x73
 8001d26:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d3a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d42:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d4a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d52:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d5a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d5e:	2204      	movs	r2, #4
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d64:	2203      	movs	r2, #3
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001d74:	480e      	ldr	r0, [pc, #56]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d76:	f003 fc07 	bl	8005588 <HAL_DMA_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_ADC_MspInit+0x40c>
      Error_Handler();
 8001d80:	f7ff fdc2 	bl	8001908 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d88:	659a      	str	r2, [r3, #88]	; 0x58
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_ADC_MspInit+0x438>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	207f      	movs	r0, #127	; 0x7f
 8001d96:	f003 f8fc 	bl	8004f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001d9a:	207f      	movs	r0, #127	; 0x7f
 8001d9c:	f003 f913 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
}
 8001da0:	bf00      	nop
 8001da2:	37f8      	adds	r7, #248	; 0xf8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	58026000 	.word	0x58026000
 8001dac:	58024400 	.word	0x58024400
 8001db0:	24000778 	.word	0x24000778
 8001db4:	40020040 	.word	0x40020040

08001db8 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_CORDIC_MspInit+0x3c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10e      	bne.n	8001de8 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_CORDIC_MspInit+0x40>)
 8001dcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001dd0:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_CORDIC_MspInit+0x40>)
 8001dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_CORDIC_MspInit+0x40>)
 8001ddc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	48024400 	.word	0x48024400
 8001df8:	58024400 	.word	0x58024400

08001dfc <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b0b8      	sub	sp, #224	; 0xe0
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	22b4      	movs	r2, #180	; 0xb4
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f010 f919 	bl	8012054 <memset>
  if(DFSDM1_Init == 0)
 8001e22:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 808a 	bne.w	8001f40 <HAL_DFSDM_FilterMspInit+0x144>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001e2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f008 fb5c 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001e46:	f7ff fd5f 	bl	8001908 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_DFSDM_FilterMspInit+0x150>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a3e      	ldr	r2, [pc, #248]	; (8001f4c <HAL_DFSDM_FilterMspInit+0x150>)
 8001e52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_DFSDM_FilterMspInit+0x150>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10e      	bne.n	8001e7a <HAL_DFSDM_FilterMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e5c:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <HAL_DFSDM_FilterMspInit+0x154>)
 8001e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e62:	4a3b      	ldr	r2, [pc, #236]	; (8001f50 <HAL_DFSDM_FilterMspInit+0x154>)
 8001e64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <HAL_DFSDM_FilterMspInit+0x154>)
 8001e6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_DFSDM_FilterMspInit+0x154>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e80:	4a33      	ldr	r2, [pc, #204]	; (8001f50 <HAL_DFSDM_FilterMspInit+0x154>)
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <HAL_DFSDM_FilterMspInit+0x154>)
 8001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_DFSDM_FilterMspInit+0x154>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9e:	4a2c      	ldr	r2, [pc, #176]	; (8001f50 <HAL_DFSDM_FilterMspInit+0x154>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea8:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <HAL_DFSDM_FilterMspInit+0x154>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    PE10     ------> DFSDM1_DATIN4
    PE11     ------> DFSDM1_CKIN4
    PE12     ------> DFSDM1_DATIN5
    PE13     ------> DFSDM1_CKIN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ece:	2306      	movs	r3, #6
 8001ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ed8:	4619      	mov	r1, r3
 8001eda:	481e      	ldr	r0, [pc, #120]	; (8001f54 <HAL_DFSDM_FilterMspInit+0x158>)
 8001edc:	f006 f836 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f02:	4619      	mov	r1, r3
 8001f04:	4813      	ldr	r0, [pc, #76]	; (8001f54 <HAL_DFSDM_FilterMspInit+0x158>)
 8001f06:	f006 f821 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 8001f0a:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 8001f0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001f24:	2303      	movs	r3, #3
 8001f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f2a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <HAL_DFSDM_FilterMspInit+0x15c>)
 8001f32:	f006 f80b 	bl	8007f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	4a02      	ldr	r2, [pc, #8]	; (8001f48 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001f3e:	6013      	str	r3, [r2, #0]
  }

}
 8001f40:	bf00      	nop
 8001f42:	37e0      	adds	r7, #224	; 0xe0
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	24000244 	.word	0x24000244
 8001f4c:	24000240 	.word	0x24000240
 8001f50:	58024400 	.word	0x58024400
 8001f54:	58020400 	.word	0x58020400
 8001f58:	58021000 	.word	0x58021000

08001f5c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0b8      	sub	sp, #224	; 0xe0
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f74:	f107 0318 	add.w	r3, r7, #24
 8001f78:	22b4      	movs	r2, #180	; 0xb4
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f010 f869 	bl	8012054 <memset>
  if(DFSDM1_Init == 0)
 8001f82:	4b49      	ldr	r3, [pc, #292]	; (80020a8 <HAL_DFSDM_ChannelMspInit+0x14c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 808a 	bne.w	80020a0 <HAL_DFSDM_ChannelMspInit+0x144>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001f8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f96:	f107 0318 	add.w	r3, r7, #24
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f008 faac 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001fa6:	f7ff fcaf 	bl	8001908 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001faa:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_DFSDM_ChannelMspInit+0x150>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	4a3e      	ldr	r2, [pc, #248]	; (80020ac <HAL_DFSDM_ChannelMspInit+0x150>)
 8001fb2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001fb4:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <HAL_DFSDM_ChannelMspInit+0x150>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10e      	bne.n	8001fda <HAL_DFSDM_ChannelMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001fbc:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <HAL_DFSDM_ChannelMspInit+0x154>)
 8001fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fc2:	4a3b      	ldr	r2, [pc, #236]	; (80020b0 <HAL_DFSDM_ChannelMspInit+0x154>)
 8001fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fcc:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <HAL_DFSDM_ChannelMspInit+0x154>)
 8001fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <HAL_DFSDM_ChannelMspInit+0x154>)
 8001fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe0:	4a33      	ldr	r2, [pc, #204]	; (80020b0 <HAL_DFSDM_ChannelMspInit+0x154>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_DFSDM_ChannelMspInit+0x154>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_DFSDM_ChannelMspInit+0x154>)
 8001ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffe:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <HAL_DFSDM_ChannelMspInit+0x154>)
 8002000:	f043 0310 	orr.w	r3, r3, #16
 8002004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002008:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_DFSDM_ChannelMspInit+0x154>)
 800200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    PE10     ------> DFSDM1_DATIN4
    PE11     ------> DFSDM1_CKIN4
    PE12     ------> DFSDM1_DATIN5
    PE13     ------> DFSDM1_CKIN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800202e:	2306      	movs	r3, #6
 8002030:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002038:	4619      	mov	r1, r3
 800203a:	481e      	ldr	r0, [pc, #120]	; (80020b4 <HAL_DFSDM_ChannelMspInit+0x158>)
 800203c:	f005 ff86 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002040:	2304      	movs	r3, #4
 8002042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 8002058:	2304      	movs	r3, #4
 800205a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002062:	4619      	mov	r1, r3
 8002064:	4813      	ldr	r0, [pc, #76]	; (80020b4 <HAL_DFSDM_ChannelMspInit+0x158>)
 8002066:	f005 ff71 	bl	8007f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 800206a:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 800206e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8002084:	2303      	movs	r3, #3
 8002086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800208a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800208e:	4619      	mov	r1, r3
 8002090:	4809      	ldr	r0, [pc, #36]	; (80020b8 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8002092:	f005 ff5b 	bl	8007f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_DFSDM_ChannelMspInit+0x14c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3301      	adds	r3, #1
 800209c:	4a02      	ldr	r2, [pc, #8]	; (80020a8 <HAL_DFSDM_ChannelMspInit+0x14c>)
 800209e:	6013      	str	r3, [r2, #0]
  }

}
 80020a0:	bf00      	nop
 80020a2:	37e0      	adds	r7, #224	; 0xe0
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	24000244 	.word	0x24000244
 80020ac:	24000240 	.word	0x24000240
 80020b0:	58024400 	.word	0x58024400
 80020b4:	58020400 	.word	0x58020400
 80020b8:	58021000 	.word	0x58021000

080020bc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b0b6      	sub	sp, #216	; 0xd8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	22b4      	movs	r2, #180	; 0xb4
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f00f ffb9 	bl	8012054 <memset>
  if(hfdcan->Instance==FDCAN1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a24      	ldr	r2, [pc, #144]	; (8002178 <HAL_FDCAN_MspInit+0xbc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d141      	bne.n	8002170 <HAL_FDCAN_MspInit+0xb4>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	4618      	mov	r0, r3
 80020fc:	f008 f9fc 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 8002106:	f7ff fbff 	bl	8001908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_FDCAN_MspInit+0xc0>)
 800210c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002110:	4a1a      	ldr	r2, [pc, #104]	; (800217c <HAL_FDCAN_MspInit+0xc0>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002116:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_FDCAN_MspInit+0xc0>)
 800211c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_FDCAN_MspInit+0xc0>)
 800212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212e:	4a13      	ldr	r2, [pc, #76]	; (800217c <HAL_FDCAN_MspInit+0xc0>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_FDCAN_MspInit+0xc0>)
 800213a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002146:	2303      	movs	r3, #3
 8002148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800215e:	2309      	movs	r3, #9
 8002160:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002164:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002168:	4619      	mov	r1, r3
 800216a:	4805      	ldr	r0, [pc, #20]	; (8002180 <HAL_FDCAN_MspInit+0xc4>)
 800216c:	f005 feee 	bl	8007f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	37d8      	adds	r7, #216	; 0xd8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	4000a000 	.word	0x4000a000
 800217c:	58024400 	.word	0x58024400
 8002180:	58020c00 	.word	0x58020c00

08002184 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <HAL_FMAC_MspInit+0x3c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10e      	bne.n	80021b4 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_FMAC_MspInit+0x40>)
 8002198:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800219c:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_FMAC_MspInit+0x40>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <HAL_FMAC_MspInit+0x40>)
 80021a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80021ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	48024000 	.word	0x48024000
 80021c4:	58024400 	.word	0x58024400

080021c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b0be      	sub	sp, #248	; 0xf8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e4:	22b4      	movs	r2, #180	; 0xb4
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00f ff33 	bl	8012054 <memset>
  if(hspi->Instance==SPI2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4ab2      	ldr	r2, [pc, #712]	; (80024bc <HAL_SPI_MspInit+0x2f4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d145      	bne.n	8002284 <HAL_SPI_MspInit+0xbc>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80021f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80021fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800220a:	4618      	mov	r0, r3
 800220c:	f008 f974 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
 8002216:	f7ff fb77 	bl	8001908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800221a:	4ba9      	ldr	r3, [pc, #676]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 800221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002220:	4aa7      	ldr	r2, [pc, #668]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 8002222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002226:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800222a:	4ba5      	ldr	r3, [pc, #660]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 800222c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4ba1      	ldr	r3, [pc, #644]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 800223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223e:	4aa0      	ldr	r2, [pc, #640]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002248:	4b9d      	ldr	r3, [pc, #628]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 800224a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002256:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800225a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002270:	2305      	movs	r3, #5
 8002272:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800227a:	4619      	mov	r1, r3
 800227c:	4891      	ldr	r0, [pc, #580]	; (80024c4 <HAL_SPI_MspInit+0x2fc>)
 800227e:	f005 fe65 	bl	8007f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8002282:	e117      	b.n	80024b4 <HAL_SPI_MspInit+0x2ec>
  else if(hspi->Instance==SPI3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a8f      	ldr	r2, [pc, #572]	; (80024c8 <HAL_SPI_MspInit+0x300>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d16a      	bne.n	8002364 <HAL_SPI_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800228e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002294:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022a0:	4618      	mov	r0, r3
 80022a2:	f008 f929 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_SPI_MspInit+0xe8>
      Error_Handler();
 80022ac:	f7ff fb2c 	bl	8001908 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022b0:	4b83      	ldr	r3, [pc, #524]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80022b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b6:	4a82      	ldr	r2, [pc, #520]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80022b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022c0:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80022c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	4b7c      	ldr	r3, [pc, #496]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d4:	4a7a      	ldr	r2, [pc, #488]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022de:	4b78      	ldr	r3, [pc, #480]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80022e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	623b      	str	r3, [r7, #32]
 80022ea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ec:	4b74      	ldr	r3, [pc, #464]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f2:	4a73      	ldr	r2, [pc, #460]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022fc:	4b70      	ldr	r3, [pc, #448]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80022fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800230a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002324:	2306      	movs	r3, #6
 8002326:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800232e:	4619      	mov	r1, r3
 8002330:	4866      	ldr	r0, [pc, #408]	; (80024cc <HAL_SPI_MspInit+0x304>)
 8002332:	f005 fe0b 	bl	8007f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002336:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800233a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002350:	2306      	movs	r3, #6
 8002352:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002356:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800235a:	4619      	mov	r1, r3
 800235c:	485c      	ldr	r0, [pc, #368]	; (80024d0 <HAL_SPI_MspInit+0x308>)
 800235e:	f005 fdf5 	bl	8007f4c <HAL_GPIO_Init>
}
 8002362:	e0a7      	b.n	80024b4 <HAL_SPI_MspInit+0x2ec>
  else if(hspi->Instance==SPI4)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_SPI_MspInit+0x30c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d159      	bne.n	8002422 <HAL_SPI_MspInit+0x25a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800236e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_CSI;
 8002374:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002378:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800237c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002380:	4618      	mov	r0, r3
 8002382:	f008 f8b9 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_SPI_MspInit+0x1c8>
      Error_Handler();
 800238c:	f7ff fabc 	bl	8001908 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002390:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 8002392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002396:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 8002398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800239c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023a0:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80023a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ae:	4b44      	ldr	r3, [pc, #272]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b4:	4a42      	ldr	r2, [pc, #264]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023be:	4b40      	ldr	r3, [pc, #256]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80023cc:	2364      	movs	r3, #100	; 0x64
 80023ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80023e4:	2305      	movs	r3, #5
 80023e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023ee:	4619      	mov	r1, r3
 80023f0:	4839      	ldr	r0, [pc, #228]	; (80024d8 <HAL_SPI_MspInit+0x310>)
 80023f2:	f005 fdab 	bl	8007f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023f6:	2310      	movs	r3, #16
 80023f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002402:	2301      	movs	r3, #1
 8002404:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800240e:	2305      	movs	r3, #5
 8002410:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002414:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002418:	4619      	mov	r1, r3
 800241a:	482f      	ldr	r0, [pc, #188]	; (80024d8 <HAL_SPI_MspInit+0x310>)
 800241c:	f005 fd96 	bl	8007f4c <HAL_GPIO_Init>
}
 8002420:	e048      	b.n	80024b4 <HAL_SPI_MspInit+0x2ec>
  else if(hspi->Instance==SPI6)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2d      	ldr	r2, [pc, #180]	; (80024dc <HAL_SPI_MspInit+0x314>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d143      	bne.n	80024b4 <HAL_SPI_MspInit+0x2ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800242c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_CSI;
 8002432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800243e:	4618      	mov	r0, r3
 8002440:	f008 f85a 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_SPI_MspInit+0x286>
      Error_Handler();
 800244a:	f7ff fa5d 	bl	8001908 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 8002450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002454:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 8002456:	f043 0320 	orr.w	r3, r3, #32
 800245a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 8002460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_SPI_MspInit+0x2f8>)
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800248a:	23f0      	movs	r3, #240	; 0xf0
 800248c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80024a2:	2308      	movs	r3, #8
 80024a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024ac:	4619      	mov	r1, r3
 80024ae:	4807      	ldr	r0, [pc, #28]	; (80024cc <HAL_SPI_MspInit+0x304>)
 80024b0:	f005 fd4c 	bl	8007f4c <HAL_GPIO_Init>
}
 80024b4:	bf00      	nop
 80024b6:	37f8      	adds	r7, #248	; 0xf8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40003800 	.word	0x40003800
 80024c0:	58024400 	.word	0x58024400
 80024c4:	58020400 	.word	0x58020400
 80024c8:	40003c00 	.word	0x40003c00
 80024cc:	58020000 	.word	0x58020000
 80024d0:	58020800 	.word	0x58020800
 80024d4:	40013400 	.word	0x40013400
 80024d8:	58021000 	.word	0x58021000
 80024dc:	58001400 	.word	0x58001400

080024e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2e      	ldr	r2, [pc, #184]	; (80025a8 <HAL_TIM_Base_MspInit+0xc8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d10f      	bne.n	8002512 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 80024f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024f8:	4a2c      	ldr	r2, [pc, #176]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002502:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 8002504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002510:	e045      	b.n	800259e <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d117      	bne.n	800254c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800251c:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 800251e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002522:	4a22      	ldr	r2, [pc, #136]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 800252e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	201c      	movs	r0, #28
 8002540:	f002 fd27 	bl	8004f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002544:	201c      	movs	r0, #28
 8002546:	f002 fd3e 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
}
 800254a:	e028      	b.n	800259e <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM4)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_TIM_Base_MspInit+0xd0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d10f      	bne.n	8002576 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 8002558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800255c:	4a13      	ldr	r2, [pc, #76]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 8002568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
}
 8002574:	e013      	b.n	800259e <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM8)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <HAL_TIM_Base_MspInit+0xd4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d10e      	bne.n	800259e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 8002582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_TIM_Base_MspInit+0xcc>)
 8002592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40010000 	.word	0x40010000
 80025ac:	58024400 	.word	0x58024400
 80025b0:	40000800 	.word	0x40000800
 80025b4:	40010400 	.word	0x40010400

080025b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a39      	ldr	r2, [pc, #228]	; (80026bc <HAL_TIM_MspPostInit+0x104>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d120      	bne.n	800261c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_TIM_MspPostInit+0x108>)
 80025dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e0:	4a37      	ldr	r2, [pc, #220]	; (80026c0 <HAL_TIM_MspPostInit+0x108>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ea:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_TIM_MspPostInit+0x108>)
 80025ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80025f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80025fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800260a:	2301      	movs	r3, #1
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	4619      	mov	r1, r3
 8002614:	482b      	ldr	r0, [pc, #172]	; (80026c4 <HAL_TIM_MspPostInit+0x10c>)
 8002616:	f005 fc99 	bl	8007f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800261a:	e04a      	b.n	80026b2 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a29      	ldr	r2, [pc, #164]	; (80026c8 <HAL_TIM_MspPostInit+0x110>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d120      	bne.n	8002668 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_TIM_MspPostInit+0x108>)
 8002628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262c:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <HAL_TIM_MspPostInit+0x108>)
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002636:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_TIM_MspPostInit+0x108>)
 8002638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002656:	2302      	movs	r3, #2
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	481a      	ldr	r0, [pc, #104]	; (80026cc <HAL_TIM_MspPostInit+0x114>)
 8002662:	f005 fc73 	bl	8007f4c <HAL_GPIO_Init>
}
 8002666:	e024      	b.n	80026b2 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM8)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a18      	ldr	r2, [pc, #96]	; (80026d0 <HAL_TIM_MspPostInit+0x118>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d11f      	bne.n	80026b2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <HAL_TIM_MspPostInit+0x108>)
 8002674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002678:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <HAL_TIM_MspPostInit+0x108>)
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_TIM_MspPostInit+0x108>)
 8002684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002690:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026a2:	2303      	movs	r3, #3
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	4809      	ldr	r0, [pc, #36]	; (80026d4 <HAL_TIM_MspPostInit+0x11c>)
 80026ae:	f005 fc4d 	bl	8007f4c <HAL_GPIO_Init>
}
 80026b2:	bf00      	nop
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40010000 	.word	0x40010000
 80026c0:	58024400 	.word	0x58024400
 80026c4:	58020000 	.word	0x58020000
 80026c8:	40000800 	.word	0x40000800
 80026cc:	58020c00 	.word	0x58020c00
 80026d0:	40010400 	.word	0x40010400
 80026d4:	58020800 	.word	0x58020800

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <NMI_Handler+0x4>

080026de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//SCB->CFSR
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <HardFault_Handler+0x4>

080026e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <MemManage_Handler+0x4>

080026ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <BusFault_Handler+0x4>

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <UsageFault_Handler+0x4>

080026f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002724:	f000 fa08 	bl	8002b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <DMA1_Stream0_IRQHandler+0x10>)
 8002732:	f003 fced 	bl	8006110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	24000b14 	.word	0x24000b14

08002740 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <DMA1_Stream1_IRQHandler+0x10>)
 8002746:	f003 fce3 	bl	8006110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	24000d24 	.word	0x24000d24

08002754 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <DMA1_Stream2_IRQHandler+0x10>)
 800275a:	f003 fcd9 	bl	8006110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	24000778 	.word	0x24000778

08002768 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800276c:	4803      	ldr	r0, [pc, #12]	; (800277c <ADC_IRQHandler+0x14>)
 800276e:	f001 f831 	bl	80037d4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002772:	4803      	ldr	r0, [pc, #12]	; (8002780 <ADC_IRQHandler+0x18>)
 8002774:	f001 f82e 	bl	80037d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	24000878 	.word	0x24000878
 8002780:	240005f4 	.word	0x240005f4

08002784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <TIM2_IRQHandler+0x10>)
 800278a:	f00a fe3b 	bl	800d404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	24000cd8 	.word	0x24000cd8

08002798 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <OTG_HS_IRQHandler+0x10>)
 800279e:	f005 feed 	bl	800857c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	240022a8 	.word	0x240022a8

080027ac <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <ADC3_IRQHandler+0x10>)
 80027b2:	f001 f80f 	bl	80037d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2400093c 	.word	0x2400093c

080027c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e00a      	b.n	80027e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027d2:	f3af 8000 	nop.w
 80027d6:	4601      	mov	r1, r0
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	60ba      	str	r2, [r7, #8]
 80027de:	b2ca      	uxtb	r2, r1
 80027e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3301      	adds	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dbf0      	blt.n	80027d2 <_read+0x12>
	}

return len;
 80027f0:	687b      	ldr	r3, [r7, #4]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e009      	b.n	8002820 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	60ba      	str	r2, [r7, #8]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	dbf1      	blt.n	800280c <_write+0x12>
	}
	return len;
 8002828:	687b      	ldr	r3, [r7, #4]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <_close>:

int _close(int file)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
	return -1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800285a:	605a      	str	r2, [r3, #4]
	return 0;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <_isatty>:

int _isatty(int file)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
	return 1;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
	return 0;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f00f fb8a 	bl	8011fe4 <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	24050000 	.word	0x24050000
 80028fc:	00000400 	.word	0x00000400
 8002900:	24000248 	.word	0x24000248
 8002904:	240026c0 	.word	0x240026c0

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800290c:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <SystemInit+0xd8>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <SystemInit+0xd8>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800291c:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <SystemInit+0xdc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	2b06      	cmp	r3, #6
 8002926:	d807      	bhi.n	8002938 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002928:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <SystemInit+0xdc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 030f 	bic.w	r3, r3, #15
 8002930:	4a2c      	ldr	r2, [pc, #176]	; (80029e4 <SystemInit+0xdc>)
 8002932:	f043 0307 	orr.w	r3, r3, #7
 8002936:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <SystemInit+0xe0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <SystemInit+0xe0>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002944:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <SystemInit+0xe0>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <SystemInit+0xe0>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4926      	ldr	r1, [pc, #152]	; (80029e8 <SystemInit+0xe0>)
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <SystemInit+0xe4>)
 8002952:	4013      	ands	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002956:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <SystemInit+0xdc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002962:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <SystemInit+0xdc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 030f 	bic.w	r3, r3, #15
 800296a:	4a1e      	ldr	r2, [pc, #120]	; (80029e4 <SystemInit+0xdc>)
 800296c:	f043 0307 	orr.w	r3, r3, #7
 8002970:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <SystemInit+0xe0>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <SystemInit+0xe0>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <SystemInit+0xe0>)
 8002980:	2200      	movs	r2, #0
 8002982:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <SystemInit+0xe0>)
 8002986:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <SystemInit+0xe8>)
 8002988:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <SystemInit+0xe0>)
 800298c:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <SystemInit+0xec>)
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <SystemInit+0xe0>)
 8002992:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <SystemInit+0xf0>)
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <SystemInit+0xe0>)
 8002998:	2200      	movs	r2, #0
 800299a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <SystemInit+0xe0>)
 800299e:	4a16      	ldr	r2, [pc, #88]	; (80029f8 <SystemInit+0xf0>)
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <SystemInit+0xe0>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <SystemInit+0xe0>)
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <SystemInit+0xf0>)
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <SystemInit+0xe0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <SystemInit+0xe0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <SystemInit+0xe0>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <SystemInit+0xe0>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <SystemInit+0xf4>)
 80029c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80029cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SystemInit+0xd8>)
 80029d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00
 80029e4:	52002000 	.word	0x52002000
 80029e8:	58024400 	.word	0x58024400
 80029ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80029f0:	02020200 	.word	0x02020200
 80029f4:	01ff0000 	.word	0x01ff0000
 80029f8:	01010280 	.word	0x01010280
 80029fc:	52004000 	.word	0x52004000

08002a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a04:	f7ff ff80 	bl	8002908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a08:	480c      	ldr	r0, [pc, #48]	; (8002a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a0a:	490d      	ldr	r1, [pc, #52]	; (8002a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a10:	e002      	b.n	8002a18 <LoopCopyDataInit>

08002a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a16:	3304      	adds	r3, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a1c:	d3f9      	bcc.n	8002a12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a20:	4c0a      	ldr	r4, [pc, #40]	; (8002a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a24:	e001      	b.n	8002a2a <LoopFillZerobss>

08002a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a28:	3204      	adds	r2, #4

08002a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a2c:	d3fb      	bcc.n	8002a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a2e:	f00f fadf 	bl	8011ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a32:	f7fd fcc5 	bl	80003c0 <main>
  bx  lr
 8002a36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a38:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a40:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8002a44:	08013188 	.word	0x08013188
  ldr r2, =_sbss
 8002a48:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8002a4c:	240026c0 	.word	0x240026c0

08002a50 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a50:	e7fe      	b.n	8002a50 <BDMA_Channel0_IRQHandler>
	...

08002a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a5a:	2003      	movs	r0, #3
 8002a5c:	f002 fa8e 	bl	8004f7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a60:	f007 fba0 	bl	800a1a4 <HAL_RCC_GetSysClockFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_Init+0x68>)
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	4913      	ldr	r1, [pc, #76]	; (8002ac0 <HAL_Init+0x6c>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <HAL_Init+0x68>)
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_Init+0x6c>)
 8002a88:	5cd3      	ldrb	r3, [r2, r3]
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <HAL_Init+0x70>)
 8002a96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a98:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <HAL_Init+0x74>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a9e:	200f      	movs	r0, #15
 8002aa0:	f000 f814 	bl	8002acc <HAL_InitTick>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e002      	b.n	8002ab4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002aae:	f7fe ff37 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	58024400 	.word	0x58024400
 8002ac0:	080130d0 	.word	0x080130d0
 8002ac4:	2400000c 	.word	0x2400000c
 8002ac8:	24000008 	.word	0x24000008

08002acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ad4:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_InitTick+0x60>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e021      	b.n	8002b24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ae0:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_InitTick+0x64>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_InitTick+0x60>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 fa73 	bl	8004fe2 <HAL_SYSTICK_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00e      	b.n	8002b24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b0f      	cmp	r3, #15
 8002b0a:	d80a      	bhi.n	8002b22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	f002 fa3d 	bl	8004f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b18:	4a06      	ldr	r2, [pc, #24]	; (8002b34 <HAL_InitTick+0x68>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e000      	b.n	8002b24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	24000014 	.word	0x24000014
 8002b30:	24000008 	.word	0x24000008
 8002b34:	24000010 	.word	0x24000010

08002b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_IncTick+0x20>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_IncTick+0x24>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <HAL_IncTick+0x24>)
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	24000014 	.word	0x24000014
 8002b5c:	24000dd4 	.word	0x24000dd4

08002b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return uwTick;
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_GetTick+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	24000dd4 	.word	0x24000dd4

08002b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b80:	f7ff ffee 	bl	8002b60 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d005      	beq.n	8002b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_Delay+0x44>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b9e:	bf00      	nop
 8002ba0:	f7ff ffde 	bl	8002b60 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d8f7      	bhi.n	8002ba0 <HAL_Delay+0x28>
  {
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	24000014 	.word	0x24000014

08002bc0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 0202 	bic.w	r2, r3, #2
 8002bd0:	4904      	ldr	r1, [pc, #16]	; (8002be4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	58003c00 	.word	0x58003c00

08002be8 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	58003c00 	.word	0x58003c00

08002c08 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	4904      	ldr	r1, [pc, #16]	; (8002c30 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	58000400 	.word	0x58000400

08002c34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3360      	adds	r3, #96	; 0x60
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <LL_ADC_SetOffset+0x60>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d10b      	bne.n	8002cd8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cd6:	e00b      	b.n	8002cf0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	431a      	orrs	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	601a      	str	r2, [r3, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	58026000 	.word	0x58026000

08002d00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3360      	adds	r3, #96	; 0x60
 8002d0e:	461a      	mov	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	611a      	str	r2, [r3, #16]
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00e      	beq.n	8002d92 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3360      	adds	r3, #96	; 0x60
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	601a      	str	r2, [r3, #0]
  }
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	58026000 	.word	0x58026000

08002da4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <LL_ADC_SetOffsetSaturation+0x40>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d10e      	bne.n	8002dd6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3360      	adds	r3, #96	; 0x60
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	58026000 	.word	0x58026000

08002de8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <LL_ADC_SetOffsetSign+0x40>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d10e      	bne.n	8002e1a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3360      	adds	r3, #96	; 0x60
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	58026000 	.word	0x58026000

08002e2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3360      	adds	r3, #96	; 0x60
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <LL_ADC_SetOffsetState+0x50>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d108      	bne.n	8002e60 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002e5e:	e007      	b.n	8002e70 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	601a      	str	r2, [r3, #0]
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	58026000 	.word	0x58026000

08002e80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b087      	sub	sp, #28
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3330      	adds	r3, #48	; 0x30
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	4413      	add	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	211f      	movs	r1, #31
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	401a      	ands	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	f003 011f 	and.w	r1, r3, #31
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	431a      	orrs	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f023 0203 	bic.w	r2, r3, #3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a08      	ldr	r2, [pc, #32]	; (8002f74 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d107      	bne.n	8002f66 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f023 0203 	bic.w	r2, r3, #3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60da      	str	r2, [r3, #12]
  }
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	58026000 	.word	0x58026000

08002f78 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b087      	sub	sp, #28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3314      	adds	r3, #20
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	0e5b      	lsrs	r3, r3, #25
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	4413      	add	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	0d1b      	lsrs	r3, r3, #20
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2107      	movs	r1, #7
 8002fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	0d1b      	lsrs	r3, r3, #20
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <LL_ADC_SetChannelSingleDiff+0x78>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d115      	bne.n	8003034 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003014:	43db      	mvns	r3, r3
 8003016:	401a      	ands	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0318 	and.w	r3, r3, #24
 800301e:	4914      	ldr	r1, [pc, #80]	; (8003070 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003020:	40d9      	lsrs	r1, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	400b      	ands	r3, r1
 8003026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003032:	e014      	b.n	800305e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003040:	43db      	mvns	r3, r3
 8003042:	401a      	ands	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0318 	and.w	r3, r3, #24
 800304a:	4909      	ldr	r1, [pc, #36]	; (8003070 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800304c:	40d9      	lsrs	r1, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	400b      	ands	r3, r1
 8003052:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003056:	431a      	orrs	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	58026000 	.word	0x58026000
 8003070:	000fffff 	.word	0x000fffff

08003074 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 031f 	and.w	r3, r3, #31
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <LL_ADC_DisableDeepPowerDown+0x20>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6093      	str	r3, [r2, #8]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	5fffffc0 	.word	0x5fffffc0

080030d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030e4:	d101      	bne.n	80030ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <LL_ADC_EnableInternalRegulator+0x24>)
 8003106:	4013      	ands	r3, r2
 8003108:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	6fffffc0 	.word	0x6fffffc0

08003120 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003134:	d101      	bne.n	800313a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <LL_ADC_Enable+0x24>)
 8003156:	4013      	ands	r3, r2
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	7fffffc0 	.word	0x7fffffc0

08003170 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <LL_ADC_IsEnabled+0x18>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <LL_ADC_IsEnabled+0x1a>
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <LL_ADC_REG_StartConversion+0x24>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	f043 0204 	orr.w	r2, r3, #4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	7fffffc0 	.word	0x7fffffc0

080031c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d101      	bne.n	80031d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d101      	bne.n	80031fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003218:	2300      	movs	r3, #0
 800321a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e1ee      	b.n	8003604 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7fe fb9f 	bl	8001978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff3f 	bl	80030d0 <LL_ADC_IsDeepPowerDownEnabled>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff25 	bl	80030ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff5a 	bl	8003120 <LL_ADC_IsInternalRegulatorEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d114      	bne.n	800329c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff3e 	bl	80030f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800327c:	4b8e      	ldr	r3, [pc, #568]	; (80034b8 <HAL_ADC_Init+0x2ac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	4a8e      	ldr	r2, [pc, #568]	; (80034bc <HAL_ADC_Init+0x2b0>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	3301      	adds	r3, #1
 800328c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800328e:	e002      	b.n	8003296 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	3b01      	subs	r3, #1
 8003294:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f9      	bne.n	8003290 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff3d 	bl	8003120 <LL_ADC_IsInternalRegulatorEnabled>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10d      	bne.n	80032c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b0:	f043 0210 	orr.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff77 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 80032d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 8188 	bne.w	80035f2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 8184 	bne.w	80035f2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032f2:	f043 0202 	orr.w	r2, r3, #2
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ff36 	bl	8003170 <LL_ADC_IsEnabled>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d136      	bne.n	8003378 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6c      	ldr	r2, [pc, #432]	; (80034c0 <HAL_ADC_Init+0x2b4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_ADC_Init+0x112>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a6a      	ldr	r2, [pc, #424]	; (80034c4 <HAL_ADC_Init+0x2b8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10e      	bne.n	800333c <HAL_ADC_Init+0x130>
 800331e:	4868      	ldr	r0, [pc, #416]	; (80034c0 <HAL_ADC_Init+0x2b4>)
 8003320:	f7ff ff26 	bl	8003170 <LL_ADC_IsEnabled>
 8003324:	4604      	mov	r4, r0
 8003326:	4867      	ldr	r0, [pc, #412]	; (80034c4 <HAL_ADC_Init+0x2b8>)
 8003328:	f7ff ff22 	bl	8003170 <LL_ADC_IsEnabled>
 800332c:	4603      	mov	r3, r0
 800332e:	4323      	orrs	r3, r4
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e008      	b.n	800334e <HAL_ADC_Init+0x142>
 800333c:	4862      	ldr	r0, [pc, #392]	; (80034c8 <HAL_ADC_Init+0x2bc>)
 800333e:	f7ff ff17 	bl	8003170 <LL_ADC_IsEnabled>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a5a      	ldr	r2, [pc, #360]	; (80034c0 <HAL_ADC_Init+0x2b4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_ADC_Init+0x15a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a58      	ldr	r2, [pc, #352]	; (80034c4 <HAL_ADC_Init+0x2b8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_ADC_Init+0x15e>
 8003366:	4a59      	ldr	r2, [pc, #356]	; (80034cc <HAL_ADC_Init+0x2c0>)
 8003368:	e000      	b.n	800336c <HAL_ADC_Init+0x160>
 800336a:	4a59      	ldr	r2, [pc, #356]	; (80034d0 <HAL_ADC_Init+0x2c4>)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f7ff fc5e 	bl	8002c34 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_ADC_Init+0x2bc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d129      	bne.n	80033d6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7e5b      	ldrb	r3, [r3, #25]
 8003386:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800338c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003392:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d013      	beq.n	80033c4 <HAL_ADC_Init+0x1b8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	d00d      	beq.n	80033c0 <HAL_ADC_Init+0x1b4>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b1c      	cmp	r3, #28
 80033aa:	d007      	beq.n	80033bc <HAL_ADC_Init+0x1b0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b18      	cmp	r3, #24
 80033b2:	d101      	bne.n	80033b8 <HAL_ADC_Init+0x1ac>
 80033b4:	2318      	movs	r3, #24
 80033b6:	e006      	b.n	80033c6 <HAL_ADC_Init+0x1ba>
 80033b8:	2300      	movs	r3, #0
 80033ba:	e004      	b.n	80033c6 <HAL_ADC_Init+0x1ba>
 80033bc:	2310      	movs	r3, #16
 80033be:	e002      	b.n	80033c6 <HAL_ADC_Init+0x1ba>
 80033c0:	2308      	movs	r3, #8
 80033c2:	e000      	b.n	80033c6 <HAL_ADC_Init+0x1ba>
 80033c4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80033c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	e00e      	b.n	80033f4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7e5b      	ldrb	r3, [r3, #25]
 80033da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033e0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80033e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d106      	bne.n	800340c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	3b01      	subs	r3, #1
 8003404:	045b      	lsls	r3, r3, #17
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	2b00      	cmp	r3, #0
 8003412:	d009      	beq.n	8003428 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a26      	ldr	r2, [pc, #152]	; (80034c8 <HAL_ADC_Init+0x2bc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d115      	bne.n	800345e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <HAL_ADC_Init+0x2c8>)
 800343a:	4013      	ands	r3, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	430b      	orrs	r3, r1
 8003444:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	611a      	str	r2, [r3, #16]
 800345c:	e009      	b.n	8003472 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_ADC_Init+0x2cc>)
 8003466:	4013      	ands	r3, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	69b9      	ldr	r1, [r7, #24]
 800346e:	430b      	orrs	r3, r1
 8003470:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fea2 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 800347c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff feaf 	bl	80031e6 <LL_ADC_INJ_IsConversionOngoing>
 8003488:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 808e 	bne.w	80035ae <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f040 808a 	bne.w	80035ae <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <HAL_ADC_Init+0x2bc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d11b      	bne.n	80034dc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	7e1b      	ldrb	r3, [r3, #24]
 80034a8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034b0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e018      	b.n	80034ea <HAL_ADC_Init+0x2de>
 80034b8:	24000008 	.word	0x24000008
 80034bc:	053e2d63 	.word	0x053e2d63
 80034c0:	40022000 	.word	0x40022000
 80034c4:	40022100 	.word	0x40022100
 80034c8:	58026000 	.word	0x58026000
 80034cc:	40022300 	.word	0x40022300
 80034d0:	58026300 	.word	0x58026300
 80034d4:	fff04007 	.word	0xfff04007
 80034d8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	7e1b      	ldrb	r3, [r3, #24]
 80034e0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	4b46      	ldr	r3, [pc, #280]	; (800360c <HAL_ADC_Init+0x400>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	69b9      	ldr	r1, [r7, #24]
 80034fa:	430b      	orrs	r3, r1
 80034fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003504:	2b01      	cmp	r3, #1
 8003506:	d137      	bne.n	8003578 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a3f      	ldr	r2, [pc, #252]	; (8003610 <HAL_ADC_Init+0x404>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d116      	bne.n	8003546 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <HAL_ADC_Init+0x408>)
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003530:	4311      	orrs	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003536:	430a      	orrs	r2, r1
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	611a      	str	r2, [r3, #16]
 8003544:	e020      	b.n	8003588 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <HAL_ADC_Init+0x40c>)
 800354e:	4013      	ands	r3, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003554:	3a01      	subs	r2, #1
 8003556:	0411      	lsls	r1, r2, #16
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800355c:	4311      	orrs	r1, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003562:	4311      	orrs	r1, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003568:	430a      	orrs	r2, r1
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	611a      	str	r2, [r3, #16]
 8003576:	e007      	b.n	8003588 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_ADC_Init+0x404>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d002      	beq.n	80035ae <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f001 f9bf 	bl	800492c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10c      	bne.n	80035d0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	f023 010f 	bic.w	r1, r3, #15
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	1e5a      	subs	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
 80035ce:	e007      	b.n	80035e0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 020f 	bic.w	r2, r2, #15
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e4:	f023 0303 	bic.w	r3, r3, #3
 80035e8:	f043 0201 	orr.w	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	661a      	str	r2, [r3, #96]	; 0x60
 80035f0:	e007      	b.n	8003602 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f6:	f043 0210 	orr.w	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003602:	7ffb      	ldrb	r3, [r7, #31]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3724      	adds	r7, #36	; 0x24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd90      	pop	{r4, r7, pc}
 800360c:	ffffbffc 	.word	0xffffbffc
 8003610:	58026000 	.word	0x58026000
 8003614:	fc00f81f 	.word	0xfc00f81f
 8003618:	fc00f81e 	.word	0xfc00f81e

0800361c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a60      	ldr	r2, [pc, #384]	; (80037b0 <HAL_ADC_Start_DMA+0x194>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_ADC_Start_DMA+0x20>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a5f      	ldr	r2, [pc, #380]	; (80037b4 <HAL_ADC_Start_DMA+0x198>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_ADC_Start_DMA+0x24>
 800363c:	4b5e      	ldr	r3, [pc, #376]	; (80037b8 <HAL_ADC_Start_DMA+0x19c>)
 800363e:	e000      	b.n	8003642 <HAL_ADC_Start_DMA+0x26>
 8003640:	4b5e      	ldr	r3, [pc, #376]	; (80037bc <HAL_ADC_Start_DMA+0x1a0>)
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fd16 	bl	8003074 <LL_ADC_GetMultimode>
 8003648:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fdb6 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 80a2 	bne.w	80037a0 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_ADC_Start_DMA+0x4e>
 8003666:	2302      	movs	r3, #2
 8003668:	e09d      	b.n	80037a6 <HAL_ADC_Start_DMA+0x18a>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d003      	beq.n	8003686 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b09      	cmp	r3, #9
 8003682:	f040 8086 	bne.w	8003792 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f001 f832 	bl	80046f0 <ADC_Enable>
 800368c:	4603      	mov	r3, r0
 800368e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d178      	bne.n	8003788 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_ADC_Start_DMA+0x1a4>)
 800369c:	4013      	ands	r3, r2
 800369e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a42      	ldr	r2, [pc, #264]	; (80037b4 <HAL_ADC_Start_DMA+0x198>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d002      	beq.n	80036b6 <HAL_ADC_Start_DMA+0x9a>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	e000      	b.n	80036b8 <HAL_ADC_Start_DMA+0x9c>
 80036b6:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <HAL_ADC_Start_DMA+0x194>)
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	4293      	cmp	r3, r2
 80036be:	d002      	beq.n	80036c6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d006      	beq.n	80036ec <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e2:	f023 0206 	bic.w	r2, r3, #6
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	665a      	str	r2, [r3, #100]	; 0x64
 80036ea:	e002      	b.n	80036f2 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	4a33      	ldr	r2, [pc, #204]	; (80037c4 <HAL_ADC_Start_DMA+0x1a8>)
 80036f8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	4a32      	ldr	r2, [pc, #200]	; (80037c8 <HAL_ADC_Start_DMA+0x1ac>)
 8003700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	4a31      	ldr	r2, [pc, #196]	; (80037cc <HAL_ADC_Start_DMA+0x1b0>)
 8003708:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	221c      	movs	r2, #28
 8003710:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0210 	orr.w	r2, r2, #16
 8003728:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <HAL_ADC_Start_DMA+0x1b4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10f      	bne.n	8003754 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f7ff fbfe 	bl	8002f44 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fbe9 	bl	8002f24 <LL_ADC_EnableDMAReq>
 8003752:	e007      	b.n	8003764 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7ff fbcd 	bl	8002efe <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3340      	adds	r3, #64	; 0x40
 800376e:	4619      	mov	r1, r3
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f002 fa62 	bl	8005c3c <HAL_DMA_Start_IT>
 8003778:	4603      	mov	r3, r0
 800377a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fd09 	bl	8003198 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003786:	e00d      	b.n	80037a4 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8003790:	e008      	b.n	80037a4 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800379e:	e001      	b.n	80037a4 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
 80037a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40022100 	.word	0x40022100
 80037b8:	40022300 	.word	0x40022300
 80037bc:	58026300 	.word	0x58026300
 80037c0:	fffff0fe 	.word	0xfffff0fe
 80037c4:	08004805 	.word	0x08004805
 80037c8:	080048dd 	.word	0x080048dd
 80037cc:	080048f9 	.word	0x080048f9
 80037d0:	58026000 	.word	0x58026000

080037d4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037dc:	2300      	movs	r3, #0
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a87      	ldr	r2, [pc, #540]	; (8003a14 <HAL_ADC_IRQHandler+0x240>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_ADC_IRQHandler+0x30>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a86      	ldr	r2, [pc, #536]	; (8003a18 <HAL_ADC_IRQHandler+0x244>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d101      	bne.n	8003808 <HAL_ADC_IRQHandler+0x34>
 8003804:	4b85      	ldr	r3, [pc, #532]	; (8003a1c <HAL_ADC_IRQHandler+0x248>)
 8003806:	e000      	b.n	800380a <HAL_ADC_IRQHandler+0x36>
 8003808:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <HAL_ADC_IRQHandler+0x24c>)
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fc32 	bl	8003074 <LL_ADC_GetMultimode>
 8003810:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d017      	beq.n	800384c <HAL_ADC_IRQHandler+0x78>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d012      	beq.n	800384c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b00      	cmp	r3, #0
 8003830:	d105      	bne.n	800383e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003836:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f001 f9ae 	bl	8004ba0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2202      	movs	r2, #2
 800384a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <HAL_ADC_IRQHandler+0x8c>
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8083 	beq.w	8003972 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d07d      	beq.n	8003972 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003886:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff faf4 	bl	8002e80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d062      	beq.n	8003964 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a5d      	ldr	r2, [pc, #372]	; (8003a18 <HAL_ADC_IRQHandler+0x244>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d002      	beq.n	80038ae <HAL_ADC_IRQHandler+0xda>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	e000      	b.n	80038b0 <HAL_ADC_IRQHandler+0xdc>
 80038ae:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_ADC_IRQHandler+0x240>)
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d008      	beq.n	80038ca <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d002      	beq.n	80038ca <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b09      	cmp	r3, #9
 80038c8:	d104      	bne.n	80038d4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	623b      	str	r3, [r7, #32]
 80038d2:	e00c      	b.n	80038ee <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a4f      	ldr	r2, [pc, #316]	; (8003a18 <HAL_ADC_IRQHandler+0x244>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d002      	beq.n	80038e4 <HAL_ADC_IRQHandler+0x110>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	e000      	b.n	80038e6 <HAL_ADC_IRQHandler+0x112>
 80038e4:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <HAL_ADC_IRQHandler+0x240>)
 80038e6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d135      	bne.n	8003964 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b08      	cmp	r3, #8
 8003904:	d12e      	bne.n	8003964 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fc58 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d11a      	bne.n	800394c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 020c 	bic.w	r2, r2, #12
 8003924:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d112      	bne.n	8003964 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	661a      	str	r2, [r3, #96]	; 0x60
 800394a:	e00b      	b.n	8003964 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003950:	f043 0210 	orr.w	r2, r3, #16
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800395c:	f043 0201 	orr.w	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f96f 	bl	8003c48 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	220c      	movs	r2, #12
 8003970:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_ADC_IRQHandler+0x1b2>
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80a0 	beq.w	8003ad2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 809a 	beq.w	8003ad2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fadc 	bl	8002f78 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039c0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fa5a 	bl	8002e80 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039cc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <HAL_ADC_IRQHandler+0x244>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d002      	beq.n	80039de <HAL_ADC_IRQHandler+0x20a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	e000      	b.n	80039e0 <HAL_ADC_IRQHandler+0x20c>
 80039de:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <HAL_ADC_IRQHandler+0x240>)
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d008      	beq.n	80039fa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b06      	cmp	r3, #6
 80039f2:	d002      	beq.n	80039fa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b07      	cmp	r3, #7
 80039f8:	d104      	bne.n	8003a04 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	e014      	b.n	8003a2e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a03      	ldr	r2, [pc, #12]	; (8003a18 <HAL_ADC_IRQHandler+0x244>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00a      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x250>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	e008      	b.n	8003a26 <HAL_ADC_IRQHandler+0x252>
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40022100 	.word	0x40022100
 8003a1c:	40022300 	.word	0x40022300
 8003a20:	58026300 	.word	0x58026300
 8003a24:	4b84      	ldr	r3, [pc, #528]	; (8003c38 <HAL_ADC_IRQHandler+0x464>)
 8003a26:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10c      	bne.n	8003a4e <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d142      	bne.n	8003ac4 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d03f      	beq.n	8003ac4 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d13a      	bne.n	8003ac4 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d133      	bne.n	8003ac4 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d12e      	bne.n	8003ac4 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fbbb 	bl	80031e6 <LL_ADC_INJ_IsConversionOngoing>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d11a      	bne.n	8003aac <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a84:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d112      	bne.n	8003ac4 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	f043 0201 	orr.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	661a      	str	r2, [r3, #96]	; 0x60
 8003aaa:	e00b      	b.n	8003ac4 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab0:	f043 0210 	orr.w	r2, r3, #16
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003abc:	f043 0201 	orr.w	r2, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f001 f843 	bl	8004b50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2260      	movs	r2, #96	; 0x60
 8003ad0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d011      	beq.n	8003b00 <HAL_ADC_IRQHandler+0x32c>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00c      	beq.n	8003b00 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8bc 	bl	8003c70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d012      	beq.n	8003b30 <HAL_ADC_IRQHandler+0x35c>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f001 f829 	bl	8004b78 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d012      	beq.n	8003b60 <HAL_ADC_IRQHandler+0x38c>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00d      	beq.n	8003b60 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f001 f81b 	bl	8004b8c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d043      	beq.n	8003bf2 <HAL_ADC_IRQHandler+0x41e>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d03e      	beq.n	8003bf2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b80:	e021      	b.n	8003bc6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d015      	beq.n	8003bb4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2a      	ldr	r2, [pc, #168]	; (8003c38 <HAL_ADC_IRQHandler+0x464>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_ADC_IRQHandler+0x3c8>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a29      	ldr	r2, [pc, #164]	; (8003c3c <HAL_ADC_IRQHandler+0x468>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0x3cc>
 8003b9c:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <HAL_ADC_IRQHandler+0x46c>)
 8003b9e:	e000      	b.n	8003ba2 <HAL_ADC_IRQHandler+0x3ce>
 8003ba0:	4b28      	ldr	r3, [pc, #160]	; (8003c44 <HAL_ADC_IRQHandler+0x470>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fa74 	bl	8003090 <LL_ADC_GetMultiDMATransfer>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	e008      	b.n	8003bc6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10e      	bne.n	8003bea <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bdc:	f043 0202 	orr.w	r2, r3, #2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f84d 	bl	8003c84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2210      	movs	r2, #16
 8003bf0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d018      	beq.n	8003c2e <HAL_ADC_IRQHandler+0x45a>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d013      	beq.n	8003c2e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c16:	f043 0208 	orr.w	r2, r3, #8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c26:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 ff9b 	bl	8004b64 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c2e:	bf00      	nop
 8003c30:	3728      	adds	r7, #40	; 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40022000 	.word	0x40022000
 8003c3c:	40022100 	.word	0x40022100
 8003c40:	40022300 	.word	0x40022300
 8003c44:	58026300 	.word	0x58026300

08003c48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b0b9      	sub	sp, #228	; 0xe4
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cb2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4ab3      	ldr	r2, [pc, #716]	; (8003f88 <HAL_ADC_ConfigChannel+0x2f0>)
 8003cba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x34>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	f000 bcfa 	b.w	80046c0 <HAL_ADC_ConfigChannel+0xa28>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fa71 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f040 84de 	bne.w	80046a2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4aa8      	ldr	r2, [pc, #672]	; (8003f8c <HAL_ADC_ConfigChannel+0x2f4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d033      	beq.n	8003d58 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x76>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	0e9b      	lsrs	r3, r3, #26
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2201      	movs	r2, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	e01d      	b.n	8003d4a <HAL_ADC_ConfigChannel+0xb2>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003d32:	2320      	movs	r3, #32
 8003d34:	e004      	b.n	8003d40 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2201      	movs	r2, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	69d1      	ldr	r1, [r2, #28]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	430b      	orrs	r3, r1
 8003d56:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	f7ff f89e 	bl	8002ea6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fa26 	bl	80031c0 <LL_ADC_REG_IsConversionOngoing>
 8003d74:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fa32 	bl	80031e6 <LL_ADC_INJ_IsConversionOngoing>
 8003d82:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 8270 	bne.w	8004270 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f040 826b 	bne.w	8004270 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f7ff f8f9 	bl	8002f9e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a76      	ldr	r2, [pc, #472]	; (8003f8c <HAL_ADC_ConfigChannel+0x2f4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d10d      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	08db      	lsrs	r3, r3, #3
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dd0:	e032      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dd2:	4b6f      	ldr	r3, [pc, #444]	; (8003f90 <HAL_ADC_ConfigChannel+0x2f8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dde:	d10b      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x160>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	089b      	lsrs	r3, r3, #2
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	e01d      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x19c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10b      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x186>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	e00a      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x19c>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d048      	beq.n	8003ed2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6919      	ldr	r1, [r3, #16]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e50:	f7fe ff24 	bl	8002c9c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a4c      	ldr	r2, [pc, #304]	; (8003f8c <HAL_ADC_ConfigChannel+0x2f4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d119      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6919      	ldr	r1, [r3, #16]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f7fe ffbc 	bl	8002de8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6919      	ldr	r1, [r3, #16]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d102      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x1f0>
 8003e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e86:	e000      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x1f2>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f7fe ff8a 	bl	8002da4 <LL_ADC_SetOffsetSaturation>
 8003e90:	e1ee      	b.n	8004270 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d102      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x212>
 8003ea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ea8:	e000      	b.n	8003eac <HAL_ADC_ConfigChannel+0x214>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	461a      	mov	r2, r3
 8003eae:	f7fe ff57 	bl	8002d60 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6919      	ldr	r1, [r3, #16]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	7e1b      	ldrb	r3, [r3, #24]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d102      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x230>
 8003ec2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ec6:	e000      	b.n	8003eca <HAL_ADC_ConfigChannel+0x232>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f7fe ff2e 	bl	8002d2c <LL_ADC_SetDataRightShift>
 8003ed0:	e1ce      	b.n	8004270 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <HAL_ADC_ConfigChannel+0x2f4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	f040 8181 	bne.w	80041e0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe ff0b 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x272>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe ff00 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 8003f00:	4603      	mov	r3, r0
 8003f02:	0e9b      	lsrs	r3, r3, #26
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	e01e      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x2b0>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fef5 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003f28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003f30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003f38:	2320      	movs	r3, #32
 8003f3a:	e004      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003f3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f40:	fab3 f383 	clz	r3, r3
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d105      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x2c8>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	e01e      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x306>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f6c:	fa93 f3a3 	rbit	r3, r3
 8003f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003f74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d107      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003f84:	2320      	movs	r3, #32
 8003f86:	e00a      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x306>
 8003f88:	47ff0000 	.word	0x47ff0000
 8003f8c:	58026000 	.word	0x58026000
 8003f90:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f98:	fab3 f383 	clz	r3, r3
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d106      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe ff3e 	bl	8002e2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fea2 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x344>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe fe97 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	0e9b      	lsrs	r3, r3, #26
 8003fd6:	f003 021f 	and.w	r2, r3, #31
 8003fda:	e01e      	b.n	800401a <HAL_ADC_ConfigChannel+0x382>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fe8c 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ff2:	fa93 f3a3 	rbit	r3, r3
 8003ff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800400a:	2320      	movs	r3, #32
 800400c:	e004      	b.n	8004018 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800400e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004022:	2b00      	cmp	r3, #0
 8004024:	d105      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x39a>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	0e9b      	lsrs	r3, r3, #26
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	e018      	b.n	8004064 <HAL_ADC_ConfigChannel+0x3cc>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004046:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800404a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800404e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004056:	2320      	movs	r3, #32
 8004058:	e004      	b.n	8004064 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800405a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	429a      	cmp	r2, r3
 8004066:	d106      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2200      	movs	r2, #0
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe fedb 	bl	8002e2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2102      	movs	r1, #2
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe fe3f 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 8004082:	4603      	mov	r3, r0
 8004084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x40a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2102      	movs	r1, #2
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fe34 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 8004098:	4603      	mov	r3, r0
 800409a:	0e9b      	lsrs	r3, r3, #26
 800409c:	f003 021f 	and.w	r2, r3, #31
 80040a0:	e01e      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x448>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fe29 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80040c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80040c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e004      	b.n	80040de <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80040d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040d8:	fab3 f383 	clz	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d105      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x460>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0e9b      	lsrs	r3, r3, #26
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	e014      	b.n	8004122 <HAL_ADC_ConfigChannel+0x48a>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004108:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800410c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004114:	2320      	movs	r3, #32
 8004116:	e004      	b.n	8004122 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	429a      	cmp	r2, r3
 8004124:	d106      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	2102      	movs	r1, #2
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe fe7c 	bl	8002e2c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2103      	movs	r1, #3
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fde0 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 8004140:	4603      	mov	r3, r0
 8004142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x4c8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2103      	movs	r1, #3
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe fdd5 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 8004156:	4603      	mov	r3, r0
 8004158:	0e9b      	lsrs	r3, r3, #26
 800415a:	f003 021f 	and.w	r2, r3, #31
 800415e:	e017      	b.n	8004190 <HAL_ADC_ConfigChannel+0x4f8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2103      	movs	r1, #3
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fdca 	bl	8002d00 <LL_ADC_GetOffsetChannel>
 800416c:	4603      	mov	r3, r0
 800416e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800417c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004182:	2320      	movs	r3, #32
 8004184:	e003      	b.n	800418e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004198:	2b00      	cmp	r3, #0
 800419a:	d105      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x510>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0e9b      	lsrs	r3, r3, #26
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	e011      	b.n	80041cc <HAL_ADC_ConfigChannel+0x534>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80041b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041b8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80041ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80041c0:	2320      	movs	r3, #32
 80041c2:	e003      	b.n	80041cc <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80041c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d14f      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2103      	movs	r1, #3
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe fe27 	bl	8002e2c <LL_ADC_SetOffsetState>
 80041de:	e047      	b.n	8004270 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d107      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004202:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	069b      	lsls	r3, r3, #26
 8004214:	429a      	cmp	r2, r3
 8004216:	d107      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004226:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	069b      	lsls	r3, r3, #26
 8004238:	429a      	cmp	r2, r3
 800423a:	d107      	bne.n	800424c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800424a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	069b      	lsls	r3, r3, #26
 800425c:	429a      	cmp	r2, r3
 800425e:	d107      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800426e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe ff7b 	bl	8003170 <LL_ADC_IsEnabled>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	f040 8219 	bne.w	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	461a      	mov	r2, r3
 8004290:	f7fe feb0 	bl	8002ff4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4aa1      	ldr	r2, [pc, #644]	; (8004520 <HAL_ADC_ConfigChannel+0x888>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f040 812e 	bne.w	80044fc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x630>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0e9b      	lsrs	r3, r3, #26
 80042b6:	3301      	adds	r3, #1
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2b09      	cmp	r3, #9
 80042be:	bf94      	ite	ls
 80042c0:	2301      	movls	r3, #1
 80042c2:	2300      	movhi	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e019      	b.n	80042fc <HAL_ADC_ConfigChannel+0x664>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80042d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80042da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80042e0:	2320      	movs	r3, #32
 80042e2:	e003      	b.n	80042ec <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80042e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	3301      	adds	r3, #1
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2b09      	cmp	r3, #9
 80042f4:	bf94      	ite	ls
 80042f6:	2301      	movls	r3, #1
 80042f8:	2300      	movhi	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d079      	beq.n	80043f4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_ADC_ConfigChannel+0x684>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0e9b      	lsrs	r3, r3, #26
 8004312:	3301      	adds	r3, #1
 8004314:	069b      	lsls	r3, r3, #26
 8004316:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800431a:	e015      	b.n	8004348 <HAL_ADC_ConfigChannel+0x6b0>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800432a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800432e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004334:	2320      	movs	r3, #32
 8004336:	e003      	b.n	8004340 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	3301      	adds	r3, #1
 8004342:	069b      	lsls	r3, r3, #26
 8004344:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x6d0>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	0e9b      	lsrs	r3, r3, #26
 800435a:	3301      	adds	r3, #1
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2101      	movs	r1, #1
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	e017      	b.n	8004398 <HAL_ADC_ConfigChannel+0x700>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004378:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800437a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004380:	2320      	movs	r3, #32
 8004382:	e003      	b.n	800438c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	3301      	adds	r3, #1
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f303 	lsl.w	r3, r1, r3
 8004398:	ea42 0103 	orr.w	r1, r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <HAL_ADC_ConfigChannel+0x726>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	0e9b      	lsrs	r3, r3, #26
 80043ae:	3301      	adds	r3, #1
 80043b0:	f003 021f 	and.w	r2, r3, #31
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	051b      	lsls	r3, r3, #20
 80043bc:	e018      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x758>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80043d6:	2320      	movs	r3, #32
 80043d8:	e003      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	fab3 f383 	clz	r3, r3
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	3301      	adds	r3, #1
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043f0:	430b      	orrs	r3, r1
 80043f2:	e07e      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d107      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x778>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	0e9b      	lsrs	r3, r3, #26
 8004406:	3301      	adds	r3, #1
 8004408:	069b      	lsls	r3, r3, #26
 800440a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800440e:	e015      	b.n	800443c <HAL_ADC_ConfigChannel+0x7a4>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004428:	2320      	movs	r3, #32
 800442a:	e003      	b.n	8004434 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	3301      	adds	r3, #1
 8004436:	069b      	lsls	r3, r3, #26
 8004438:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_ADC_ConfigChannel+0x7c4>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0e9b      	lsrs	r3, r3, #26
 800444e:	3301      	adds	r3, #1
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2101      	movs	r1, #1
 8004456:	fa01 f303 	lsl.w	r3, r1, r3
 800445a:	e017      	b.n	800448c <HAL_ADC_ConfigChannel+0x7f4>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	61bb      	str	r3, [r7, #24]
  return result;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004474:	2320      	movs	r3, #32
 8004476:	e003      	b.n	8004480 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	3301      	adds	r3, #1
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f303 	lsl.w	r3, r1, r3
 800448c:	ea42 0103 	orr.w	r1, r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10d      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x820>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	0e9b      	lsrs	r3, r3, #26
 80044a2:	3301      	adds	r3, #1
 80044a4:	f003 021f 	and.w	r2, r3, #31
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	3b1e      	subs	r3, #30
 80044b0:	051b      	lsls	r3, r3, #20
 80044b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044b6:	e01b      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x858>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	fa93 f3a3 	rbit	r3, r3
 80044c4:	60fb      	str	r3, [r7, #12]
  return result;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80044d0:	2320      	movs	r3, #32
 80044d2:	e003      	b.n	80044dc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fab3 f383 	clz	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	3301      	adds	r3, #1
 80044de:	f003 021f 	and.w	r2, r3, #31
 80044e2:	4613      	mov	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	3b1e      	subs	r3, #30
 80044ea:	051b      	lsls	r3, r3, #20
 80044ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f0:	430b      	orrs	r3, r1
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	6892      	ldr	r2, [r2, #8]
 80044f6:	4619      	mov	r1, r3
 80044f8:	f7fe fd51 	bl	8002f9e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f280 80d7 	bge.w	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a06      	ldr	r2, [pc, #24]	; (8004524 <HAL_ADC_ConfigChannel+0x88c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_ADC_ConfigChannel+0x882>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <HAL_ADC_ConfigChannel+0x890>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d10a      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x898>
 800451a:	4b04      	ldr	r3, [pc, #16]	; (800452c <HAL_ADC_ConfigChannel+0x894>)
 800451c:	e009      	b.n	8004532 <HAL_ADC_ConfigChannel+0x89a>
 800451e:	bf00      	nop
 8004520:	47ff0000 	.word	0x47ff0000
 8004524:	40022000 	.word	0x40022000
 8004528:	40022100 	.word	0x40022100
 800452c:	40022300 	.word	0x40022300
 8004530:	4b65      	ldr	r3, [pc, #404]	; (80046c8 <HAL_ADC_ConfigChannel+0xa30>)
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fba4 	bl	8002c80 <LL_ADC_GetCommonPathInternalCh>
 8004538:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a62      	ldr	r2, [pc, #392]	; (80046cc <HAL_ADC_ConfigChannel+0xa34>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_ADC_ConfigChannel+0x8b8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a61      	ldr	r2, [pc, #388]	; (80046d0 <HAL_ADC_ConfigChannel+0xa38>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10e      	bne.n	800456e <HAL_ADC_ConfigChannel+0x8d6>
 8004550:	485e      	ldr	r0, [pc, #376]	; (80046cc <HAL_ADC_ConfigChannel+0xa34>)
 8004552:	f7fe fe0d 	bl	8003170 <LL_ADC_IsEnabled>
 8004556:	4604      	mov	r4, r0
 8004558:	485d      	ldr	r0, [pc, #372]	; (80046d0 <HAL_ADC_ConfigChannel+0xa38>)
 800455a:	f7fe fe09 	bl	8003170 <LL_ADC_IsEnabled>
 800455e:	4603      	mov	r3, r0
 8004560:	4323      	orrs	r3, r4
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e008      	b.n	8004580 <HAL_ADC_ConfigChannel+0x8e8>
 800456e:	4859      	ldr	r0, [pc, #356]	; (80046d4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004570:	f7fe fdfe 	bl	8003170 <LL_ADC_IsEnabled>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	bf0c      	ite	eq
 800457a:	2301      	moveq	r3, #1
 800457c:	2300      	movne	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8084 	beq.w	800468e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a53      	ldr	r2, [pc, #332]	; (80046d8 <HAL_ADC_ConfigChannel+0xa40>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d132      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x95e>
 8004590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004594:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d12c      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a4c      	ldr	r2, [pc, #304]	; (80046d4 <HAL_ADC_ConfigChannel+0xa3c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	f040 8086 	bne.w	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a47      	ldr	r2, [pc, #284]	; (80046cc <HAL_ADC_ConfigChannel+0xa34>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <HAL_ADC_ConfigChannel+0x924>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a46      	ldr	r2, [pc, #280]	; (80046d0 <HAL_ADC_ConfigChannel+0xa38>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x928>
 80045bc:	4a47      	ldr	r2, [pc, #284]	; (80046dc <HAL_ADC_ConfigChannel+0xa44>)
 80045be:	e000      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x92a>
 80045c0:	4a41      	ldr	r2, [pc, #260]	; (80046c8 <HAL_ADC_ConfigChannel+0xa30>)
 80045c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f7fe fb44 	bl	8002c5a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045d2:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_ADC_ConfigChannel+0xa48>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	4a42      	ldr	r2, [pc, #264]	; (80046e4 <HAL_ADC_ConfigChannel+0xa4c>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	3301      	adds	r3, #1
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045e6:	e002      	b.n	80045ee <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f9      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045f4:	e05e      	b.n	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a3b      	ldr	r2, [pc, #236]	; (80046e8 <HAL_ADC_ConfigChannel+0xa50>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d120      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x9aa>
 8004600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d11a      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a30      	ldr	r2, [pc, #192]	; (80046d4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d14e      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2c      	ldr	r2, [pc, #176]	; (80046cc <HAL_ADC_ConfigChannel+0xa34>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_ADC_ConfigChannel+0x992>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <HAL_ADC_ConfigChannel+0xa38>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x996>
 800462a:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <HAL_ADC_ConfigChannel+0xa44>)
 800462c:	e000      	b.n	8004630 <HAL_ADC_ConfigChannel+0x998>
 800462e:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <HAL_ADC_ConfigChannel+0xa30>)
 8004630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f7fe fb0d 	bl	8002c5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004640:	e038      	b.n	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a29      	ldr	r2, [pc, #164]	; (80046ec <HAL_ADC_ConfigChannel+0xa54>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d133      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
 800464c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d12d      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <HAL_ADC_ConfigChannel+0xa3c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d128      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a19      	ldr	r2, [pc, #100]	; (80046cc <HAL_ADC_ConfigChannel+0xa34>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_ADC_ConfigChannel+0x9de>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_ADC_ConfigChannel+0xa38>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_ADC_ConfigChannel+0x9e2>
 8004676:	4a19      	ldr	r2, [pc, #100]	; (80046dc <HAL_ADC_ConfigChannel+0xa44>)
 8004678:	e000      	b.n	800467c <HAL_ADC_ConfigChannel+0x9e4>
 800467a:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <HAL_ADC_ConfigChannel+0xa30>)
 800467c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7fe fae7 	bl	8002c5a <LL_ADC_SetCommonPathInternalCh>
 800468c:	e012      	b.n	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	f043 0220 	orr.w	r2, r3, #32
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80046a0:	e008      	b.n	80046b4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a6:	f043 0220 	orr.w	r2, r3, #32
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046bc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	37e4      	adds	r7, #228	; 0xe4
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd90      	pop	{r4, r7, pc}
 80046c8:	58026300 	.word	0x58026300
 80046cc:	40022000 	.word	0x40022000
 80046d0:	40022100 	.word	0x40022100
 80046d4:	58026000 	.word	0x58026000
 80046d8:	c7520000 	.word	0xc7520000
 80046dc:	40022300 	.word	0x40022300
 80046e0:	24000008 	.word	0x24000008
 80046e4:	053e2d63 	.word	0x053e2d63
 80046e8:	c3210000 	.word	0xc3210000
 80046ec:	cb840000 	.word	0xcb840000

080046f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fe fd37 	bl	8003170 <LL_ADC_IsEnabled>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d16e      	bne.n	80047e6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	4b38      	ldr	r3, [pc, #224]	; (80047f0 <ADC_Enable+0x100>)
 8004710:	4013      	ands	r3, r2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471a:	f043 0210 	orr.w	r2, r3, #16
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e05a      	b.n	80047e8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe fd06 	bl	8003148 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800473c:	f7fe fa10 	bl	8002b60 <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <ADC_Enable+0x104>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <ADC_Enable+0x66>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <ADC_Enable+0x108>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d101      	bne.n	800475a <ADC_Enable+0x6a>
 8004756:	4b29      	ldr	r3, [pc, #164]	; (80047fc <ADC_Enable+0x10c>)
 8004758:	e000      	b.n	800475c <ADC_Enable+0x6c>
 800475a:	4b29      	ldr	r3, [pc, #164]	; (8004800 <ADC_Enable+0x110>)
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fc89 	bl	8003074 <LL_ADC_GetMultimode>
 8004762:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <ADC_Enable+0x108>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d002      	beq.n	8004774 <ADC_Enable+0x84>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	e000      	b.n	8004776 <ADC_Enable+0x86>
 8004774:	4b1f      	ldr	r3, [pc, #124]	; (80047f4 <ADC_Enable+0x104>)
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	4293      	cmp	r3, r2
 800477c:	d02c      	beq.n	80047d8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d130      	bne.n	80047e6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004784:	e028      	b.n	80047d8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe fcf0 	bl	8003170 <LL_ADC_IsEnabled>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe fcd4 	bl	8003148 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047a0:	f7fe f9de 	bl	8002b60 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d914      	bls.n	80047d8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d00d      	beq.n	80047d8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c0:	f043 0210 	orr.w	r2, r3, #16
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047cc:	f043 0201 	orr.w	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e007      	b.n	80047e8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d1cf      	bne.n	8004786 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	8000003f 	.word	0x8000003f
 80047f4:	40022000 	.word	0x40022000
 80047f8:	40022100 	.word	0x40022100
 80047fc:	40022300 	.word	0x40022300
 8004800:	58026300 	.word	0x58026300

08004804 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004816:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800481a:	2b00      	cmp	r3, #0
 800481c:	d14b      	bne.n	80048b6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004822:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b00      	cmp	r3, #0
 8004836:	d021      	beq.n	800487c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7fe fb1f 	bl	8002e80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d032      	beq.n	80048ae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d12b      	bne.n	80048ae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d11f      	bne.n	80048ae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004872:	f043 0201 	orr.w	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	661a      	str	r2, [r3, #96]	; 0x60
 800487a:	e018      	b.n	80048ae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d111      	bne.n	80048ae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f043 0201 	orr.w	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff f9ca 	bl	8003c48 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048b4:	e00e      	b.n	80048d4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff f9de 	bl	8003c84 <HAL_ADC_ErrorCallback>
}
 80048c8:	e004      	b.n	80048d4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4798      	blx	r3
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff f9b6 	bl	8003c5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004916:	f043 0204 	orr.w	r2, r3, #4
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff f9b0 	bl	8003c84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a6b      	ldr	r2, [pc, #428]	; (8004ae8 <ADC_ConfigureBoostMode+0x1bc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <ADC_ConfigureBoostMode+0x1c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6a      	ldr	r2, [pc, #424]	; (8004aec <ADC_ConfigureBoostMode+0x1c0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d109      	bne.n	800495c <ADC_ConfigureBoostMode+0x30>
 8004948:	4b69      	ldr	r3, [pc, #420]	; (8004af0 <ADC_ConfigureBoostMode+0x1c4>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e008      	b.n	800496e <ADC_ConfigureBoostMode+0x42>
 800495c:	4b65      	ldr	r3, [pc, #404]	; (8004af4 <ADC_ConfigureBoostMode+0x1c8>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01c      	beq.n	80049ac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004972:	f005 fd91 	bl	800a498 <HAL_RCC_GetHCLKFreq>
 8004976:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004980:	d010      	beq.n	80049a4 <ADC_ConfigureBoostMode+0x78>
 8004982:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004986:	d871      	bhi.n	8004a6c <ADC_ConfigureBoostMode+0x140>
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498c:	d002      	beq.n	8004994 <ADC_ConfigureBoostMode+0x68>
 800498e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004992:	d16b      	bne.n	8004a6c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a0:	60fb      	str	r3, [r7, #12]
        break;
 80049a2:	e066      	b.n	8004a72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	60fb      	str	r3, [r7, #12]
        break;
 80049aa:	e062      	b.n	8004a72 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80049ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80049b0:	f006 fc9c 	bl	800b2ec <HAL_RCCEx_GetPeriphCLKFreq>
 80049b4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80049be:	d051      	beq.n	8004a64 <ADC_ConfigureBoostMode+0x138>
 80049c0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80049c4:	d854      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x144>
 80049c6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80049ca:	d047      	beq.n	8004a5c <ADC_ConfigureBoostMode+0x130>
 80049cc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80049d0:	d84e      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x144>
 80049d2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80049d6:	d03d      	beq.n	8004a54 <ADC_ConfigureBoostMode+0x128>
 80049d8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80049dc:	d848      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x144>
 80049de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e2:	d033      	beq.n	8004a4c <ADC_ConfigureBoostMode+0x120>
 80049e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e8:	d842      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x144>
 80049ea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80049ee:	d029      	beq.n	8004a44 <ADC_ConfigureBoostMode+0x118>
 80049f0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80049f4:	d83c      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x144>
 80049f6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80049fa:	d01a      	beq.n	8004a32 <ADC_ConfigureBoostMode+0x106>
 80049fc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004a00:	d836      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x144>
 8004a02:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004a06:	d014      	beq.n	8004a32 <ADC_ConfigureBoostMode+0x106>
 8004a08:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004a0c:	d830      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x144>
 8004a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a12:	d00e      	beq.n	8004a32 <ADC_ConfigureBoostMode+0x106>
 8004a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a18:	d82a      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x144>
 8004a1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a1e:	d008      	beq.n	8004a32 <ADC_ConfigureBoostMode+0x106>
 8004a20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a24:	d824      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x144>
 8004a26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a2a:	d002      	beq.n	8004a32 <ADC_ConfigureBoostMode+0x106>
 8004a2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a30:	d11e      	bne.n	8004a70 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	0c9b      	lsrs	r3, r3, #18
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	60fb      	str	r3, [r7, #12]
        break;
 8004a42:	e016      	b.n	8004a72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]
        break;
 8004a4a:	e012      	b.n	8004a72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	60fb      	str	r3, [r7, #12]
        break;
 8004a52:	e00e      	b.n	8004a72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	099b      	lsrs	r3, r3, #6
 8004a58:	60fb      	str	r3, [r7, #12]
        break;
 8004a5a:	e00a      	b.n	8004a72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	09db      	lsrs	r3, r3, #7
 8004a60:	60fb      	str	r3, [r7, #12]
        break;
 8004a62:	e006      	b.n	8004a72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	60fb      	str	r3, [r7, #12]
        break;
 8004a6a:	e002      	b.n	8004a72 <ADC_ConfigureBoostMode+0x146>
        break;
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004a70:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a1f      	ldr	r2, [pc, #124]	; (8004af8 <ADC_ConfigureBoostMode+0x1cc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d808      	bhi.n	8004a92 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a8e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a90:	e025      	b.n	8004ade <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a19      	ldr	r2, [pc, #100]	; (8004afc <ADC_ConfigureBoostMode+0x1d0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d80a      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aac:	609a      	str	r2, [r3, #8]
}
 8004aae:	e016      	b.n	8004ade <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <ADC_ConfigureBoostMode+0x1d4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d80a      	bhi.n	8004ace <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	e007      	b.n	8004ade <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004adc:	609a      	str	r2, [r3, #8]
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40022000 	.word	0x40022000
 8004aec:	40022100 	.word	0x40022100
 8004af0:	40022300 	.word	0x40022300
 8004af4:	58026300 	.word	0x58026300
 8004af8:	005f5e10 	.word	0x005f5e10
 8004afc:	00bebc20 	.word	0x00bebc20
 8004b00:	017d7840 	.word	0x017d7840

08004b04 <LL_ADC_IsEnabled>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <LL_ADC_IsEnabled+0x18>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <LL_ADC_IsEnabled+0x1a>
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <LL_ADC_REG_IsConversionOngoing>:
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d101      	bne.n	8004b42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b0a3      	sub	sp, #140	; 0x8c
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e0c1      	b.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a5e      	ldr	r2, [pc, #376]	; (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d102      	bne.n	8004bf2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bec:	4b5d      	ldr	r3, [pc, #372]	; (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e001      	b.n	8004bf6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10b      	bne.n	8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0a0      	b.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff ff87 	bl	8004b2a <LL_ADC_REG_IsConversionOngoing>
 8004c1c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ff80 	bl	8004b2a <LL_ADC_REG_IsConversionOngoing>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 8081 	bne.w	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d17c      	bne.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a48      	ldr	r2, [pc, #288]	; (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a46      	ldr	r2, [pc, #280]	; (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004c4e:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c50:	e000      	b.n	8004c54 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004c52:	4b46      	ldr	r3, [pc, #280]	; (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c54:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d039      	beq.n	8004cd2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a3a      	ldr	r2, [pc, #232]	; (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a39      	ldr	r2, [pc, #228]	; (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d10e      	bne.n	8004ca2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c84:	4836      	ldr	r0, [pc, #216]	; (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c86:	f7ff ff3d 	bl	8004b04 <LL_ADC_IsEnabled>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4835      	ldr	r0, [pc, #212]	; (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c8e:	f7ff ff39 	bl	8004b04 <LL_ADC_IsEnabled>
 8004c92:	4603      	mov	r3, r0
 8004c94:	4323      	orrs	r3, r4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	e008      	b.n	8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004ca2:	4833      	ldr	r0, [pc, #204]	; (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ca4:	f7ff ff2e 	bl	8004b04 <LL_ADC_IsEnabled>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d047      	beq.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	4b2d      	ldr	r3, [pc, #180]	; (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	6811      	ldr	r1, [r2, #0]
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	6892      	ldr	r2, [r2, #8]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cce:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cd0:	e03a      	b.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004cd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cdc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d10e      	bne.n	8004d10 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004cf2:	481b      	ldr	r0, [pc, #108]	; (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cf4:	f7ff ff06 	bl	8004b04 <LL_ADC_IsEnabled>
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	481a      	ldr	r0, [pc, #104]	; (8004d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cfc:	f7ff ff02 	bl	8004b04 <LL_ADC_IsEnabled>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4323      	orrs	r3, r4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	e008      	b.n	8004d22 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004d10:	4817      	ldr	r0, [pc, #92]	; (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d12:	f7ff fef7 	bl	8004b04 <LL_ADC_IsEnabled>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d010      	beq.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d30:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d32:	e009      	b.n	8004d48 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d38:	f043 0220 	orr.w	r2, r3, #32
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004d46:	e000      	b.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d52:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	378c      	adds	r7, #140	; 0x8c
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40022000 	.word	0x40022000
 8004d64:	40022100 	.word	0x40022100
 8004d68:	40022300 	.word	0x40022300
 8004d6c:	58026300 	.word	0x58026300
 8004d70:	58026000 	.word	0x58026000
 8004d74:	fffff0e0 	.word	0xfffff0e0

08004d78 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e023      	b.n	8004dd2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fd f80a 	bl	8001db8 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <__NVIC_SetPriorityGrouping>:
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <__NVIC_SetPriorityGrouping+0x40>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <__NVIC_SetPriorityGrouping+0x44>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e0a:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <__NVIC_SetPriorityGrouping+0x40>)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	60d3      	str	r3, [r2, #12]
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	e000ed00 	.word	0xe000ed00
 8004e20:	05fa0000 	.word	0x05fa0000

08004e24 <__NVIC_GetPriorityGrouping>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <__NVIC_GetPriorityGrouping+0x18>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	f003 0307 	and.w	r3, r3, #7
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	e000ed00 	.word	0xe000ed00

08004e40 <__NVIC_EnableIRQ>:
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	db0b      	blt.n	8004e6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	f003 021f 	and.w	r2, r3, #31
 8004e58:	4907      	ldr	r1, [pc, #28]	; (8004e78 <__NVIC_EnableIRQ+0x38>)
 8004e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e5e:	095b      	lsrs	r3, r3, #5
 8004e60:	2001      	movs	r0, #1
 8004e62:	fa00 f202 	lsl.w	r2, r0, r2
 8004e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	e000e100 	.word	0xe000e100

08004e7c <__NVIC_SetPriority>:
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	6039      	str	r1, [r7, #0]
 8004e86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	db0a      	blt.n	8004ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	490c      	ldr	r1, [pc, #48]	; (8004ec8 <__NVIC_SetPriority+0x4c>)
 8004e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e9a:	0112      	lsls	r2, r2, #4
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ea4:	e00a      	b.n	8004ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	4908      	ldr	r1, [pc, #32]	; (8004ecc <__NVIC_SetPriority+0x50>)
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	3b04      	subs	r3, #4
 8004eb4:	0112      	lsls	r2, r2, #4
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	440b      	add	r3, r1
 8004eba:	761a      	strb	r2, [r3, #24]
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	e000e100 	.word	0xe000e100
 8004ecc:	e000ed00 	.word	0xe000ed00

08004ed0 <NVIC_EncodePriority>:
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b089      	sub	sp, #36	; 0x24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f1c3 0307 	rsb	r3, r3, #7
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	bf28      	it	cs
 8004eee:	2304      	movcs	r3, #4
 8004ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d902      	bls.n	8004f00 <NVIC_EncodePriority+0x30>
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	3b03      	subs	r3, #3
 8004efe:	e000      	b.n	8004f02 <NVIC_EncodePriority+0x32>
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f04:	f04f 32ff 	mov.w	r2, #4294967295
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43da      	mvns	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	401a      	ands	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f18:	f04f 31ff 	mov.w	r1, #4294967295
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f22:	43d9      	mvns	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f28:	4313      	orrs	r3, r2
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3724      	adds	r7, #36	; 0x24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f48:	d301      	bcc.n	8004f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e00f      	b.n	8004f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <SysTick_Config+0x40>)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f56:	210f      	movs	r1, #15
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	f7ff ff8e 	bl	8004e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <SysTick_Config+0x40>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <SysTick_Config+0x40>)
 8004f68:	2207      	movs	r2, #7
 8004f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	e000e010 	.word	0xe000e010

08004f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff29 	bl	8004ddc <__NVIC_SetPriorityGrouping>
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	4603      	mov	r3, r0
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fa0:	f7ff ff40 	bl	8004e24 <__NVIC_GetPriorityGrouping>
 8004fa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	6978      	ldr	r0, [r7, #20]
 8004fac:	f7ff ff90 	bl	8004ed0 <NVIC_EncodePriority>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ff5f 	bl	8004e7c <__NVIC_SetPriority>
}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	4603      	mov	r3, r0
 8004fce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff33 	bl	8004e40 <__NVIC_EnableIRQ>
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ffa4 	bl	8004f38 <SysTick_Config>
 8004ff0:	4603      	mov	r3, r0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e0b4      	b.n	8005178 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800500e:	4b5c      	ldr	r3, [pc, #368]	; (8005180 <HAL_DFSDM_ChannelInit+0x184>)
 8005010:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8005012:	4b5c      	ldr	r3, [pc, #368]	; (8005184 <HAL_DFSDM_ChannelInit+0x188>)
 8005014:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8005016:	4b5c      	ldr	r3, [pc, #368]	; (8005188 <HAL_DFSDM_ChannelInit+0x18c>)
 8005018:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fa10 	bl	8005444 <DFSDM_GetChannelFromInstance>
 8005024:	4603      	mov	r3, r0
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0a0      	b.n	8005178 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc ff90 	bl	8001f5c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d125      	bne.n	800509a <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	431a      	orrs	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	791b      	ldrb	r3, [r3, #4]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d108      	bne.n	800508e <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	3b01      	subs	r3, #1
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	431a      	orrs	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80050a8:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6819      	ldr	r1, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80050b8:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80050be:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 020f 	bic.w	r2, r2, #15
 80050d6:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6819      	ldr	r1, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80050fe:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6899      	ldr	r1, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f002 0207 	and.w	r2, r2, #7
 800512a:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005156:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f96d 	bl	8005444 <DFSDM_GetChannelFromInstance>
 800516a:	4603      	mov	r3, r0
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4413      	add	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	2400024c 	.word	0x2400024c
 8005184:	24000250 	.word	0x24000250
 8005188:	40017800 	.word	0x40017800

0800518c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0c8      	b.n	8005330 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 800519e:	4b66      	ldr	r3, [pc, #408]	; (8005338 <HAL_DFSDM_FilterInit+0x1ac>)
 80051a0:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d109      	bne.n	80051c0 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d003      	beq.n	80051bc <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0b7      	b.n	8005330 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fc fe0f 	bl	8001dfc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80051ec:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	7a1b      	ldrb	r3, [r3, #8]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d108      	bne.n	8005208 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	e007      	b.n	8005218 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005216:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	7a5b      	ldrb	r3, [r3, #9]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d108      	bne.n	8005232 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e007      	b.n	8005242 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005240:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6819      	ldr	r1, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b3b      	ldr	r3, [pc, #236]	; (800533c <HAL_DFSDM_FilterInit+0x1b0>)
 800524e:	400b      	ands	r3, r1
 8005250:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d108      	bne.n	800526c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	7c1b      	ldrb	r3, [r3, #16]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d108      	bne.n	8005286 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0210 	orr.w	r2, r2, #16
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e007      	b.n	8005296 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0210 	bic.w	r2, r2, #16
 8005294:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	7c5b      	ldrb	r3, [r3, #17]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d108      	bne.n	80052b0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0220 	orr.w	r2, r2, #32
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e007      	b.n	80052c0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0220 	bic.w	r2, r2, #32
 80052be:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6959      	ldr	r1, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_DFSDM_FilterInit+0x1b4>)
 80052cc:	400b      	ands	r3, r1
 80052ce:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6959      	ldr	r1, [r3, #20]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	3b01      	subs	r3, #1
 80052e0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80052e2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80052ea:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7c1a      	ldrb	r2, [r3, #16]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40017900 	.word	0x40017900
 800533c:	ffff80f7 	.word	0xffff80f7
 8005340:	1c00ff00 	.word	0x1c00ff00

08005344 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d02c      	beq.n	80053b8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8005364:	2bff      	cmp	r3, #255	; 0xff
 8005366:	d027      	beq.n	80053b8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6819      	ldr	r1, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b16      	ldr	r3, [pc, #88]	; (80053cc <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8005374:	400b      	ands	r3, r1
 8005376:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d10d      	bne.n	800539a <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e00a      	b.n	80053b0 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6819      	ldr	r1, [r3, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
 80053b6:	e001      	b.n	80053bc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	f8fbffff 	.word	0xf8fbffff

080053d0 <HAL_DFSDM_FilterRegularStart>:
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d004      	beq.n	80053f0 <HAL_DFSDM_FilterRegularStart+0x20>
      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d103      	bne.n	80053f8 <HAL_DFSDM_FilterRegularStart+0x28>
  {
    /* Start regular conversion */
    DFSDM_RegConvStart(hdfsdm_filter);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f873 	bl	80054dc <DFSDM_RegConvStart>
 80053f6:	e001      	b.n	80053fc <HAL_DFSDM_FilterRegularStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 0207 	and.w	r2, r3, #7
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005428:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	da00      	bge.n	8005432 <HAL_DFSDM_FilterGetRegularValue+0x2c>
 8005430:	33ff      	adds	r3, #255	; 0xff
 8005432:	121b      	asrs	r3, r3, #8
 8005434:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 8005436:	68bb      	ldr	r3, [r7, #8]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <DFSDM_GetChannelFromInstance+0x7c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d102      	bne.n	800545a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e02b      	b.n	80054b2 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a19      	ldr	r2, [pc, #100]	; (80054c4 <DFSDM_GetChannelFromInstance+0x80>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d102      	bne.n	8005468 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005462:	2301      	movs	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	e024      	b.n	80054b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <DFSDM_GetChannelFromInstance+0x84>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d102      	bne.n	8005476 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005470:	2302      	movs	r3, #2
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e01d      	b.n	80054b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a14      	ldr	r2, [pc, #80]	; (80054cc <DFSDM_GetChannelFromInstance+0x88>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d102      	bne.n	8005484 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800547e:	2303      	movs	r3, #3
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e016      	b.n	80054b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <DFSDM_GetChannelFromInstance+0x8c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d102      	bne.n	8005492 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 800548c:	2304      	movs	r3, #4
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e00f      	b.n	80054b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a0f      	ldr	r2, [pc, #60]	; (80054d4 <DFSDM_GetChannelFromInstance+0x90>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d102      	bne.n	80054a0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800549a:	2305      	movs	r3, #5
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	e008      	b.n	80054b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a0d      	ldr	r2, [pc, #52]	; (80054d8 <DFSDM_GetChannelFromInstance+0x94>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d102      	bne.n	80054ae <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80054a8:	2306      	movs	r3, #6
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e001      	b.n	80054b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80054ae:	2307      	movs	r3, #7
 80054b0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80054b2:	68fb      	ldr	r3, [r7, #12]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	40017800 	.word	0x40017800
 80054c4:	40017820 	.word	0x40017820
 80054c8:	40017840 	.word	0x40017840
 80054cc:	40017860 	.word	0x40017860
 80054d0:	40017880 	.word	0x40017880
 80054d4:	400178a0 	.word	0x400178a0
 80054d8:	400178c0 	.word	0x400178c0

080054dc <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d108      	bne.n	80054fe <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e033      	b.n	8005566 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800551c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005534:	2b03      	cmp	r3, #3
 8005536:	d116      	bne.n	8005566 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	2b00      	cmp	r3, #0
 800553e:	d107      	bne.n	8005550 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0202 	orr.w	r2, r2, #2
 800554e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8005556:	2b01      	cmp	r3, #1
 8005558:	d102      	bne.n	8005560 <DFSDM_RegConvStart+0x84>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	e000      	b.n	8005562 <DFSDM_RegConvStart+0x86>
 8005560:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <DFSDM_RegConvStart+0x98>
 8005570:	2202      	movs	r2, #2
 8005572:	e000      	b.n	8005576 <DFSDM_RegConvStart+0x9a>
 8005574:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005590:	f7fd fae6 	bl	8002b60 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e314      	b.n	8005bca <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a66      	ldr	r2, [pc, #408]	; (8005740 <HAL_DMA_Init+0x1b8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d04a      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a65      	ldr	r2, [pc, #404]	; (8005744 <HAL_DMA_Init+0x1bc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d045      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a63      	ldr	r2, [pc, #396]	; (8005748 <HAL_DMA_Init+0x1c0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d040      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a62      	ldr	r2, [pc, #392]	; (800574c <HAL_DMA_Init+0x1c4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d03b      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a60      	ldr	r2, [pc, #384]	; (8005750 <HAL_DMA_Init+0x1c8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d036      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a5f      	ldr	r2, [pc, #380]	; (8005754 <HAL_DMA_Init+0x1cc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d031      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a5d      	ldr	r2, [pc, #372]	; (8005758 <HAL_DMA_Init+0x1d0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d02c      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a5c      	ldr	r2, [pc, #368]	; (800575c <HAL_DMA_Init+0x1d4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d027      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a5a      	ldr	r2, [pc, #360]	; (8005760 <HAL_DMA_Init+0x1d8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d022      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a59      	ldr	r2, [pc, #356]	; (8005764 <HAL_DMA_Init+0x1dc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d01d      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a57      	ldr	r2, [pc, #348]	; (8005768 <HAL_DMA_Init+0x1e0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d018      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a56      	ldr	r2, [pc, #344]	; (800576c <HAL_DMA_Init+0x1e4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d013      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a54      	ldr	r2, [pc, #336]	; (8005770 <HAL_DMA_Init+0x1e8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00e      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a53      	ldr	r2, [pc, #332]	; (8005774 <HAL_DMA_Init+0x1ec>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a51      	ldr	r2, [pc, #324]	; (8005778 <HAL_DMA_Init+0x1f0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_DMA_Init+0xb8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a50      	ldr	r2, [pc, #320]	; (800577c <HAL_DMA_Init+0x1f4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d101      	bne.n	8005644 <HAL_DMA_Init+0xbc>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <HAL_DMA_Init+0xbe>
 8005644:	2300      	movs	r3, #0
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 813c 	beq.w	80058c4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a37      	ldr	r2, [pc, #220]	; (8005740 <HAL_DMA_Init+0x1b8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d04a      	beq.n	80056fc <HAL_DMA_Init+0x174>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a36      	ldr	r2, [pc, #216]	; (8005744 <HAL_DMA_Init+0x1bc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d045      	beq.n	80056fc <HAL_DMA_Init+0x174>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a34      	ldr	r2, [pc, #208]	; (8005748 <HAL_DMA_Init+0x1c0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d040      	beq.n	80056fc <HAL_DMA_Init+0x174>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a33      	ldr	r2, [pc, #204]	; (800574c <HAL_DMA_Init+0x1c4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d03b      	beq.n	80056fc <HAL_DMA_Init+0x174>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a31      	ldr	r2, [pc, #196]	; (8005750 <HAL_DMA_Init+0x1c8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d036      	beq.n	80056fc <HAL_DMA_Init+0x174>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a30      	ldr	r2, [pc, #192]	; (8005754 <HAL_DMA_Init+0x1cc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d031      	beq.n	80056fc <HAL_DMA_Init+0x174>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a2e      	ldr	r2, [pc, #184]	; (8005758 <HAL_DMA_Init+0x1d0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d02c      	beq.n	80056fc <HAL_DMA_Init+0x174>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a2d      	ldr	r2, [pc, #180]	; (800575c <HAL_DMA_Init+0x1d4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d027      	beq.n	80056fc <HAL_DMA_Init+0x174>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <HAL_DMA_Init+0x1d8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d022      	beq.n	80056fc <HAL_DMA_Init+0x174>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2a      	ldr	r2, [pc, #168]	; (8005764 <HAL_DMA_Init+0x1dc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d01d      	beq.n	80056fc <HAL_DMA_Init+0x174>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a28      	ldr	r2, [pc, #160]	; (8005768 <HAL_DMA_Init+0x1e0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d018      	beq.n	80056fc <HAL_DMA_Init+0x174>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a27      	ldr	r2, [pc, #156]	; (800576c <HAL_DMA_Init+0x1e4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d013      	beq.n	80056fc <HAL_DMA_Init+0x174>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a25      	ldr	r2, [pc, #148]	; (8005770 <HAL_DMA_Init+0x1e8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00e      	beq.n	80056fc <HAL_DMA_Init+0x174>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a24      	ldr	r2, [pc, #144]	; (8005774 <HAL_DMA_Init+0x1ec>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d009      	beq.n	80056fc <HAL_DMA_Init+0x174>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a22      	ldr	r2, [pc, #136]	; (8005778 <HAL_DMA_Init+0x1f0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <HAL_DMA_Init+0x174>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a21      	ldr	r2, [pc, #132]	; (800577c <HAL_DMA_Init+0x1f4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d108      	bne.n	800570e <HAL_DMA_Init+0x186>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	e007      	b.n	800571e <HAL_DMA_Init+0x196>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800571e:	e02f      	b.n	8005780 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005720:	f7fd fa1e 	bl	8002b60 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b05      	cmp	r3, #5
 800572c:	d928      	bls.n	8005780 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2203      	movs	r2, #3
 8005738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e244      	b.n	8005bca <HAL_DMA_Init+0x642>
 8005740:	40020010 	.word	0x40020010
 8005744:	40020028 	.word	0x40020028
 8005748:	40020040 	.word	0x40020040
 800574c:	40020058 	.word	0x40020058
 8005750:	40020070 	.word	0x40020070
 8005754:	40020088 	.word	0x40020088
 8005758:	400200a0 	.word	0x400200a0
 800575c:	400200b8 	.word	0x400200b8
 8005760:	40020410 	.word	0x40020410
 8005764:	40020428 	.word	0x40020428
 8005768:	40020440 	.word	0x40020440
 800576c:	40020458 	.word	0x40020458
 8005770:	40020470 	.word	0x40020470
 8005774:	40020488 	.word	0x40020488
 8005778:	400204a0 	.word	0x400204a0
 800577c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1c8      	bne.n	8005720 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4b84      	ldr	r3, [pc, #528]	; (80059ac <HAL_DMA_Init+0x424>)
 800579a:	4013      	ands	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80057a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d107      	bne.n	80057e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057dc:	4313      	orrs	r3, r2
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b28      	cmp	r3, #40	; 0x28
 80057ea:	d903      	bls.n	80057f4 <HAL_DMA_Init+0x26c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b2e      	cmp	r3, #46	; 0x2e
 80057f2:	d91f      	bls.n	8005834 <HAL_DMA_Init+0x2ac>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b3e      	cmp	r3, #62	; 0x3e
 80057fa:	d903      	bls.n	8005804 <HAL_DMA_Init+0x27c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b42      	cmp	r3, #66	; 0x42
 8005802:	d917      	bls.n	8005834 <HAL_DMA_Init+0x2ac>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b46      	cmp	r3, #70	; 0x46
 800580a:	d903      	bls.n	8005814 <HAL_DMA_Init+0x28c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b48      	cmp	r3, #72	; 0x48
 8005812:	d90f      	bls.n	8005834 <HAL_DMA_Init+0x2ac>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b4e      	cmp	r3, #78	; 0x4e
 800581a:	d903      	bls.n	8005824 <HAL_DMA_Init+0x29c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b52      	cmp	r3, #82	; 0x52
 8005822:	d907      	bls.n	8005834 <HAL_DMA_Init+0x2ac>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b73      	cmp	r3, #115	; 0x73
 800582a:	d905      	bls.n	8005838 <HAL_DMA_Init+0x2b0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b77      	cmp	r3, #119	; 0x77
 8005832:	d801      	bhi.n	8005838 <HAL_DMA_Init+0x2b0>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <HAL_DMA_Init+0x2b2>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005844:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f023 0307 	bic.w	r3, r3, #7
 800585c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2b04      	cmp	r3, #4
 800586e:	d117      	bne.n	80058a0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00e      	beq.n	80058a0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 fdcc 	bl	8007420 <DMA_CheckFifoParam>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2240      	movs	r2, #64	; 0x40
 8005892:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e194      	b.n	8005bca <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 fd07 	bl	80072bc <DMA_CalcBaseAndBitshift>
 80058ae:	4603      	mov	r3, r0
 80058b0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	223f      	movs	r2, #63	; 0x3f
 80058bc:	409a      	lsls	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	609a      	str	r2, [r3, #8]
 80058c2:	e0ca      	b.n	8005a5a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a39      	ldr	r2, [pc, #228]	; (80059b0 <HAL_DMA_Init+0x428>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d022      	beq.n	8005914 <HAL_DMA_Init+0x38c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a38      	ldr	r2, [pc, #224]	; (80059b4 <HAL_DMA_Init+0x42c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d01d      	beq.n	8005914 <HAL_DMA_Init+0x38c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a36      	ldr	r2, [pc, #216]	; (80059b8 <HAL_DMA_Init+0x430>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d018      	beq.n	8005914 <HAL_DMA_Init+0x38c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a35      	ldr	r2, [pc, #212]	; (80059bc <HAL_DMA_Init+0x434>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d013      	beq.n	8005914 <HAL_DMA_Init+0x38c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a33      	ldr	r2, [pc, #204]	; (80059c0 <HAL_DMA_Init+0x438>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00e      	beq.n	8005914 <HAL_DMA_Init+0x38c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a32      	ldr	r2, [pc, #200]	; (80059c4 <HAL_DMA_Init+0x43c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_DMA_Init+0x38c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a30      	ldr	r2, [pc, #192]	; (80059c8 <HAL_DMA_Init+0x440>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_DMA_Init+0x38c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <HAL_DMA_Init+0x444>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d101      	bne.n	8005918 <HAL_DMA_Init+0x390>
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <HAL_DMA_Init+0x392>
 8005918:	2300      	movs	r3, #0
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8094 	beq.w	8005a48 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <HAL_DMA_Init+0x428>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d021      	beq.n	800596e <HAL_DMA_Init+0x3e6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <HAL_DMA_Init+0x42c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01c      	beq.n	800596e <HAL_DMA_Init+0x3e6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <HAL_DMA_Init+0x430>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d017      	beq.n	800596e <HAL_DMA_Init+0x3e6>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <HAL_DMA_Init+0x434>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d012      	beq.n	800596e <HAL_DMA_Init+0x3e6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <HAL_DMA_Init+0x438>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00d      	beq.n	800596e <HAL_DMA_Init+0x3e6>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_DMA_Init+0x43c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d008      	beq.n	800596e <HAL_DMA_Init+0x3e6>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <HAL_DMA_Init+0x440>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <HAL_DMA_Init+0x3e6>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_DMA_Init+0x444>)
 800596c:	4293      	cmp	r3, r2
 800596e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <HAL_DMA_Init+0x448>)
 800598c:	4013      	ands	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d01d      	beq.n	80059d4 <HAL_DMA_Init+0x44c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b80      	cmp	r3, #128	; 0x80
 800599e:	d102      	bne.n	80059a6 <HAL_DMA_Init+0x41e>
 80059a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059a4:	e017      	b.n	80059d6 <HAL_DMA_Init+0x44e>
 80059a6:	2300      	movs	r3, #0
 80059a8:	e015      	b.n	80059d6 <HAL_DMA_Init+0x44e>
 80059aa:	bf00      	nop
 80059ac:	fe10803f 	.word	0xfe10803f
 80059b0:	58025408 	.word	0x58025408
 80059b4:	5802541c 	.word	0x5802541c
 80059b8:	58025430 	.word	0x58025430
 80059bc:	58025444 	.word	0x58025444
 80059c0:	58025458 	.word	0x58025458
 80059c4:	5802546c 	.word	0x5802546c
 80059c8:	58025480 	.word	0x58025480
 80059cc:	58025494 	.word	0x58025494
 80059d0:	fffe000f 	.word	0xfffe000f
 80059d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	68d2      	ldr	r2, [r2, #12]
 80059da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80059e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80059ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80059f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80059fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a04:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4b6e      	ldr	r3, [pc, #440]	; (8005bd4 <HAL_DMA_Init+0x64c>)
 8005a1c:	4413      	add	r3, r2
 8005a1e:	4a6e      	ldr	r2, [pc, #440]	; (8005bd8 <HAL_DMA_Init+0x650>)
 8005a20:	fba2 2303 	umull	r2, r3, r2, r3
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	009a      	lsls	r2, r3, #2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 fc45 	bl	80072bc <DMA_CalcBaseAndBitshift>
 8005a32:	4603      	mov	r3, r0
 8005a34:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2201      	movs	r2, #1
 8005a40:	409a      	lsls	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	e008      	b.n	8005a5a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2240      	movs	r2, #64	; 0x40
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2203      	movs	r2, #3
 8005a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e0b7      	b.n	8005bca <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a5f      	ldr	r2, [pc, #380]	; (8005bdc <HAL_DMA_Init+0x654>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d072      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a5d      	ldr	r2, [pc, #372]	; (8005be0 <HAL_DMA_Init+0x658>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d06d      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a5c      	ldr	r2, [pc, #368]	; (8005be4 <HAL_DMA_Init+0x65c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d068      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a5a      	ldr	r2, [pc, #360]	; (8005be8 <HAL_DMA_Init+0x660>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d063      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a59      	ldr	r2, [pc, #356]	; (8005bec <HAL_DMA_Init+0x664>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d05e      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a57      	ldr	r2, [pc, #348]	; (8005bf0 <HAL_DMA_Init+0x668>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d059      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a56      	ldr	r2, [pc, #344]	; (8005bf4 <HAL_DMA_Init+0x66c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d054      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a54      	ldr	r2, [pc, #336]	; (8005bf8 <HAL_DMA_Init+0x670>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d04f      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a53      	ldr	r2, [pc, #332]	; (8005bfc <HAL_DMA_Init+0x674>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d04a      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a51      	ldr	r2, [pc, #324]	; (8005c00 <HAL_DMA_Init+0x678>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d045      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a50      	ldr	r2, [pc, #320]	; (8005c04 <HAL_DMA_Init+0x67c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d040      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a4e      	ldr	r2, [pc, #312]	; (8005c08 <HAL_DMA_Init+0x680>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d03b      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a4d      	ldr	r2, [pc, #308]	; (8005c0c <HAL_DMA_Init+0x684>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d036      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a4b      	ldr	r2, [pc, #300]	; (8005c10 <HAL_DMA_Init+0x688>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d031      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a4a      	ldr	r2, [pc, #296]	; (8005c14 <HAL_DMA_Init+0x68c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d02c      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a48      	ldr	r2, [pc, #288]	; (8005c18 <HAL_DMA_Init+0x690>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d027      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a47      	ldr	r2, [pc, #284]	; (8005c1c <HAL_DMA_Init+0x694>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d022      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a45      	ldr	r2, [pc, #276]	; (8005c20 <HAL_DMA_Init+0x698>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01d      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a44      	ldr	r2, [pc, #272]	; (8005c24 <HAL_DMA_Init+0x69c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d018      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a42      	ldr	r2, [pc, #264]	; (8005c28 <HAL_DMA_Init+0x6a0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a41      	ldr	r2, [pc, #260]	; (8005c2c <HAL_DMA_Init+0x6a4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00e      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3f      	ldr	r2, [pc, #252]	; (8005c30 <HAL_DMA_Init+0x6a8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a3e      	ldr	r2, [pc, #248]	; (8005c34 <HAL_DMA_Init+0x6ac>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_DMA_Init+0x5c2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a3c      	ldr	r2, [pc, #240]	; (8005c38 <HAL_DMA_Init+0x6b0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d101      	bne.n	8005b4e <HAL_DMA_Init+0x5c6>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <HAL_DMA_Init+0x5c8>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d032      	beq.n	8005bba <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 fcdf 	bl	8007518 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d102      	bne.n	8005b68 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b7c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d010      	beq.n	8005ba8 <HAL_DMA_Init+0x620>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d80c      	bhi.n	8005ba8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f001 fd5c 	bl	800764c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	e008      	b.n	8005bba <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	a7fdabf8 	.word	0xa7fdabf8
 8005bd8:	cccccccd 	.word	0xcccccccd
 8005bdc:	40020010 	.word	0x40020010
 8005be0:	40020028 	.word	0x40020028
 8005be4:	40020040 	.word	0x40020040
 8005be8:	40020058 	.word	0x40020058
 8005bec:	40020070 	.word	0x40020070
 8005bf0:	40020088 	.word	0x40020088
 8005bf4:	400200a0 	.word	0x400200a0
 8005bf8:	400200b8 	.word	0x400200b8
 8005bfc:	40020410 	.word	0x40020410
 8005c00:	40020428 	.word	0x40020428
 8005c04:	40020440 	.word	0x40020440
 8005c08:	40020458 	.word	0x40020458
 8005c0c:	40020470 	.word	0x40020470
 8005c10:	40020488 	.word	0x40020488
 8005c14:	400204a0 	.word	0x400204a0
 8005c18:	400204b8 	.word	0x400204b8
 8005c1c:	58025408 	.word	0x58025408
 8005c20:	5802541c 	.word	0x5802541c
 8005c24:	58025430 	.word	0x58025430
 8005c28:	58025444 	.word	0x58025444
 8005c2c:	58025458 	.word	0x58025458
 8005c30:	5802546c 	.word	0x5802546c
 8005c34:	58025480 	.word	0x58025480
 8005c38:	58025494 	.word	0x58025494

08005c3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e226      	b.n	80060a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_DMA_Start_IT+0x2a>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e21f      	b.n	80060a6 <HAL_DMA_Start_IT+0x46a>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	f040 820a 	bne.w	8006090 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a68      	ldr	r2, [pc, #416]	; (8005e30 <HAL_DMA_Start_IT+0x1f4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d04a      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a66      	ldr	r2, [pc, #408]	; (8005e34 <HAL_DMA_Start_IT+0x1f8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d045      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a65      	ldr	r2, [pc, #404]	; (8005e38 <HAL_DMA_Start_IT+0x1fc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d040      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a63      	ldr	r2, [pc, #396]	; (8005e3c <HAL_DMA_Start_IT+0x200>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d03b      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a62      	ldr	r2, [pc, #392]	; (8005e40 <HAL_DMA_Start_IT+0x204>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d036      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a60      	ldr	r2, [pc, #384]	; (8005e44 <HAL_DMA_Start_IT+0x208>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d031      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a5f      	ldr	r2, [pc, #380]	; (8005e48 <HAL_DMA_Start_IT+0x20c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d02c      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a5d      	ldr	r2, [pc, #372]	; (8005e4c <HAL_DMA_Start_IT+0x210>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d027      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a5c      	ldr	r2, [pc, #368]	; (8005e50 <HAL_DMA_Start_IT+0x214>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d022      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a5a      	ldr	r2, [pc, #360]	; (8005e54 <HAL_DMA_Start_IT+0x218>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d01d      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a59      	ldr	r2, [pc, #356]	; (8005e58 <HAL_DMA_Start_IT+0x21c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d018      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a57      	ldr	r2, [pc, #348]	; (8005e5c <HAL_DMA_Start_IT+0x220>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d013      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a56      	ldr	r2, [pc, #344]	; (8005e60 <HAL_DMA_Start_IT+0x224>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00e      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a54      	ldr	r2, [pc, #336]	; (8005e64 <HAL_DMA_Start_IT+0x228>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d009      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a53      	ldr	r2, [pc, #332]	; (8005e68 <HAL_DMA_Start_IT+0x22c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d004      	beq.n	8005d2a <HAL_DMA_Start_IT+0xee>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a51      	ldr	r2, [pc, #324]	; (8005e6c <HAL_DMA_Start_IT+0x230>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d108      	bne.n	8005d3c <HAL_DMA_Start_IT+0x100>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0201 	bic.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e007      	b.n	8005d4c <HAL_DMA_Start_IT+0x110>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0201 	bic.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f001 f906 	bl	8006f64 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a34      	ldr	r2, [pc, #208]	; (8005e30 <HAL_DMA_Start_IT+0x1f4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d04a      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a33      	ldr	r2, [pc, #204]	; (8005e34 <HAL_DMA_Start_IT+0x1f8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d045      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a31      	ldr	r2, [pc, #196]	; (8005e38 <HAL_DMA_Start_IT+0x1fc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d040      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a30      	ldr	r2, [pc, #192]	; (8005e3c <HAL_DMA_Start_IT+0x200>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d03b      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2e      	ldr	r2, [pc, #184]	; (8005e40 <HAL_DMA_Start_IT+0x204>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d036      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a2d      	ldr	r2, [pc, #180]	; (8005e44 <HAL_DMA_Start_IT+0x208>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d031      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2b      	ldr	r2, [pc, #172]	; (8005e48 <HAL_DMA_Start_IT+0x20c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d02c      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2a      	ldr	r2, [pc, #168]	; (8005e4c <HAL_DMA_Start_IT+0x210>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d027      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a28      	ldr	r2, [pc, #160]	; (8005e50 <HAL_DMA_Start_IT+0x214>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d022      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a27      	ldr	r2, [pc, #156]	; (8005e54 <HAL_DMA_Start_IT+0x218>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d01d      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a25      	ldr	r2, [pc, #148]	; (8005e58 <HAL_DMA_Start_IT+0x21c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d018      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a24      	ldr	r2, [pc, #144]	; (8005e5c <HAL_DMA_Start_IT+0x220>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <HAL_DMA_Start_IT+0x224>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00e      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <HAL_DMA_Start_IT+0x228>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d009      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <HAL_DMA_Start_IT+0x22c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_DMA_Start_IT+0x1bc>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1e      	ldr	r2, [pc, #120]	; (8005e6c <HAL_DMA_Start_IT+0x230>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d101      	bne.n	8005dfc <HAL_DMA_Start_IT+0x1c0>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <HAL_DMA_Start_IT+0x1c2>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d036      	beq.n	8005e70 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f023 021e 	bic.w	r2, r3, #30
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0216 	orr.w	r2, r2, #22
 8005e14:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d03e      	beq.n	8005e9c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0208 	orr.w	r2, r2, #8
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e035      	b.n	8005e9c <HAL_DMA_Start_IT+0x260>
 8005e30:	40020010 	.word	0x40020010
 8005e34:	40020028 	.word	0x40020028
 8005e38:	40020040 	.word	0x40020040
 8005e3c:	40020058 	.word	0x40020058
 8005e40:	40020070 	.word	0x40020070
 8005e44:	40020088 	.word	0x40020088
 8005e48:	400200a0 	.word	0x400200a0
 8005e4c:	400200b8 	.word	0x400200b8
 8005e50:	40020410 	.word	0x40020410
 8005e54:	40020428 	.word	0x40020428
 8005e58:	40020440 	.word	0x40020440
 8005e5c:	40020458 	.word	0x40020458
 8005e60:	40020470 	.word	0x40020470
 8005e64:	40020488 	.word	0x40020488
 8005e68:	400204a0 	.word	0x400204a0
 8005e6c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f023 020e 	bic.w	r2, r3, #14
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 020a 	orr.w	r2, r2, #10
 8005e82:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0204 	orr.w	r2, r2, #4
 8005e9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a83      	ldr	r2, [pc, #524]	; (80060b0 <HAL_DMA_Start_IT+0x474>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d072      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a82      	ldr	r2, [pc, #520]	; (80060b4 <HAL_DMA_Start_IT+0x478>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d06d      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a80      	ldr	r2, [pc, #512]	; (80060b8 <HAL_DMA_Start_IT+0x47c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d068      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a7f      	ldr	r2, [pc, #508]	; (80060bc <HAL_DMA_Start_IT+0x480>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d063      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a7d      	ldr	r2, [pc, #500]	; (80060c0 <HAL_DMA_Start_IT+0x484>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d05e      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a7c      	ldr	r2, [pc, #496]	; (80060c4 <HAL_DMA_Start_IT+0x488>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d059      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a7a      	ldr	r2, [pc, #488]	; (80060c8 <HAL_DMA_Start_IT+0x48c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d054      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a79      	ldr	r2, [pc, #484]	; (80060cc <HAL_DMA_Start_IT+0x490>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d04f      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a77      	ldr	r2, [pc, #476]	; (80060d0 <HAL_DMA_Start_IT+0x494>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d04a      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a76      	ldr	r2, [pc, #472]	; (80060d4 <HAL_DMA_Start_IT+0x498>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d045      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a74      	ldr	r2, [pc, #464]	; (80060d8 <HAL_DMA_Start_IT+0x49c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d040      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a73      	ldr	r2, [pc, #460]	; (80060dc <HAL_DMA_Start_IT+0x4a0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d03b      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a71      	ldr	r2, [pc, #452]	; (80060e0 <HAL_DMA_Start_IT+0x4a4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d036      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a70      	ldr	r2, [pc, #448]	; (80060e4 <HAL_DMA_Start_IT+0x4a8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d031      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a6e      	ldr	r2, [pc, #440]	; (80060e8 <HAL_DMA_Start_IT+0x4ac>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d02c      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a6d      	ldr	r2, [pc, #436]	; (80060ec <HAL_DMA_Start_IT+0x4b0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d027      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a6b      	ldr	r2, [pc, #428]	; (80060f0 <HAL_DMA_Start_IT+0x4b4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d022      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a6a      	ldr	r2, [pc, #424]	; (80060f4 <HAL_DMA_Start_IT+0x4b8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d01d      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a68      	ldr	r2, [pc, #416]	; (80060f8 <HAL_DMA_Start_IT+0x4bc>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d018      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a67      	ldr	r2, [pc, #412]	; (80060fc <HAL_DMA_Start_IT+0x4c0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d013      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a65      	ldr	r2, [pc, #404]	; (8006100 <HAL_DMA_Start_IT+0x4c4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00e      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a64      	ldr	r2, [pc, #400]	; (8006104 <HAL_DMA_Start_IT+0x4c8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d009      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a62      	ldr	r2, [pc, #392]	; (8006108 <HAL_DMA_Start_IT+0x4cc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d004      	beq.n	8005f8c <HAL_DMA_Start_IT+0x350>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a61      	ldr	r2, [pc, #388]	; (800610c <HAL_DMA_Start_IT+0x4d0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d101      	bne.n	8005f90 <HAL_DMA_Start_IT+0x354>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <HAL_DMA_Start_IT+0x356>
 8005f90:	2300      	movs	r3, #0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01a      	beq.n	8005fcc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d007      	beq.n	8005fb4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a37      	ldr	r2, [pc, #220]	; (80060b0 <HAL_DMA_Start_IT+0x474>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d04a      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a36      	ldr	r2, [pc, #216]	; (80060b4 <HAL_DMA_Start_IT+0x478>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d045      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a34      	ldr	r2, [pc, #208]	; (80060b8 <HAL_DMA_Start_IT+0x47c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d040      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a33      	ldr	r2, [pc, #204]	; (80060bc <HAL_DMA_Start_IT+0x480>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d03b      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a31      	ldr	r2, [pc, #196]	; (80060c0 <HAL_DMA_Start_IT+0x484>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d036      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a30      	ldr	r2, [pc, #192]	; (80060c4 <HAL_DMA_Start_IT+0x488>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d031      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2e      	ldr	r2, [pc, #184]	; (80060c8 <HAL_DMA_Start_IT+0x48c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d02c      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a2d      	ldr	r2, [pc, #180]	; (80060cc <HAL_DMA_Start_IT+0x490>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d027      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a2b      	ldr	r2, [pc, #172]	; (80060d0 <HAL_DMA_Start_IT+0x494>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a2a      	ldr	r2, [pc, #168]	; (80060d4 <HAL_DMA_Start_IT+0x498>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d01d      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a28      	ldr	r2, [pc, #160]	; (80060d8 <HAL_DMA_Start_IT+0x49c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a27      	ldr	r2, [pc, #156]	; (80060dc <HAL_DMA_Start_IT+0x4a0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a25      	ldr	r2, [pc, #148]	; (80060e0 <HAL_DMA_Start_IT+0x4a4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a24      	ldr	r2, [pc, #144]	; (80060e4 <HAL_DMA_Start_IT+0x4a8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <HAL_DMA_Start_IT+0x4ac>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_DMA_Start_IT+0x430>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a21      	ldr	r2, [pc, #132]	; (80060ec <HAL_DMA_Start_IT+0x4b0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d108      	bne.n	800607e <HAL_DMA_Start_IT+0x442>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	e012      	b.n	80060a4 <HAL_DMA_Start_IT+0x468>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0201 	orr.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e009      	b.n	80060a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800609e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40020010 	.word	0x40020010
 80060b4:	40020028 	.word	0x40020028
 80060b8:	40020040 	.word	0x40020040
 80060bc:	40020058 	.word	0x40020058
 80060c0:	40020070 	.word	0x40020070
 80060c4:	40020088 	.word	0x40020088
 80060c8:	400200a0 	.word	0x400200a0
 80060cc:	400200b8 	.word	0x400200b8
 80060d0:	40020410 	.word	0x40020410
 80060d4:	40020428 	.word	0x40020428
 80060d8:	40020440 	.word	0x40020440
 80060dc:	40020458 	.word	0x40020458
 80060e0:	40020470 	.word	0x40020470
 80060e4:	40020488 	.word	0x40020488
 80060e8:	400204a0 	.word	0x400204a0
 80060ec:	400204b8 	.word	0x400204b8
 80060f0:	58025408 	.word	0x58025408
 80060f4:	5802541c 	.word	0x5802541c
 80060f8:	58025430 	.word	0x58025430
 80060fc:	58025444 	.word	0x58025444
 8006100:	58025458 	.word	0x58025458
 8006104:	5802546c 	.word	0x5802546c
 8006108:	58025480 	.word	0x58025480
 800610c:	58025494 	.word	0x58025494

08006110 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800611c:	4b67      	ldr	r3, [pc, #412]	; (80062bc <HAL_DMA_IRQHandler+0x1ac>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a67      	ldr	r2, [pc, #412]	; (80062c0 <HAL_DMA_IRQHandler+0x1b0>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	0a9b      	lsrs	r3, r3, #10
 8006128:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006134:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a5f      	ldr	r2, [pc, #380]	; (80062c4 <HAL_DMA_IRQHandler+0x1b4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d04a      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a5d      	ldr	r2, [pc, #372]	; (80062c8 <HAL_DMA_IRQHandler+0x1b8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d045      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a5c      	ldr	r2, [pc, #368]	; (80062cc <HAL_DMA_IRQHandler+0x1bc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d040      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a5a      	ldr	r2, [pc, #360]	; (80062d0 <HAL_DMA_IRQHandler+0x1c0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d03b      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a59      	ldr	r2, [pc, #356]	; (80062d4 <HAL_DMA_IRQHandler+0x1c4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d036      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a57      	ldr	r2, [pc, #348]	; (80062d8 <HAL_DMA_IRQHandler+0x1c8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d031      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a56      	ldr	r2, [pc, #344]	; (80062dc <HAL_DMA_IRQHandler+0x1cc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d02c      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a54      	ldr	r2, [pc, #336]	; (80062e0 <HAL_DMA_IRQHandler+0x1d0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d027      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a53      	ldr	r2, [pc, #332]	; (80062e4 <HAL_DMA_IRQHandler+0x1d4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d022      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a51      	ldr	r2, [pc, #324]	; (80062e8 <HAL_DMA_IRQHandler+0x1d8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01d      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a50      	ldr	r2, [pc, #320]	; (80062ec <HAL_DMA_IRQHandler+0x1dc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d018      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a4e      	ldr	r2, [pc, #312]	; (80062f0 <HAL_DMA_IRQHandler+0x1e0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a4d      	ldr	r2, [pc, #308]	; (80062f4 <HAL_DMA_IRQHandler+0x1e4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00e      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a4b      	ldr	r2, [pc, #300]	; (80062f8 <HAL_DMA_IRQHandler+0x1e8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a4a      	ldr	r2, [pc, #296]	; (80062fc <HAL_DMA_IRQHandler+0x1ec>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xd2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a48      	ldr	r2, [pc, #288]	; (8006300 <HAL_DMA_IRQHandler+0x1f0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d101      	bne.n	80061e6 <HAL_DMA_IRQHandler+0xd6>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <HAL_DMA_IRQHandler+0xd8>
 80061e6:	2300      	movs	r3, #0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 842b 	beq.w	8006a44 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f2:	f003 031f 	and.w	r3, r3, #31
 80061f6:	2208      	movs	r2, #8
 80061f8:	409a      	lsls	r2, r3
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	4013      	ands	r3, r2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 80a2 	beq.w	8006348 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a2e      	ldr	r2, [pc, #184]	; (80062c4 <HAL_DMA_IRQHandler+0x1b4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d04a      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a2d      	ldr	r2, [pc, #180]	; (80062c8 <HAL_DMA_IRQHandler+0x1b8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d045      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <HAL_DMA_IRQHandler+0x1bc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d040      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2a      	ldr	r2, [pc, #168]	; (80062d0 <HAL_DMA_IRQHandler+0x1c0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d03b      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a28      	ldr	r2, [pc, #160]	; (80062d4 <HAL_DMA_IRQHandler+0x1c4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d036      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <HAL_DMA_IRQHandler+0x1c8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d031      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a25      	ldr	r2, [pc, #148]	; (80062dc <HAL_DMA_IRQHandler+0x1cc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d02c      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a24      	ldr	r2, [pc, #144]	; (80062e0 <HAL_DMA_IRQHandler+0x1d0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d027      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a22      	ldr	r2, [pc, #136]	; (80062e4 <HAL_DMA_IRQHandler+0x1d4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d022      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a21      	ldr	r2, [pc, #132]	; (80062e8 <HAL_DMA_IRQHandler+0x1d8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d01d      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1f      	ldr	r2, [pc, #124]	; (80062ec <HAL_DMA_IRQHandler+0x1dc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d018      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <HAL_DMA_IRQHandler+0x1e0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1c      	ldr	r2, [pc, #112]	; (80062f4 <HAL_DMA_IRQHandler+0x1e4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00e      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1b      	ldr	r2, [pc, #108]	; (80062f8 <HAL_DMA_IRQHandler+0x1e8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d009      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a19      	ldr	r2, [pc, #100]	; (80062fc <HAL_DMA_IRQHandler+0x1ec>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x194>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a18      	ldr	r2, [pc, #96]	; (8006300 <HAL_DMA_IRQHandler+0x1f0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d12f      	bne.n	8006304 <HAL_DMA_IRQHandler+0x1f4>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bf14      	ite	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	2300      	moveq	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	e02e      	b.n	8006318 <HAL_DMA_IRQHandler+0x208>
 80062ba:	bf00      	nop
 80062bc:	24000008 	.word	0x24000008
 80062c0:	1b4e81b5 	.word	0x1b4e81b5
 80062c4:	40020010 	.word	0x40020010
 80062c8:	40020028 	.word	0x40020028
 80062cc:	40020040 	.word	0x40020040
 80062d0:	40020058 	.word	0x40020058
 80062d4:	40020070 	.word	0x40020070
 80062d8:	40020088 	.word	0x40020088
 80062dc:	400200a0 	.word	0x400200a0
 80062e0:	400200b8 	.word	0x400200b8
 80062e4:	40020410 	.word	0x40020410
 80062e8:	40020428 	.word	0x40020428
 80062ec:	40020440 	.word	0x40020440
 80062f0:	40020458 	.word	0x40020458
 80062f4:	40020470 	.word	0x40020470
 80062f8:	40020488 	.word	0x40020488
 80062fc:	400204a0 	.word	0x400204a0
 8006300:	400204b8 	.word	0x400204b8
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	bf14      	ite	ne
 8006312:	2301      	movne	r3, #1
 8006314:	2300      	moveq	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d015      	beq.n	8006348 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0204 	bic.w	r2, r2, #4
 800632a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006330:	f003 031f 	and.w	r3, r3, #31
 8006334:	2208      	movs	r2, #8
 8006336:	409a      	lsls	r2, r3
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	f043 0201 	orr.w	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634c:	f003 031f 	and.w	r3, r3, #31
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	fa22 f303 	lsr.w	r3, r2, r3
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d06e      	beq.n	800643c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a69      	ldr	r2, [pc, #420]	; (8006508 <HAL_DMA_IRQHandler+0x3f8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d04a      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a67      	ldr	r2, [pc, #412]	; (800650c <HAL_DMA_IRQHandler+0x3fc>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d045      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a66      	ldr	r2, [pc, #408]	; (8006510 <HAL_DMA_IRQHandler+0x400>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d040      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a64      	ldr	r2, [pc, #400]	; (8006514 <HAL_DMA_IRQHandler+0x404>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d03b      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a63      	ldr	r2, [pc, #396]	; (8006518 <HAL_DMA_IRQHandler+0x408>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d036      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a61      	ldr	r2, [pc, #388]	; (800651c <HAL_DMA_IRQHandler+0x40c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d031      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a60      	ldr	r2, [pc, #384]	; (8006520 <HAL_DMA_IRQHandler+0x410>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d02c      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a5e      	ldr	r2, [pc, #376]	; (8006524 <HAL_DMA_IRQHandler+0x414>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d027      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a5d      	ldr	r2, [pc, #372]	; (8006528 <HAL_DMA_IRQHandler+0x418>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d022      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a5b      	ldr	r2, [pc, #364]	; (800652c <HAL_DMA_IRQHandler+0x41c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d01d      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a5a      	ldr	r2, [pc, #360]	; (8006530 <HAL_DMA_IRQHandler+0x420>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d018      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a58      	ldr	r2, [pc, #352]	; (8006534 <HAL_DMA_IRQHandler+0x424>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a57      	ldr	r2, [pc, #348]	; (8006538 <HAL_DMA_IRQHandler+0x428>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a55      	ldr	r2, [pc, #340]	; (800653c <HAL_DMA_IRQHandler+0x42c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a54      	ldr	r2, [pc, #336]	; (8006540 <HAL_DMA_IRQHandler+0x430>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_DMA_IRQHandler+0x2ee>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a52      	ldr	r2, [pc, #328]	; (8006544 <HAL_DMA_IRQHandler+0x434>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d10a      	bne.n	8006414 <HAL_DMA_IRQHandler+0x304>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006408:	2b00      	cmp	r3, #0
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	e003      	b.n	800641c <HAL_DMA_IRQHandler+0x30c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00d      	beq.n	800643c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006424:	f003 031f 	and.w	r3, r3, #31
 8006428:	2201      	movs	r2, #1
 800642a:	409a      	lsls	r2, r3
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006434:	f043 0202 	orr.w	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	2204      	movs	r2, #4
 8006446:	409a      	lsls	r2, r3
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 808f 	beq.w	8006570 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2c      	ldr	r2, [pc, #176]	; (8006508 <HAL_DMA_IRQHandler+0x3f8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d04a      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a2a      	ldr	r2, [pc, #168]	; (800650c <HAL_DMA_IRQHandler+0x3fc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d045      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a29      	ldr	r2, [pc, #164]	; (8006510 <HAL_DMA_IRQHandler+0x400>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d040      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a27      	ldr	r2, [pc, #156]	; (8006514 <HAL_DMA_IRQHandler+0x404>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d03b      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a26      	ldr	r2, [pc, #152]	; (8006518 <HAL_DMA_IRQHandler+0x408>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d036      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a24      	ldr	r2, [pc, #144]	; (800651c <HAL_DMA_IRQHandler+0x40c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d031      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a23      	ldr	r2, [pc, #140]	; (8006520 <HAL_DMA_IRQHandler+0x410>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d02c      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a21      	ldr	r2, [pc, #132]	; (8006524 <HAL_DMA_IRQHandler+0x414>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d027      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a20      	ldr	r2, [pc, #128]	; (8006528 <HAL_DMA_IRQHandler+0x418>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d022      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1e      	ldr	r2, [pc, #120]	; (800652c <HAL_DMA_IRQHandler+0x41c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01d      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1d      	ldr	r2, [pc, #116]	; (8006530 <HAL_DMA_IRQHandler+0x420>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d018      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1b      	ldr	r2, [pc, #108]	; (8006534 <HAL_DMA_IRQHandler+0x424>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1a      	ldr	r2, [pc, #104]	; (8006538 <HAL_DMA_IRQHandler+0x428>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a18      	ldr	r2, [pc, #96]	; (800653c <HAL_DMA_IRQHandler+0x42c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a17      	ldr	r2, [pc, #92]	; (8006540 <HAL_DMA_IRQHandler+0x430>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x3e2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a15      	ldr	r2, [pc, #84]	; (8006544 <HAL_DMA_IRQHandler+0x434>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d12a      	bne.n	8006548 <HAL_DMA_IRQHandler+0x438>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf14      	ite	ne
 8006500:	2301      	movne	r3, #1
 8006502:	2300      	moveq	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	e023      	b.n	8006550 <HAL_DMA_IRQHandler+0x440>
 8006508:	40020010 	.word	0x40020010
 800650c:	40020028 	.word	0x40020028
 8006510:	40020040 	.word	0x40020040
 8006514:	40020058 	.word	0x40020058
 8006518:	40020070 	.word	0x40020070
 800651c:	40020088 	.word	0x40020088
 8006520:	400200a0 	.word	0x400200a0
 8006524:	400200b8 	.word	0x400200b8
 8006528:	40020410 	.word	0x40020410
 800652c:	40020428 	.word	0x40020428
 8006530:	40020440 	.word	0x40020440
 8006534:	40020458 	.word	0x40020458
 8006538:	40020470 	.word	0x40020470
 800653c:	40020488 	.word	0x40020488
 8006540:	400204a0 	.word	0x400204a0
 8006544:	400204b8 	.word	0x400204b8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00d      	beq.n	8006570 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006558:	f003 031f 	and.w	r3, r3, #31
 800655c:	2204      	movs	r2, #4
 800655e:	409a      	lsls	r2, r3
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006568:	f043 0204 	orr.w	r2, r3, #4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006574:	f003 031f 	and.w	r3, r3, #31
 8006578:	2210      	movs	r2, #16
 800657a:	409a      	lsls	r2, r3
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	4013      	ands	r3, r2
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80a6 	beq.w	80066d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a85      	ldr	r2, [pc, #532]	; (80067a0 <HAL_DMA_IRQHandler+0x690>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d04a      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a83      	ldr	r2, [pc, #524]	; (80067a4 <HAL_DMA_IRQHandler+0x694>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d045      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a82      	ldr	r2, [pc, #520]	; (80067a8 <HAL_DMA_IRQHandler+0x698>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d040      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a80      	ldr	r2, [pc, #512]	; (80067ac <HAL_DMA_IRQHandler+0x69c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d03b      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a7f      	ldr	r2, [pc, #508]	; (80067b0 <HAL_DMA_IRQHandler+0x6a0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d036      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a7d      	ldr	r2, [pc, #500]	; (80067b4 <HAL_DMA_IRQHandler+0x6a4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d031      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a7c      	ldr	r2, [pc, #496]	; (80067b8 <HAL_DMA_IRQHandler+0x6a8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d02c      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a7a      	ldr	r2, [pc, #488]	; (80067bc <HAL_DMA_IRQHandler+0x6ac>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d027      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a79      	ldr	r2, [pc, #484]	; (80067c0 <HAL_DMA_IRQHandler+0x6b0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d022      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a77      	ldr	r2, [pc, #476]	; (80067c4 <HAL_DMA_IRQHandler+0x6b4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d01d      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a76      	ldr	r2, [pc, #472]	; (80067c8 <HAL_DMA_IRQHandler+0x6b8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d018      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a74      	ldr	r2, [pc, #464]	; (80067cc <HAL_DMA_IRQHandler+0x6bc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d013      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a73      	ldr	r2, [pc, #460]	; (80067d0 <HAL_DMA_IRQHandler+0x6c0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00e      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a71      	ldr	r2, [pc, #452]	; (80067d4 <HAL_DMA_IRQHandler+0x6c4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d009      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a70      	ldr	r2, [pc, #448]	; (80067d8 <HAL_DMA_IRQHandler+0x6c8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d004      	beq.n	8006626 <HAL_DMA_IRQHandler+0x516>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a6e      	ldr	r2, [pc, #440]	; (80067dc <HAL_DMA_IRQHandler+0x6cc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d10a      	bne.n	800663c <HAL_DMA_IRQHandler+0x52c>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf14      	ite	ne
 8006634:	2301      	movne	r3, #1
 8006636:	2300      	moveq	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	e009      	b.n	8006650 <HAL_DMA_IRQHandler+0x540>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	bf14      	ite	ne
 800664a:	2301      	movne	r3, #1
 800664c:	2300      	moveq	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d03e      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006658:	f003 031f 	and.w	r3, r3, #31
 800665c:	2210      	movs	r2, #16
 800665e:	409a      	lsls	r2, r3
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d018      	beq.n	80066a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d108      	bne.n	8006692 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d024      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3
 8006690:	e01f      	b.n	80066d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01b      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
 80066a2:	e016      	b.n	80066d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d107      	bne.n	80066c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0208 	bic.w	r2, r2, #8
 80066c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	2220      	movs	r2, #32
 80066dc:	409a      	lsls	r2, r3
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8110 	beq.w	8006908 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2c      	ldr	r2, [pc, #176]	; (80067a0 <HAL_DMA_IRQHandler+0x690>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d04a      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2b      	ldr	r2, [pc, #172]	; (80067a4 <HAL_DMA_IRQHandler+0x694>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d045      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a29      	ldr	r2, [pc, #164]	; (80067a8 <HAL_DMA_IRQHandler+0x698>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d040      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a28      	ldr	r2, [pc, #160]	; (80067ac <HAL_DMA_IRQHandler+0x69c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d03b      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a26      	ldr	r2, [pc, #152]	; (80067b0 <HAL_DMA_IRQHandler+0x6a0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d036      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a25      	ldr	r2, [pc, #148]	; (80067b4 <HAL_DMA_IRQHandler+0x6a4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d031      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a23      	ldr	r2, [pc, #140]	; (80067b8 <HAL_DMA_IRQHandler+0x6a8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d02c      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a22      	ldr	r2, [pc, #136]	; (80067bc <HAL_DMA_IRQHandler+0x6ac>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d027      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a20      	ldr	r2, [pc, #128]	; (80067c0 <HAL_DMA_IRQHandler+0x6b0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d022      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1f      	ldr	r2, [pc, #124]	; (80067c4 <HAL_DMA_IRQHandler+0x6b4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d01d      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <HAL_DMA_IRQHandler+0x6b8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d018      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a1c      	ldr	r2, [pc, #112]	; (80067cc <HAL_DMA_IRQHandler+0x6bc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d013      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1a      	ldr	r2, [pc, #104]	; (80067d0 <HAL_DMA_IRQHandler+0x6c0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00e      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a19      	ldr	r2, [pc, #100]	; (80067d4 <HAL_DMA_IRQHandler+0x6c4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d009      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <HAL_DMA_IRQHandler+0x6c8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d004      	beq.n	8006788 <HAL_DMA_IRQHandler+0x678>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a16      	ldr	r2, [pc, #88]	; (80067dc <HAL_DMA_IRQHandler+0x6cc>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d12b      	bne.n	80067e0 <HAL_DMA_IRQHandler+0x6d0>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf14      	ite	ne
 8006796:	2301      	movne	r3, #1
 8006798:	2300      	moveq	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	e02a      	b.n	80067f4 <HAL_DMA_IRQHandler+0x6e4>
 800679e:	bf00      	nop
 80067a0:	40020010 	.word	0x40020010
 80067a4:	40020028 	.word	0x40020028
 80067a8:	40020040 	.word	0x40020040
 80067ac:	40020058 	.word	0x40020058
 80067b0:	40020070 	.word	0x40020070
 80067b4:	40020088 	.word	0x40020088
 80067b8:	400200a0 	.word	0x400200a0
 80067bc:	400200b8 	.word	0x400200b8
 80067c0:	40020410 	.word	0x40020410
 80067c4:	40020428 	.word	0x40020428
 80067c8:	40020440 	.word	0x40020440
 80067cc:	40020458 	.word	0x40020458
 80067d0:	40020470 	.word	0x40020470
 80067d4:	40020488 	.word	0x40020488
 80067d8:	400204a0 	.word	0x400204a0
 80067dc:	400204b8 	.word	0x400204b8
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bf14      	ite	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	2300      	moveq	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8087 	beq.w	8006908 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	2220      	movs	r2, #32
 8006804:	409a      	lsls	r2, r3
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b04      	cmp	r3, #4
 8006814:	d139      	bne.n	800688a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0216 	bic.w	r2, r2, #22
 8006824:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	695a      	ldr	r2, [r3, #20]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006834:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d103      	bne.n	8006846 <HAL_DMA_IRQHandler+0x736>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0208 	bic.w	r2, r2, #8
 8006854:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	223f      	movs	r2, #63	; 0x3f
 8006860:	409a      	lsls	r2, r3
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 834a 	beq.w	8006f14 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	4798      	blx	r3
          }
          return;
 8006888:	e344      	b.n	8006f14 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d018      	beq.n	80068ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d108      	bne.n	80068b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d02c      	beq.n	8006908 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
 80068b6:	e027      	b.n	8006908 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d023      	beq.n	8006908 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
 80068c8:	e01e      	b.n	8006908 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10f      	bne.n	80068f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0210 	bic.w	r2, r2, #16
 80068e6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8306 	beq.w	8006f1e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8088 	beq.w	8006a30 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2204      	movs	r2, #4
 8006924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a7a      	ldr	r2, [pc, #488]	; (8006b18 <HAL_DMA_IRQHandler+0xa08>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d04a      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a79      	ldr	r2, [pc, #484]	; (8006b1c <HAL_DMA_IRQHandler+0xa0c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d045      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a77      	ldr	r2, [pc, #476]	; (8006b20 <HAL_DMA_IRQHandler+0xa10>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d040      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a76      	ldr	r2, [pc, #472]	; (8006b24 <HAL_DMA_IRQHandler+0xa14>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d03b      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a74      	ldr	r2, [pc, #464]	; (8006b28 <HAL_DMA_IRQHandler+0xa18>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d036      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a73      	ldr	r2, [pc, #460]	; (8006b2c <HAL_DMA_IRQHandler+0xa1c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d031      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a71      	ldr	r2, [pc, #452]	; (8006b30 <HAL_DMA_IRQHandler+0xa20>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d02c      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a70      	ldr	r2, [pc, #448]	; (8006b34 <HAL_DMA_IRQHandler+0xa24>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d027      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a6e      	ldr	r2, [pc, #440]	; (8006b38 <HAL_DMA_IRQHandler+0xa28>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d022      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a6d      	ldr	r2, [pc, #436]	; (8006b3c <HAL_DMA_IRQHandler+0xa2c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d01d      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a6b      	ldr	r2, [pc, #428]	; (8006b40 <HAL_DMA_IRQHandler+0xa30>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d018      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a6a      	ldr	r2, [pc, #424]	; (8006b44 <HAL_DMA_IRQHandler+0xa34>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d013      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a68      	ldr	r2, [pc, #416]	; (8006b48 <HAL_DMA_IRQHandler+0xa38>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00e      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a67      	ldr	r2, [pc, #412]	; (8006b4c <HAL_DMA_IRQHandler+0xa3c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d009      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a65      	ldr	r2, [pc, #404]	; (8006b50 <HAL_DMA_IRQHandler+0xa40>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d004      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x8b8>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a64      	ldr	r2, [pc, #400]	; (8006b54 <HAL_DMA_IRQHandler+0xa44>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d108      	bne.n	80069da <HAL_DMA_IRQHandler+0x8ca>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0201 	bic.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	e007      	b.n	80069ea <HAL_DMA_IRQHandler+0x8da>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0201 	bic.w	r2, r2, #1
 80069e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3301      	adds	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d307      	bcc.n	8006a06 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1f2      	bne.n	80069ea <HAL_DMA_IRQHandler+0x8da>
 8006a04:	e000      	b.n	8006a08 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a06:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2203      	movs	r2, #3
 8006a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006a26:	e003      	b.n	8006a30 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8272 	beq.w	8006f1e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
 8006a42:	e26c      	b.n	8006f1e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a43      	ldr	r2, [pc, #268]	; (8006b58 <HAL_DMA_IRQHandler+0xa48>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d022      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x984>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a42      	ldr	r2, [pc, #264]	; (8006b5c <HAL_DMA_IRQHandler+0xa4c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d01d      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x984>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a40      	ldr	r2, [pc, #256]	; (8006b60 <HAL_DMA_IRQHandler+0xa50>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d018      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x984>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a3f      	ldr	r2, [pc, #252]	; (8006b64 <HAL_DMA_IRQHandler+0xa54>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d013      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x984>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a3d      	ldr	r2, [pc, #244]	; (8006b68 <HAL_DMA_IRQHandler+0xa58>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00e      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x984>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a3c      	ldr	r2, [pc, #240]	; (8006b6c <HAL_DMA_IRQHandler+0xa5c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d009      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x984>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a3a      	ldr	r2, [pc, #232]	; (8006b70 <HAL_DMA_IRQHandler+0xa60>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d004      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x984>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a39      	ldr	r2, [pc, #228]	; (8006b74 <HAL_DMA_IRQHandler+0xa64>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d101      	bne.n	8006a98 <HAL_DMA_IRQHandler+0x988>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <HAL_DMA_IRQHandler+0x98a>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 823f 	beq.w	8006f1e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80cd 	beq.w	8006c58 <HAL_DMA_IRQHandler+0xb48>
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 80c7 	beq.w	8006c58 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ace:	f003 031f 	and.w	r3, r3, #31
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d049      	beq.n	8006b78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8210 	beq.w	8006f18 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b00:	e20a      	b.n	8006f18 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 8206 	beq.w	8006f18 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b14:	e200      	b.n	8006f18 <HAL_DMA_IRQHandler+0xe08>
 8006b16:	bf00      	nop
 8006b18:	40020010 	.word	0x40020010
 8006b1c:	40020028 	.word	0x40020028
 8006b20:	40020040 	.word	0x40020040
 8006b24:	40020058 	.word	0x40020058
 8006b28:	40020070 	.word	0x40020070
 8006b2c:	40020088 	.word	0x40020088
 8006b30:	400200a0 	.word	0x400200a0
 8006b34:	400200b8 	.word	0x400200b8
 8006b38:	40020410 	.word	0x40020410
 8006b3c:	40020428 	.word	0x40020428
 8006b40:	40020440 	.word	0x40020440
 8006b44:	40020458 	.word	0x40020458
 8006b48:	40020470 	.word	0x40020470
 8006b4c:	40020488 	.word	0x40020488
 8006b50:	400204a0 	.word	0x400204a0
 8006b54:	400204b8 	.word	0x400204b8
 8006b58:	58025408 	.word	0x58025408
 8006b5c:	5802541c 	.word	0x5802541c
 8006b60:	58025430 	.word	0x58025430
 8006b64:	58025444 	.word	0x58025444
 8006b68:	58025458 	.word	0x58025458
 8006b6c:	5802546c 	.word	0x5802546c
 8006b70:	58025480 	.word	0x58025480
 8006b74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d160      	bne.n	8006c44 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a8c      	ldr	r2, [pc, #560]	; (8006db8 <HAL_DMA_IRQHandler+0xca8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d04a      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a8a      	ldr	r2, [pc, #552]	; (8006dbc <HAL_DMA_IRQHandler+0xcac>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d045      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a89      	ldr	r2, [pc, #548]	; (8006dc0 <HAL_DMA_IRQHandler+0xcb0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d040      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a87      	ldr	r2, [pc, #540]	; (8006dc4 <HAL_DMA_IRQHandler+0xcb4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d03b      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a86      	ldr	r2, [pc, #536]	; (8006dc8 <HAL_DMA_IRQHandler+0xcb8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d036      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a84      	ldr	r2, [pc, #528]	; (8006dcc <HAL_DMA_IRQHandler+0xcbc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d031      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a83      	ldr	r2, [pc, #524]	; (8006dd0 <HAL_DMA_IRQHandler+0xcc0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d02c      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a81      	ldr	r2, [pc, #516]	; (8006dd4 <HAL_DMA_IRQHandler+0xcc4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d027      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a80      	ldr	r2, [pc, #512]	; (8006dd8 <HAL_DMA_IRQHandler+0xcc8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d022      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a7e      	ldr	r2, [pc, #504]	; (8006ddc <HAL_DMA_IRQHandler+0xccc>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01d      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a7d      	ldr	r2, [pc, #500]	; (8006de0 <HAL_DMA_IRQHandler+0xcd0>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d018      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a7b      	ldr	r2, [pc, #492]	; (8006de4 <HAL_DMA_IRQHandler+0xcd4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a7a      	ldr	r2, [pc, #488]	; (8006de8 <HAL_DMA_IRQHandler+0xcd8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00e      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a78      	ldr	r2, [pc, #480]	; (8006dec <HAL_DMA_IRQHandler+0xcdc>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d009      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a77      	ldr	r2, [pc, #476]	; (8006df0 <HAL_DMA_IRQHandler+0xce0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d004      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xb12>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a75      	ldr	r2, [pc, #468]	; (8006df4 <HAL_DMA_IRQHandler+0xce4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d108      	bne.n	8006c34 <HAL_DMA_IRQHandler+0xb24>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0208 	bic.w	r2, r2, #8
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	e007      	b.n	8006c44 <HAL_DMA_IRQHandler+0xb34>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0204 	bic.w	r2, r2, #4
 8006c42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8165 	beq.w	8006f18 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c56:	e15f      	b.n	8006f18 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	2202      	movs	r2, #2
 8006c62:	409a      	lsls	r2, r3
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	4013      	ands	r3, r2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 80c5 	beq.w	8006df8 <HAL_DMA_IRQHandler+0xce8>
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80bf 	beq.w	8006df8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7e:	f003 031f 	and.w	r3, r3, #31
 8006c82:	2202      	movs	r2, #2
 8006c84:	409a      	lsls	r2, r3
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d018      	beq.n	8006cc6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d109      	bne.n	8006cb2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 813a 	beq.w	8006f1c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cb0:	e134      	b.n	8006f1c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 8130 	beq.w	8006f1c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cc4:	e12a      	b.n	8006f1c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d168      	bne.n	8006da2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a38      	ldr	r2, [pc, #224]	; (8006db8 <HAL_DMA_IRQHandler+0xca8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d04a      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a37      	ldr	r2, [pc, #220]	; (8006dbc <HAL_DMA_IRQHandler+0xcac>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d045      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a35      	ldr	r2, [pc, #212]	; (8006dc0 <HAL_DMA_IRQHandler+0xcb0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d040      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a34      	ldr	r2, [pc, #208]	; (8006dc4 <HAL_DMA_IRQHandler+0xcb4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d03b      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a32      	ldr	r2, [pc, #200]	; (8006dc8 <HAL_DMA_IRQHandler+0xcb8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d036      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a31      	ldr	r2, [pc, #196]	; (8006dcc <HAL_DMA_IRQHandler+0xcbc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d031      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2f      	ldr	r2, [pc, #188]	; (8006dd0 <HAL_DMA_IRQHandler+0xcc0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d02c      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2e      	ldr	r2, [pc, #184]	; (8006dd4 <HAL_DMA_IRQHandler+0xcc4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d027      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2c      	ldr	r2, [pc, #176]	; (8006dd8 <HAL_DMA_IRQHandler+0xcc8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d022      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2b      	ldr	r2, [pc, #172]	; (8006ddc <HAL_DMA_IRQHandler+0xccc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01d      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a29      	ldr	r2, [pc, #164]	; (8006de0 <HAL_DMA_IRQHandler+0xcd0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a28      	ldr	r2, [pc, #160]	; (8006de4 <HAL_DMA_IRQHandler+0xcd4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a26      	ldr	r2, [pc, #152]	; (8006de8 <HAL_DMA_IRQHandler+0xcd8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a25      	ldr	r2, [pc, #148]	; (8006dec <HAL_DMA_IRQHandler+0xcdc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a23      	ldr	r2, [pc, #140]	; (8006df0 <HAL_DMA_IRQHandler+0xce0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_DMA_IRQHandler+0xc60>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a22      	ldr	r2, [pc, #136]	; (8006df4 <HAL_DMA_IRQHandler+0xce4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d108      	bne.n	8006d82 <HAL_DMA_IRQHandler+0xc72>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0214 	bic.w	r2, r2, #20
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e007      	b.n	8006d92 <HAL_DMA_IRQHandler+0xc82>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 020a 	bic.w	r2, r2, #10
 8006d90:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 80b8 	beq.w	8006f1c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db4:	e0b2      	b.n	8006f1c <HAL_DMA_IRQHandler+0xe0c>
 8006db6:	bf00      	nop
 8006db8:	40020010 	.word	0x40020010
 8006dbc:	40020028 	.word	0x40020028
 8006dc0:	40020040 	.word	0x40020040
 8006dc4:	40020058 	.word	0x40020058
 8006dc8:	40020070 	.word	0x40020070
 8006dcc:	40020088 	.word	0x40020088
 8006dd0:	400200a0 	.word	0x400200a0
 8006dd4:	400200b8 	.word	0x400200b8
 8006dd8:	40020410 	.word	0x40020410
 8006ddc:	40020428 	.word	0x40020428
 8006de0:	40020440 	.word	0x40020440
 8006de4:	40020458 	.word	0x40020458
 8006de8:	40020470 	.word	0x40020470
 8006dec:	40020488 	.word	0x40020488
 8006df0:	400204a0 	.word	0x400204a0
 8006df4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfc:	f003 031f 	and.w	r3, r3, #31
 8006e00:	2208      	movs	r2, #8
 8006e02:	409a      	lsls	r2, r3
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8088 	beq.w	8006f1e <HAL_DMA_IRQHandler+0xe0e>
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8082 	beq.w	8006f1e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a41      	ldr	r2, [pc, #260]	; (8006f24 <HAL_DMA_IRQHandler+0xe14>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d04a      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a3f      	ldr	r2, [pc, #252]	; (8006f28 <HAL_DMA_IRQHandler+0xe18>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d045      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a3e      	ldr	r2, [pc, #248]	; (8006f2c <HAL_DMA_IRQHandler+0xe1c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d040      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a3c      	ldr	r2, [pc, #240]	; (8006f30 <HAL_DMA_IRQHandler+0xe20>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d03b      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a3b      	ldr	r2, [pc, #236]	; (8006f34 <HAL_DMA_IRQHandler+0xe24>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d036      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a39      	ldr	r2, [pc, #228]	; (8006f38 <HAL_DMA_IRQHandler+0xe28>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d031      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a38      	ldr	r2, [pc, #224]	; (8006f3c <HAL_DMA_IRQHandler+0xe2c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d02c      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a36      	ldr	r2, [pc, #216]	; (8006f40 <HAL_DMA_IRQHandler+0xe30>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d027      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a35      	ldr	r2, [pc, #212]	; (8006f44 <HAL_DMA_IRQHandler+0xe34>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a33      	ldr	r2, [pc, #204]	; (8006f48 <HAL_DMA_IRQHandler+0xe38>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01d      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a32      	ldr	r2, [pc, #200]	; (8006f4c <HAL_DMA_IRQHandler+0xe3c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a30      	ldr	r2, [pc, #192]	; (8006f50 <HAL_DMA_IRQHandler+0xe40>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a2f      	ldr	r2, [pc, #188]	; (8006f54 <HAL_DMA_IRQHandler+0xe44>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a2d      	ldr	r2, [pc, #180]	; (8006f58 <HAL_DMA_IRQHandler+0xe48>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <HAL_DMA_IRQHandler+0xe4c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_DMA_IRQHandler+0xdaa>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a2a      	ldr	r2, [pc, #168]	; (8006f60 <HAL_DMA_IRQHandler+0xe50>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d108      	bne.n	8006ecc <HAL_DMA_IRQHandler+0xdbc>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 021c 	bic.w	r2, r2, #28
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	e007      	b.n	8006edc <HAL_DMA_IRQHandler+0xdcc>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 020e 	bic.w	r2, r2, #14
 8006eda:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	409a      	lsls	r2, r3
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
 8006f12:	e004      	b.n	8006f1e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f14:	bf00      	nop
 8006f16:	e002      	b.n	8006f1e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f18:	bf00      	nop
 8006f1a:	e000      	b.n	8006f1e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f1c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f1e:	3728      	adds	r7, #40	; 0x28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40020010 	.word	0x40020010
 8006f28:	40020028 	.word	0x40020028
 8006f2c:	40020040 	.word	0x40020040
 8006f30:	40020058 	.word	0x40020058
 8006f34:	40020070 	.word	0x40020070
 8006f38:	40020088 	.word	0x40020088
 8006f3c:	400200a0 	.word	0x400200a0
 8006f40:	400200b8 	.word	0x400200b8
 8006f44:	40020410 	.word	0x40020410
 8006f48:	40020428 	.word	0x40020428
 8006f4c:	40020440 	.word	0x40020440
 8006f50:	40020458 	.word	0x40020458
 8006f54:	40020470 	.word	0x40020470
 8006f58:	40020488 	.word	0x40020488
 8006f5c:	400204a0 	.word	0x400204a0
 8006f60:	400204b8 	.word	0x400204b8

08006f64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f76:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a84      	ldr	r2, [pc, #528]	; (8007194 <DMA_SetConfig+0x230>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d072      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a82      	ldr	r2, [pc, #520]	; (8007198 <DMA_SetConfig+0x234>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d06d      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a81      	ldr	r2, [pc, #516]	; (800719c <DMA_SetConfig+0x238>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d068      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a7f      	ldr	r2, [pc, #508]	; (80071a0 <DMA_SetConfig+0x23c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d063      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a7e      	ldr	r2, [pc, #504]	; (80071a4 <DMA_SetConfig+0x240>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d05e      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a7c      	ldr	r2, [pc, #496]	; (80071a8 <DMA_SetConfig+0x244>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d059      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a7b      	ldr	r2, [pc, #492]	; (80071ac <DMA_SetConfig+0x248>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d054      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a79      	ldr	r2, [pc, #484]	; (80071b0 <DMA_SetConfig+0x24c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d04f      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a78      	ldr	r2, [pc, #480]	; (80071b4 <DMA_SetConfig+0x250>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d04a      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a76      	ldr	r2, [pc, #472]	; (80071b8 <DMA_SetConfig+0x254>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d045      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a75      	ldr	r2, [pc, #468]	; (80071bc <DMA_SetConfig+0x258>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d040      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a73      	ldr	r2, [pc, #460]	; (80071c0 <DMA_SetConfig+0x25c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d03b      	beq.n	800706e <DMA_SetConfig+0x10a>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a72      	ldr	r2, [pc, #456]	; (80071c4 <DMA_SetConfig+0x260>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d036      	beq.n	800706e <DMA_SetConfig+0x10a>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a70      	ldr	r2, [pc, #448]	; (80071c8 <DMA_SetConfig+0x264>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d031      	beq.n	800706e <DMA_SetConfig+0x10a>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a6f      	ldr	r2, [pc, #444]	; (80071cc <DMA_SetConfig+0x268>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d02c      	beq.n	800706e <DMA_SetConfig+0x10a>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a6d      	ldr	r2, [pc, #436]	; (80071d0 <DMA_SetConfig+0x26c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d027      	beq.n	800706e <DMA_SetConfig+0x10a>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a6c      	ldr	r2, [pc, #432]	; (80071d4 <DMA_SetConfig+0x270>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d022      	beq.n	800706e <DMA_SetConfig+0x10a>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a6a      	ldr	r2, [pc, #424]	; (80071d8 <DMA_SetConfig+0x274>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d01d      	beq.n	800706e <DMA_SetConfig+0x10a>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a69      	ldr	r2, [pc, #420]	; (80071dc <DMA_SetConfig+0x278>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d018      	beq.n	800706e <DMA_SetConfig+0x10a>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a67      	ldr	r2, [pc, #412]	; (80071e0 <DMA_SetConfig+0x27c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d013      	beq.n	800706e <DMA_SetConfig+0x10a>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a66      	ldr	r2, [pc, #408]	; (80071e4 <DMA_SetConfig+0x280>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d00e      	beq.n	800706e <DMA_SetConfig+0x10a>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a64      	ldr	r2, [pc, #400]	; (80071e8 <DMA_SetConfig+0x284>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d009      	beq.n	800706e <DMA_SetConfig+0x10a>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a63      	ldr	r2, [pc, #396]	; (80071ec <DMA_SetConfig+0x288>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d004      	beq.n	800706e <DMA_SetConfig+0x10a>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a61      	ldr	r2, [pc, #388]	; (80071f0 <DMA_SetConfig+0x28c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d101      	bne.n	8007072 <DMA_SetConfig+0x10e>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <DMA_SetConfig+0x110>
 8007072:	2300      	movs	r3, #0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00d      	beq.n	8007094 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007080:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d004      	beq.n	8007094 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007092:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a3e      	ldr	r2, [pc, #248]	; (8007194 <DMA_SetConfig+0x230>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d04a      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a3d      	ldr	r2, [pc, #244]	; (8007198 <DMA_SetConfig+0x234>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d045      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a3b      	ldr	r2, [pc, #236]	; (800719c <DMA_SetConfig+0x238>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d040      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a3a      	ldr	r2, [pc, #232]	; (80071a0 <DMA_SetConfig+0x23c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d03b      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a38      	ldr	r2, [pc, #224]	; (80071a4 <DMA_SetConfig+0x240>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d036      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a37      	ldr	r2, [pc, #220]	; (80071a8 <DMA_SetConfig+0x244>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d031      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a35      	ldr	r2, [pc, #212]	; (80071ac <DMA_SetConfig+0x248>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d02c      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a34      	ldr	r2, [pc, #208]	; (80071b0 <DMA_SetConfig+0x24c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d027      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a32      	ldr	r2, [pc, #200]	; (80071b4 <DMA_SetConfig+0x250>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d022      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a31      	ldr	r2, [pc, #196]	; (80071b8 <DMA_SetConfig+0x254>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d01d      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a2f      	ldr	r2, [pc, #188]	; (80071bc <DMA_SetConfig+0x258>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d018      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a2e      	ldr	r2, [pc, #184]	; (80071c0 <DMA_SetConfig+0x25c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d013      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a2c      	ldr	r2, [pc, #176]	; (80071c4 <DMA_SetConfig+0x260>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00e      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a2b      	ldr	r2, [pc, #172]	; (80071c8 <DMA_SetConfig+0x264>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d009      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a29      	ldr	r2, [pc, #164]	; (80071cc <DMA_SetConfig+0x268>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <DMA_SetConfig+0x1d0>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a28      	ldr	r2, [pc, #160]	; (80071d0 <DMA_SetConfig+0x26c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d101      	bne.n	8007138 <DMA_SetConfig+0x1d4>
 8007134:	2301      	movs	r3, #1
 8007136:	e000      	b.n	800713a <DMA_SetConfig+0x1d6>
 8007138:	2300      	movs	r3, #0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d05a      	beq.n	80071f4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	223f      	movs	r2, #63	; 0x3f
 8007148:	409a      	lsls	r2, r3
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800715c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d108      	bne.n	8007180 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800717e:	e087      	b.n	8007290 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	60da      	str	r2, [r3, #12]
}
 8007190:	e07e      	b.n	8007290 <DMA_SetConfig+0x32c>
 8007192:	bf00      	nop
 8007194:	40020010 	.word	0x40020010
 8007198:	40020028 	.word	0x40020028
 800719c:	40020040 	.word	0x40020040
 80071a0:	40020058 	.word	0x40020058
 80071a4:	40020070 	.word	0x40020070
 80071a8:	40020088 	.word	0x40020088
 80071ac:	400200a0 	.word	0x400200a0
 80071b0:	400200b8 	.word	0x400200b8
 80071b4:	40020410 	.word	0x40020410
 80071b8:	40020428 	.word	0x40020428
 80071bc:	40020440 	.word	0x40020440
 80071c0:	40020458 	.word	0x40020458
 80071c4:	40020470 	.word	0x40020470
 80071c8:	40020488 	.word	0x40020488
 80071cc:	400204a0 	.word	0x400204a0
 80071d0:	400204b8 	.word	0x400204b8
 80071d4:	58025408 	.word	0x58025408
 80071d8:	5802541c 	.word	0x5802541c
 80071dc:	58025430 	.word	0x58025430
 80071e0:	58025444 	.word	0x58025444
 80071e4:	58025458 	.word	0x58025458
 80071e8:	5802546c 	.word	0x5802546c
 80071ec:	58025480 	.word	0x58025480
 80071f0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a28      	ldr	r2, [pc, #160]	; (800729c <DMA_SetConfig+0x338>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d022      	beq.n	8007244 <DMA_SetConfig+0x2e0>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a27      	ldr	r2, [pc, #156]	; (80072a0 <DMA_SetConfig+0x33c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d01d      	beq.n	8007244 <DMA_SetConfig+0x2e0>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <DMA_SetConfig+0x340>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d018      	beq.n	8007244 <DMA_SetConfig+0x2e0>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a24      	ldr	r2, [pc, #144]	; (80072a8 <DMA_SetConfig+0x344>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d013      	beq.n	8007244 <DMA_SetConfig+0x2e0>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a22      	ldr	r2, [pc, #136]	; (80072ac <DMA_SetConfig+0x348>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d00e      	beq.n	8007244 <DMA_SetConfig+0x2e0>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a21      	ldr	r2, [pc, #132]	; (80072b0 <DMA_SetConfig+0x34c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d009      	beq.n	8007244 <DMA_SetConfig+0x2e0>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <DMA_SetConfig+0x350>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d004      	beq.n	8007244 <DMA_SetConfig+0x2e0>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1e      	ldr	r2, [pc, #120]	; (80072b8 <DMA_SetConfig+0x354>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d101      	bne.n	8007248 <DMA_SetConfig+0x2e4>
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <DMA_SetConfig+0x2e6>
 8007248:	2300      	movs	r3, #0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d020      	beq.n	8007290 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2201      	movs	r2, #1
 8007258:	409a      	lsls	r2, r3
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d108      	bne.n	8007280 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	60da      	str	r2, [r3, #12]
}
 800727e:	e007      	b.n	8007290 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	60da      	str	r2, [r3, #12]
}
 8007290:	bf00      	nop
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	58025408 	.word	0x58025408
 80072a0:	5802541c 	.word	0x5802541c
 80072a4:	58025430 	.word	0x58025430
 80072a8:	58025444 	.word	0x58025444
 80072ac:	58025458 	.word	0x58025458
 80072b0:	5802546c 	.word	0x5802546c
 80072b4:	58025480 	.word	0x58025480
 80072b8:	58025494 	.word	0x58025494

080072bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a42      	ldr	r2, [pc, #264]	; (80073d4 <DMA_CalcBaseAndBitshift+0x118>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d04a      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a41      	ldr	r2, [pc, #260]	; (80073d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d045      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a3f      	ldr	r2, [pc, #252]	; (80073dc <DMA_CalcBaseAndBitshift+0x120>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d040      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a3e      	ldr	r2, [pc, #248]	; (80073e0 <DMA_CalcBaseAndBitshift+0x124>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d03b      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a3c      	ldr	r2, [pc, #240]	; (80073e4 <DMA_CalcBaseAndBitshift+0x128>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d036      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a3b      	ldr	r2, [pc, #236]	; (80073e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d031      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a39      	ldr	r2, [pc, #228]	; (80073ec <DMA_CalcBaseAndBitshift+0x130>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d02c      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a38      	ldr	r2, [pc, #224]	; (80073f0 <DMA_CalcBaseAndBitshift+0x134>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d027      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a36      	ldr	r2, [pc, #216]	; (80073f4 <DMA_CalcBaseAndBitshift+0x138>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d022      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a35      	ldr	r2, [pc, #212]	; (80073f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d01d      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a33      	ldr	r2, [pc, #204]	; (80073fc <DMA_CalcBaseAndBitshift+0x140>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d018      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a32      	ldr	r2, [pc, #200]	; (8007400 <DMA_CalcBaseAndBitshift+0x144>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d013      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a30      	ldr	r2, [pc, #192]	; (8007404 <DMA_CalcBaseAndBitshift+0x148>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d00e      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a2f      	ldr	r2, [pc, #188]	; (8007408 <DMA_CalcBaseAndBitshift+0x14c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d009      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a2d      	ldr	r2, [pc, #180]	; (800740c <DMA_CalcBaseAndBitshift+0x150>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <DMA_CalcBaseAndBitshift+0xa8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a2c      	ldr	r2, [pc, #176]	; (8007410 <DMA_CalcBaseAndBitshift+0x154>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d101      	bne.n	8007368 <DMA_CalcBaseAndBitshift+0xac>
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <DMA_CalcBaseAndBitshift+0xae>
 8007368:	2300      	movs	r3, #0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d024      	beq.n	80073b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	3b10      	subs	r3, #16
 8007376:	4a27      	ldr	r2, [pc, #156]	; (8007414 <DMA_CalcBaseAndBitshift+0x158>)
 8007378:	fba2 2303 	umull	r2, r3, r2, r3
 800737c:	091b      	lsrs	r3, r3, #4
 800737e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	4a24      	ldr	r2, [pc, #144]	; (8007418 <DMA_CalcBaseAndBitshift+0x15c>)
 8007388:	5cd3      	ldrb	r3, [r2, r3]
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b03      	cmp	r3, #3
 8007394:	d908      	bls.n	80073a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	4b1f      	ldr	r3, [pc, #124]	; (800741c <DMA_CalcBaseAndBitshift+0x160>)
 800739e:	4013      	ands	r3, r2
 80073a0:	1d1a      	adds	r2, r3, #4
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	659a      	str	r2, [r3, #88]	; 0x58
 80073a6:	e00d      	b.n	80073c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	4b1b      	ldr	r3, [pc, #108]	; (800741c <DMA_CalcBaseAndBitshift+0x160>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6593      	str	r3, [r2, #88]	; 0x58
 80073b6:	e005      	b.n	80073c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	40020010 	.word	0x40020010
 80073d8:	40020028 	.word	0x40020028
 80073dc:	40020040 	.word	0x40020040
 80073e0:	40020058 	.word	0x40020058
 80073e4:	40020070 	.word	0x40020070
 80073e8:	40020088 	.word	0x40020088
 80073ec:	400200a0 	.word	0x400200a0
 80073f0:	400200b8 	.word	0x400200b8
 80073f4:	40020410 	.word	0x40020410
 80073f8:	40020428 	.word	0x40020428
 80073fc:	40020440 	.word	0x40020440
 8007400:	40020458 	.word	0x40020458
 8007404:	40020470 	.word	0x40020470
 8007408:	40020488 	.word	0x40020488
 800740c:	400204a0 	.word	0x400204a0
 8007410:	400204b8 	.word	0x400204b8
 8007414:	aaaaaaab 	.word	0xaaaaaaab
 8007418:	080130e0 	.word	0x080130e0
 800741c:	fffffc00 	.word	0xfffffc00

08007420 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d120      	bne.n	8007476 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	2b03      	cmp	r3, #3
 800743a:	d858      	bhi.n	80074ee <DMA_CheckFifoParam+0xce>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <DMA_CheckFifoParam+0x24>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007455 	.word	0x08007455
 8007448:	08007467 	.word	0x08007467
 800744c:	08007455 	.word	0x08007455
 8007450:	080074ef 	.word	0x080074ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d048      	beq.n	80074f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007464:	e045      	b.n	80074f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800746e:	d142      	bne.n	80074f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007474:	e03f      	b.n	80074f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800747e:	d123      	bne.n	80074c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	2b03      	cmp	r3, #3
 8007486:	d838      	bhi.n	80074fa <DMA_CheckFifoParam+0xda>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <DMA_CheckFifoParam+0x70>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074a7 	.word	0x080074a7
 8007498:	080074a1 	.word	0x080074a1
 800749c:	080074b9 	.word	0x080074b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
        break;
 80074a4:	e030      	b.n	8007508 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d025      	beq.n	80074fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074b6:	e022      	b.n	80074fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074c0:	d11f      	bne.n	8007502 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074c6:	e01c      	b.n	8007502 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d902      	bls.n	80074d6 <DMA_CheckFifoParam+0xb6>
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d003      	beq.n	80074dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80074d4:	e018      	b.n	8007508 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	73fb      	strb	r3, [r7, #15]
        break;
 80074da:	e015      	b.n	8007508 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00e      	beq.n	8007506 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
    break;
 80074ec:	e00b      	b.n	8007506 <DMA_CheckFifoParam+0xe6>
        break;
 80074ee:	bf00      	nop
 80074f0:	e00a      	b.n	8007508 <DMA_CheckFifoParam+0xe8>
        break;
 80074f2:	bf00      	nop
 80074f4:	e008      	b.n	8007508 <DMA_CheckFifoParam+0xe8>
        break;
 80074f6:	bf00      	nop
 80074f8:	e006      	b.n	8007508 <DMA_CheckFifoParam+0xe8>
        break;
 80074fa:	bf00      	nop
 80074fc:	e004      	b.n	8007508 <DMA_CheckFifoParam+0xe8>
        break;
 80074fe:	bf00      	nop
 8007500:	e002      	b.n	8007508 <DMA_CheckFifoParam+0xe8>
        break;
 8007502:	bf00      	nop
 8007504:	e000      	b.n	8007508 <DMA_CheckFifoParam+0xe8>
    break;
 8007506:	bf00      	nop
    }
  }

  return status;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop

08007518 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a38      	ldr	r2, [pc, #224]	; (800760c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d022      	beq.n	8007576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a36      	ldr	r2, [pc, #216]	; (8007610 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d01d      	beq.n	8007576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a35      	ldr	r2, [pc, #212]	; (8007614 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d018      	beq.n	8007576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a33      	ldr	r2, [pc, #204]	; (8007618 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d013      	beq.n	8007576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a32      	ldr	r2, [pc, #200]	; (800761c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00e      	beq.n	8007576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a30      	ldr	r2, [pc, #192]	; (8007620 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d009      	beq.n	8007576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a2f      	ldr	r2, [pc, #188]	; (8007624 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d004      	beq.n	8007576 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a2d      	ldr	r2, [pc, #180]	; (8007628 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d101      	bne.n	800757a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800757a:	2300      	movs	r3, #0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01a      	beq.n	80075b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	3b08      	subs	r3, #8
 8007588:	4a28      	ldr	r2, [pc, #160]	; (800762c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800758a:	fba2 2303 	umull	r2, r3, r2, r3
 800758e:	091b      	lsrs	r3, r3, #4
 8007590:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4b26      	ldr	r3, [pc, #152]	; (8007630 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	461a      	mov	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a24      	ldr	r2, [pc, #144]	; (8007634 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80075a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f003 031f 	and.w	r3, r3, #31
 80075ac:	2201      	movs	r2, #1
 80075ae:	409a      	lsls	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80075b4:	e024      	b.n	8007600 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	3b10      	subs	r3, #16
 80075be:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80075c0:	fba2 2303 	umull	r2, r3, r2, r3
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	4a1c      	ldr	r2, [pc, #112]	; (800763c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d806      	bhi.n	80075de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	4a1b      	ldr	r2, [pc, #108]	; (8007640 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d902      	bls.n	80075de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3308      	adds	r3, #8
 80075dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4b18      	ldr	r3, [pc, #96]	; (8007644 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a16      	ldr	r2, [pc, #88]	; (8007648 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80075f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f003 031f 	and.w	r3, r3, #31
 80075f8:	2201      	movs	r2, #1
 80075fa:	409a      	lsls	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	58025408 	.word	0x58025408
 8007610:	5802541c 	.word	0x5802541c
 8007614:	58025430 	.word	0x58025430
 8007618:	58025444 	.word	0x58025444
 800761c:	58025458 	.word	0x58025458
 8007620:	5802546c 	.word	0x5802546c
 8007624:	58025480 	.word	0x58025480
 8007628:	58025494 	.word	0x58025494
 800762c:	cccccccd 	.word	0xcccccccd
 8007630:	16009600 	.word	0x16009600
 8007634:	58025880 	.word	0x58025880
 8007638:	aaaaaaab 	.word	0xaaaaaaab
 800763c:	400204b8 	.word	0x400204b8
 8007640:	4002040f 	.word	0x4002040f
 8007644:	10008200 	.word	0x10008200
 8007648:	40020880 	.word	0x40020880

0800764c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d04a      	beq.n	80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b08      	cmp	r3, #8
 8007666:	d847      	bhi.n	80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a25      	ldr	r2, [pc, #148]	; (8007704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d022      	beq.n	80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a24      	ldr	r2, [pc, #144]	; (8007708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d01d      	beq.n	80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a22      	ldr	r2, [pc, #136]	; (800770c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d018      	beq.n	80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a21      	ldr	r2, [pc, #132]	; (8007710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d013      	beq.n	80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a1f      	ldr	r2, [pc, #124]	; (8007714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00e      	beq.n	80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1e      	ldr	r2, [pc, #120]	; (8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d009      	beq.n	80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1c      	ldr	r2, [pc, #112]	; (800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d101      	bne.n	80076bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80076bc:	2300      	movs	r3, #0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	4b17      	ldr	r3, [pc, #92]	; (8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	461a      	mov	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a15      	ldr	r2, [pc, #84]	; (8007728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80076d4:	671a      	str	r2, [r3, #112]	; 0x70
 80076d6:	e009      	b.n	80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4b14      	ldr	r3, [pc, #80]	; (800772c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	461a      	mov	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a11      	ldr	r2, [pc, #68]	; (8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80076ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	2201      	movs	r2, #1
 80076f2:	409a      	lsls	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80076f8:	bf00      	nop
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	58025408 	.word	0x58025408
 8007708:	5802541c 	.word	0x5802541c
 800770c:	58025430 	.word	0x58025430
 8007710:	58025444 	.word	0x58025444
 8007714:	58025458 	.word	0x58025458
 8007718:	5802546c 	.word	0x5802546c
 800771c:	58025480 	.word	0x58025480
 8007720:	58025494 	.word	0x58025494
 8007724:	1600963f 	.word	0x1600963f
 8007728:	58025940 	.word	0x58025940
 800772c:	1000823f 	.word	0x1000823f
 8007730:	40020940 	.word	0x40020940

08007734 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b098      	sub	sp, #96	; 0x60
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800773c:	4a84      	ldr	r2, [pc, #528]	; (8007950 <HAL_FDCAN_Init+0x21c>)
 800773e:	f107 030c 	add.w	r3, r7, #12
 8007742:	4611      	mov	r1, r2
 8007744:	224c      	movs	r2, #76	; 0x4c
 8007746:	4618      	mov	r0, r3
 8007748:	f00a fc76 	bl	8012038 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e1ca      	b.n	8007aec <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a7e      	ldr	r2, [pc, #504]	; (8007954 <HAL_FDCAN_Init+0x220>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d106      	bne.n	800776e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007768:	461a      	mov	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fa fc9a 	bl	80020bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0210 	bic.w	r2, r2, #16
 8007796:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007798:	f7fb f9e2 	bl	8002b60 <HAL_GetTick>
 800779c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800779e:	e014      	b.n	80077ca <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80077a0:	f7fb f9de 	bl	8002b60 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b0a      	cmp	r3, #10
 80077ac:	d90d      	bls.n	80077ca <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077b4:	f043 0201 	orr.w	r2, r3, #1
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2203      	movs	r2, #3
 80077c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e190      	b.n	8007aec <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d0e3      	beq.n	80077a0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077e8:	f7fb f9ba 	bl	8002b60 <HAL_GetTick>
 80077ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80077ee:	e014      	b.n	800781a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80077f0:	f7fb f9b6 	bl	8002b60 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b0a      	cmp	r3, #10
 80077fc:	d90d      	bls.n	800781a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007804:	f043 0201 	orr.w	r2, r3, #1
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2203      	movs	r2, #3
 8007812:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e168      	b.n	8007aec <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0e3      	beq.n	80077f0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0202 	orr.w	r2, r2, #2
 8007836:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	7c1b      	ldrb	r3, [r3, #16]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d108      	bne.n	8007852 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699a      	ldr	r2, [r3, #24]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800784e:	619a      	str	r2, [r3, #24]
 8007850:	e007      	b.n	8007862 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699a      	ldr	r2, [r3, #24]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007860:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7c5b      	ldrb	r3, [r3, #17]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d108      	bne.n	800787c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	699a      	ldr	r2, [r3, #24]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007878:	619a      	str	r2, [r3, #24]
 800787a:	e007      	b.n	800788c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800788a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7c9b      	ldrb	r3, [r3, #18]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d108      	bne.n	80078a6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078a2:	619a      	str	r2, [r3, #24]
 80078a4:	e007      	b.n	80078b6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	699a      	ldr	r2, [r3, #24]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078b4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699a      	ldr	r2, [r3, #24]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80078da:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	691a      	ldr	r2, [r3, #16]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0210 	bic.w	r2, r2, #16
 80078ea:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d108      	bne.n	8007906 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0204 	orr.w	r2, r2, #4
 8007902:	619a      	str	r2, [r3, #24]
 8007904:	e030      	b.n	8007968 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d02c      	beq.n	8007968 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d020      	beq.n	8007958 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	699a      	ldr	r2, [r3, #24]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007924:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	691a      	ldr	r2, [r3, #16]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0210 	orr.w	r2, r2, #16
 8007934:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	2b03      	cmp	r3, #3
 800793c:	d114      	bne.n	8007968 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	699a      	ldr	r2, [r3, #24]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0220 	orr.w	r2, r2, #32
 800794c:	619a      	str	r2, [r3, #24]
 800794e:	e00b      	b.n	8007968 <HAL_FDCAN_Init+0x234>
 8007950:	08013004 	.word	0x08013004
 8007954:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	699a      	ldr	r2, [r3, #24]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f042 0220 	orr.w	r2, r2, #32
 8007966:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	3b01      	subs	r3, #1
 800796e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	3b01      	subs	r3, #1
 8007976:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007978:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007980:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	3b01      	subs	r3, #1
 800798a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007990:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007992:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800799c:	d115      	bne.n	80079ca <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	3b01      	subs	r3, #1
 80079aa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80079ac:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b2:	3b01      	subs	r3, #1
 80079b4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80079b6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	3b01      	subs	r3, #1
 80079c0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80079c6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80079c8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f0:	4413      	add	r3, r2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d012      	beq.n	8007a1c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80079fe:	f023 0107 	bic.w	r1, r3, #7
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d012      	beq.n	8007a4a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007a2c:	f023 0107 	bic.w	r1, r3, #7
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d013      	beq.n	8007a7a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007a5a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007a68:	4413      	add	r3, r2
 8007a6a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007a6e:	011a      	lsls	r2, r3, #4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d013      	beq.n	8007aaa <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007a8a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007a98:	4413      	add	r3, r2
 8007a9a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007a9e:	021a      	lsls	r2, r3, #8
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a11      	ldr	r2, [pc, #68]	; (8007af4 <HAL_FDCAN_Init+0x3c0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d107      	bne.n	8007ac4 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f022 0203 	bic.w	r2, r2, #3
 8007ac2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f80b 	bl	8007af8 <FDCAN_CalcultateRamBlockAddresses>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007ae8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3760      	adds	r7, #96	; 0x60
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	4000a000 	.word	0x4000a000

08007af8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b04:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b0e:	4ba7      	ldr	r3, [pc, #668]	; (8007dac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	0091      	lsls	r1, r2, #2
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	430b      	orrs	r3, r1
 8007b1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b28:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	041a      	lsls	r2, r3, #16
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	4413      	add	r3, r2
 8007b44:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b4e:	4b97      	ldr	r3, [pc, #604]	; (8007dac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	0091      	lsls	r1, r2, #2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b68:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b70:	041a      	lsls	r2, r3, #16
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	4413      	add	r3, r2
 8007b86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007b90:	4b86      	ldr	r3, [pc, #536]	; (8007dac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	0091      	lsls	r1, r2, #2
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007baa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	041a      	lsls	r2, r3, #16
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	4413      	add	r3, r2
 8007bce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007bd8:	4b74      	ldr	r3, [pc, #464]	; (8007dac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007bda:	4013      	ands	r3, r2
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	0091      	lsls	r1, r2, #2
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6812      	ldr	r2, [r2, #0]
 8007be4:	430b      	orrs	r3, r1
 8007be6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bf2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfa:	041a      	lsls	r2, r3, #16
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007c0e:	fb02 f303 	mul.w	r3, r2, r3
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	4413      	add	r3, r2
 8007c16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007c20:	4b62      	ldr	r3, [pc, #392]	; (8007dac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c22:	4013      	ands	r3, r2
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	0091      	lsls	r1, r2, #2
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6812      	ldr	r2, [r2, #0]
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007c3a:	fb02 f303 	mul.w	r3, r2, r3
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007c4c:	4b57      	ldr	r3, [pc, #348]	; (8007dac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	0091      	lsls	r1, r2, #2
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6812      	ldr	r2, [r2, #0]
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c66:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6e:	041a      	lsls	r2, r3, #16
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	4413      	add	r3, r2
 8007c84:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007c8e:	4b47      	ldr	r3, [pc, #284]	; (8007dac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	0091      	lsls	r1, r2, #2
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6812      	ldr	r2, [r2, #0]
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007ca8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb0:	041a      	lsls	r2, r3, #16
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007cc4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ccc:	061a      	lsls	r2, r3, #24
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cdc:	4b34      	ldr	r3, [pc, #208]	; (8007db0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007cde:	4413      	add	r3, r2
 8007ce0:	009a      	lsls	r2, r3, #2
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	441a      	add	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	441a      	add	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007d12:	fb01 f303 	mul.w	r3, r1, r3
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	441a      	add	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d26:	6879      	ldr	r1, [r7, #4]
 8007d28:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007d2a:	fb01 f303 	mul.w	r3, r1, r3
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	441a      	add	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007d42:	fb01 f303 	mul.w	r3, r1, r3
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	441a      	add	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	441a      	add	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007d8e:	fb01 f303 	mul.w	r3, r1, r3
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	441a      	add	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da2:	4a04      	ldr	r2, [pc, #16]	; (8007db4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d915      	bls.n	8007dd4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007da8:	e006      	b.n	8007db8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007daa:	bf00      	nop
 8007dac:	ffff0003 	.word	0xffff0003
 8007db0:	10002b00 	.word	0x10002b00
 8007db4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dbe:	f043 0220 	orr.w	r2, r3, #32
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2203      	movs	r2, #3
 8007dcc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e010      	b.n	8007df6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	e005      	b.n	8007de8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3304      	adds	r3, #4
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d3f3      	bcc.n	8007ddc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop

08007e04 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e031      	b.n	8007e7a <HAL_FMAC_Init+0x76>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_FMAC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmac->Lock = HAL_UNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7fa f9aa 	bl	8002184 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0UL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f84c 	bl	8007ed4 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f820 	bl	8007e82 <FMAC_Reset>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d10c      	bne.n	8007e62 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_RESET;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2210      	movs	r2, #16
 8007e4c:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	22a0      	movs	r2, #160	; 0xa0
 8007e52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Process Unlocked */
    __HAL_UNLOCK(hfmac);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e00b      	b.n	8007e7a <HAL_FMAC_Init+0x76>
  }

  /* Update FMAC error code and FMAC peripheral state */
  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	635a      	str	r2, [r3, #52]	; 0x34
  hfmac->State = HAL_FMAC_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Process Unlocked */
  __HAL_UNLOCK(hfmac);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e8a:	f7fa fe69 	bl	8002b60 <HAL_GetTick>
 8007e8e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007e9e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 8007ea0:	e009      	b.n	8007eb6 <FMAC_Reset+0x34>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007ea2:	f7fa fe5d 	bl	8002b60 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007eb0:	d901      	bls.n	8007eb6 <FMAC_Reset+0x34>
    {
      return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e00a      	b.n	8007ecc <FMAC_Reset+0x4a>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1ee      	bne.n	8007ea2 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f807 	bl	8007ef0 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f81b 	bl	8007f1e <FMAC_ResetOutputStateAndDataPointers>
}
 8007ee8:	bf00      	nop
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b089      	sub	sp, #36	; 0x24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007f5a:	4b86      	ldr	r3, [pc, #536]	; (8008174 <HAL_GPIO_Init+0x228>)
 8007f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f5e:	e18c      	b.n	800827a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	2101      	movs	r1, #1
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 817e 	beq.w	8008274 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d00b      	beq.n	8007f98 <HAL_GPIO_Init+0x4c>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d007      	beq.n	8007f98 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f8c:	2b11      	cmp	r3, #17
 8007f8e:	d003      	beq.n	8007f98 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b12      	cmp	r3, #18
 8007f96:	d130      	bne.n	8007ffa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	4013      	ands	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fce:	2201      	movs	r2, #1
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd6:	43db      	mvns	r3, r3
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	091b      	lsrs	r3, r3, #4
 8007fe4:	f003 0201 	and.w	r2, r3, #1
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	2203      	movs	r2, #3
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	43db      	mvns	r3, r3
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	4013      	ands	r3, r2
 8008010:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	689a      	ldr	r2, [r3, #8]
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	fa02 f303 	lsl.w	r3, r2, r3
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	4313      	orrs	r3, r2
 8008022:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d003      	beq.n	800803a <HAL_GPIO_Init+0xee>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2b12      	cmp	r3, #18
 8008038:	d123      	bne.n	8008082 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	08da      	lsrs	r2, r3, #3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3208      	adds	r2, #8
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	220f      	movs	r2, #15
 8008052:	fa02 f303 	lsl.w	r3, r2, r3
 8008056:	43db      	mvns	r3, r3
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	4013      	ands	r3, r2
 800805c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	691a      	ldr	r2, [r3, #16]
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	fa02 f303 	lsl.w	r3, r2, r3
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	4313      	orrs	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	08da      	lsrs	r2, r3, #3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3208      	adds	r2, #8
 800807c:	69b9      	ldr	r1, [r7, #24]
 800807e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	2203      	movs	r2, #3
 800808e:	fa02 f303 	lsl.w	r3, r2, r3
 8008092:	43db      	mvns	r3, r3
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	4013      	ands	r3, r2
 8008098:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f003 0203 	and.w	r2, r3, #3
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 80d8 	beq.w	8008274 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080c4:	4b2c      	ldr	r3, [pc, #176]	; (8008178 <HAL_GPIO_Init+0x22c>)
 80080c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080ca:	4a2b      	ldr	r2, [pc, #172]	; (8008178 <HAL_GPIO_Init+0x22c>)
 80080cc:	f043 0302 	orr.w	r3, r3, #2
 80080d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80080d4:	4b28      	ldr	r3, [pc, #160]	; (8008178 <HAL_GPIO_Init+0x22c>)
 80080d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080e2:	4a26      	ldr	r2, [pc, #152]	; (800817c <HAL_GPIO_Init+0x230>)
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	089b      	lsrs	r3, r3, #2
 80080e8:	3302      	adds	r3, #2
 80080ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	220f      	movs	r2, #15
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	43db      	mvns	r3, r3
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	4013      	ands	r3, r2
 8008104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a1d      	ldr	r2, [pc, #116]	; (8008180 <HAL_GPIO_Init+0x234>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d04a      	beq.n	80081a4 <HAL_GPIO_Init+0x258>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a1c      	ldr	r2, [pc, #112]	; (8008184 <HAL_GPIO_Init+0x238>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d02b      	beq.n	800816e <HAL_GPIO_Init+0x222>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a1b      	ldr	r2, [pc, #108]	; (8008188 <HAL_GPIO_Init+0x23c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d025      	beq.n	800816a <HAL_GPIO_Init+0x21e>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a1a      	ldr	r2, [pc, #104]	; (800818c <HAL_GPIO_Init+0x240>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d01f      	beq.n	8008166 <HAL_GPIO_Init+0x21a>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a19      	ldr	r2, [pc, #100]	; (8008190 <HAL_GPIO_Init+0x244>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d019      	beq.n	8008162 <HAL_GPIO_Init+0x216>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a18      	ldr	r2, [pc, #96]	; (8008194 <HAL_GPIO_Init+0x248>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d013      	beq.n	800815e <HAL_GPIO_Init+0x212>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a17      	ldr	r2, [pc, #92]	; (8008198 <HAL_GPIO_Init+0x24c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d00d      	beq.n	800815a <HAL_GPIO_Init+0x20e>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a16      	ldr	r2, [pc, #88]	; (800819c <HAL_GPIO_Init+0x250>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d007      	beq.n	8008156 <HAL_GPIO_Init+0x20a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a15      	ldr	r2, [pc, #84]	; (80081a0 <HAL_GPIO_Init+0x254>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d101      	bne.n	8008152 <HAL_GPIO_Init+0x206>
 800814e:	2309      	movs	r3, #9
 8008150:	e029      	b.n	80081a6 <HAL_GPIO_Init+0x25a>
 8008152:	230a      	movs	r3, #10
 8008154:	e027      	b.n	80081a6 <HAL_GPIO_Init+0x25a>
 8008156:	2307      	movs	r3, #7
 8008158:	e025      	b.n	80081a6 <HAL_GPIO_Init+0x25a>
 800815a:	2306      	movs	r3, #6
 800815c:	e023      	b.n	80081a6 <HAL_GPIO_Init+0x25a>
 800815e:	2305      	movs	r3, #5
 8008160:	e021      	b.n	80081a6 <HAL_GPIO_Init+0x25a>
 8008162:	2304      	movs	r3, #4
 8008164:	e01f      	b.n	80081a6 <HAL_GPIO_Init+0x25a>
 8008166:	2303      	movs	r3, #3
 8008168:	e01d      	b.n	80081a6 <HAL_GPIO_Init+0x25a>
 800816a:	2302      	movs	r3, #2
 800816c:	e01b      	b.n	80081a6 <HAL_GPIO_Init+0x25a>
 800816e:	2301      	movs	r3, #1
 8008170:	e019      	b.n	80081a6 <HAL_GPIO_Init+0x25a>
 8008172:	bf00      	nop
 8008174:	58000080 	.word	0x58000080
 8008178:	58024400 	.word	0x58024400
 800817c:	58000400 	.word	0x58000400
 8008180:	58020000 	.word	0x58020000
 8008184:	58020400 	.word	0x58020400
 8008188:	58020800 	.word	0x58020800
 800818c:	58020c00 	.word	0x58020c00
 8008190:	58021000 	.word	0x58021000
 8008194:	58021400 	.word	0x58021400
 8008198:	58021800 	.word	0x58021800
 800819c:	58021c00 	.word	0x58021c00
 80081a0:	58022400 	.word	0x58022400
 80081a4:	2300      	movs	r3, #0
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	f002 0203 	and.w	r2, r2, #3
 80081ac:	0092      	lsls	r2, r2, #2
 80081ae:	4093      	lsls	r3, r2
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80081b6:	4938      	ldr	r1, [pc, #224]	; (8008298 <HAL_GPIO_Init+0x34c>)
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	089b      	lsrs	r3, r3, #2
 80081bc:	3302      	adds	r3, #2
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	43db      	mvns	r3, r3
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	4013      	ands	r3, r2
 80081d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	43db      	mvns	r3, r3
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	4013      	ands	r3, r2
 80081fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	4313      	orrs	r3, r2
 8008210:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	43db      	mvns	r3, r3
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	4013      	ands	r3, r2
 8008228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800823e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	43db      	mvns	r3, r3
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	4013      	ands	r3, r2
 8008256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	4313      	orrs	r3, r2
 800826a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800826c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	3301      	adds	r3, #1
 8008278:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	fa22 f303 	lsr.w	r3, r2, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	f47f ae6b 	bne.w	8007f60 <HAL_GPIO_Init+0x14>
  }
}
 800828a:	bf00      	nop
 800828c:	bf00      	nop
 800828e:	3724      	adds	r7, #36	; 0x24
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	58000400 	.word	0x58000400

0800829c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	807b      	strh	r3, [r7, #2]
 80082a8:	4613      	mov	r3, r2
 80082aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80082ac:	787b      	ldrb	r3, [r7, #1]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80082b2:	887a      	ldrh	r2, [r7, #2]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80082b8:	e003      	b.n	80082c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80082ba:	887b      	ldrh	r3, [r7, #2]
 80082bc:	041a      	lsls	r2, r3, #16
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	619a      	str	r2, [r3, #24]
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80082ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082d0:	b08f      	sub	sp, #60	; 0x3c
 80082d2:	af0a      	add	r7, sp, #40	; 0x28
 80082d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e116      	b.n	800850e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f009 fb66 	bl	80119cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2203      	movs	r2, #3
 8008304:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f006 faa7 	bl	800e872 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	603b      	str	r3, [r7, #0]
 800832a:	687e      	ldr	r6, [r7, #4]
 800832c:	466d      	mov	r5, sp
 800832e:	f106 0410 	add.w	r4, r6, #16
 8008332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800833a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800833e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008342:	1d33      	adds	r3, r6, #4
 8008344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008346:	6838      	ldr	r0, [r7, #0]
 8008348:	f006 f972 	bl	800e630 <USB_CoreInit>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2202      	movs	r2, #2
 8008356:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e0d7      	b.n	800850e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2100      	movs	r1, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f006 fa95 	bl	800e894 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]
 800836e:	e04a      	b.n	8008406 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008370:	7bfa      	ldrb	r2, [r7, #15]
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	1a9b      	subs	r3, r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	333d      	adds	r3, #61	; 0x3d
 8008380:	2201      	movs	r2, #1
 8008382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008384:	7bfa      	ldrb	r2, [r7, #15]
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	1a9b      	subs	r3, r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	333c      	adds	r3, #60	; 0x3c
 8008394:	7bfa      	ldrb	r2, [r7, #15]
 8008396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008398:	7bfa      	ldrb	r2, [r7, #15]
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	b298      	uxth	r0, r3
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	3342      	adds	r3, #66	; 0x42
 80083ac:	4602      	mov	r2, r0
 80083ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80083b0:	7bfa      	ldrb	r2, [r7, #15]
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	4613      	mov	r3, r2
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	440b      	add	r3, r1
 80083be:	333f      	adds	r3, #63	; 0x3f
 80083c0:	2200      	movs	r2, #0
 80083c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80083c4:	7bfa      	ldrb	r2, [r7, #15]
 80083c6:	6879      	ldr	r1, [r7, #4]
 80083c8:	4613      	mov	r3, r2
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	440b      	add	r3, r1
 80083d2:	3344      	adds	r3, #68	; 0x44
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80083d8:	7bfa      	ldrb	r2, [r7, #15]
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	4613      	mov	r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	1a9b      	subs	r3, r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	3348      	adds	r3, #72	; 0x48
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80083ec:	7bfa      	ldrb	r2, [r7, #15]
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	3350      	adds	r3, #80	; 0x50
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	3301      	adds	r3, #1
 8008404:	73fb      	strb	r3, [r7, #15]
 8008406:	7bfa      	ldrb	r2, [r7, #15]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	429a      	cmp	r2, r3
 800840e:	d3af      	bcc.n	8008370 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
 8008414:	e044      	b.n	80084a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008416:	7bfa      	ldrb	r2, [r7, #15]
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800842c:	7bfa      	ldrb	r2, [r7, #15]
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	4613      	mov	r3, r2
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	1a9b      	subs	r3, r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	440b      	add	r3, r1
 800843a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800843e:	7bfa      	ldrb	r2, [r7, #15]
 8008440:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008442:	7bfa      	ldrb	r2, [r7, #15]
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	1a9b      	subs	r3, r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	440b      	add	r3, r1
 8008450:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008454:	2200      	movs	r2, #0
 8008456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008458:	7bfa      	ldrb	r2, [r7, #15]
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4613      	mov	r3, r2
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800846e:	7bfa      	ldrb	r2, [r7, #15]
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	4613      	mov	r3, r2
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	1a9b      	subs	r3, r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	440b      	add	r3, r1
 800847c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008484:	7bfa      	ldrb	r2, [r7, #15]
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	4613      	mov	r3, r2
 800848a:	00db      	lsls	r3, r3, #3
 800848c:	1a9b      	subs	r3, r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	440b      	add	r3, r1
 8008492:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008496:	2200      	movs	r2, #0
 8008498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	3301      	adds	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
 80084a0:	7bfa      	ldrb	r2, [r7, #15]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d3b5      	bcc.n	8008416 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	687e      	ldr	r6, [r7, #4]
 80084b2:	466d      	mov	r5, sp
 80084b4:	f106 0410 	add.w	r4, r6, #16
 80084b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80084c8:	1d33      	adds	r3, r6, #4
 80084ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084cc:	6838      	ldr	r0, [r7, #0]
 80084ce:	f006 fa0b 	bl	800e8e8 <USB_DevInit>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e014      	b.n	800850e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d102      	bne.n	8008502 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 f891 	bl	8009624 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4618      	mov	r0, r3
 8008508:	f007 fa8b 	bl	800fa22 <USB_DevDisconnect>

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008516 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800852a:	2b01      	cmp	r3, #1
 800852c:	d101      	bne.n	8008532 <HAL_PCD_Start+0x1c>
 800852e:	2302      	movs	r3, #2
 8008530:	e020      	b.n	8008574 <HAL_PCD_Start+0x5e>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853e:	2b01      	cmp	r3, #1
 8008540:	d109      	bne.n	8008556 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008546:	2b01      	cmp	r3, #1
 8008548:	d005      	beq.n	8008556 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4618      	mov	r0, r3
 800855c:	f006 f978 	bl	800e850 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f007 fa3b 	bl	800f9e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b08d      	sub	sp, #52	; 0x34
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f007 faf9 	bl	800fb8a <USB_GetMode>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	f040 83ca 	bne.w	8008d34 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f007 fa5d 	bl	800fa64 <USB_ReadInterrupts>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 83c0 	beq.w	8008d32 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f007 fa54 	bl	800fa64 <USB_ReadInterrupts>
 80085bc:	4603      	mov	r3, r0
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d107      	bne.n	80085d6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	695a      	ldr	r2, [r3, #20]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f002 0202 	and.w	r2, r2, #2
 80085d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f007 fa42 	bl	800fa64 <USB_ReadInterrupts>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d161      	bne.n	80086ae <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0210 	bic.w	r2, r2, #16
 80085f8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	f003 020f 	and.w	r2, r3, #15
 8008606:	4613      	mov	r3, r2
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4413      	add	r3, r2
 8008616:	3304      	adds	r3, #4
 8008618:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	0c5b      	lsrs	r3, r3, #17
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	2b02      	cmp	r3, #2
 8008624:	d124      	bne.n	8008670 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800862c:	4013      	ands	r3, r2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d035      	beq.n	800869e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	091b      	lsrs	r3, r3, #4
 800863a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800863c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008640:	b29b      	uxth	r3, r3
 8008642:	461a      	mov	r2, r3
 8008644:	6a38      	ldr	r0, [r7, #32]
 8008646:	f007 f879 	bl	800f73c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	091b      	lsrs	r3, r3, #4
 8008652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008656:	441a      	add	r2, r3
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	699a      	ldr	r2, [r3, #24]
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	091b      	lsrs	r3, r3, #4
 8008664:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008668:	441a      	add	r2, r3
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	619a      	str	r2, [r3, #24]
 800866e:	e016      	b.n	800869e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	0c5b      	lsrs	r3, r3, #17
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	2b06      	cmp	r3, #6
 800867a:	d110      	bne.n	800869e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008682:	2208      	movs	r2, #8
 8008684:	4619      	mov	r1, r3
 8008686:	6a38      	ldr	r0, [r7, #32]
 8008688:	f007 f858 	bl	800f73c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	091b      	lsrs	r3, r3, #4
 8008694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008698:	441a      	add	r2, r3
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699a      	ldr	r2, [r3, #24]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f042 0210 	orr.w	r2, r2, #16
 80086ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f007 f9d6 	bl	800fa64 <USB_ReadInterrupts>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086c2:	d16e      	bne.n	80087a2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f007 f9dc 	bl	800fa8a <USB_ReadDevAllOutEpInterrupt>
 80086d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80086d4:	e062      	b.n	800879c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80086d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d057      	beq.n	8008790 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e6:	b2d2      	uxtb	r2, r2
 80086e8:	4611      	mov	r1, r2
 80086ea:	4618      	mov	r0, r3
 80086ec:	f007 fa01 	bl	800faf2 <USB_ReadDevOutEPInterrupt>
 80086f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00c      	beq.n	8008716 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008708:	461a      	mov	r2, r3
 800870a:	2301      	movs	r3, #1
 800870c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800870e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fddd 	bl	80092d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f003 0308 	and.w	r3, r3, #8
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00c      	beq.n	800873a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872c:	461a      	mov	r2, r3
 800872e:	2308      	movs	r3, #8
 8008730:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fed7 	bl	80094e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b00      	cmp	r3, #0
 8008742:	d008      	beq.n	8008756 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008750:	461a      	mov	r2, r3
 8008752:	2310      	movs	r3, #16
 8008754:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d008      	beq.n	8008772 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876c:	461a      	mov	r2, r3
 800876e:	2320      	movs	r3, #32
 8008770:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d009      	beq.n	8008790 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	461a      	mov	r2, r3
 800878a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800878e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	3301      	adds	r3, #1
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	085b      	lsrs	r3, r3, #1
 800879a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d199      	bne.n	80086d6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f007 f95c 	bl	800fa64 <USB_ReadInterrupts>
 80087ac:	4603      	mov	r3, r0
 80087ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087b6:	f040 80c0 	bne.w	800893a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f007 f97d 	bl	800fabe <USB_ReadDevAllInEpInterrupt>
 80087c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80087ca:	e0b2      	b.n	8008932 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80a7 	beq.w	8008926 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	4611      	mov	r1, r2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f007 f9a3 	bl	800fb2e <USB_ReadDevInEPInterrupt>
 80087e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d057      	beq.n	80088a4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	2201      	movs	r2, #1
 80087fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008800:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	43db      	mvns	r3, r3
 800880e:	69f9      	ldr	r1, [r7, #28]
 8008810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008814:	4013      	ands	r3, r2
 8008816:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008824:	461a      	mov	r2, r3
 8008826:	2301      	movs	r3, #1
 8008828:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d132      	bne.n	8008898 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008836:	4613      	mov	r3, r2
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	3348      	adds	r3, #72	; 0x48
 8008842:	6819      	ldr	r1, [r3, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008848:	4613      	mov	r3, r2
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	1a9b      	subs	r3, r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4403      	add	r3, r0
 8008852:	3344      	adds	r3, #68	; 0x44
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4419      	add	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800885c:	4613      	mov	r3, r2
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	1a9b      	subs	r3, r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4403      	add	r3, r0
 8008866:	3348      	adds	r3, #72	; 0x48
 8008868:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	2b00      	cmp	r3, #0
 800886e:	d113      	bne.n	8008898 <HAL_PCD_IRQHandler+0x31c>
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008874:	4613      	mov	r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	1a9b      	subs	r3, r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	3350      	adds	r3, #80	; 0x50
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d108      	bne.n	8008898 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6818      	ldr	r0, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008890:	461a      	mov	r2, r3
 8008892:	2101      	movs	r1, #1
 8008894:	f007 f9ac 	bl	800fbf0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	b2db      	uxtb	r3, r3
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f009 f903 	bl	8011aaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d008      	beq.n	80088c0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ba:	461a      	mov	r2, r3
 80088bc:	2308      	movs	r3, #8
 80088be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f003 0310 	and.w	r3, r3, #16
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d008      	beq.n	80088dc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d6:	461a      	mov	r2, r3
 80088d8:	2310      	movs	r3, #16
 80088da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f2:	461a      	mov	r2, r3
 80088f4:	2340      	movs	r3, #64	; 0x40
 80088f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d008      	beq.n	8008914 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890e:	461a      	mov	r2, r3
 8008910:	2302      	movs	r3, #2
 8008912:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800891e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fc48 	bl	80091b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	3301      	adds	r3, #1
 800892a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	085b      	lsrs	r3, r3, #1
 8008930:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	2b00      	cmp	r3, #0
 8008936:	f47f af49 	bne.w	80087cc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f007 f890 	bl	800fa64 <USB_ReadInterrupts>
 8008944:	4603      	mov	r3, r0
 8008946:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800894a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800894e:	d122      	bne.n	8008996 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800895e:	f023 0301 	bic.w	r3, r3, #1
 8008962:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800896a:	2b01      	cmp	r3, #1
 800896c:	d108      	bne.n	8008980 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008976:	2100      	movs	r1, #0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fe77 	bl	800966c <HAL_PCDEx_LPM_Callback>
 800897e:	e002      	b.n	8008986 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f009 f909 	bl	8011b98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	695a      	ldr	r2, [r3, #20]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4618      	mov	r0, r3
 800899c:	f007 f862 	bl	800fa64 <USB_ReadInterrupts>
 80089a0:	4603      	mov	r3, r0
 80089a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089aa:	d112      	bne.n	80089d2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d102      	bne.n	80089c2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f009 f8c5 	bl	8011b4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	695a      	ldr	r2, [r3, #20]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80089d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f007 f844 	bl	800fa64 <USB_ReadInterrupts>
 80089dc:	4603      	mov	r3, r0
 80089de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e6:	d121      	bne.n	8008a2c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80089f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d111      	bne.n	8008a26 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a10:	089b      	lsrs	r3, r3, #2
 8008a12:	f003 020f 	and.w	r2, r3, #15
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fe24 	bl	800966c <HAL_PCDEx_LPM_Callback>
 8008a24:	e002      	b.n	8008a2c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f009 f890 	bl	8011b4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f007 f817 	bl	800fa64 <USB_ReadInterrupts>
 8008a36:	4603      	mov	r3, r0
 8008a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a40:	f040 80c7 	bne.w	8008bd2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a52:	f023 0301 	bic.w	r3, r3, #1
 8008a56:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2110      	movs	r1, #16
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f006 f8a0 	bl	800eba4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a64:	2300      	movs	r3, #0
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a68:	e056      	b.n	8008b18 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a76:	461a      	mov	r2, r3
 8008a78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a7c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8e:	0151      	lsls	r1, r2, #5
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	440a      	add	r2, r1
 8008a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a9c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008abc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aca:	461a      	mov	r2, r3
 8008acc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ad0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008af0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b02:	0151      	lsls	r1, r2, #5
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	440a      	add	r2, r1
 8008b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b10:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	3301      	adds	r3, #1
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d3a3      	bcc.n	8008a6a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	69fa      	ldr	r2, [r7, #28]
 8008b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b30:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008b34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d016      	beq.n	8008b6c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b48:	69fa      	ldr	r2, [r7, #28]
 8008b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b4e:	f043 030b 	orr.w	r3, r3, #11
 8008b52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b64:	f043 030b 	orr.w	r3, r3, #11
 8008b68:	6453      	str	r3, [r2, #68]	; 0x44
 8008b6a:	e015      	b.n	8008b98 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b72:	695a      	ldr	r2, [r3, #20]
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008b80:	4313      	orrs	r3, r2
 8008b82:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b92:	f043 030b 	orr.w	r3, r3, #11
 8008b96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	69fa      	ldr	r2, [r7, #28]
 8008ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ba6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008baa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6818      	ldr	r0, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	f007 f817 	bl	800fbf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	695a      	ldr	r2, [r3, #20]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f006 ff44 	bl	800fa64 <USB_ReadInterrupts>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be6:	d124      	bne.n	8008c32 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f006 ffdb 	bl	800fba8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f006 f835 	bl	800ec66 <USB_GetDevSpeed>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681c      	ldr	r4, [r3, #0]
 8008c08:	f001 fc46 	bl	800a498 <HAL_RCC_GetHCLKFreq>
 8008c0c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	461a      	mov	r2, r3
 8008c16:	4620      	mov	r0, r4
 8008c18:	f005 fd78 	bl	800e70c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f008 ff6c 	bl	8011afa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695a      	ldr	r2, [r3, #20]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f006 ff14 	bl	800fa64 <USB_ReadInterrupts>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	d10a      	bne.n	8008c5c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f008 ff49 	bl	8011ade <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	695a      	ldr	r2, [r3, #20]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f002 0208 	and.w	r2, r2, #8
 8008c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f006 feff 	bl	800fa64 <USB_ReadInterrupts>
 8008c66:	4603      	mov	r3, r0
 8008c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c70:	d10f      	bne.n	8008c92 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f008 ffab 	bl	8011bd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	695a      	ldr	r2, [r3, #20]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f006 fee4 	bl	800fa64 <USB_ReadInterrupts>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ca6:	d10f      	bne.n	8008cc8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f008 ff7e 	bl	8011bb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695a      	ldr	r2, [r3, #20]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f006 fec9 	bl	800fa64 <USB_ReadInterrupts>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cdc:	d10a      	bne.n	8008cf4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f008 ff8c 	bl	8011bfc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695a      	ldr	r2, [r3, #20]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f006 feb3 	bl	800fa64 <USB_ReadInterrupts>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d115      	bne.n	8008d34 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	f003 0304 	and.w	r3, r3, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d002      	beq.n	8008d20 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f008 ff7c 	bl	8011c18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6859      	ldr	r1, [r3, #4]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	605a      	str	r2, [r3, #4]
 8008d30:	e000      	b.n	8008d34 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008d32:	bf00      	nop
    }
  }
}
 8008d34:	3734      	adds	r7, #52	; 0x34
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd90      	pop	{r4, r7, pc}

08008d3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	460b      	mov	r3, r1
 8008d44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d101      	bne.n	8008d54 <HAL_PCD_SetAddress+0x1a>
 8008d50:	2302      	movs	r3, #2
 8008d52:	e013      	b.n	8008d7c <HAL_PCD_SetAddress+0x42>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	78fa      	ldrb	r2, [r7, #3]
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f006 fe11 	bl	800f994 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	4611      	mov	r1, r2
 8008d90:	461a      	mov	r2, r3
 8008d92:	4603      	mov	r3, r0
 8008d94:	70fb      	strb	r3, [r7, #3]
 8008d96:	460b      	mov	r3, r1
 8008d98:	803b      	strh	r3, [r7, #0]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008da2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	da0f      	bge.n	8008dca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	f003 020f 	and.w	r2, r3, #15
 8008db0:	4613      	mov	r3, r2
 8008db2:	00db      	lsls	r3, r3, #3
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	3338      	adds	r3, #56	; 0x38
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	705a      	strb	r2, [r3, #1]
 8008dc8:	e00f      	b.n	8008dea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	f003 020f 	and.w	r2, r3, #15
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	1a9b      	subs	r3, r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	4413      	add	r3, r2
 8008de0:	3304      	adds	r3, #4
 8008de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008dea:	78fb      	ldrb	r3, [r7, #3]
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008df6:	883a      	ldrh	r2, [r7, #0]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	78ba      	ldrb	r2, [r7, #2]
 8008e00:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	785b      	ldrb	r3, [r3, #1]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d004      	beq.n	8008e14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008e14:	78bb      	ldrb	r3, [r7, #2]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d102      	bne.n	8008e20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d101      	bne.n	8008e2e <HAL_PCD_EP_Open+0xaa>
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e00e      	b.n	8008e4c <HAL_PCD_EP_Open+0xc8>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f005 ff37 	bl	800ecb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008e4a:	7afb      	ldrb	r3, [r7, #11]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	da0f      	bge.n	8008e88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	f003 020f 	and.w	r2, r3, #15
 8008e6e:	4613      	mov	r3, r2
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	3338      	adds	r3, #56	; 0x38
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	705a      	strb	r2, [r3, #1]
 8008e86:	e00f      	b.n	8008ea8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	f003 020f 	and.w	r2, r3, #15
 8008e8e:	4613      	mov	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	1a9b      	subs	r3, r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d101      	bne.n	8008ec2 <HAL_PCD_EP_Close+0x6e>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e00e      	b.n	8008ee0 <HAL_PCD_EP_Close+0x8c>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68f9      	ldr	r1, [r7, #12]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f005 ff75 	bl	800edc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ef8:	7afb      	ldrb	r3, [r7, #11]
 8008efa:	f003 020f 	and.w	r2, r3, #15
 8008efe:	4613      	mov	r3, r2
 8008f00:	00db      	lsls	r3, r3, #3
 8008f02:	1a9b      	subs	r3, r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	3304      	adds	r3, #4
 8008f10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2200      	movs	r2, #0
 8008f22:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	2200      	movs	r2, #0
 8008f28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f2a:	7afb      	ldrb	r3, [r7, #11]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d102      	bne.n	8008f44 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f44:	7afb      	ldrb	r3, [r7, #11]
 8008f46:	f003 030f 	and.w	r3, r3, #15
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d109      	bne.n	8008f62 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6979      	ldr	r1, [r7, #20]
 8008f5c:	f006 fa58 	bl	800f410 <USB_EP0StartXfer>
 8008f60:	e008      	b.n	8008f74 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6979      	ldr	r1, [r7, #20]
 8008f70:	f006 f802 	bl	800ef78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	460b      	mov	r3, r1
 8008f88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	f003 020f 	and.w	r2, r3, #15
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	4613      	mov	r3, r2
 8008f94:	00db      	lsls	r3, r3, #3
 8008f96:	1a9b      	subs	r3, r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008fa0:	681b      	ldr	r3, [r3, #0]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	603b      	str	r3, [r7, #0]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fbe:	7afb      	ldrb	r3, [r7, #11]
 8008fc0:	f003 020f 	and.w	r2, r3, #15
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	1a9b      	subs	r3, r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	3338      	adds	r3, #56	; 0x38
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2201      	movs	r2, #1
 8008fec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fee:	7afb      	ldrb	r3, [r7, #11]
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d102      	bne.n	8009008 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009008:	7afb      	ldrb	r3, [r7, #11]
 800900a:	f003 030f 	and.w	r3, r3, #15
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	b2db      	uxtb	r3, r3
 800901c:	461a      	mov	r2, r3
 800901e:	6979      	ldr	r1, [r7, #20]
 8009020:	f006 f9f6 	bl	800f410 <USB_EP0StartXfer>
 8009024:	e008      	b.n	8009038 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	461a      	mov	r2, r3
 8009032:	6979      	ldr	r1, [r7, #20]
 8009034:	f005 ffa0 	bl	800ef78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	460b      	mov	r3, r1
 800904c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800904e:	78fb      	ldrb	r3, [r7, #3]
 8009050:	f003 020f 	and.w	r2, r3, #15
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	429a      	cmp	r2, r3
 800905a:	d901      	bls.n	8009060 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e050      	b.n	8009102 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009064:	2b00      	cmp	r3, #0
 8009066:	da0f      	bge.n	8009088 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	f003 020f 	and.w	r2, r3, #15
 800906e:	4613      	mov	r3, r2
 8009070:	00db      	lsls	r3, r3, #3
 8009072:	1a9b      	subs	r3, r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	3338      	adds	r3, #56	; 0x38
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	4413      	add	r3, r2
 800907c:	3304      	adds	r3, #4
 800907e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2201      	movs	r2, #1
 8009084:	705a      	strb	r2, [r3, #1]
 8009086:	e00d      	b.n	80090a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	4613      	mov	r3, r2
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	1a9b      	subs	r3, r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	4413      	add	r3, r2
 800909a:	3304      	adds	r3, #4
 800909c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2201      	movs	r2, #1
 80090a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090aa:	78fb      	ldrb	r3, [r7, #3]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_PCD_EP_SetStall+0x82>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e01e      	b.n	8009102 <HAL_PCD_EP_SetStall+0xc0>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68f9      	ldr	r1, [r7, #12]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f006 fb8a 	bl	800f7ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	f003 030f 	and.w	r3, r3, #15
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	b2d9      	uxtb	r1, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090f2:	461a      	mov	r2, r3
 80090f4:	f006 fd7c 	bl	800fbf0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	460b      	mov	r3, r1
 8009114:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	f003 020f 	and.w	r2, r3, #15
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	429a      	cmp	r2, r3
 8009122:	d901      	bls.n	8009128 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e042      	b.n	80091ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800912c:	2b00      	cmp	r3, #0
 800912e:	da0f      	bge.n	8009150 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	f003 020f 	and.w	r2, r3, #15
 8009136:	4613      	mov	r3, r2
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	1a9b      	subs	r3, r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	3338      	adds	r3, #56	; 0x38
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	4413      	add	r3, r2
 8009144:	3304      	adds	r3, #4
 8009146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2201      	movs	r2, #1
 800914c:	705a      	strb	r2, [r3, #1]
 800914e:	e00f      	b.n	8009170 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	f003 020f 	and.w	r2, r3, #15
 8009156:	4613      	mov	r3, r2
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	1a9b      	subs	r3, r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4413      	add	r3, r2
 8009166:	3304      	adds	r3, #4
 8009168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009176:	78fb      	ldrb	r3, [r7, #3]
 8009178:	f003 030f 	and.w	r3, r3, #15
 800917c:	b2da      	uxtb	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_PCD_EP_ClrStall+0x86>
 800918c:	2302      	movs	r3, #2
 800918e:	e00e      	b.n	80091ae <HAL_PCD_EP_ClrStall+0xa4>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68f9      	ldr	r1, [r7, #12]
 800919e:	4618      	mov	r0, r3
 80091a0:	f006 fb92 	bl	800f8c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b08a      	sub	sp, #40	; 0x28
 80091ba:	af02      	add	r7, sp, #8
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	4613      	mov	r3, r2
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	1a9b      	subs	r3, r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	3338      	adds	r3, #56	; 0x38
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	4413      	add	r3, r2
 80091da:	3304      	adds	r3, #4
 80091dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	699a      	ldr	r2, [r3, #24]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d901      	bls.n	80091ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e06c      	b.n	80092c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	695a      	ldr	r2, [r3, #20]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	69fa      	ldr	r2, [r7, #28]
 8009200:	429a      	cmp	r2, r3
 8009202:	d902      	bls.n	800920a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	3303      	adds	r3, #3
 800920e:	089b      	lsrs	r3, r3, #2
 8009210:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009212:	e02b      	b.n	800926c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	695a      	ldr	r2, [r3, #20]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	69fa      	ldr	r2, [r7, #28]
 8009226:	429a      	cmp	r2, r3
 8009228:	d902      	bls.n	8009230 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	3303      	adds	r3, #3
 8009234:	089b      	lsrs	r3, r3, #2
 8009236:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	68d9      	ldr	r1, [r3, #12]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	b2da      	uxtb	r2, r3
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009248:	b2db      	uxtb	r3, r3
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	4603      	mov	r3, r0
 800924e:	6978      	ldr	r0, [r7, #20]
 8009250:	f006 fa36 	bl	800f6c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	68da      	ldr	r2, [r3, #12]
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	441a      	add	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	699a      	ldr	r2, [r3, #24]
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	441a      	add	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	b29b      	uxth	r3, r3
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	429a      	cmp	r2, r3
 8009280:	d809      	bhi.n	8009296 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	699a      	ldr	r2, [r3, #24]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800928a:	429a      	cmp	r2, r3
 800928c:	d203      	bcs.n	8009296 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	695b      	ldr	r3, [r3, #20]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1be      	bne.n	8009214 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	695a      	ldr	r2, [r3, #20]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d811      	bhi.n	80092c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	f003 030f 	and.w	r3, r3, #15
 80092a8:	2201      	movs	r2, #1
 80092aa:	fa02 f303 	lsl.w	r3, r2, r3
 80092ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	43db      	mvns	r3, r3
 80092bc:	6939      	ldr	r1, [r7, #16]
 80092be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092c2:	4013      	ands	r3, r2
 80092c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3720      	adds	r7, #32
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	333c      	adds	r3, #60	; 0x3c
 80092e8:	3304      	adds	r3, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b01      	cmp	r3, #1
 8009304:	f040 80a0 	bne.w	8009448 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f003 0308 	and.w	r3, r3, #8
 800930e:	2b00      	cmp	r3, #0
 8009310:	d015      	beq.n	800933e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4a72      	ldr	r2, [pc, #456]	; (80094e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8009316:	4293      	cmp	r3, r2
 8009318:	f240 80dd 	bls.w	80094d6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 80d7 	beq.w	80094d6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009334:	461a      	mov	r2, r3
 8009336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800933a:	6093      	str	r3, [r2, #8]
 800933c:	e0cb      	b.n	80094d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f003 0320 	and.w	r3, r3, #32
 8009344:	2b00      	cmp	r3, #0
 8009346:	d009      	beq.n	800935c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009354:	461a      	mov	r2, r3
 8009356:	2320      	movs	r3, #32
 8009358:	6093      	str	r3, [r2, #8]
 800935a:	e0bc      	b.n	80094d6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009362:	2b00      	cmp	r3, #0
 8009364:	f040 80b7 	bne.w	80094d6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4a5d      	ldr	r2, [pc, #372]	; (80094e0 <PCD_EP_OutXfrComplete_int+0x210>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d90f      	bls.n	8009390 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	4413      	add	r3, r2
 8009382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009386:	461a      	mov	r2, r3
 8009388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800938c:	6093      	str	r3, [r2, #8]
 800938e:	e0a2      	b.n	80094d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009390:	6879      	ldr	r1, [r7, #4]
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	4613      	mov	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	1a9b      	subs	r3, r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80093a2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	0159      	lsls	r1, r3, #5
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	440b      	add	r3, r1
 80093ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80093b6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	4613      	mov	r3, r2
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	1a9b      	subs	r3, r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4403      	add	r3, r0
 80093c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80093ca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	4613      	mov	r3, r2
 80093d2:	00db      	lsls	r3, r3, #3
 80093d4:	1a9b      	subs	r3, r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80093de:	6819      	ldr	r1, [r3, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	4613      	mov	r3, r2
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	1a9b      	subs	r3, r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4403      	add	r3, r0
 80093ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4419      	add	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	4613      	mov	r3, r2
 80093fc:	00db      	lsls	r3, r3, #3
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4403      	add	r3, r0
 8009404:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009408:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d114      	bne.n	800943a <PCD_EP_OutXfrComplete_int+0x16a>
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	4613      	mov	r3, r2
 8009416:	00db      	lsls	r3, r3, #3
 8009418:	1a9b      	subs	r3, r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d108      	bne.n	800943a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6818      	ldr	r0, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009432:	461a      	mov	r2, r3
 8009434:	2101      	movs	r1, #1
 8009436:	f006 fbdb 	bl	800fbf0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f008 fb17 	bl	8011a74 <HAL_PCD_DataOutStageCallback>
 8009446:	e046      	b.n	80094d6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4a26      	ldr	r2, [pc, #152]	; (80094e4 <PCD_EP_OutXfrComplete_int+0x214>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d124      	bne.n	800949a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00a      	beq.n	8009470 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009466:	461a      	mov	r2, r3
 8009468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800946c:	6093      	str	r3, [r2, #8]
 800946e:	e032      	b.n	80094d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b00      	cmp	r3, #0
 8009478:	d008      	beq.n	800948c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009486:	461a      	mov	r2, r3
 8009488:	2320      	movs	r3, #32
 800948a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f008 faee 	bl	8011a74 <HAL_PCD_DataOutStageCallback>
 8009498:	e01d      	b.n	80094d6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d114      	bne.n	80094ca <PCD_EP_OutXfrComplete_int+0x1fa>
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	1a9b      	subs	r3, r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	440b      	add	r3, r1
 80094ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d108      	bne.n	80094ca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80094c2:	461a      	mov	r2, r3
 80094c4:	2100      	movs	r1, #0
 80094c6:	f006 fb93 	bl	800fbf0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f008 facf 	bl	8011a74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	4f54300a 	.word	0x4f54300a
 80094e4:	4f54310a 	.word	0x4f54310a

080094e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	333c      	adds	r3, #60	; 0x3c
 8009500:	3304      	adds	r3, #4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	015a      	lsls	r2, r3, #5
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	4413      	add	r3, r2
 800950e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	4a15      	ldr	r2, [pc, #84]	; (8009570 <PCD_EP_OutSetupPacket_int+0x88>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d90e      	bls.n	800953c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009524:	2b00      	cmp	r3, #0
 8009526:	d009      	beq.n	800953c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	4413      	add	r3, r2
 8009530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009534:	461a      	mov	r2, r3
 8009536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800953a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f008 fa87 	bl	8011a50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4a0a      	ldr	r2, [pc, #40]	; (8009570 <PCD_EP_OutSetupPacket_int+0x88>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d90c      	bls.n	8009564 <PCD_EP_OutSetupPacket_int+0x7c>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d108      	bne.n	8009564 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800955c:	461a      	mov	r2, r3
 800955e:	2101      	movs	r1, #1
 8009560:	f006 fb46 	bl	800fbf0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	4f54300a 	.word	0x4f54300a

08009574 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	70fb      	strb	r3, [r7, #3]
 8009580:	4613      	mov	r3, r2
 8009582:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d107      	bne.n	80095a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009592:	883b      	ldrh	r3, [r7, #0]
 8009594:	0419      	lsls	r1, r3, #16
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	430a      	orrs	r2, r1
 800959e:	629a      	str	r2, [r3, #40]	; 0x28
 80095a0:	e028      	b.n	80095f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a8:	0c1b      	lsrs	r3, r3, #16
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	4413      	add	r3, r2
 80095ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
 80095b4:	e00d      	b.n	80095d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	3340      	adds	r3, #64	; 0x40
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	0c1b      	lsrs	r3, r3, #16
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	4413      	add	r3, r2
 80095ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	3301      	adds	r3, #1
 80095d0:	73fb      	strb	r3, [r7, #15]
 80095d2:	7bfa      	ldrb	r2, [r7, #15]
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	429a      	cmp	r2, r3
 80095da:	d3ec      	bcc.n	80095b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80095dc:	883b      	ldrh	r3, [r7, #0]
 80095de:	0418      	lsls	r0, r3, #16
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6819      	ldr	r1, [r3, #0]
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	4302      	orrs	r2, r0
 80095ec:	3340      	adds	r3, #64	; 0x40
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	440b      	add	r3, r1
 80095f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	887a      	ldrh	r2, [r7, #2]
 8009614:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009652:	4b05      	ldr	r3, [pc, #20]	; (8009668 <HAL_PCDEx_ActivateLPM+0x44>)
 8009654:	4313      	orrs	r3, r2
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	10000003 	.word	0x10000003

0800966c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800968c:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <HAL_PWREx_ConfigSupply+0x70>)
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b04      	cmp	r3, #4
 8009696:	d00a      	beq.n	80096ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009698:	4b16      	ldr	r3, [pc, #88]	; (80096f4 <HAL_PWREx_ConfigSupply+0x70>)
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d001      	beq.n	80096aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e01f      	b.n	80096ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	e01d      	b.n	80096ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80096ae:	4b11      	ldr	r3, [pc, #68]	; (80096f4 <HAL_PWREx_ConfigSupply+0x70>)
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f023 0207 	bic.w	r2, r3, #7
 80096b6:	490f      	ldr	r1, [pc, #60]	; (80096f4 <HAL_PWREx_ConfigSupply+0x70>)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80096be:	f7f9 fa4f 	bl	8002b60 <HAL_GetTick>
 80096c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80096c4:	e009      	b.n	80096da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80096c6:	f7f9 fa4b 	bl	8002b60 <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096d4:	d901      	bls.n	80096da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e007      	b.n	80096ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80096da:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <HAL_PWREx_ConfigSupply+0x70>)
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096e6:	d1ee      	bne.n	80096c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	58024800 	.word	0x58024800

080096f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80096fc:	4b05      	ldr	r3, [pc, #20]	; (8009714 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	4a04      	ldr	r2, [pc, #16]	; (8009714 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009706:	60d3      	str	r3, [r2, #12]
}
 8009708:	bf00      	nop
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	58024800 	.word	0x58024800

08009718 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b08c      	sub	sp, #48	; 0x30
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e37c      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 8089 	beq.w	800984a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009738:	4b9d      	ldr	r3, [pc, #628]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009740:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009742:	4b9b      	ldr	r3, [pc, #620]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009746:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974a:	2b10      	cmp	r3, #16
 800974c:	d007      	beq.n	800975e <HAL_RCC_OscConfig+0x46>
 800974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009750:	2b18      	cmp	r3, #24
 8009752:	d110      	bne.n	8009776 <HAL_RCC_OscConfig+0x5e>
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b02      	cmp	r3, #2
 800975c:	d10b      	bne.n	8009776 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800975e:	4b94      	ldr	r3, [pc, #592]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d06e      	beq.n	8009848 <HAL_RCC_OscConfig+0x130>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d16a      	bne.n	8009848 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e356      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800977e:	d106      	bne.n	800978e <HAL_RCC_OscConfig+0x76>
 8009780:	4b8b      	ldr	r3, [pc, #556]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a8a      	ldr	r2, [pc, #552]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	e02e      	b.n	80097ec <HAL_RCC_OscConfig+0xd4>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10c      	bne.n	80097b0 <HAL_RCC_OscConfig+0x98>
 8009796:	4b86      	ldr	r3, [pc, #536]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a85      	ldr	r2, [pc, #532]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 800979c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	4b83      	ldr	r3, [pc, #524]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a82      	ldr	r2, [pc, #520]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80097a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	e01d      	b.n	80097ec <HAL_RCC_OscConfig+0xd4>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097b8:	d10c      	bne.n	80097d4 <HAL_RCC_OscConfig+0xbc>
 80097ba:	4b7d      	ldr	r3, [pc, #500]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a7c      	ldr	r2, [pc, #496]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80097c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	4b7a      	ldr	r3, [pc, #488]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a79      	ldr	r2, [pc, #484]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80097cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	e00b      	b.n	80097ec <HAL_RCC_OscConfig+0xd4>
 80097d4:	4b76      	ldr	r3, [pc, #472]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a75      	ldr	r2, [pc, #468]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80097da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	4b73      	ldr	r3, [pc, #460]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a72      	ldr	r2, [pc, #456]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80097e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d014      	beq.n	800981e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f4:	f7f9 f9b4 	bl	8002b60 <HAL_GetTick>
 80097f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097fa:	e009      	b.n	8009810 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097fc:	f7f9 f9b0 	bl	8002b60 <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800980a:	d901      	bls.n	8009810 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e309      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009810:	4b67      	ldr	r3, [pc, #412]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d0ef      	beq.n	80097fc <HAL_RCC_OscConfig+0xe4>
 800981c:	e015      	b.n	800984a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800981e:	f7f9 f99f 	bl	8002b60 <HAL_GetTick>
 8009822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009824:	e009      	b.n	800983a <HAL_RCC_OscConfig+0x122>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009826:	f7f9 f99b 	bl	8002b60 <HAL_GetTick>
 800982a:	4602      	mov	r2, r0
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009834:	d901      	bls.n	800983a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e2f4      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800983a:	4b5d      	ldr	r3, [pc, #372]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1ef      	bne.n	8009826 <HAL_RCC_OscConfig+0x10e>
 8009846:	e000      	b.n	800984a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b00      	cmp	r3, #0
 8009854:	d06d      	beq.n	8009932 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009856:	4b56      	ldr	r3, [pc, #344]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800985e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009860:	4b53      	ldr	r3, [pc, #332]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009864:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d007      	beq.n	800987c <HAL_RCC_OscConfig+0x164>
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	2b18      	cmp	r3, #24
 8009870:	d11b      	bne.n	80098aa <HAL_RCC_OscConfig+0x192>
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	2b00      	cmp	r3, #0
 800987a:	d116      	bne.n	80098aa <HAL_RCC_OscConfig+0x192>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800987c:	4b4c      	ldr	r3, [pc, #304]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0304 	and.w	r3, r3, #4
 8009884:	2b00      	cmp	r3, #0
 8009886:	d005      	beq.n	8009894 <HAL_RCC_OscConfig+0x17c>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e2c7      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009894:	4b46      	ldr	r3, [pc, #280]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	061b      	lsls	r3, r3, #24
 80098a2:	4943      	ldr	r1, [pc, #268]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098a8:	e043      	b.n	8009932 <HAL_RCC_OscConfig+0x21a>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d026      	beq.n	8009900 <HAL_RCC_OscConfig+0x1e8>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098b2:	4b3f      	ldr	r3, [pc, #252]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f023 0219 	bic.w	r2, r3, #25
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	493c      	ldr	r1, [pc, #240]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c4:	f7f9 f94c 	bl	8002b60 <HAL_GetTick>
 80098c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098ca:	e008      	b.n	80098de <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098cc:	f7f9 f948 	bl	8002b60 <HAL_GetTick>
 80098d0:	4602      	mov	r2, r0
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d901      	bls.n	80098de <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e2a2      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098de:	4b34      	ldr	r3, [pc, #208]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0f0      	beq.n	80098cc <HAL_RCC_OscConfig+0x1b4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098ea:	4b31      	ldr	r3, [pc, #196]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	061b      	lsls	r3, r3, #24
 80098f8:	492d      	ldr	r1, [pc, #180]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	604b      	str	r3, [r1, #4]
 80098fe:	e018      	b.n	8009932 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009900:	4b2b      	ldr	r3, [pc, #172]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a2a      	ldr	r2, [pc, #168]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009906:	f023 0301 	bic.w	r3, r3, #1
 800990a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800990c:	f7f9 f928 	bl	8002b60 <HAL_GetTick>
 8009910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009912:	e008      	b.n	8009926 <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009914:	f7f9 f924 	bl	8002b60 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b02      	cmp	r3, #2
 8009920:	d901      	bls.n	8009926 <HAL_RCC_OscConfig+0x20e>
          {
            return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e27e      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009926:	4b22      	ldr	r3, [pc, #136]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1f0      	bne.n	8009914 <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0310 	and.w	r3, r3, #16
 800993a:	2b00      	cmp	r3, #0
 800993c:	d06d      	beq.n	8009a1a <HAL_RCC_OscConfig+0x302>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800993e:	4b1c      	ldr	r3, [pc, #112]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009946:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009948:	4b19      	ldr	r3, [pc, #100]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 800994a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b08      	cmp	r3, #8
 8009952:	d007      	beq.n	8009964 <HAL_RCC_OscConfig+0x24c>
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	2b18      	cmp	r3, #24
 8009958:	d11b      	bne.n	8009992 <HAL_RCC_OscConfig+0x27a>
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f003 0303 	and.w	r3, r3, #3
 8009960:	2b01      	cmp	r3, #1
 8009962:	d116      	bne.n	8009992 <HAL_RCC_OscConfig+0x27a>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009964:	4b12      	ldr	r3, [pc, #72]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800996c:	2b00      	cmp	r3, #0
 800996e:	d005      	beq.n	800997c <HAL_RCC_OscConfig+0x264>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	2b80      	cmp	r3, #128	; 0x80
 8009976:	d001      	beq.n	800997c <HAL_RCC_OscConfig+0x264>
      {
        return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e253      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800997c:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	061b      	lsls	r3, r3, #24
 800998a:	4909      	ldr	r1, [pc, #36]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 800998c:	4313      	orrs	r3, r2
 800998e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009990:	e043      	b.n	8009a1a <HAL_RCC_OscConfig+0x302>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d026      	beq.n	80099e8 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800999a:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a04      	ldr	r2, [pc, #16]	; (80099b0 <HAL_RCC_OscConfig+0x298>)
 80099a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a6:	f7f9 f8db 	bl	8002b60 <HAL_GetTick>
 80099aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099ac:	e00b      	b.n	80099c6 <HAL_RCC_OscConfig+0x2ae>
 80099ae:	bf00      	nop
 80099b0:	58024400 	.word	0x58024400
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80099b4:	f7f9 f8d4 	bl	8002b60 <HAL_GetTick>
 80099b8:	4602      	mov	r2, r0
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d901      	bls.n	80099c6 <HAL_RCC_OscConfig+0x2ae>
          {
            return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e22e      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099c6:	4ba3      	ldr	r3, [pc, #652]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0f0      	beq.n	80099b4 <HAL_RCC_OscConfig+0x29c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099d2:	4ba0      	ldr	r3, [pc, #640]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	061b      	lsls	r3, r3, #24
 80099e0:	499c      	ldr	r1, [pc, #624]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	60cb      	str	r3, [r1, #12]
 80099e6:	e018      	b.n	8009a1a <HAL_RCC_OscConfig+0x302>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80099e8:	4b9a      	ldr	r3, [pc, #616]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a99      	ldr	r2, [pc, #612]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 80099ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f4:	f7f9 f8b4 	bl	8002b60 <HAL_GetTick>
 80099f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80099fa:	e008      	b.n	8009a0e <HAL_RCC_OscConfig+0x2f6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80099fc:	f7f9 f8b0 	bl	8002b60 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d901      	bls.n	8009a0e <HAL_RCC_OscConfig+0x2f6>
          {
            return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e20a      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a0e:	4b91      	ldr	r3, [pc, #580]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1f0      	bne.n	80099fc <HAL_RCC_OscConfig+0x2e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0308 	and.w	r3, r3, #8
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d036      	beq.n	8009a94 <HAL_RCC_OscConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d019      	beq.n	8009a62 <HAL_RCC_OscConfig+0x34a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a2e:	4b89      	ldr	r3, [pc, #548]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a32:	4a88      	ldr	r2, [pc, #544]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009a34:	f043 0301 	orr.w	r3, r3, #1
 8009a38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a3a:	f7f9 f891 	bl	8002b60 <HAL_GetTick>
 8009a3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a40:	e008      	b.n	8009a54 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a42:	f7f9 f88d 	bl	8002b60 <HAL_GetTick>
 8009a46:	4602      	mov	r2, r0
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d901      	bls.n	8009a54 <HAL_RCC_OscConfig+0x33c>
        {
          return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e1e7      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a54:	4b7f      	ldr	r3, [pc, #508]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0f0      	beq.n	8009a42 <HAL_RCC_OscConfig+0x32a>
 8009a60:	e018      	b.n	8009a94 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a62:	4b7c      	ldr	r3, [pc, #496]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a66:	4a7b      	ldr	r2, [pc, #492]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009a68:	f023 0301 	bic.w	r3, r3, #1
 8009a6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a6e:	f7f9 f877 	bl	8002b60 <HAL_GetTick>
 8009a72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a74:	e008      	b.n	8009a88 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a76:	f7f9 f873 	bl	8002b60 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d901      	bls.n	8009a88 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e1cd      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a88:	4b72      	ldr	r3, [pc, #456]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f0      	bne.n	8009a76 <HAL_RCC_OscConfig+0x35e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0320 	and.w	r3, r3, #32
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d036      	beq.n	8009b0e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d019      	beq.n	8009adc <HAL_RCC_OscConfig+0x3c4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009aa8:	4b6a      	ldr	r3, [pc, #424]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a69      	ldr	r2, [pc, #420]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009aae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ab2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ab4:	f7f9 f854 	bl	8002b60 <HAL_GetTick>
 8009ab8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009aba:	e008      	b.n	8009ace <HAL_RCC_OscConfig+0x3b6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009abc:	f7f9 f850 	bl	8002b60 <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d901      	bls.n	8009ace <HAL_RCC_OscConfig+0x3b6>
        {
          return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e1aa      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ace:	4b61      	ldr	r3, [pc, #388]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d0f0      	beq.n	8009abc <HAL_RCC_OscConfig+0x3a4>
 8009ada:	e018      	b.n	8009b0e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009adc:	4b5d      	ldr	r3, [pc, #372]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a5c      	ldr	r2, [pc, #368]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ae6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ae8:	f7f9 f83a 	bl	8002b60 <HAL_GetTick>
 8009aec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009aee:	e008      	b.n	8009b02 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009af0:	f7f9 f836 	bl	8002b60 <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d901      	bls.n	8009b02 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e190      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b02:	4b54      	ldr	r3, [pc, #336]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1f0      	bne.n	8009af0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 0304 	and.w	r3, r3, #4
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 8081 	beq.w	8009c1e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009b1c:	4b4e      	ldr	r3, [pc, #312]	; (8009c58 <HAL_RCC_OscConfig+0x540>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a4d      	ldr	r2, [pc, #308]	; (8009c58 <HAL_RCC_OscConfig+0x540>)
 8009b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b28:	f7f9 f81a 	bl	8002b60 <HAL_GetTick>
 8009b2c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b2e:	e008      	b.n	8009b42 <HAL_RCC_OscConfig+0x42a>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009b30:	f7f9 f816 	bl	8002b60 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	2b64      	cmp	r3, #100	; 0x64
 8009b3c:	d901      	bls.n	8009b42 <HAL_RCC_OscConfig+0x42a>
      {
        return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e170      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b42:	4b45      	ldr	r3, [pc, #276]	; (8009c58 <HAL_RCC_OscConfig+0x540>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0f0      	beq.n	8009b30 <HAL_RCC_OscConfig+0x418>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d106      	bne.n	8009b64 <HAL_RCC_OscConfig+0x44c>
 8009b56:	4b3f      	ldr	r3, [pc, #252]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5a:	4a3e      	ldr	r2, [pc, #248]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009b5c:	f043 0301 	orr.w	r3, r3, #1
 8009b60:	6713      	str	r3, [r2, #112]	; 0x70
 8009b62:	e02d      	b.n	8009bc0 <HAL_RCC_OscConfig+0x4a8>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10c      	bne.n	8009b86 <HAL_RCC_OscConfig+0x46e>
 8009b6c:	4b39      	ldr	r3, [pc, #228]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b70:	4a38      	ldr	r2, [pc, #224]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009b72:	f023 0301 	bic.w	r3, r3, #1
 8009b76:	6713      	str	r3, [r2, #112]	; 0x70
 8009b78:	4b36      	ldr	r3, [pc, #216]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b7c:	4a35      	ldr	r2, [pc, #212]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009b7e:	f023 0304 	bic.w	r3, r3, #4
 8009b82:	6713      	str	r3, [r2, #112]	; 0x70
 8009b84:	e01c      	b.n	8009bc0 <HAL_RCC_OscConfig+0x4a8>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	d10c      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x490>
 8009b8e:	4b31      	ldr	r3, [pc, #196]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b92:	4a30      	ldr	r2, [pc, #192]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009b94:	f043 0304 	orr.w	r3, r3, #4
 8009b98:	6713      	str	r3, [r2, #112]	; 0x70
 8009b9a:	4b2e      	ldr	r3, [pc, #184]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9e:	4a2d      	ldr	r2, [pc, #180]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009ba0:	f043 0301 	orr.w	r3, r3, #1
 8009ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ba6:	e00b      	b.n	8009bc0 <HAL_RCC_OscConfig+0x4a8>
 8009ba8:	4b2a      	ldr	r3, [pc, #168]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bac:	4a29      	ldr	r2, [pc, #164]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009bae:	f023 0301 	bic.w	r3, r3, #1
 8009bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8009bb4:	4b27      	ldr	r3, [pc, #156]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb8:	4a26      	ldr	r2, [pc, #152]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009bba:	f023 0304 	bic.w	r3, r3, #4
 8009bbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d015      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x4dc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bc8:	f7f8 ffca 	bl	8002b60 <HAL_GetTick>
 8009bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bce:	e00a      	b.n	8009be6 <HAL_RCC_OscConfig+0x4ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bd0:	f7f8 ffc6 	bl	8002b60 <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d901      	bls.n	8009be6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e11e      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009be6:	4b1b      	ldr	r3, [pc, #108]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bea:	f003 0302 	and.w	r3, r3, #2
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0ee      	beq.n	8009bd0 <HAL_RCC_OscConfig+0x4b8>
 8009bf2:	e014      	b.n	8009c1e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bf4:	f7f8 ffb4 	bl	8002b60 <HAL_GetTick>
 8009bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009bfa:	e00a      	b.n	8009c12 <HAL_RCC_OscConfig+0x4fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bfc:	f7f8 ffb0 	bl	8002b60 <HAL_GetTick>
 8009c00:	4602      	mov	r2, r0
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d901      	bls.n	8009c12 <HAL_RCC_OscConfig+0x4fa>
        {
          return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e108      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c12:	4b10      	ldr	r3, [pc, #64]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	f003 0302 	and.w	r3, r3, #2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1ee      	bne.n	8009bfc <HAL_RCC_OscConfig+0x4e4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 80fd 	beq.w	8009e22 <HAL_RCC_OscConfig+0x70a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009c28:	4b0a      	ldr	r3, [pc, #40]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c30:	2b18      	cmp	r3, #24
 8009c32:	f000 80b8 	beq.w	8009da6 <HAL_RCC_OscConfig+0x68e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	f040 8099 	bne.w	8009d72 <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c40:	4b04      	ldr	r3, [pc, #16]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a03      	ldr	r2, [pc, #12]	; (8009c54 <HAL_RCC_OscConfig+0x53c>)
 8009c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c4c:	f7f8 ff88 	bl	8002b60 <HAL_GetTick>
 8009c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c52:	e00c      	b.n	8009c6e <HAL_RCC_OscConfig+0x556>
 8009c54:	58024400 	.word	0x58024400
 8009c58:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c5c:	f7f8 ff80 	bl	8002b60 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d901      	bls.n	8009c6e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e0da      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c6e:	4b6f      	ldr	r3, [pc, #444]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1f0      	bne.n	8009c5c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c7a:	4b6c      	ldr	r3, [pc, #432]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c7e:	4b6c      	ldr	r3, [pc, #432]	; (8009e30 <HAL_RCC_OscConfig+0x718>)
 8009c80:	4013      	ands	r3, r2
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009c8a:	0112      	lsls	r2, r2, #4
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	4967      	ldr	r1, [pc, #412]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	628b      	str	r3, [r1, #40]	; 0x28
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	025b      	lsls	r3, r3, #9
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	431a      	orrs	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	041b      	lsls	r3, r3, #16
 8009cb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	061b      	lsls	r3, r3, #24
 8009cc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009cc4:	4959      	ldr	r1, [pc, #356]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009cca:	4b58      	ldr	r3, [pc, #352]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cce:	4a57      	ldr	r2, [pc, #348]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009cd0:	f023 0301 	bic.w	r3, r3, #1
 8009cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009cd6:	4b55      	ldr	r3, [pc, #340]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cda:	4b56      	ldr	r3, [pc, #344]	; (8009e34 <HAL_RCC_OscConfig+0x71c>)
 8009cdc:	4013      	ands	r3, r2
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009ce2:	00d2      	lsls	r2, r2, #3
 8009ce4:	4951      	ldr	r1, [pc, #324]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009cea:	4b50      	ldr	r3, [pc, #320]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cee:	f023 020c 	bic.w	r2, r3, #12
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf6:	494d      	ldr	r1, [pc, #308]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009cfc:	4b4b      	ldr	r3, [pc, #300]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	f023 0202 	bic.w	r2, r3, #2
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d08:	4948      	ldr	r1, [pc, #288]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d0e:	4b47      	ldr	r3, [pc, #284]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d12:	4a46      	ldr	r2, [pc, #280]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d1a:	4b44      	ldr	r3, [pc, #272]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1e:	4a43      	ldr	r2, [pc, #268]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009d26:	4b41      	ldr	r3, [pc, #260]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2a:	4a40      	ldr	r2, [pc, #256]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009d32:	4b3e      	ldr	r3, [pc, #248]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	4a3d      	ldr	r2, [pc, #244]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d38:	f043 0301 	orr.w	r3, r3, #1
 8009d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d3e:	4b3b      	ldr	r3, [pc, #236]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a3a      	ldr	r2, [pc, #232]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d4a:	f7f8 ff09 	bl	8002b60 <HAL_GetTick>
 8009d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d50:	e008      	b.n	8009d64 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d52:	f7f8 ff05 	bl	8002b60 <HAL_GetTick>
 8009d56:	4602      	mov	r2, r0
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d901      	bls.n	8009d64 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e05f      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d64:	4b31      	ldr	r3, [pc, #196]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0f0      	beq.n	8009d52 <HAL_RCC_OscConfig+0x63a>
 8009d70:	e057      	b.n	8009e22 <HAL_RCC_OscConfig+0x70a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d72:	4b2e      	ldr	r3, [pc, #184]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a2d      	ldr	r2, [pc, #180]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d7e:	f7f8 feef 	bl	8002b60 <HAL_GetTick>
 8009d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d84:	e008      	b.n	8009d98 <HAL_RCC_OscConfig+0x680>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d86:	f7f8 feeb 	bl	8002b60 <HAL_GetTick>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d901      	bls.n	8009d98 <HAL_RCC_OscConfig+0x680>
          {
            return HAL_TIMEOUT;
 8009d94:	2303      	movs	r3, #3
 8009d96:	e045      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d98:	4b24      	ldr	r3, [pc, #144]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1f0      	bne.n	8009d86 <HAL_RCC_OscConfig+0x66e>
 8009da4:	e03d      	b.n	8009e22 <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009da6:	4b21      	ldr	r3, [pc, #132]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009daa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009dac:	4b1f      	ldr	r3, [pc, #124]	; (8009e2c <HAL_RCC_OscConfig+0x714>)
 8009dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d031      	beq.n	8009e1e <HAL_RCC_OscConfig+0x706>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f003 0203 	and.w	r2, r3, #3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d12a      	bne.n	8009e1e <HAL_RCC_OscConfig+0x706>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	091b      	lsrs	r3, r3, #4
 8009dcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d122      	bne.n	8009e1e <HAL_RCC_OscConfig+0x706>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d11a      	bne.n	8009e1e <HAL_RCC_OscConfig+0x706>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	0a5b      	lsrs	r3, r3, #9
 8009dec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d111      	bne.n	8009e1e <HAL_RCC_OscConfig+0x706>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	0c1b      	lsrs	r3, r3, #16
 8009dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e06:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d108      	bne.n	8009e1e <HAL_RCC_OscConfig+0x706>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	0e1b      	lsrs	r3, r3, #24
 8009e10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d001      	beq.n	8009e22 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e000      	b.n	8009e24 <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3730      	adds	r7, #48	; 0x30
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	58024400 	.word	0x58024400
 8009e30:	fffffc0c 	.word	0xfffffc0c
 8009e34:	ffff0007 	.word	0xffff0007

08009e38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e19c      	b.n	800a186 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e4c:	4b8a      	ldr	r3, [pc, #552]	; (800a078 <HAL_RCC_ClockConfig+0x240>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 030f 	and.w	r3, r3, #15
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d910      	bls.n	8009e7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e5a:	4b87      	ldr	r3, [pc, #540]	; (800a078 <HAL_RCC_ClockConfig+0x240>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f023 020f 	bic.w	r2, r3, #15
 8009e62:	4985      	ldr	r1, [pc, #532]	; (800a078 <HAL_RCC_ClockConfig+0x240>)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e6a:	4b83      	ldr	r3, [pc, #524]	; (800a078 <HAL_RCC_ClockConfig+0x240>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 030f 	and.w	r3, r3, #15
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d001      	beq.n	8009e7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e184      	b.n	800a186 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 0304 	and.w	r3, r3, #4
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d010      	beq.n	8009eaa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	691a      	ldr	r2, [r3, #16]
 8009e8c:	4b7b      	ldr	r3, [pc, #492]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d908      	bls.n	8009eaa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e98:	4b78      	ldr	r3, [pc, #480]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	4975      	ldr	r1, [pc, #468]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 0308 	and.w	r3, r3, #8
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d010      	beq.n	8009ed8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	695a      	ldr	r2, [r3, #20]
 8009eba:	4b70      	ldr	r3, [pc, #448]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009ebc:	69db      	ldr	r3, [r3, #28]
 8009ebe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d908      	bls.n	8009ed8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009ec6:	4b6d      	ldr	r3, [pc, #436]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	496a      	ldr	r1, [pc, #424]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0310 	and.w	r3, r3, #16
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d010      	beq.n	8009f06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	699a      	ldr	r2, [r3, #24]
 8009ee8:	4b64      	ldr	r3, [pc, #400]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009eea:	69db      	ldr	r3, [r3, #28]
 8009eec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d908      	bls.n	8009f06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ef4:	4b61      	ldr	r3, [pc, #388]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	495e      	ldr	r1, [pc, #376]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0320 	and.w	r3, r3, #32
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d010      	beq.n	8009f34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69da      	ldr	r2, [r3, #28]
 8009f16:	4b59      	ldr	r3, [pc, #356]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d908      	bls.n	8009f34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009f22:	4b56      	ldr	r3, [pc, #344]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	4953      	ldr	r1, [pc, #332]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009f30:	4313      	orrs	r3, r2
 8009f32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0302 	and.w	r3, r3, #2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d010      	beq.n	8009f62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68da      	ldr	r2, [r3, #12]
 8009f44:	4b4d      	ldr	r3, [pc, #308]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	f003 030f 	and.w	r3, r3, #15
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d908      	bls.n	8009f62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f50:	4b4a      	ldr	r3, [pc, #296]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	f023 020f 	bic.w	r2, r3, #15
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	4947      	ldr	r1, [pc, #284]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d055      	beq.n	800a01a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009f6e:	4b43      	ldr	r3, [pc, #268]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	4940      	ldr	r1, [pc, #256]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d107      	bne.n	8009f98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f88:	4b3c      	ldr	r3, [pc, #240]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d121      	bne.n	8009fd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e0f6      	b.n	800a186 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d107      	bne.n	8009fb0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fa0:	4b36      	ldr	r3, [pc, #216]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d115      	bne.n	8009fd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e0ea      	b.n	800a186 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d107      	bne.n	8009fc8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fb8:	4b30      	ldr	r3, [pc, #192]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d109      	bne.n	8009fd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e0de      	b.n	800a186 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fc8:	4b2c      	ldr	r3, [pc, #176]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e0d6      	b.n	800a186 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009fd8:	4b28      	ldr	r3, [pc, #160]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	f023 0207 	bic.w	r2, r3, #7
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	4925      	ldr	r1, [pc, #148]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fea:	f7f8 fdb9 	bl	8002b60 <HAL_GetTick>
 8009fee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ff0:	e00a      	b.n	800a008 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ff2:	f7f8 fdb5 	bl	8002b60 <HAL_GetTick>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a000:	4293      	cmp	r3, r2
 800a002:	d901      	bls.n	800a008 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a004:	2303      	movs	r3, #3
 800a006:	e0be      	b.n	800a186 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a008:	4b1c      	ldr	r3, [pc, #112]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	429a      	cmp	r2, r3
 800a018:	d1eb      	bne.n	8009ff2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d010      	beq.n	800a048 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68da      	ldr	r2, [r3, #12]
 800a02a:	4b14      	ldr	r3, [pc, #80]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	f003 030f 	and.w	r3, r3, #15
 800a032:	429a      	cmp	r2, r3
 800a034:	d208      	bcs.n	800a048 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a036:	4b11      	ldr	r3, [pc, #68]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	f023 020f 	bic.w	r2, r3, #15
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	490e      	ldr	r1, [pc, #56]	; (800a07c <HAL_RCC_ClockConfig+0x244>)
 800a044:	4313      	orrs	r3, r2
 800a046:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a048:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <HAL_RCC_ClockConfig+0x240>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 030f 	and.w	r3, r3, #15
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	429a      	cmp	r2, r3
 800a054:	d214      	bcs.n	800a080 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a056:	4b08      	ldr	r3, [pc, #32]	; (800a078 <HAL_RCC_ClockConfig+0x240>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f023 020f 	bic.w	r2, r3, #15
 800a05e:	4906      	ldr	r1, [pc, #24]	; (800a078 <HAL_RCC_ClockConfig+0x240>)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	4313      	orrs	r3, r2
 800a064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a066:	4b04      	ldr	r3, [pc, #16]	; (800a078 <HAL_RCC_ClockConfig+0x240>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 030f 	and.w	r3, r3, #15
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d005      	beq.n	800a080 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e086      	b.n	800a186 <HAL_RCC_ClockConfig+0x34e>
 800a078:	52002000 	.word	0x52002000
 800a07c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d010      	beq.n	800a0ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691a      	ldr	r2, [r3, #16]
 800a090:	4b3f      	ldr	r3, [pc, #252]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a098:	429a      	cmp	r2, r3
 800a09a:	d208      	bcs.n	800a0ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a09c:	4b3c      	ldr	r3, [pc, #240]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	4939      	ldr	r1, [pc, #228]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0308 	and.w	r3, r3, #8
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d010      	beq.n	800a0dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	695a      	ldr	r2, [r3, #20]
 800a0be:	4b34      	ldr	r3, [pc, #208]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d208      	bcs.n	800a0dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0ca:	4b31      	ldr	r3, [pc, #196]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	492e      	ldr	r1, [pc, #184]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 0310 	and.w	r3, r3, #16
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d010      	beq.n	800a10a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	699a      	ldr	r2, [r3, #24]
 800a0ec:	4b28      	ldr	r3, [pc, #160]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d208      	bcs.n	800a10a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a0f8:	4b25      	ldr	r3, [pc, #148]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a0fa:	69db      	ldr	r3, [r3, #28]
 800a0fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	4922      	ldr	r1, [pc, #136]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a106:	4313      	orrs	r3, r2
 800a108:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0320 	and.w	r3, r3, #32
 800a112:	2b00      	cmp	r3, #0
 800a114:	d010      	beq.n	800a138 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	69da      	ldr	r2, [r3, #28]
 800a11a:	4b1d      	ldr	r3, [pc, #116]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a122:	429a      	cmp	r2, r3
 800a124:	d208      	bcs.n	800a138 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a126:	4b1a      	ldr	r3, [pc, #104]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	4917      	ldr	r1, [pc, #92]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a134:	4313      	orrs	r3, r2
 800a136:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a138:	f000 f834 	bl	800a1a4 <HAL_RCC_GetSysClockFreq>
 800a13c:	4602      	mov	r2, r0
 800a13e:	4b14      	ldr	r3, [pc, #80]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	0a1b      	lsrs	r3, r3, #8
 800a144:	f003 030f 	and.w	r3, r3, #15
 800a148:	4912      	ldr	r1, [pc, #72]	; (800a194 <HAL_RCC_ClockConfig+0x35c>)
 800a14a:	5ccb      	ldrb	r3, [r1, r3]
 800a14c:	f003 031f 	and.w	r3, r3, #31
 800a150:	fa22 f303 	lsr.w	r3, r2, r3
 800a154:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a156:	4b0e      	ldr	r3, [pc, #56]	; (800a190 <HAL_RCC_ClockConfig+0x358>)
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	f003 030f 	and.w	r3, r3, #15
 800a15e:	4a0d      	ldr	r2, [pc, #52]	; (800a194 <HAL_RCC_ClockConfig+0x35c>)
 800a160:	5cd3      	ldrb	r3, [r2, r3]
 800a162:	f003 031f 	and.w	r3, r3, #31
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	fa22 f303 	lsr.w	r3, r2, r3
 800a16c:	4a0a      	ldr	r2, [pc, #40]	; (800a198 <HAL_RCC_ClockConfig+0x360>)
 800a16e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a170:	4a0a      	ldr	r2, [pc, #40]	; (800a19c <HAL_RCC_ClockConfig+0x364>)
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a176:	4b0a      	ldr	r3, [pc, #40]	; (800a1a0 <HAL_RCC_ClockConfig+0x368>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7f8 fca6 	bl	8002acc <HAL_InitTick>
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a184:	7bfb      	ldrb	r3, [r7, #15]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	58024400 	.word	0x58024400
 800a194:	080130d0 	.word	0x080130d0
 800a198:	2400000c 	.word	0x2400000c
 800a19c:	24000008 	.word	0x24000008
 800a1a0:	24000010 	.word	0x24000010

0800a1a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b089      	sub	sp, #36	; 0x24
 800a1a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1aa:	4bb3      	ldr	r3, [pc, #716]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1b2:	2b18      	cmp	r3, #24
 800a1b4:	f200 8155 	bhi.w	800a462 <HAL_RCC_GetSysClockFreq+0x2be>
 800a1b8:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1be:	bf00      	nop
 800a1c0:	0800a225 	.word	0x0800a225
 800a1c4:	0800a463 	.word	0x0800a463
 800a1c8:	0800a463 	.word	0x0800a463
 800a1cc:	0800a463 	.word	0x0800a463
 800a1d0:	0800a463 	.word	0x0800a463
 800a1d4:	0800a463 	.word	0x0800a463
 800a1d8:	0800a463 	.word	0x0800a463
 800a1dc:	0800a463 	.word	0x0800a463
 800a1e0:	0800a24b 	.word	0x0800a24b
 800a1e4:	0800a463 	.word	0x0800a463
 800a1e8:	0800a463 	.word	0x0800a463
 800a1ec:	0800a463 	.word	0x0800a463
 800a1f0:	0800a463 	.word	0x0800a463
 800a1f4:	0800a463 	.word	0x0800a463
 800a1f8:	0800a463 	.word	0x0800a463
 800a1fc:	0800a463 	.word	0x0800a463
 800a200:	0800a251 	.word	0x0800a251
 800a204:	0800a463 	.word	0x0800a463
 800a208:	0800a463 	.word	0x0800a463
 800a20c:	0800a463 	.word	0x0800a463
 800a210:	0800a463 	.word	0x0800a463
 800a214:	0800a463 	.word	0x0800a463
 800a218:	0800a463 	.word	0x0800a463
 800a21c:	0800a463 	.word	0x0800a463
 800a220:	0800a257 	.word	0x0800a257
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a224:	4b94      	ldr	r3, [pc, #592]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0320 	and.w	r3, r3, #32
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d009      	beq.n	800a244 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a230:	4b91      	ldr	r3, [pc, #580]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	08db      	lsrs	r3, r3, #3
 800a236:	f003 0303 	and.w	r3, r3, #3
 800a23a:	4a90      	ldr	r2, [pc, #576]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a23c:	fa22 f303 	lsr.w	r3, r2, r3
 800a240:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a242:	e111      	b.n	800a468 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a244:	4b8d      	ldr	r3, [pc, #564]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a246:	61bb      	str	r3, [r7, #24]
    break;
 800a248:	e10e      	b.n	800a468 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a24a:	4b8d      	ldr	r3, [pc, #564]	; (800a480 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a24c:	61bb      	str	r3, [r7, #24]
    break;
 800a24e:	e10b      	b.n	800a468 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a250:	4b8c      	ldr	r3, [pc, #560]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a252:	61bb      	str	r3, [r7, #24]
    break;
 800a254:	e108      	b.n	800a468 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a256:	4b88      	ldr	r3, [pc, #544]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25a:	f003 0303 	and.w	r3, r3, #3
 800a25e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a260:	4b85      	ldr	r3, [pc, #532]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a264:	091b      	lsrs	r3, r3, #4
 800a266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a26a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a26c:	4b82      	ldr	r3, [pc, #520]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a276:	4b80      	ldr	r3, [pc, #512]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27a:	08db      	lsrs	r3, r3, #3
 800a27c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	fb02 f303 	mul.w	r3, r2, r3
 800a286:	ee07 3a90 	vmov	s15, r3
 800a28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a28e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 80e1 	beq.w	800a45c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	f000 8083 	beq.w	800a3a8 <HAL_RCC_GetSysClockFreq+0x204>
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	f200 80a1 	bhi.w	800a3ec <HAL_RCC_GetSysClockFreq+0x248>
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d003      	beq.n	800a2b8 <HAL_RCC_GetSysClockFreq+0x114>
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d056      	beq.n	800a364 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a2b6:	e099      	b.n	800a3ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2b8:	4b6f      	ldr	r3, [pc, #444]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0320 	and.w	r3, r3, #32
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d02d      	beq.n	800a320 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2c4:	4b6c      	ldr	r3, [pc, #432]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	08db      	lsrs	r3, r3, #3
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	4a6b      	ldr	r2, [pc, #428]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	ee07 3a90 	vmov	s15, r3
 800a2dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	ee07 3a90 	vmov	s15, r3
 800a2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ee:	4b62      	ldr	r3, [pc, #392]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f6:	ee07 3a90 	vmov	s15, r3
 800a2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800a302:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a488 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a30e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a31a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a31e:	e087      	b.n	800a430 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	ee07 3a90 	vmov	s15, r3
 800a326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a48c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a332:	4b51      	ldr	r3, [pc, #324]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a342:	ed97 6a02 	vldr	s12, [r7, #8]
 800a346:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a488 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a362:	e065      	b.n	800a430 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	ee07 3a90 	vmov	s15, r3
 800a36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a490 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a376:	4b40      	ldr	r3, [pc, #256]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37e:	ee07 3a90 	vmov	s15, r3
 800a382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a386:	ed97 6a02 	vldr	s12, [r7, #8]
 800a38a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a488 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a38e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a39a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3a6:	e043      	b.n	800a430 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	ee07 3a90 	vmov	s15, r3
 800a3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a494 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a3b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ba:	4b2f      	ldr	r3, [pc, #188]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c2:	ee07 3a90 	vmov	s15, r3
 800a3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a488 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3ea:	e021      	b.n	800a430 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	ee07 3a90 	vmov	s15, r3
 800a3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a490 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a3fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3fe:	4b1e      	ldr	r3, [pc, #120]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a406:	ee07 3a90 	vmov	s15, r3
 800a40a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a40e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a412:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a488 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a41a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a41e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a42e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a430:	4b11      	ldr	r3, [pc, #68]	; (800a478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a434:	0a5b      	lsrs	r3, r3, #9
 800a436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a43a:	3301      	adds	r3, #1
 800a43c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	ee07 3a90 	vmov	s15, r3
 800a444:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a448:	edd7 6a07 	vldr	s13, [r7, #28]
 800a44c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a454:	ee17 3a90 	vmov	r3, s15
 800a458:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a45a:	e005      	b.n	800a468 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61bb      	str	r3, [r7, #24]
    break;
 800a460:	e002      	b.n	800a468 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a462:	4b07      	ldr	r3, [pc, #28]	; (800a480 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a464:	61bb      	str	r3, [r7, #24]
    break;
 800a466:	bf00      	nop
  }

  return sysclockfreq;
 800a468:	69bb      	ldr	r3, [r7, #24]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3724      	adds	r7, #36	; 0x24
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	58024400 	.word	0x58024400
 800a47c:	03d09000 	.word	0x03d09000
 800a480:	003d0900 	.word	0x003d0900
 800a484:	01518000 	.word	0x01518000
 800a488:	46000000 	.word	0x46000000
 800a48c:	4c742400 	.word	0x4c742400
 800a490:	4a742400 	.word	0x4a742400
 800a494:	4ba8c000 	.word	0x4ba8c000

0800a498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a49e:	f7ff fe81 	bl	800a1a4 <HAL_RCC_GetSysClockFreq>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	4b10      	ldr	r3, [pc, #64]	; (800a4e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a4a6:	699b      	ldr	r3, [r3, #24]
 800a4a8:	0a1b      	lsrs	r3, r3, #8
 800a4aa:	f003 030f 	and.w	r3, r3, #15
 800a4ae:	490f      	ldr	r1, [pc, #60]	; (800a4ec <HAL_RCC_GetHCLKFreq+0x54>)
 800a4b0:	5ccb      	ldrb	r3, [r1, r3]
 800a4b2:	f003 031f 	and.w	r3, r3, #31
 800a4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	; (800a4e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	f003 030f 	and.w	r3, r3, #15
 800a4c4:	4a09      	ldr	r2, [pc, #36]	; (800a4ec <HAL_RCC_GetHCLKFreq+0x54>)
 800a4c6:	5cd3      	ldrb	r3, [r2, r3]
 800a4c8:	f003 031f 	and.w	r3, r3, #31
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d2:	4a07      	ldr	r2, [pc, #28]	; (800a4f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a4d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a4d6:	4a07      	ldr	r2, [pc, #28]	; (800a4f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a4dc:	4b04      	ldr	r3, [pc, #16]	; (800a4f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a4de:	681b      	ldr	r3, [r3, #0]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	58024400 	.word	0x58024400
 800a4ec:	080130d0 	.word	0x080130d0
 800a4f0:	2400000c 	.word	0x2400000c
 800a4f4:	24000008 	.word	0x24000008

0800a4f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a500:	2300      	movs	r3, #0
 800a502:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a504:	2300      	movs	r3, #0
 800a506:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d03f      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a518:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a51c:	d02a      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a51e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a522:	d824      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a528:	d018      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a52a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a52e:	d81e      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a538:	d007      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a53a:	e018      	b.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a53c:	4bab      	ldr	r3, [pc, #684]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	4aaa      	ldr	r2, [pc, #680]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a548:	e015      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3304      	adds	r3, #4
 800a54e:	2102      	movs	r1, #2
 800a550:	4618      	mov	r0, r3
 800a552:	f001 feff 	bl	800c354 <RCCEx_PLL2_Config>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a55a:	e00c      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3324      	adds	r3, #36	; 0x24
 800a560:	2102      	movs	r1, #2
 800a562:	4618      	mov	r0, r3
 800a564:	f001 ffa8 	bl	800c4b8 <RCCEx_PLL3_Config>
 800a568:	4603      	mov	r3, r0
 800a56a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a56c:	e003      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	75fb      	strb	r3, [r7, #23]
      break;
 800a572:	e000      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a574:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a576:	7dfb      	ldrb	r3, [r7, #23]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d109      	bne.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a57c:	4b9b      	ldr	r3, [pc, #620]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a588:	4998      	ldr	r1, [pc, #608]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	650b      	str	r3, [r1, #80]	; 0x50
 800a58e:	e001      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a590:	7dfb      	ldrb	r3, [r7, #23]
 800a592:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d03d      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	d826      	bhi.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a5a8:	a201      	add	r2, pc, #4	; (adr r2, 800a5b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ae:	bf00      	nop
 800a5b0:	0800a5c5 	.word	0x0800a5c5
 800a5b4:	0800a5d3 	.word	0x0800a5d3
 800a5b8:	0800a5e5 	.word	0x0800a5e5
 800a5bc:	0800a5fd 	.word	0x0800a5fd
 800a5c0:	0800a5fd 	.word	0x0800a5fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5c4:	4b89      	ldr	r3, [pc, #548]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c8:	4a88      	ldr	r2, [pc, #544]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a5d0:	e015      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f001 febb 	bl	800c354 <RCCEx_PLL2_Config>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a5e2:	e00c      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3324      	adds	r3, #36	; 0x24
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 ff64 	bl	800c4b8 <RCCEx_PLL3_Config>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a5f4:	e003      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a5fa:	e000      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a5fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d109      	bne.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a604:	4b79      	ldr	r3, [pc, #484]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a608:	f023 0207 	bic.w	r2, r3, #7
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a610:	4976      	ldr	r1, [pc, #472]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a612:	4313      	orrs	r3, r2
 800a614:	650b      	str	r3, [r1, #80]	; 0x50
 800a616:	e001      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a618:	7dfb      	ldrb	r3, [r7, #23]
 800a61a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a624:	2b00      	cmp	r3, #0
 800a626:	d051      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a62e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a632:	d036      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a634:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a638:	d830      	bhi.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a63a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a63e:	d032      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a644:	d82a      	bhi.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a646:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a64a:	d02e      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800a64c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a650:	d824      	bhi.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a656:	d018      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a65c:	d81e      	bhi.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a666:	d007      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a668:	e018      	b.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a66a:	4b60      	ldr	r3, [pc, #384]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	4a5f      	ldr	r2, [pc, #380]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a676:	e019      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	3304      	adds	r3, #4
 800a67c:	2100      	movs	r1, #0
 800a67e:	4618      	mov	r0, r3
 800a680:	f001 fe68 	bl	800c354 <RCCEx_PLL2_Config>
 800a684:	4603      	mov	r3, r0
 800a686:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a688:	e010      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3324      	adds	r3, #36	; 0x24
 800a68e:	2100      	movs	r1, #0
 800a690:	4618      	mov	r0, r3
 800a692:	f001 ff11 	bl	800c4b8 <RCCEx_PLL3_Config>
 800a696:	4603      	mov	r3, r0
 800a698:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a69a:	e007      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	75fb      	strb	r3, [r7, #23]
      break;
 800a6a0:	e004      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a6a2:	bf00      	nop
 800a6a4:	e002      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a6a6:	bf00      	nop
 800a6a8:	e000      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a6aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6ac:	7dfb      	ldrb	r3, [r7, #23]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10a      	bne.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a6b2:	4b4e      	ldr	r3, [pc, #312]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a6c0:	494a      	ldr	r1, [pc, #296]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	658b      	str	r3, [r1, #88]	; 0x58
 800a6c6:	e001      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6c8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ca:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d051      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6de:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a6e2:	d036      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800a6e4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a6e8:	d830      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a6ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6ee:	d032      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800a6f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6f4:	d82a      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a6f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a6fa:	d02e      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800a6fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a700:	d824      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a706:	d018      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x242>
 800a708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a70c:	d81e      	bhi.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800a712:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a716:	d007      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a718:	e018      	b.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a71a:	4b34      	ldr	r3, [pc, #208]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71e:	4a33      	ldr	r2, [pc, #204]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a726:	e019      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3304      	adds	r3, #4
 800a72c:	2100      	movs	r1, #0
 800a72e:	4618      	mov	r0, r3
 800a730:	f001 fe10 	bl	800c354 <RCCEx_PLL2_Config>
 800a734:	4603      	mov	r3, r0
 800a736:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a738:	e010      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3324      	adds	r3, #36	; 0x24
 800a73e:	2100      	movs	r1, #0
 800a740:	4618      	mov	r0, r3
 800a742:	f001 feb9 	bl	800c4b8 <RCCEx_PLL3_Config>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a74a:	e007      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	75fb      	strb	r3, [r7, #23]
      break;
 800a750:	e004      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a752:	bf00      	nop
 800a754:	e002      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a756:	bf00      	nop
 800a758:	e000      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a75a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d10a      	bne.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a762:	4b22      	ldr	r3, [pc, #136]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a766:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a770:	491e      	ldr	r1, [pc, #120]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a772:	4313      	orrs	r3, r2
 800a774:	658b      	str	r3, [r1, #88]	; 0x58
 800a776:	e001      	b.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a778:	7dfb      	ldrb	r3, [r7, #23]
 800a77a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a784:	2b00      	cmp	r3, #0
 800a786:	d035      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a78c:	2b30      	cmp	r3, #48	; 0x30
 800a78e:	d01c      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a790:	2b30      	cmp	r3, #48	; 0x30
 800a792:	d817      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a794:	2b20      	cmp	r3, #32
 800a796:	d00c      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d813      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d016      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800a7a0:	2b10      	cmp	r3, #16
 800a7a2:	d10f      	bne.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7a4:	4b11      	ldr	r3, [pc, #68]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a8:	4a10      	ldr	r2, [pc, #64]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a7b0:	e00e      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	2102      	movs	r1, #2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f001 fdcb 	bl	800c354 <RCCEx_PLL2_Config>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a7c2:	e005      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c8:	e002      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800a7ca:	bf00      	nop
 800a7cc:	e000      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800a7ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10c      	bne.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a7d6:	4b05      	ldr	r3, [pc, #20]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7e2:	4902      	ldr	r1, [pc, #8]	; (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a7e8:	e004      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a7ea:	bf00      	nop
 800a7ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d047      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a808:	d030      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800a80a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a80e:	d82a      	bhi.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a810:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a814:	d02c      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a816:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a81a:	d824      	bhi.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a81c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a820:	d018      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a826:	d81e      	bhi.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a82c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a830:	d007      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a832:	e018      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a834:	4bac      	ldr	r3, [pc, #688]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a838:	4aab      	ldr	r2, [pc, #684]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a83a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a83e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a840:	e017      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	3304      	adds	r3, #4
 800a846:	2100      	movs	r1, #0
 800a848:	4618      	mov	r0, r3
 800a84a:	f001 fd83 	bl	800c354 <RCCEx_PLL2_Config>
 800a84e:	4603      	mov	r3, r0
 800a850:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a852:	e00e      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	3324      	adds	r3, #36	; 0x24
 800a858:	2100      	movs	r1, #0
 800a85a:	4618      	mov	r0, r3
 800a85c:	f001 fe2c 	bl	800c4b8 <RCCEx_PLL3_Config>
 800a860:	4603      	mov	r3, r0
 800a862:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a864:	e005      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	75fb      	strb	r3, [r7, #23]
      break;
 800a86a:	e002      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a86c:	bf00      	nop
 800a86e:	e000      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a870:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d109      	bne.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a878:	4b9b      	ldr	r3, [pc, #620]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a87a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a87c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a884:	4998      	ldr	r1, [pc, #608]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a886:	4313      	orrs	r3, r2
 800a888:	650b      	str	r3, [r1, #80]	; 0x50
 800a88a:	e001      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
 800a88e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d049      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8a4:	d02e      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a8a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8aa:	d828      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a8ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8b0:	d02a      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a8b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8b6:	d822      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a8b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a8bc:	d026      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a8be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a8c2:	d81c      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a8c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c8:	d010      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a8ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8ce:	d816      	bhi.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d01d      	beq.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a8d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d8:	d111      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	3304      	adds	r3, #4
 800a8de:	2101      	movs	r1, #1
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f001 fd37 	bl	800c354 <RCCEx_PLL2_Config>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a8ea:	e012      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	3324      	adds	r3, #36	; 0x24
 800a8f0:	2101      	movs	r1, #1
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f001 fde0 	bl	800c4b8 <RCCEx_PLL3_Config>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a8fc:	e009      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	75fb      	strb	r3, [r7, #23]
      break;
 800a902:	e006      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a904:	bf00      	nop
 800a906:	e004      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a908:	bf00      	nop
 800a90a:	e002      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a90c:	bf00      	nop
 800a90e:	e000      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a910:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a912:	7dfb      	ldrb	r3, [r7, #23]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d109      	bne.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a918:	4b73      	ldr	r3, [pc, #460]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a91a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a91c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a924:	4970      	ldr	r1, [pc, #448]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a926:	4313      	orrs	r3, r2
 800a928:	650b      	str	r3, [r1, #80]	; 0x50
 800a92a:	e001      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d04b      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a942:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a946:	d02e      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a94c:	d828      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a94e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a952:	d02a      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a958:	d822      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a95a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a95e:	d026      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a960:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a964:	d81c      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a96a:	d010      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a96c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a970:	d816      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d01d      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a97a:	d111      	bne.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3304      	adds	r3, #4
 800a980:	2101      	movs	r1, #1
 800a982:	4618      	mov	r0, r3
 800a984:	f001 fce6 	bl	800c354 <RCCEx_PLL2_Config>
 800a988:	4603      	mov	r3, r0
 800a98a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a98c:	e012      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	3324      	adds	r3, #36	; 0x24
 800a992:	2101      	movs	r1, #1
 800a994:	4618      	mov	r0, r3
 800a996:	f001 fd8f 	bl	800c4b8 <RCCEx_PLL3_Config>
 800a99a:	4603      	mov	r3, r0
 800a99c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a99e:	e009      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a9a4:	e006      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a9a6:	bf00      	nop
 800a9a8:	e004      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a9aa:	bf00      	nop
 800a9ac:	e002      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a9ae:	bf00      	nop
 800a9b0:	e000      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a9b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10a      	bne.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a9ba:	4b4b      	ldr	r3, [pc, #300]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9c8:	4947      	ldr	r1, [pc, #284]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	658b      	str	r3, [r1, #88]	; 0x58
 800a9ce:	e001      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d0:	7dfb      	ldrb	r3, [r7, #23]
 800a9d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d02f      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9e8:	d00e      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a9ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9ee:	d814      	bhi.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d015      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a9f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9f8:	d10f      	bne.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9fa:	4b3b      	ldr	r3, [pc, #236]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fe:	4a3a      	ldr	r2, [pc, #232]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aa00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800aa06:	e00c      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f001 fca0 	bl	800c354 <RCCEx_PLL2_Config>
 800aa14:	4603      	mov	r3, r0
 800aa16:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800aa18:	e003      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa1e:	e000      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800aa20:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa22:	7dfb      	ldrb	r3, [r7, #23]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d109      	bne.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aa28:	4b2f      	ldr	r3, [pc, #188]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aa2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa34:	492c      	ldr	r1, [pc, #176]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aa36:	4313      	orrs	r3, r2
 800aa38:	650b      	str	r3, [r1, #80]	; 0x50
 800aa3a:	e001      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d032      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa50:	2b03      	cmp	r3, #3
 800aa52:	d81b      	bhi.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x594>
 800aa54:	a201      	add	r2, pc, #4	; (adr r2, 800aa5c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800aa56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5a:	bf00      	nop
 800aa5c:	0800aa93 	.word	0x0800aa93
 800aa60:	0800aa6d 	.word	0x0800aa6d
 800aa64:	0800aa7b 	.word	0x0800aa7b
 800aa68:	0800aa93 	.word	0x0800aa93
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa6c:	4b1e      	ldr	r3, [pc, #120]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	4a1d      	ldr	r2, [pc, #116]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aa72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800aa78:	e00c      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	2102      	movs	r1, #2
 800aa80:	4618      	mov	r0, r3
 800aa82:	f001 fc67 	bl	800c354 <RCCEx_PLL2_Config>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800aa8a:	e003      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa90:	e000      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800aa92:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d109      	bne.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800aa9a:	4b13      	ldr	r3, [pc, #76]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aa9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa9e:	f023 0203 	bic.w	r2, r3, #3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa6:	4910      	ldr	r1, [pc, #64]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aaac:	e001      	b.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaae:	7dfb      	ldrb	r3, [r7, #23]
 800aab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 808a 	beq.w	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aac0:	4b0a      	ldr	r3, [pc, #40]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a09      	ldr	r2, [pc, #36]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800aac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aacc:	f7f8 f848 	bl	8002b60 <HAL_GetTick>
 800aad0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aad2:	e00d      	b.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aad4:	f7f8 f844 	bl	8002b60 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b64      	cmp	r3, #100	; 0x64
 800aae0:	d906      	bls.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	75fb      	strb	r3, [r7, #23]
        break;
 800aae6:	e009      	b.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aae8:	58024400 	.word	0x58024400
 800aaec:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aaf0:	4bb9      	ldr	r3, [pc, #740]	; (800add8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d0eb      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d166      	bne.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ab02:	4bb6      	ldr	r3, [pc, #728]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ab04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab0c:	4053      	eors	r3, r2
 800ab0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d013      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab16:	4bb1      	ldr	r3, [pc, #708]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ab18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab1e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ab20:	4bae      	ldr	r3, [pc, #696]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ab22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab24:	4aad      	ldr	r2, [pc, #692]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ab26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab2a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ab2c:	4bab      	ldr	r3, [pc, #684]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ab2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab30:	4aaa      	ldr	r2, [pc, #680]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ab32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab36:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ab38:	4aa8      	ldr	r2, [pc, #672]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab48:	d115      	bne.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab4a:	f7f8 f809 	bl	8002b60 <HAL_GetTick>
 800ab4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab50:	e00b      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab52:	f7f8 f805 	bl	8002b60 <HAL_GetTick>
 800ab56:	4602      	mov	r2, r0
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d902      	bls.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800ab64:	2303      	movs	r3, #3
 800ab66:	75fb      	strb	r3, [r7, #23]
            break;
 800ab68:	e005      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab6a:	4b9c      	ldr	r3, [pc, #624]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ab6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6e:	f003 0302 	and.w	r3, r3, #2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0ed      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d126      	bne.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab8a:	d10d      	bne.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800ab8c:	4b93      	ldr	r3, [pc, #588]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab9a:	0919      	lsrs	r1, r3, #4
 800ab9c:	4b90      	ldr	r3, [pc, #576]	; (800ade0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800ab9e:	400b      	ands	r3, r1
 800aba0:	498e      	ldr	r1, [pc, #568]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	610b      	str	r3, [r1, #16]
 800aba6:	e005      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800aba8:	4b8c      	ldr	r3, [pc, #560]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	4a8b      	ldr	r2, [pc, #556]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800abae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800abb2:	6113      	str	r3, [r2, #16]
 800abb4:	4b89      	ldr	r3, [pc, #548]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800abb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800abbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abc2:	4986      	ldr	r1, [pc, #536]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	670b      	str	r3, [r1, #112]	; 0x70
 800abc8:	e004      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	75bb      	strb	r3, [r7, #22]
 800abce:	e001      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d07e      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abe4:	2b28      	cmp	r3, #40	; 0x28
 800abe6:	d867      	bhi.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800abe8:	a201      	add	r2, pc, #4	; (adr r2, 800abf0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800abea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abee:	bf00      	nop
 800abf0:	0800acbf 	.word	0x0800acbf
 800abf4:	0800acb9 	.word	0x0800acb9
 800abf8:	0800acb9 	.word	0x0800acb9
 800abfc:	0800acb9 	.word	0x0800acb9
 800ac00:	0800acb9 	.word	0x0800acb9
 800ac04:	0800acb9 	.word	0x0800acb9
 800ac08:	0800acb9 	.word	0x0800acb9
 800ac0c:	0800acb9 	.word	0x0800acb9
 800ac10:	0800ac95 	.word	0x0800ac95
 800ac14:	0800acb9 	.word	0x0800acb9
 800ac18:	0800acb9 	.word	0x0800acb9
 800ac1c:	0800acb9 	.word	0x0800acb9
 800ac20:	0800acb9 	.word	0x0800acb9
 800ac24:	0800acb9 	.word	0x0800acb9
 800ac28:	0800acb9 	.word	0x0800acb9
 800ac2c:	0800acb9 	.word	0x0800acb9
 800ac30:	0800aca7 	.word	0x0800aca7
 800ac34:	0800acb9 	.word	0x0800acb9
 800ac38:	0800acb9 	.word	0x0800acb9
 800ac3c:	0800acb9 	.word	0x0800acb9
 800ac40:	0800acb9 	.word	0x0800acb9
 800ac44:	0800acb9 	.word	0x0800acb9
 800ac48:	0800acb9 	.word	0x0800acb9
 800ac4c:	0800acb9 	.word	0x0800acb9
 800ac50:	0800acbf 	.word	0x0800acbf
 800ac54:	0800acb9 	.word	0x0800acb9
 800ac58:	0800acb9 	.word	0x0800acb9
 800ac5c:	0800acb9 	.word	0x0800acb9
 800ac60:	0800acb9 	.word	0x0800acb9
 800ac64:	0800acb9 	.word	0x0800acb9
 800ac68:	0800acb9 	.word	0x0800acb9
 800ac6c:	0800acb9 	.word	0x0800acb9
 800ac70:	0800acbf 	.word	0x0800acbf
 800ac74:	0800acb9 	.word	0x0800acb9
 800ac78:	0800acb9 	.word	0x0800acb9
 800ac7c:	0800acb9 	.word	0x0800acb9
 800ac80:	0800acb9 	.word	0x0800acb9
 800ac84:	0800acb9 	.word	0x0800acb9
 800ac88:	0800acb9 	.word	0x0800acb9
 800ac8c:	0800acb9 	.word	0x0800acb9
 800ac90:	0800acbf 	.word	0x0800acbf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3304      	adds	r3, #4
 800ac98:	2101      	movs	r1, #1
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 fb5a 	bl	800c354 <RCCEx_PLL2_Config>
 800aca0:	4603      	mov	r3, r0
 800aca2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aca4:	e00c      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	3324      	adds	r3, #36	; 0x24
 800acaa:	2101      	movs	r1, #1
 800acac:	4618      	mov	r0, r3
 800acae:	f001 fc03 	bl	800c4b8 <RCCEx_PLL3_Config>
 800acb2:	4603      	mov	r3, r0
 800acb4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800acb6:	e003      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	75fb      	strb	r3, [r7, #23]
      break;
 800acbc:	e000      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800acbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800acc6:	4b45      	ldr	r3, [pc, #276]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800acc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acd2:	4942      	ldr	r1, [pc, #264]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	654b      	str	r3, [r1, #84]	; 0x54
 800acd8:	e001      	b.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acda:	7dfb      	ldrb	r3, [r7, #23]
 800acdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 0302 	and.w	r3, r3, #2
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d037      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acee:	2b05      	cmp	r3, #5
 800acf0:	d820      	bhi.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800acf2:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf8:	0800ad3b 	.word	0x0800ad3b
 800acfc:	0800ad11 	.word	0x0800ad11
 800ad00:	0800ad23 	.word	0x0800ad23
 800ad04:	0800ad3b 	.word	0x0800ad3b
 800ad08:	0800ad3b 	.word	0x0800ad3b
 800ad0c:	0800ad3b 	.word	0x0800ad3b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3304      	adds	r3, #4
 800ad14:	2101      	movs	r1, #1
 800ad16:	4618      	mov	r0, r3
 800ad18:	f001 fb1c 	bl	800c354 <RCCEx_PLL2_Config>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ad20:	e00c      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3324      	adds	r3, #36	; 0x24
 800ad26:	2101      	movs	r1, #1
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f001 fbc5 	bl	800c4b8 <RCCEx_PLL3_Config>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ad32:	e003      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	75fb      	strb	r3, [r7, #23]
      break;
 800ad38:	e000      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800ad3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d109      	bne.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ad42:	4b26      	ldr	r3, [pc, #152]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ad44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad46:	f023 0207 	bic.w	r2, r3, #7
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad4e:	4923      	ldr	r1, [pc, #140]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800ad50:	4313      	orrs	r3, r2
 800ad52:	654b      	str	r3, [r1, #84]	; 0x54
 800ad54:	e001      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
 800ad58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0304 	and.w	r3, r3, #4
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d040      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad6c:	2b05      	cmp	r3, #5
 800ad6e:	d821      	bhi.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800ad70:	a201      	add	r2, pc, #4	; (adr r2, 800ad78 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800ad72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad76:	bf00      	nop
 800ad78:	0800adbb 	.word	0x0800adbb
 800ad7c:	0800ad91 	.word	0x0800ad91
 800ad80:	0800ada3 	.word	0x0800ada3
 800ad84:	0800adbb 	.word	0x0800adbb
 800ad88:	0800adbb 	.word	0x0800adbb
 800ad8c:	0800adbb 	.word	0x0800adbb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3304      	adds	r3, #4
 800ad94:	2101      	movs	r1, #1
 800ad96:	4618      	mov	r0, r3
 800ad98:	f001 fadc 	bl	800c354 <RCCEx_PLL2_Config>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ada0:	e00c      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3324      	adds	r3, #36	; 0x24
 800ada6:	2101      	movs	r1, #1
 800ada8:	4618      	mov	r0, r3
 800adaa:	f001 fb85 	bl	800c4b8 <RCCEx_PLL3_Config>
 800adae:	4603      	mov	r3, r0
 800adb0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800adb2:	e003      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	75fb      	strb	r3, [r7, #23]
      break;
 800adb8:	e000      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800adba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d110      	bne.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800adc2:	4b06      	ldr	r3, [pc, #24]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800adc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc6:	f023 0207 	bic.w	r2, r3, #7
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800add0:	4902      	ldr	r1, [pc, #8]	; (800addc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800add2:	4313      	orrs	r3, r2
 800add4:	658b      	str	r3, [r1, #88]	; 0x58
 800add6:	e007      	b.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800add8:	58024800 	.word	0x58024800
 800addc:	58024400 	.word	0x58024400
 800ade0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade4:	7dfb      	ldrb	r3, [r7, #23]
 800ade6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0320 	and.w	r3, r3, #32
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d04b      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adfe:	d02e      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800ae00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae04:	d828      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800ae06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae0a:	d02a      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800ae0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae10:	d822      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800ae12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae16:	d026      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800ae18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae1c:	d81c      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800ae1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae22:	d010      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800ae24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae28:	d816      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d01d      	beq.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800ae2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae32:	d111      	bne.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3304      	adds	r3, #4
 800ae38:	2100      	movs	r1, #0
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f001 fa8a 	bl	800c354 <RCCEx_PLL2_Config>
 800ae40:	4603      	mov	r3, r0
 800ae42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ae44:	e012      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3324      	adds	r3, #36	; 0x24
 800ae4a:	2102      	movs	r1, #2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f001 fb33 	bl	800c4b8 <RCCEx_PLL3_Config>
 800ae52:	4603      	mov	r3, r0
 800ae54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ae56:	e009      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ae5c:	e006      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800ae5e:	bf00      	nop
 800ae60:	e004      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800ae62:	bf00      	nop
 800ae64:	e002      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800ae66:	bf00      	nop
 800ae68:	e000      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800ae6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10a      	bne.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae72:	4bb2      	ldr	r3, [pc, #712]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ae74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae80:	49ae      	ldr	r1, [pc, #696]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ae82:	4313      	orrs	r3, r2
 800ae84:	654b      	str	r3, [r1, #84]	; 0x54
 800ae86:	e001      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae88:	7dfb      	ldrb	r3, [r7, #23]
 800ae8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d04b      	beq.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aea2:	d02e      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800aea4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aea8:	d828      	bhi.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800aeaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeae:	d02a      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800aeb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeb4:	d822      	bhi.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800aeb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aeba:	d026      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800aebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aec0:	d81c      	bhi.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800aec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aec6:	d010      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800aec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aecc:	d816      	bhi.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d01d      	beq.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800aed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aed6:	d111      	bne.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	3304      	adds	r3, #4
 800aedc:	2100      	movs	r1, #0
 800aede:	4618      	mov	r0, r3
 800aee0:	f001 fa38 	bl	800c354 <RCCEx_PLL2_Config>
 800aee4:	4603      	mov	r3, r0
 800aee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aee8:	e012      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3324      	adds	r3, #36	; 0x24
 800aeee:	2102      	movs	r1, #2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f001 fae1 	bl	800c4b8 <RCCEx_PLL3_Config>
 800aef6:	4603      	mov	r3, r0
 800aef8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aefa:	e009      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	75fb      	strb	r3, [r7, #23]
      break;
 800af00:	e006      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800af02:	bf00      	nop
 800af04:	e004      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800af06:	bf00      	nop
 800af08:	e002      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800af0a:	bf00      	nop
 800af0c:	e000      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800af0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af10:	7dfb      	ldrb	r3, [r7, #23]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10a      	bne.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800af16:	4b89      	ldr	r3, [pc, #548]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800af18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af24:	4985      	ldr	r1, [pc, #532]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800af26:	4313      	orrs	r3, r2
 800af28:	658b      	str	r3, [r1, #88]	; 0x58
 800af2a:	e001      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d04b      	beq.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800af46:	d02e      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800af48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800af4c:	d828      	bhi.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800af4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af52:	d02a      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800af54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af58:	d822      	bhi.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800af5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800af5e:	d026      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800af60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800af64:	d81c      	bhi.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800af66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af6a:	d010      	beq.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800af6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af70:	d816      	bhi.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800af72:	2b00      	cmp	r3, #0
 800af74:	d01d      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800af76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af7a:	d111      	bne.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3304      	adds	r3, #4
 800af80:	2100      	movs	r1, #0
 800af82:	4618      	mov	r0, r3
 800af84:	f001 f9e6 	bl	800c354 <RCCEx_PLL2_Config>
 800af88:	4603      	mov	r3, r0
 800af8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800af8c:	e012      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3324      	adds	r3, #36	; 0x24
 800af92:	2102      	movs	r1, #2
 800af94:	4618      	mov	r0, r3
 800af96:	f001 fa8f 	bl	800c4b8 <RCCEx_PLL3_Config>
 800af9a:	4603      	mov	r3, r0
 800af9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800af9e:	e009      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	75fb      	strb	r3, [r7, #23]
      break;
 800afa4:	e006      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800afa6:	bf00      	nop
 800afa8:	e004      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800afaa:	bf00      	nop
 800afac:	e002      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800afae:	bf00      	nop
 800afb0:	e000      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800afb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afb4:	7dfb      	ldrb	r3, [r7, #23]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10a      	bne.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800afba:	4b60      	ldr	r3, [pc, #384]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800afbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afc8:	495c      	ldr	r1, [pc, #368]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800afca:	4313      	orrs	r3, r2
 800afcc:	658b      	str	r3, [r1, #88]	; 0x58
 800afce:	e001      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
 800afd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 0308 	and.w	r3, r3, #8
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d018      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afe8:	d10a      	bne.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	3324      	adds	r3, #36	; 0x24
 800afee:	2102      	movs	r1, #2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f001 fa61 	bl	800c4b8 <RCCEx_PLL3_Config>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b000:	4b4e      	ldr	r3, [pc, #312]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b004:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b00c:	494b      	ldr	r1, [pc, #300]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b00e:	4313      	orrs	r3, r2
 800b010:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0310 	and.w	r3, r3, #16
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d01a      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b028:	d10a      	bne.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3324      	adds	r3, #36	; 0x24
 800b02e:	2102      	movs	r1, #2
 800b030:	4618      	mov	r0, r3
 800b032:	f001 fa41 	bl	800c4b8 <RCCEx_PLL3_Config>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b040:	4b3e      	ldr	r3, [pc, #248]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b04e:	493b      	ldr	r1, [pc, #236]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b050:	4313      	orrs	r3, r2
 800b052:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d034      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b06a:	d01d      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b06c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b070:	d817      	bhi.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d003      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b07a:	d009      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b07c:	e011      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	3304      	adds	r3, #4
 800b082:	2100      	movs	r1, #0
 800b084:	4618      	mov	r0, r3
 800b086:	f001 f965 	bl	800c354 <RCCEx_PLL2_Config>
 800b08a:	4603      	mov	r3, r0
 800b08c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b08e:	e00c      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	3324      	adds	r3, #36	; 0x24
 800b094:	2102      	movs	r1, #2
 800b096:	4618      	mov	r0, r3
 800b098:	f001 fa0e 	bl	800c4b8 <RCCEx_PLL3_Config>
 800b09c:	4603      	mov	r3, r0
 800b09e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b0a0:	e003      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b0a6:	e000      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800b0a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10a      	bne.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b0b0:	4b22      	ldr	r3, [pc, #136]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b0b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0be:	491f      	ldr	r1, [pc, #124]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	658b      	str	r3, [r1, #88]	; 0x58
 800b0c4:	e001      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
 800b0c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d036      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0e0:	d01c      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b0e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0e6:	d816      	bhi.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b0e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0ec:	d003      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b0ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0f2:	d007      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800b0f4:	e00f      	b.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0f6:	4b11      	ldr	r3, [pc, #68]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fa:	4a10      	ldr	r2, [pc, #64]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b0fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b100:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b102:	e00c      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3324      	adds	r3, #36	; 0x24
 800b108:	2101      	movs	r1, #1
 800b10a:	4618      	mov	r0, r3
 800b10c:	f001 f9d4 	bl	800c4b8 <RCCEx_PLL3_Config>
 800b110:	4603      	mov	r3, r0
 800b112:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b114:	e003      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	75fb      	strb	r3, [r7, #23]
      break;
 800b11a:	e000      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800b11c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10d      	bne.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b132:	4902      	ldr	r1, [pc, #8]	; (800b13c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b134:	4313      	orrs	r3, r2
 800b136:	654b      	str	r3, [r1, #84]	; 0x54
 800b138:	e004      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800b13a:	bf00      	nop
 800b13c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b140:	7dfb      	ldrb	r3, [r7, #23]
 800b142:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d029      	beq.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b154:	2b00      	cmp	r3, #0
 800b156:	d003      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b15c:	d007      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b15e:	e00f      	b.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b160:	4b61      	ldr	r3, [pc, #388]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	4a60      	ldr	r2, [pc, #384]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b16a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b16c:	e00b      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3304      	adds	r3, #4
 800b172:	2102      	movs	r1, #2
 800b174:	4618      	mov	r0, r3
 800b176:	f001 f8ed 	bl	800c354 <RCCEx_PLL2_Config>
 800b17a:	4603      	mov	r3, r0
 800b17c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b17e:	e002      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	75fb      	strb	r3, [r7, #23]
      break;
 800b184:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b186:	7dfb      	ldrb	r3, [r7, #23]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d109      	bne.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b18c:	4b56      	ldr	r3, [pc, #344]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b18e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b190:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b198:	4953      	ldr	r1, [pc, #332]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b19a:	4313      	orrs	r3, r2
 800b19c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b19e:	e001      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1a0:	7dfb      	ldrb	r3, [r7, #23]
 800b1a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00a      	beq.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3324      	adds	r3, #36	; 0x24
 800b1b4:	2102      	movs	r1, #2
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f001 f97e 	bl	800c4b8 <RCCEx_PLL3_Config>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d030      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1da:	d017      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b1dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1e0:	d811      	bhi.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800b1e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1e6:	d013      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800b1e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1ec:	d80b      	bhi.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d010      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800b1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1f6:	d106      	bne.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1f8:	4b3b      	ldr	r3, [pc, #236]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fc:	4a3a      	ldr	r2, [pc, #232]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b1fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b204:	e007      	b.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	75fb      	strb	r3, [r7, #23]
      break;
 800b20a:	e004      	b.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800b20c:	bf00      	nop
 800b20e:	e002      	b.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800b210:	bf00      	nop
 800b212:	e000      	b.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800b214:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b216:	7dfb      	ldrb	r3, [r7, #23]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d109      	bne.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b21c:	4b32      	ldr	r3, [pc, #200]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b21e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b228:	492f      	ldr	r1, [pc, #188]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	654b      	str	r3, [r1, #84]	; 0x54
 800b22e:	e001      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b230:	7dfb      	ldrb	r3, [r7, #23]
 800b232:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d008      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b240:	4b29      	ldr	r3, [pc, #164]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b244:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b24c:	4926      	ldr	r1, [pc, #152]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b24e:	4313      	orrs	r3, r2
 800b250:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d008      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b25e:	4b22      	ldr	r3, [pc, #136]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b262:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b26a:	491f      	ldr	r1, [pc, #124]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b26c:	4313      	orrs	r3, r2
 800b26e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00d      	beq.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b27c:	4b1a      	ldr	r3, [pc, #104]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	4a19      	ldr	r2, [pc, #100]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b282:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b286:	6113      	str	r3, [r2, #16]
 800b288:	4b17      	ldr	r3, [pc, #92]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b28a:	691a      	ldr	r2, [r3, #16]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b292:	4915      	ldr	r1, [pc, #84]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b294:	4313      	orrs	r3, r2
 800b296:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	da08      	bge.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b2a0:	4b11      	ldr	r3, [pc, #68]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b2a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ac:	490e      	ldr	r1, [pc, #56]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d009      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b2be:	4b0a      	ldr	r3, [pc, #40]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2cc:	4906      	ldr	r1, [pc, #24]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b2d2:	7dbb      	ldrb	r3, [r7, #22]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e000      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	58024400 	.word	0x58024400

0800b2ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b090      	sub	sp, #64	; 0x40
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2fa:	f040 8089 	bne.w	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b2fe:	4b95      	ldr	r3, [pc, #596]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b302:	f003 0307 	and.w	r3, r3, #7
 800b306:	633b      	str	r3, [r7, #48]	; 0x30
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	2b04      	cmp	r3, #4
 800b30c:	d87d      	bhi.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800b30e:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b329 	.word	0x0800b329
 800b318:	0800b34d 	.word	0x0800b34d
 800b31c:	0800b371 	.word	0x0800b371
 800b320:	0800b405 	.word	0x0800b405
 800b324:	0800b395 	.word	0x0800b395

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b328:	4b8a      	ldr	r3, [pc, #552]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b334:	d107      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 feb8 	bl	800c0b0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b342:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b344:	e3ed      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b346:	2300      	movs	r3, #0
 800b348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b34a:	e3ea      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b34c:	4b81      	ldr	r3, [pc, #516]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b358:	d107      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b35a:	f107 0318 	add.w	r3, r7, #24
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 fbfe 	bl	800bb60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b368:	e3db      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b36e:	e3d8      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b370:	4b78      	ldr	r3, [pc, #480]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b37c:	d107      	bne.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b37e:	f107 030c 	add.w	r3, r7, #12
 800b382:	4618      	mov	r0, r3
 800b384:	f000 fd40 	bl	800be08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b38c:	e3c9      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b392:	e3c6      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b394:	4b6f      	ldr	r3, [pc, #444]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b39c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b39e:	4b6d      	ldr	r3, [pc, #436]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 0304 	and.w	r3, r3, #4
 800b3a6:	2b04      	cmp	r3, #4
 800b3a8:	d10c      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800b3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d109      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b3b0:	4b68      	ldr	r3, [pc, #416]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	08db      	lsrs	r3, r3, #3
 800b3b6:	f003 0303 	and.w	r3, r3, #3
 800b3ba:	4a67      	ldr	r2, [pc, #412]	; (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800b3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3c2:	e01e      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3c4:	4b63      	ldr	r3, [pc, #396]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3d0:	d106      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800b3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3d8:	d102      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b3da:	4b60      	ldr	r3, [pc, #384]	; (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3de:	e010      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3e0:	4b5c      	ldr	r3, [pc, #368]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3ec:	d106      	bne.n	800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3f4:	d102      	bne.n	800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b3f6:	4b5a      	ldr	r3, [pc, #360]	; (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3fa:	e002      	b.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b400:	e38f      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b402:	e38e      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b404:	4b57      	ldr	r3, [pc, #348]	; (800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b408:	e38b      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b40e:	e388      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b416:	f040 80a7 	bne.w	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b41a:	4b4e      	ldr	r3, [pc, #312]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b41e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b422:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b42a:	d054      	beq.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b432:	f200 808b 	bhi.w	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b43c:	f000 8083 	beq.w	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b446:	f200 8081 	bhi.w	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b450:	d02f      	beq.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b458:	d878      	bhi.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d004      	beq.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b466:	d012      	beq.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800b468:	e070      	b.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b46a:	4b3a      	ldr	r3, [pc, #232]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b476:	d107      	bne.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 fe17 	bl	800c0b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b486:	e34c      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b48c:	e349      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b48e:	4b31      	ldr	r3, [pc, #196]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b49a:	d107      	bne.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b49c:	f107 0318 	add.w	r3, r7, #24
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 fb5d 	bl	800bb60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b4aa:	e33a      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4b0:	e337      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4b2:	4b28      	ldr	r3, [pc, #160]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4be:	d107      	bne.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4c0:	f107 030c 	add.w	r3, r7, #12
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f000 fc9f 	bl	800be08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b4ce:	e328      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4d4:	e325      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b4d6:	4b1f      	ldr	r3, [pc, #124]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b4de:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4e0:	4b1c      	ldr	r3, [pc, #112]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 0304 	and.w	r3, r3, #4
 800b4e8:	2b04      	cmp	r3, #4
 800b4ea:	d10c      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800b4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d109      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4f2:	4b18      	ldr	r3, [pc, #96]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	08db      	lsrs	r3, r3, #3
 800b4f8:	f003 0303 	and.w	r3, r3, #3
 800b4fc:	4a16      	ldr	r2, [pc, #88]	; (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800b4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b504:	e01e      	b.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b506:	4b13      	ldr	r3, [pc, #76]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b50e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b512:	d106      	bne.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b51a:	d102      	bne.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b51c:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b520:	e010      	b.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b522:	4b0c      	ldr	r3, [pc, #48]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b52a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b52e:	d106      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800b530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b536:	d102      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b538:	4b09      	ldr	r3, [pc, #36]	; (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b53c:	e002      	b.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b542:	e2ee      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b544:	e2ed      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b546:	4b07      	ldr	r3, [pc, #28]	; (800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b54a:	e2ea      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b550:	e2e7      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b552:	bf00      	nop
 800b554:	58024400 	.word	0x58024400
 800b558:	03d09000 	.word	0x03d09000
 800b55c:	003d0900 	.word	0x003d0900
 800b560:	01518000 	.word	0x01518000
 800b564:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b56e:	f040 809c 	bne.w	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b572:	4b9e      	ldr	r3, [pc, #632]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b576:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b57a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b582:	d054      	beq.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b58a:	f200 808b 	bhi.w	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b594:	f000 8083 	beq.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b59e:	f200 8081 	bhi.w	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5a8:	d02f      	beq.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5b0:	d878      	bhi.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b5be:	d012      	beq.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b5c0:	e070      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5c2:	4b8a      	ldr	r3, [pc, #552]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5ce:	d107      	bne.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f000 fd6b 	bl	800c0b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5de:	e2a0      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5e4:	e29d      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5e6:	4b81      	ldr	r3, [pc, #516]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5f2:	d107      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5f4:	f107 0318 	add.w	r3, r7, #24
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 fab1 	bl	800bb60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b602:	e28e      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b608:	e28b      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b60a:	4b78      	ldr	r3, [pc, #480]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b616:	d107      	bne.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b618:	f107 030c 	add.w	r3, r7, #12
 800b61c:	4618      	mov	r0, r3
 800b61e:	f000 fbf3 	bl	800be08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b626:	e27c      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b62c:	e279      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b62e:	4b6f      	ldr	r3, [pc, #444]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b632:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b636:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b638:	4b6c      	ldr	r3, [pc, #432]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0304 	and.w	r3, r3, #4
 800b640:	2b04      	cmp	r3, #4
 800b642:	d10c      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b646:	2b00      	cmp	r3, #0
 800b648:	d109      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b64a:	4b68      	ldr	r3, [pc, #416]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	08db      	lsrs	r3, r3, #3
 800b650:	f003 0303 	and.w	r3, r3, #3
 800b654:	4a66      	ldr	r2, [pc, #408]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b656:	fa22 f303 	lsr.w	r3, r2, r3
 800b65a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b65c:	e01e      	b.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b65e:	4b63      	ldr	r3, [pc, #396]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b66a:	d106      	bne.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800b66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b672:	d102      	bne.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b674:	4b5f      	ldr	r3, [pc, #380]	; (800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b676:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b678:	e010      	b.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b67a:	4b5c      	ldr	r3, [pc, #368]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b686:	d106      	bne.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800b688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b68e:	d102      	bne.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b690:	4b59      	ldr	r3, [pc, #356]	; (800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b692:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b694:	e002      	b.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b69a:	e242      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b69c:	e241      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b69e:	4b57      	ldr	r3, [pc, #348]	; (800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6a2:	e23e      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6a8:	e23b      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b0:	f040 80a6 	bne.w	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b6b4:	4b4d      	ldr	r3, [pc, #308]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b6bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6c4:	d054      	beq.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6cc:	f200 808b 	bhi.w	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6d6:	f000 8083 	beq.w	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6e0:	f200 8081 	bhi.w	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6ea:	d02f      	beq.n	800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800b6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6f2:	d878      	bhi.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d004      	beq.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b700:	d012      	beq.n	800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800b702:	e070      	b.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b704:	4b39      	ldr	r3, [pc, #228]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b70c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b710:	d107      	bne.n	800b722 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b716:	4618      	mov	r0, r3
 800b718:	f000 fcca 	bl	800c0b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b720:	e1ff      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b726:	e1fc      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b728:	4b30      	ldr	r3, [pc, #192]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b734:	d107      	bne.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b736:	f107 0318 	add.w	r3, r7, #24
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 fa10 	bl	800bb60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b744:	e1ed      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b74a:	e1ea      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b74c:	4b27      	ldr	r3, [pc, #156]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b758:	d107      	bne.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b75a:	f107 030c 	add.w	r3, r7, #12
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 fb52 	bl	800be08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b768:	e1db      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b76e:	e1d8      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b770:	4b1e      	ldr	r3, [pc, #120]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b778:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b77a:	4b1c      	ldr	r3, [pc, #112]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 0304 	and.w	r3, r3, #4
 800b782:	2b04      	cmp	r3, #4
 800b784:	d10c      	bne.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800b786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d109      	bne.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b78c:	4b17      	ldr	r3, [pc, #92]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	08db      	lsrs	r3, r3, #3
 800b792:	f003 0303 	and.w	r3, r3, #3
 800b796:	4a16      	ldr	r2, [pc, #88]	; (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b798:	fa22 f303 	lsr.w	r3, r2, r3
 800b79c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b79e:	e01e      	b.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7a0:	4b12      	ldr	r3, [pc, #72]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ac:	d106      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7b4:	d102      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b7b6:	4b0f      	ldr	r3, [pc, #60]	; (800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7ba:	e010      	b.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7bc:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7c8:	d106      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800b7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7d0:	d102      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b7d2:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7d6:	e002      	b.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b7dc:	e1a1      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b7de:	e1a0      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b7e0:	4b06      	ldr	r3, [pc, #24]	; (800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7e4:	e19d      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ea:	e19a      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b7ec:	58024400 	.word	0x58024400
 800b7f0:	03d09000 	.word	0x03d09000
 800b7f4:	003d0900 	.word	0x003d0900
 800b7f8:	01518000 	.word	0x01518000
 800b7fc:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b806:	d173      	bne.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b808:	4b9a      	ldr	r3, [pc, #616]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b80c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b810:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b818:	d02f      	beq.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800b81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b820:	d863      	bhi.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800b822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b824:	2b00      	cmp	r3, #0
 800b826:	d004      	beq.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800b828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b82e:	d012      	beq.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800b830:	e05b      	b.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b832:	4b90      	ldr	r3, [pc, #576]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b83a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b83e:	d107      	bne.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b840:	f107 0318 	add.w	r3, r7, #24
 800b844:	4618      	mov	r0, r3
 800b846:	f000 f98b 	bl	800bb60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b84e:	e168      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b854:	e165      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b856:	4b87      	ldr	r3, [pc, #540]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b85e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b862:	d107      	bne.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b864:	f107 030c 	add.w	r3, r7, #12
 800b868:	4618      	mov	r0, r3
 800b86a:	f000 facd 	bl	800be08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b872:	e156      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b878:	e153      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b87a:	4b7e      	ldr	r3, [pc, #504]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b87e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b882:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b884:	4b7b      	ldr	r3, [pc, #492]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 0304 	and.w	r3, r3, #4
 800b88c:	2b04      	cmp	r3, #4
 800b88e:	d10c      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800b890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b892:	2b00      	cmp	r3, #0
 800b894:	d109      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b896:	4b77      	ldr	r3, [pc, #476]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	08db      	lsrs	r3, r3, #3
 800b89c:	f003 0303 	and.w	r3, r3, #3
 800b8a0:	4a75      	ldr	r2, [pc, #468]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8a8:	e01e      	b.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8aa:	4b72      	ldr	r3, [pc, #456]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8b6:	d106      	bne.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8be:	d102      	bne.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b8c0:	4b6e      	ldr	r3, [pc, #440]	; (800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800b8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8c4:	e010      	b.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8c6:	4b6b      	ldr	r3, [pc, #428]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8d2:	d106      	bne.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8da:	d102      	bne.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b8dc:	4b68      	ldr	r3, [pc, #416]	; (800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800b8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8e0:	e002      	b.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b8e6:	e11c      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b8e8:	e11b      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8ee:	e118      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8f6:	d133      	bne.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b8f8:	4b5e      	ldr	r3, [pc, #376]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b8fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b900:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b904:	2b00      	cmp	r3, #0
 800b906:	d004      	beq.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b90e:	d012      	beq.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800b910:	e023      	b.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b912:	4b58      	ldr	r3, [pc, #352]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b91a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b91e:	d107      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b924:	4618      	mov	r0, r3
 800b926:	f000 fbc3 	bl	800c0b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b92e:	e0f8      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b934:	e0f5      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b936:	4b4f      	ldr	r3, [pc, #316]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b93e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b942:	d107      	bne.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b944:	f107 0318 	add.w	r3, r7, #24
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 f909 	bl	800bb60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b952:	e0e6      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b954:	2300      	movs	r3, #0
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b958:	e0e3      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b95e:	e0e0      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b966:	f040 808d 	bne.w	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b96a:	4b42      	ldr	r3, [pc, #264]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b96e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b972:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b97a:	d06b      	beq.n	800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800b97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b982:	d874      	bhi.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b98a:	d056      	beq.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b992:	d86c      	bhi.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b99a:	d03b      	beq.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9a2:	d864      	bhi.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9aa:	d021      	beq.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9b2:	d85c      	bhi.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d004      	beq.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800b9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9c0:	d004      	beq.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800b9c2:	e054      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b9c4:	f000 f8b6 	bl	800bb34 <HAL_RCCEx_GetD3PCLK1Freq>
 800b9c8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b9ca:	e0aa      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9cc:	4b29      	ldr	r3, [pc, #164]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9d8:	d107      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9da:	f107 0318 	add.w	r3, r7, #24
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f000 f8be 	bl	800bb60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b9e8:	e09b      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9ee:	e098      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9f0:	4b20      	ldr	r3, [pc, #128]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9fc:	d107      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9fe:	f107 030c 	add.w	r3, r7, #12
 800ba02:	4618      	mov	r0, r3
 800ba04:	f000 fa00 	bl	800be08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba0c:	e089      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba12:	e086      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba14:	4b17      	ldr	r3, [pc, #92]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 0304 	and.w	r3, r3, #4
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	d109      	bne.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba20:	4b14      	ldr	r3, [pc, #80]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	08db      	lsrs	r3, r3, #3
 800ba26:	f003 0303 	and.w	r3, r3, #3
 800ba2a:	4a13      	ldr	r2, [pc, #76]	; (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ba2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba32:	e076      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba38:	e073      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ba3a:	4b0e      	ldr	r3, [pc, #56]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba46:	d102      	bne.n	800ba4e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800ba48:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba4c:	e069      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba52:	e066      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba54:	4b07      	ldr	r3, [pc, #28]	; (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba60:	d102      	bne.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800ba62:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800ba64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba66:	e05c      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba6c:	e059      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba72:	e056      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ba74:	58024400 	.word	0x58024400
 800ba78:	03d09000 	.word	0x03d09000
 800ba7c:	003d0900 	.word	0x003d0900
 800ba80:	01518000 	.word	0x01518000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba8a:	d148      	bne.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ba8c:	4b27      	ldr	r3, [pc, #156]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ba8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ba96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba9c:	d02a      	beq.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baa4:	d838      	bhi.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800baa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d004      	beq.n	800bab6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800baac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bab2:	d00d      	beq.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800bab4:	e030      	b.n	800bb18 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bab6:	4b1d      	ldr	r3, [pc, #116]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800babe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bac2:	d102      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800bac4:	4b1a      	ldr	r3, [pc, #104]	; (800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800bac6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bac8:	e02b      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800baca:	2300      	movs	r3, #0
 800bacc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bace:	e028      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bad0:	4b16      	ldr	r3, [pc, #88]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800badc:	d107      	bne.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bae2:	4618      	mov	r0, r3
 800bae4:	f000 fae4 	bl	800c0b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800baec:	e019      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800baf2:	e016      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baf4:	4b0d      	ldr	r3, [pc, #52]	; (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bafc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb00:	d107      	bne.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb02:	f107 0318 	add.w	r3, r7, #24
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 f82a 	bl	800bb60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bb10:	e007      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb16:	e004      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb1c:	e001      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800bb22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3740      	adds	r7, #64	; 0x40
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	58024400 	.word	0x58024400
 800bb30:	01518000 	.word	0x01518000

0800bb34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bb38:	f7fe fcae 	bl	800a498 <HAL_RCC_GetHCLKFreq>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	4b06      	ldr	r3, [pc, #24]	; (800bb58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	091b      	lsrs	r3, r3, #4
 800bb44:	f003 0307 	and.w	r3, r3, #7
 800bb48:	4904      	ldr	r1, [pc, #16]	; (800bb5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb4a:	5ccb      	ldrb	r3, [r1, r3]
 800bb4c:	f003 031f 	and.w	r3, r3, #31
 800bb50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	58024400 	.word	0x58024400
 800bb5c:	080130d0 	.word	0x080130d0

0800bb60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b089      	sub	sp, #36	; 0x24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb68:	4ba1      	ldr	r3, [pc, #644]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6c:	f003 0303 	and.w	r3, r3, #3
 800bb70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bb72:	4b9f      	ldr	r3, [pc, #636]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb76:	0b1b      	lsrs	r3, r3, #12
 800bb78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb7e:	4b9c      	ldr	r3, [pc, #624]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb82:	091b      	lsrs	r3, r3, #4
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bb8a:	4b99      	ldr	r3, [pc, #612]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8e:	08db      	lsrs	r3, r3, #3
 800bb90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	fb02 f303 	mul.w	r3, r2, r3
 800bb9a:	ee07 3a90 	vmov	s15, r3
 800bb9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 8111 	beq.w	800bdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	f000 8083 	beq.w	800bcbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	f200 80a1 	bhi.w	800bd00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d003      	beq.n	800bbcc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d056      	beq.n	800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bbca:	e099      	b.n	800bd00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbcc:	4b88      	ldr	r3, [pc, #544]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 0320 	and.w	r3, r3, #32
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d02d      	beq.n	800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbd8:	4b85      	ldr	r3, [pc, #532]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	08db      	lsrs	r3, r3, #3
 800bbde:	f003 0303 	and.w	r3, r3, #3
 800bbe2:	4a84      	ldr	r2, [pc, #528]	; (800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bbe4:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	ee07 3a90 	vmov	s15, r3
 800bbf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	ee07 3a90 	vmov	s15, r3
 800bbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc02:	4b7b      	ldr	r3, [pc, #492]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc0a:	ee07 3a90 	vmov	s15, r3
 800bc0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc12:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc16:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc2e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bc32:	e087      	b.n	800bd44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	ee07 3a90 	vmov	s15, r3
 800bc3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bdfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc46:	4b6a      	ldr	r3, [pc, #424]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc56:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc76:	e065      	b.n	800bd44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	ee07 3a90 	vmov	s15, r3
 800bc7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc8a:	4b59      	ldr	r3, [pc, #356]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc92:	ee07 3a90 	vmov	s15, r3
 800bc96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcba:	e043      	b.n	800bd44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	ee07 3a90 	vmov	s15, r3
 800bcc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bcca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcce:	4b48      	ldr	r3, [pc, #288]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcde:	ed97 6a03 	vldr	s12, [r7, #12]
 800bce2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcfe:	e021      	b.n	800bd44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	ee07 3a90 	vmov	s15, r3
 800bd06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd12:	4b37      	ldr	r3, [pc, #220]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd1a:	ee07 3a90 	vmov	s15, r3
 800bd1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd22:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd26:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bd44:	4b2a      	ldr	r3, [pc, #168]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd48:	0a5b      	lsrs	r3, r3, #9
 800bd4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd6a:	ee17 2a90 	vmov	r2, s15
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bd72:	4b1f      	ldr	r3, [pc, #124]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd76:	0c1b      	lsrs	r3, r3, #16
 800bd78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd7c:	ee07 3a90 	vmov	s15, r3
 800bd80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd98:	ee17 2a90 	vmov	r2, s15
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bda0:	4b13      	ldr	r3, [pc, #76]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda4:	0e1b      	lsrs	r3, r3, #24
 800bda6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdba:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc6:	ee17 2a90 	vmov	r2, s15
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bdce:	e008      	b.n	800bde2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	609a      	str	r2, [r3, #8]
}
 800bde2:	bf00      	nop
 800bde4:	3724      	adds	r7, #36	; 0x24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	58024400 	.word	0x58024400
 800bdf4:	03d09000 	.word	0x03d09000
 800bdf8:	46000000 	.word	0x46000000
 800bdfc:	4c742400 	.word	0x4c742400
 800be00:	4a742400 	.word	0x4a742400
 800be04:	4ba8c000 	.word	0x4ba8c000

0800be08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800be08:	b480      	push	{r7}
 800be0a:	b089      	sub	sp, #36	; 0x24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be10:	4ba1      	ldr	r3, [pc, #644]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be14:	f003 0303 	and.w	r3, r3, #3
 800be18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800be1a:	4b9f      	ldr	r3, [pc, #636]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1e:	0d1b      	lsrs	r3, r3, #20
 800be20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be26:	4b9c      	ldr	r3, [pc, #624]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2a:	0a1b      	lsrs	r3, r3, #8
 800be2c:	f003 0301 	and.w	r3, r3, #1
 800be30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800be32:	4b99      	ldr	r3, [pc, #612]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be36:	08db      	lsrs	r3, r3, #3
 800be38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	fb02 f303 	mul.w	r3, r2, r3
 800be42:	ee07 3a90 	vmov	s15, r3
 800be46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 8111 	beq.w	800c078 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	f000 8083 	beq.w	800bf64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	2b02      	cmp	r3, #2
 800be62:	f200 80a1 	bhi.w	800bfa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d056      	beq.n	800bf20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be72:	e099      	b.n	800bfa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be74:	4b88      	ldr	r3, [pc, #544]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 0320 	and.w	r3, r3, #32
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d02d      	beq.n	800bedc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be80:	4b85      	ldr	r3, [pc, #532]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	08db      	lsrs	r3, r3, #3
 800be86:	f003 0303 	and.w	r3, r3, #3
 800be8a:	4a84      	ldr	r2, [pc, #528]	; (800c09c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be8c:	fa22 f303 	lsr.w	r3, r2, r3
 800be90:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	ee07 3a90 	vmov	s15, r3
 800be98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	ee07 3a90 	vmov	s15, r3
 800bea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beaa:	4b7b      	ldr	r3, [pc, #492]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beb2:	ee07 3a90 	vmov	s15, r3
 800beb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beba:	ed97 6a03 	vldr	s12, [r7, #12]
 800bebe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bed6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800beda:	e087      	b.n	800bfec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	ee07 3a90 	vmov	s15, r3
 800bee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800beea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beee:	4b6a      	ldr	r3, [pc, #424]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800befe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf02:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf1e:	e065      	b.n	800bfec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	ee07 3a90 	vmov	s15, r3
 800bf26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf32:	4b59      	ldr	r3, [pc, #356]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf42:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf46:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf62:	e043      	b.n	800bfec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	ee07 3a90 	vmov	s15, r3
 800bf6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c0ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf76:	4b48      	ldr	r3, [pc, #288]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf86:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfa6:	e021      	b.n	800bfec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfba:	4b37      	ldr	r3, [pc, #220]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc2:	ee07 3a90 	vmov	s15, r3
 800bfc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bfec:	4b2a      	ldr	r3, [pc, #168]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff0:	0a5b      	lsrs	r3, r3, #9
 800bff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c002:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c006:	edd7 6a07 	vldr	s13, [r7, #28]
 800c00a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c00e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c012:	ee17 2a90 	vmov	r2, s15
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c01a:	4b1f      	ldr	r3, [pc, #124]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01e:	0c1b      	lsrs	r3, r3, #16
 800c020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c024:	ee07 3a90 	vmov	s15, r3
 800c028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c02c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c030:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c034:	edd7 6a07 	vldr	s13, [r7, #28]
 800c038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c03c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c040:	ee17 2a90 	vmov	r2, s15
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c048:	4b13      	ldr	r3, [pc, #76]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04c:	0e1b      	lsrs	r3, r3, #24
 800c04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c052:	ee07 3a90 	vmov	s15, r3
 800c056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c05a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c05e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c062:	edd7 6a07 	vldr	s13, [r7, #28]
 800c066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c06a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c06e:	ee17 2a90 	vmov	r2, s15
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c076:	e008      	b.n	800c08a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	609a      	str	r2, [r3, #8]
}
 800c08a:	bf00      	nop
 800c08c:	3724      	adds	r7, #36	; 0x24
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	58024400 	.word	0x58024400
 800c09c:	03d09000 	.word	0x03d09000
 800c0a0:	46000000 	.word	0x46000000
 800c0a4:	4c742400 	.word	0x4c742400
 800c0a8:	4a742400 	.word	0x4a742400
 800c0ac:	4ba8c000 	.word	0x4ba8c000

0800c0b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b089      	sub	sp, #36	; 0x24
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0b8:	4ba0      	ldr	r3, [pc, #640]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0bc:	f003 0303 	and.w	r3, r3, #3
 800c0c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c0c2:	4b9e      	ldr	r3, [pc, #632]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c6:	091b      	lsrs	r3, r3, #4
 800c0c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c0ce:	4b9b      	ldr	r3, [pc, #620]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c0d8:	4b98      	ldr	r3, [pc, #608]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0dc:	08db      	lsrs	r3, r3, #3
 800c0de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	fb02 f303 	mul.w	r3, r2, r3
 800c0e8:	ee07 3a90 	vmov	s15, r3
 800c0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 8111 	beq.w	800c31e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	f000 8083 	beq.w	800c20a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	2b02      	cmp	r3, #2
 800c108:	f200 80a1 	bhi.w	800c24e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d056      	beq.n	800c1c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c118:	e099      	b.n	800c24e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c11a:	4b88      	ldr	r3, [pc, #544]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 0320 	and.w	r3, r3, #32
 800c122:	2b00      	cmp	r3, #0
 800c124:	d02d      	beq.n	800c182 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c126:	4b85      	ldr	r3, [pc, #532]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	08db      	lsrs	r3, r3, #3
 800c12c:	f003 0303 	and.w	r3, r3, #3
 800c130:	4a83      	ldr	r2, [pc, #524]	; (800c340 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c132:	fa22 f303 	lsr.w	r3, r2, r3
 800c136:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	ee07 3a90 	vmov	s15, r3
 800c13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	ee07 3a90 	vmov	s15, r3
 800c148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c150:	4b7a      	ldr	r3, [pc, #488]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c158:	ee07 3a90 	vmov	s15, r3
 800c15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c160:	ed97 6a03 	vldr	s12, [r7, #12]
 800c164:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c344 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c16c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c17c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c180:	e087      	b.n	800c292 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	ee07 3a90 	vmov	s15, r3
 800c188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c18c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c348 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c194:	4b69      	ldr	r3, [pc, #420]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c19c:	ee07 3a90 	vmov	s15, r3
 800c1a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c344 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1c4:	e065      	b.n	800c292 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	ee07 3a90 	vmov	s15, r3
 800c1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c34c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c1d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1d8:	4b58      	ldr	r3, [pc, #352]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1e0:	ee07 3a90 	vmov	s15, r3
 800c1e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c344 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c200:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c204:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c208:	e043      	b.n	800c292 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	ee07 3a90 	vmov	s15, r3
 800c210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c214:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c21c:	4b47      	ldr	r3, [pc, #284]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c224:	ee07 3a90 	vmov	s15, r3
 800c228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c22c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c230:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c344 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c23c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c248:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c24c:	e021      	b.n	800c292 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	ee07 3a90 	vmov	s15, r3
 800c254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c258:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c348 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c25c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c260:	4b36      	ldr	r3, [pc, #216]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c268:	ee07 3a90 	vmov	s15, r3
 800c26c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c270:	ed97 6a03 	vldr	s12, [r7, #12]
 800c274:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c344 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c27c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c280:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c28c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c290:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c292:	4b2a      	ldr	r3, [pc, #168]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c296:	0a5b      	lsrs	r3, r3, #9
 800c298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c29c:	ee07 3a90 	vmov	s15, r3
 800c2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2b8:	ee17 2a90 	vmov	r2, s15
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c2c0:	4b1e      	ldr	r3, [pc, #120]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c4:	0c1b      	lsrs	r3, r3, #16
 800c2c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ca:	ee07 3a90 	vmov	s15, r3
 800c2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2da:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2e6:	ee17 2a90 	vmov	r2, s15
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c2ee:	4b13      	ldr	r3, [pc, #76]	; (800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f2:	0e1b      	lsrs	r3, r3, #24
 800c2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2f8:	ee07 3a90 	vmov	s15, r3
 800c2fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c304:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c308:	edd7 6a07 	vldr	s13, [r7, #28]
 800c30c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c314:	ee17 2a90 	vmov	r2, s15
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c31c:	e008      	b.n	800c330 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	609a      	str	r2, [r3, #8]
}
 800c330:	bf00      	nop
 800c332:	3724      	adds	r7, #36	; 0x24
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr
 800c33c:	58024400 	.word	0x58024400
 800c340:	03d09000 	.word	0x03d09000
 800c344:	46000000 	.word	0x46000000
 800c348:	4c742400 	.word	0x4c742400
 800c34c:	4a742400 	.word	0x4a742400
 800c350:	4ba8c000 	.word	0x4ba8c000

0800c354 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c362:	4b53      	ldr	r3, [pc, #332]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c366:	f003 0303 	and.w	r3, r3, #3
 800c36a:	2b03      	cmp	r3, #3
 800c36c:	d101      	bne.n	800c372 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e099      	b.n	800c4a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c372:	4b4f      	ldr	r3, [pc, #316]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a4e      	ldr	r2, [pc, #312]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c378:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c37c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c37e:	f7f6 fbef 	bl	8002b60 <HAL_GetTick>
 800c382:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c384:	e008      	b.n	800c398 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c386:	f7f6 fbeb 	bl	8002b60 <HAL_GetTick>
 800c38a:	4602      	mov	r2, r0
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	2b02      	cmp	r3, #2
 800c392:	d901      	bls.n	800c398 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	e086      	b.n	800c4a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c398:	4b45      	ldr	r3, [pc, #276]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1f0      	bne.n	800c386 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c3a4:	4b42      	ldr	r3, [pc, #264]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	031b      	lsls	r3, r3, #12
 800c3b2:	493f      	ldr	r1, [pc, #252]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	628b      	str	r3, [r1, #40]	; 0x28
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	025b      	lsls	r3, r3, #9
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	431a      	orrs	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	041b      	lsls	r3, r3, #16
 800c3d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c3da:	431a      	orrs	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	061b      	lsls	r3, r3, #24
 800c3e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c3e8:	4931      	ldr	r1, [pc, #196]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c3ee:	4b30      	ldr	r3, [pc, #192]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	492d      	ldr	r1, [pc, #180]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c400:	4b2b      	ldr	r3, [pc, #172]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	f023 0220 	bic.w	r2, r3, #32
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	699b      	ldr	r3, [r3, #24]
 800c40c:	4928      	ldr	r1, [pc, #160]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c40e:	4313      	orrs	r3, r2
 800c410:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c412:	4b27      	ldr	r3, [pc, #156]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c416:	4a26      	ldr	r2, [pc, #152]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c418:	f023 0310 	bic.w	r3, r3, #16
 800c41c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c41e:	4b24      	ldr	r3, [pc, #144]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c422:	4b24      	ldr	r3, [pc, #144]	; (800c4b4 <RCCEx_PLL2_Config+0x160>)
 800c424:	4013      	ands	r3, r2
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	69d2      	ldr	r2, [r2, #28]
 800c42a:	00d2      	lsls	r2, r2, #3
 800c42c:	4920      	ldr	r1, [pc, #128]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c42e:	4313      	orrs	r3, r2
 800c430:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c432:	4b1f      	ldr	r3, [pc, #124]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c436:	4a1e      	ldr	r2, [pc, #120]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c438:	f043 0310 	orr.w	r3, r3, #16
 800c43c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d106      	bne.n	800c452 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c444:	4b1a      	ldr	r3, [pc, #104]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c448:	4a19      	ldr	r2, [pc, #100]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c44a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c44e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c450:	e00f      	b.n	800c472 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d106      	bne.n	800c466 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c458:	4b15      	ldr	r3, [pc, #84]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45c:	4a14      	ldr	r2, [pc, #80]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c45e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c462:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c464:	e005      	b.n	800c472 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c466:	4b12      	ldr	r3, [pc, #72]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46a:	4a11      	ldr	r2, [pc, #68]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c46c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c470:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c472:	4b0f      	ldr	r3, [pc, #60]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a0e      	ldr	r2, [pc, #56]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c478:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c47c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c47e:	f7f6 fb6f 	bl	8002b60 <HAL_GetTick>
 800c482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c484:	e008      	b.n	800c498 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c486:	f7f6 fb6b 	bl	8002b60 <HAL_GetTick>
 800c48a:	4602      	mov	r2, r0
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	2b02      	cmp	r3, #2
 800c492:	d901      	bls.n	800c498 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e006      	b.n	800c4a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c498:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <RCCEx_PLL2_Config+0x15c>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0f0      	beq.n	800c486 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	58024400 	.word	0x58024400
 800c4b4:	ffff0007 	.word	0xffff0007

0800c4b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4c6:	4b53      	ldr	r3, [pc, #332]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ca:	f003 0303 	and.w	r3, r3, #3
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d101      	bne.n	800c4d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e099      	b.n	800c60a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c4d6:	4b4f      	ldr	r3, [pc, #316]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a4e      	ldr	r2, [pc, #312]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c4dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4e2:	f7f6 fb3d 	bl	8002b60 <HAL_GetTick>
 800c4e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c4e8:	e008      	b.n	800c4fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c4ea:	f7f6 fb39 	bl	8002b60 <HAL_GetTick>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d901      	bls.n	800c4fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	e086      	b.n	800c60a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c4fc:	4b45      	ldr	r3, [pc, #276]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1f0      	bne.n	800c4ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c508:	4b42      	ldr	r3, [pc, #264]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	051b      	lsls	r3, r3, #20
 800c516:	493f      	ldr	r1, [pc, #252]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c518:	4313      	orrs	r3, r2
 800c51a:	628b      	str	r3, [r1, #40]	; 0x28
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	3b01      	subs	r3, #1
 800c522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	025b      	lsls	r3, r3, #9
 800c52e:	b29b      	uxth	r3, r3
 800c530:	431a      	orrs	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	3b01      	subs	r3, #1
 800c538:	041b      	lsls	r3, r3, #16
 800c53a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c53e:	431a      	orrs	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	3b01      	subs	r3, #1
 800c546:	061b      	lsls	r3, r3, #24
 800c548:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c54c:	4931      	ldr	r1, [pc, #196]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c54e:	4313      	orrs	r3, r2
 800c550:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c552:	4b30      	ldr	r3, [pc, #192]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c556:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	695b      	ldr	r3, [r3, #20]
 800c55e:	492d      	ldr	r1, [pc, #180]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c560:	4313      	orrs	r3, r2
 800c562:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c564:	4b2b      	ldr	r3, [pc, #172]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c568:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	4928      	ldr	r1, [pc, #160]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c572:	4313      	orrs	r3, r2
 800c574:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c576:	4b27      	ldr	r3, [pc, #156]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57a:	4a26      	ldr	r2, [pc, #152]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c57c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c580:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c582:	4b24      	ldr	r3, [pc, #144]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c586:	4b24      	ldr	r3, [pc, #144]	; (800c618 <RCCEx_PLL3_Config+0x160>)
 800c588:	4013      	ands	r3, r2
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	69d2      	ldr	r2, [r2, #28]
 800c58e:	00d2      	lsls	r2, r2, #3
 800c590:	4920      	ldr	r1, [pc, #128]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c592:	4313      	orrs	r3, r2
 800c594:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c596:	4b1f      	ldr	r3, [pc, #124]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c59a:	4a1e      	ldr	r2, [pc, #120]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c59c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d106      	bne.n	800c5b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c5a8:	4b1a      	ldr	r3, [pc, #104]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ac:	4a19      	ldr	r2, [pc, #100]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c5ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c5b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c5b4:	e00f      	b.n	800c5d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d106      	bne.n	800c5ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c5bc:	4b15      	ldr	r3, [pc, #84]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c0:	4a14      	ldr	r2, [pc, #80]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c5c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c5c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c5c8:	e005      	b.n	800c5d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c5ca:	4b12      	ldr	r3, [pc, #72]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ce:	4a11      	ldr	r2, [pc, #68]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c5d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c5d6:	4b0f      	ldr	r3, [pc, #60]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a0e      	ldr	r2, [pc, #56]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c5dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5e2:	f7f6 fabd 	bl	8002b60 <HAL_GetTick>
 800c5e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c5e8:	e008      	b.n	800c5fc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c5ea:	f7f6 fab9 	bl	8002b60 <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d901      	bls.n	800c5fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e006      	b.n	800c60a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c5fc:	4b05      	ldr	r3, [pc, #20]	; (800c614 <RCCEx_PLL3_Config+0x15c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d0f0      	beq.n	800c5ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	58024400 	.word	0x58024400
 800c618:	ffff0007 	.word	0xffff0007

0800c61c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800c624:	2300      	movs	r3, #0
 800c626:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e0eb      	b.n	800c80a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a75      	ldr	r2, [pc, #468]	; (800c814 <HAL_SPI_Init+0x1f8>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d00f      	beq.n	800c662 <HAL_SPI_Init+0x46>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a74      	ldr	r2, [pc, #464]	; (800c818 <HAL_SPI_Init+0x1fc>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d00a      	beq.n	800c662 <HAL_SPI_Init+0x46>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a72      	ldr	r2, [pc, #456]	; (800c81c <HAL_SPI_Init+0x200>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d005      	beq.n	800c662 <HAL_SPI_Init+0x46>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	2b0f      	cmp	r3, #15
 800c65c:	d901      	bls.n	800c662 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	e0d3      	b.n	800c80a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 fc96 	bl	800cf94 <SPI_GetPacketSize>
 800c668:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a69      	ldr	r2, [pc, #420]	; (800c814 <HAL_SPI_Init+0x1f8>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d00c      	beq.n	800c68e <HAL_SPI_Init+0x72>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a67      	ldr	r2, [pc, #412]	; (800c818 <HAL_SPI_Init+0x1fc>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d007      	beq.n	800c68e <HAL_SPI_Init+0x72>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a66      	ldr	r2, [pc, #408]	; (800c81c <HAL_SPI_Init+0x200>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d002      	beq.n	800c68e <HAL_SPI_Init+0x72>
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	2b08      	cmp	r3, #8
 800c68c:	d811      	bhi.n	800c6b2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c692:	4a60      	ldr	r2, [pc, #384]	; (800c814 <HAL_SPI_Init+0x1f8>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d009      	beq.n	800c6ac <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a5e      	ldr	r2, [pc, #376]	; (800c818 <HAL_SPI_Init+0x1fc>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d004      	beq.n	800c6ac <HAL_SPI_Init+0x90>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a5d      	ldr	r2, [pc, #372]	; (800c81c <HAL_SPI_Init+0x200>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d104      	bne.n	800c6b6 <HAL_SPI_Init+0x9a>
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	2b10      	cmp	r3, #16
 800c6b0:	d901      	bls.n	800c6b6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e0a9      	b.n	800c80a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d106      	bne.n	800c6d0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7f5 fd7c 	bl	80021c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2202      	movs	r2, #2
 800c6d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f022 0201 	bic.w	r2, r2, #1
 800c6e6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c6f0:	d119      	bne.n	800c726 <HAL_SPI_Init+0x10a>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6fa:	d103      	bne.n	800c704 <HAL_SPI_Init+0xe8>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c700:	2b00      	cmp	r3, #0
 800c702:	d008      	beq.n	800c716 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10c      	bne.n	800c726 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c714:	d107      	bne.n	800c726 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c724:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	69da      	ldr	r2, [r3, #28]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72e:	431a      	orrs	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	431a      	orrs	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c738:	ea42 0103 	orr.w	r1, r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	68da      	ldr	r2, [r3, #12]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	430a      	orrs	r2, r1
 800c746:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c750:	431a      	orrs	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c756:	431a      	orrs	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	431a      	orrs	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	431a      	orrs	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	695b      	ldr	r3, [r3, #20]
 800c768:	431a      	orrs	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a1b      	ldr	r3, [r3, #32]
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	431a      	orrs	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	431a      	orrs	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c786:	ea42 0103 	orr.w	r1, r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	430a      	orrs	r2, r1
 800c794:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d113      	bne.n	800c7c6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c7c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f022 0201 	bic.w	r2, r2, #1
 800c7d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d00a      	beq.n	800c7f8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	430a      	orrs	r2, r1
 800c7f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	40013000 	.word	0x40013000
 800c818:	40003800 	.word	0x40003800
 800c81c:	40003c00 	.word	0x40003c00

0800c820 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b08e      	sub	sp, #56	; 0x38
 800c824:	af02      	add	r7, sp, #8
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
 800c82c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c82e:	2300      	movs	r3, #0
 800c830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	3320      	adds	r3, #32
 800c83a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3330      	adds	r3, #48	; 0x30
 800c842:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d101      	bne.n	800c852 <HAL_SPI_TransmitReceive+0x32>
 800c84e:	2302      	movs	r3, #2
 800c850:	e2ce      	b.n	800cdf0 <HAL_SPI_TransmitReceive+0x5d0>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c85a:	f7f6 f981 	bl	8002b60 <HAL_GetTick>
 800c85e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800c860:	887b      	ldrh	r3, [r7, #2]
 800c862:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800c864:	887b      	ldrh	r3, [r7, #2]
 800c866:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c86e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c876:	7efb      	ldrb	r3, [r7, #27]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d014      	beq.n	800c8a6 <HAL_SPI_TransmitReceive+0x86>
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c882:	d106      	bne.n	800c892 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d102      	bne.n	800c892 <HAL_SPI_TransmitReceive+0x72>
 800c88c:	7efb      	ldrb	r3, [r7, #27]
 800c88e:	2b04      	cmp	r3, #4
 800c890:	d009      	beq.n	800c8a6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800c892:	2302      	movs	r3, #2
 800c894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c8a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c8a4:	e2a4      	b.n	800cdf0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d005      	beq.n	800c8b8 <HAL_SPI_TransmitReceive+0x98>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d002      	beq.n	800c8b8 <HAL_SPI_TransmitReceive+0x98>
 800c8b2:	887b      	ldrh	r3, [r7, #2]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d109      	bne.n	800c8cc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c8c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c8ca:	e291      	b.n	800cdf0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b04      	cmp	r3, #4
 800c8d6:	d003      	beq.n	800c8e0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2205      	movs	r2, #5
 800c8dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	887a      	ldrh	r2, [r7, #2]
 800c8f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	887a      	ldrh	r2, [r7, #2]
 800c8fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	887a      	ldrh	r2, [r7, #2]
 800c908:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	887a      	ldrh	r2, [r7, #2]
 800c910:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2200      	movs	r2, #0
 800c91e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	4b9f      	ldr	r3, [pc, #636]	; (800cba4 <HAL_SPI_TransmitReceive+0x384>)
 800c928:	4013      	ands	r3, r2
 800c92a:	8879      	ldrh	r1, [r7, #2]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	6812      	ldr	r2, [r2, #0]
 800c930:	430b      	orrs	r3, r1
 800c932:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f042 0201 	orr.w	r2, r2, #1
 800c942:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c94c:	d107      	bne.n	800c95e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c95c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	2b0f      	cmp	r3, #15
 800c964:	d970      	bls.n	800ca48 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c966:	e068      	b.n	800ca3a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	695b      	ldr	r3, [r3, #20]
 800c96e:	f003 0302 	and.w	r3, r3, #2
 800c972:	2b02      	cmp	r3, #2
 800c974:	d11a      	bne.n	800c9ac <HAL_SPI_TransmitReceive+0x18c>
 800c976:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d017      	beq.n	800c9ac <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	6812      	ldr	r2, [r2, #0]
 800c986:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c98c:	1d1a      	adds	r2, r3, #4
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c998:	b29b      	uxth	r3, r3
 800c99a:	3b01      	subs	r3, #1
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	695a      	ldr	r2, [r3, #20]
 800c9b2:	f248 0308 	movw	r3, #32776	; 0x8008
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01a      	beq.n	800c9f2 <HAL_SPI_TransmitReceive+0x1d2>
 800c9bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d017      	beq.n	800c9f2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c9cc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9d2:	1d1a      	adds	r2, r3, #4
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9f2:	f7f6 f8b5 	bl	8002b60 <HAL_GetTick>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d803      	bhi.n	800ca0a <HAL_SPI_TransmitReceive+0x1ea>
 800ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca08:	d102      	bne.n	800ca10 <HAL_SPI_TransmitReceive+0x1f0>
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d114      	bne.n	800ca3a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f000 f9f1 	bl	800cdf8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2201      	movs	r2, #1
 800ca32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	e1da      	b.n	800cdf0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ca3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d193      	bne.n	800c968 <HAL_SPI_TransmitReceive+0x148>
 800ca40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d190      	bne.n	800c968 <HAL_SPI_TransmitReceive+0x148>
 800ca46:	e1ac      	b.n	800cda2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	2b07      	cmp	r3, #7
 800ca4e:	f240 81a0 	bls.w	800cd92 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ca52:	e0a9      	b.n	800cba8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	695b      	ldr	r3, [r3, #20]
 800ca5a:	f003 0302 	and.w	r3, r3, #2
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	d139      	bne.n	800cad6 <HAL_SPI_TransmitReceive+0x2b6>
 800ca62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d036      	beq.n	800cad6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ca68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d91c      	bls.n	800caa8 <HAL_SPI_TransmitReceive+0x288>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d018      	beq.n	800caa8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	6812      	ldr	r2, [r2, #0]
 800ca80:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca86:	1d1a      	adds	r2, r3, #4
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	3b02      	subs	r3, #2
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800caa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800caa6:	e016      	b.n	800cad6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800caac:	881a      	ldrh	r2, [r3, #0]
 800caae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cab6:	1c9a      	adds	r2, r3, #2
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	3b01      	subs	r3, #1
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cad4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d03a      	beq.n	800cb5a <HAL_SPI_TransmitReceive+0x33a>
 800cae4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d037      	beq.n	800cb5a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d018      	beq.n	800cb2a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cb02:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb08:	1d1a      	adds	r2, r3, #4
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	3b02      	subs	r3, #2
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb26:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cb28:	e017      	b.n	800cb5a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb2e:	6a3a      	ldr	r2, [r7, #32]
 800cb30:	8812      	ldrh	r2, [r2, #0]
 800cb32:	b292      	uxth	r2, r2
 800cb34:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb3a:	1c9a      	adds	r2, r3, #2
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb58:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb5a:	f7f6 f801 	bl	8002b60 <HAL_GetTick>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d803      	bhi.n	800cb72 <HAL_SPI_TransmitReceive+0x352>
 800cb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb70:	d102      	bne.n	800cb78 <HAL_SPI_TransmitReceive+0x358>
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d117      	bne.n	800cba8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f000 f93d 	bl	800cdf8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e126      	b.n	800cdf0 <HAL_SPI_TransmitReceive+0x5d0>
 800cba2:	bf00      	nop
 800cba4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cba8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f47f af52 	bne.w	800ca54 <HAL_SPI_TransmitReceive+0x234>
 800cbb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f47f af4e 	bne.w	800ca54 <HAL_SPI_TransmitReceive+0x234>
 800cbb8:	e0f3      	b.n	800cda2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	695b      	ldr	r3, [r3, #20]
 800cbc0:	f003 0302 	and.w	r3, r3, #2
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d15a      	bne.n	800cc7e <HAL_SPI_TransmitReceive+0x45e>
 800cbc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d057      	beq.n	800cc7e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cbce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cbd0:	2b03      	cmp	r3, #3
 800cbd2:	d91c      	bls.n	800cc0e <HAL_SPI_TransmitReceive+0x3ee>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd8:	2b40      	cmp	r3, #64	; 0x40
 800cbda:	d918      	bls.n	800cc0e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6812      	ldr	r2, [r2, #0]
 800cbe6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbec:	1d1a      	adds	r2, r3, #4
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	3b04      	subs	r3, #4
 800cbfc:	b29a      	uxth	r2, r3
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cc0c:	e037      	b.n	800cc7e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cc0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d91b      	bls.n	800cc4c <HAL_SPI_TransmitReceive+0x42c>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d017      	beq.n	800cc4c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc20:	881a      	ldrh	r2, [r3, #0]
 800cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc24:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc2a:	1c9a      	adds	r2, r3, #2
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	3b02      	subs	r3, #2
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cc4a:	e018      	b.n	800cc7e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	3320      	adds	r3, #32
 800cc56:	7812      	ldrb	r2, [r2, #0]
 800cc58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	695b      	ldr	r3, [r3, #20]
 800cc84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d05e      	beq.n	800cd4a <HAL_SPI_TransmitReceive+0x52a>
 800cc8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d05b      	beq.n	800cd4a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	695b      	ldr	r3, [r3, #20]
 800cc98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d018      	beq.n	800ccd2 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cca8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ccaa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccb0:	1d1a      	adds	r2, r3, #4
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	3b04      	subs	r3, #4
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ccd0:	e03b      	b.n	800cd4a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800ccdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cce0:	d918      	bls.n	800cd14 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cce6:	6a3a      	ldr	r2, [r7, #32]
 800cce8:	8812      	ldrh	r2, [r2, #0]
 800ccea:	b292      	uxth	r2, r2
 800ccec:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccf2:	1c9a      	adds	r2, r3, #2
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	3b02      	subs	r3, #2
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd10:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cd12:	e01a      	b.n	800cd4a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd20:	7812      	ldrb	r2, [r2, #0]
 800cd22:	b2d2      	uxtb	r2, r2
 800cd24:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd2a:	1c5a      	adds	r2, r3, #1
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd48:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd4a:	f7f5 ff09 	bl	8002b60 <HAL_GetTick>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d803      	bhi.n	800cd62 <HAL_SPI_TransmitReceive+0x542>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd60:	d102      	bne.n	800cd68 <HAL_SPI_TransmitReceive+0x548>
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d114      	bne.n	800cd92 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f000 f845 	bl	800cdf8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e02e      	b.n	800cdf0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cd92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f47f af10 	bne.w	800cbba <HAL_SPI_TransmitReceive+0x39a>
 800cd9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f47f af0c 	bne.w	800cbba <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800cda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	2108      	movs	r1, #8
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f000 f8c3 	bl	800cf38 <SPI_WaitOnFlagUntilTimeout>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d007      	beq.n	800cdc8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdbe:	f043 0220 	orr.w	r2, r3, #32
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f000 f815 	bl	800cdf8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d001      	beq.n	800cdec <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800cde8:	2301      	movs	r3, #1
 800cdea:	e001      	b.n	800cdf0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800cdec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3730      	adds	r7, #48	; 0x30
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	695b      	ldr	r3, [r3, #20]
 800ce06:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	699a      	ldr	r2, [r3, #24]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f042 0208 	orr.w	r2, r2, #8
 800ce16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	699a      	ldr	r2, [r3, #24]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f042 0210 	orr.w	r2, r2, #16
 800ce26:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f022 0201 	bic.w	r2, r2, #1
 800ce36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	6919      	ldr	r1, [r3, #16]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	4b3c      	ldr	r3, [pc, #240]	; (800cf34 <SPI_CloseTransfer+0x13c>)
 800ce44:	400b      	ands	r3, r1
 800ce46:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	689a      	ldr	r2, [r3, #8]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ce56:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b04      	cmp	r3, #4
 800ce62:	d014      	beq.n	800ce8e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f003 0320 	and.w	r3, r3, #32
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00f      	beq.n	800ce8e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	699a      	ldr	r2, [r3, #24]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f042 0220 	orr.w	r2, r2, #32
 800ce8c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d014      	beq.n	800cec4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00f      	beq.n	800cec4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ceaa:	f043 0204 	orr.w	r2, r3, #4
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	699a      	ldr	r2, [r3, #24]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cec2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00f      	beq.n	800ceee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ced4:	f043 0201 	orr.w	r2, r3, #1
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	699a      	ldr	r2, [r3, #24]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ceec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00f      	beq.n	800cf18 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cefe:	f043 0208 	orr.w	r2, r3, #8
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	699a      	ldr	r2, [r3, #24]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf16:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800cf28:	bf00      	nop
 800cf2a:	3714      	adds	r7, #20
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr
 800cf34:	fffffc90 	.word	0xfffffc90

0800cf38 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	603b      	str	r3, [r7, #0]
 800cf44:	4613      	mov	r3, r2
 800cf46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cf48:	e010      	b.n	800cf6c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf4a:	f7f5 fe09 	bl	8002b60 <HAL_GetTick>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	69ba      	ldr	r2, [r7, #24]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d803      	bhi.n	800cf62 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf60:	d102      	bne.n	800cf68 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	e00f      	b.n	800cf8c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	695a      	ldr	r2, [r3, #20]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	4013      	ands	r3, r2
 800cf76:	68ba      	ldr	r2, [r7, #8]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	bf0c      	ite	eq
 800cf7c:	2301      	moveq	r3, #1
 800cf7e:	2300      	movne	r3, #0
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	461a      	mov	r2, r3
 800cf84:	79fb      	ldrb	r3, [r7, #7]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d0df      	beq.n	800cf4a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfa0:	095b      	lsrs	r3, r3, #5
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	3307      	adds	r3, #7
 800cfb2:	08db      	lsrs	r3, r3, #3
 800cfb4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	fb02 f303 	mul.w	r3, r2, r3
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr

0800cfca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b082      	sub	sp, #8
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d101      	bne.n	800cfdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e049      	b.n	800d070 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d106      	bne.n	800cff6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7f5 fa75 	bl	80024e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2202      	movs	r2, #2
 800cffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	3304      	adds	r3, #4
 800d006:	4619      	mov	r1, r3
 800d008:	4610      	mov	r0, r2
 800d00a:	f000 fdc7 	bl	800db9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2201      	movs	r2, #1
 800d01a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2201      	movs	r2, #1
 800d022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2201      	movs	r2, #1
 800d02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2201      	movs	r2, #1
 800d032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2201      	movs	r2, #1
 800d05a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d078:	b480      	push	{r7}
 800d07a:	b085      	sub	sp, #20
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d001      	beq.n	800d090 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	e056      	b.n	800d13e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2202      	movs	r2, #2
 800d094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a2b      	ldr	r2, [pc, #172]	; (800d14c <HAL_TIM_Base_Start+0xd4>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d02c      	beq.n	800d0fc <HAL_TIM_Base_Start+0x84>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0aa:	d027      	beq.n	800d0fc <HAL_TIM_Base_Start+0x84>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a27      	ldr	r2, [pc, #156]	; (800d150 <HAL_TIM_Base_Start+0xd8>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d022      	beq.n	800d0fc <HAL_TIM_Base_Start+0x84>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a26      	ldr	r2, [pc, #152]	; (800d154 <HAL_TIM_Base_Start+0xdc>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d01d      	beq.n	800d0fc <HAL_TIM_Base_Start+0x84>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a24      	ldr	r2, [pc, #144]	; (800d158 <HAL_TIM_Base_Start+0xe0>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d018      	beq.n	800d0fc <HAL_TIM_Base_Start+0x84>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a23      	ldr	r2, [pc, #140]	; (800d15c <HAL_TIM_Base_Start+0xe4>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d013      	beq.n	800d0fc <HAL_TIM_Base_Start+0x84>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a21      	ldr	r2, [pc, #132]	; (800d160 <HAL_TIM_Base_Start+0xe8>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d00e      	beq.n	800d0fc <HAL_TIM_Base_Start+0x84>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a20      	ldr	r2, [pc, #128]	; (800d164 <HAL_TIM_Base_Start+0xec>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d009      	beq.n	800d0fc <HAL_TIM_Base_Start+0x84>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a1e      	ldr	r2, [pc, #120]	; (800d168 <HAL_TIM_Base_Start+0xf0>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d004      	beq.n	800d0fc <HAL_TIM_Base_Start+0x84>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a1d      	ldr	r2, [pc, #116]	; (800d16c <HAL_TIM_Base_Start+0xf4>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d115      	bne.n	800d128 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	689a      	ldr	r2, [r3, #8]
 800d102:	4b1b      	ldr	r3, [pc, #108]	; (800d170 <HAL_TIM_Base_Start+0xf8>)
 800d104:	4013      	ands	r3, r2
 800d106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b06      	cmp	r3, #6
 800d10c:	d015      	beq.n	800d13a <HAL_TIM_Base_Start+0xc2>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d114:	d011      	beq.n	800d13a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f042 0201 	orr.w	r2, r2, #1
 800d124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d126:	e008      	b.n	800d13a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f042 0201 	orr.w	r2, r2, #1
 800d136:	601a      	str	r2, [r3, #0]
 800d138:	e000      	b.n	800d13c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d13a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3714      	adds	r7, #20
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	40010000 	.word	0x40010000
 800d150:	40000400 	.word	0x40000400
 800d154:	40000800 	.word	0x40000800
 800d158:	40000c00 	.word	0x40000c00
 800d15c:	40010400 	.word	0x40010400
 800d160:	40001800 	.word	0x40001800
 800d164:	40014000 	.word	0x40014000
 800d168:	4000e000 	.word	0x4000e000
 800d16c:	4000e400 	.word	0x4000e400
 800d170:	00010007 	.word	0x00010007

0800d174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b01      	cmp	r3, #1
 800d186:	d001      	beq.n	800d18c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d188:	2301      	movs	r3, #1
 800d18a:	e05e      	b.n	800d24a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2202      	movs	r2, #2
 800d190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68da      	ldr	r2, [r3, #12]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f042 0201 	orr.w	r2, r2, #1
 800d1a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a2b      	ldr	r2, [pc, #172]	; (800d258 <HAL_TIM_Base_Start_IT+0xe4>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d02c      	beq.n	800d208 <HAL_TIM_Base_Start_IT+0x94>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1b6:	d027      	beq.n	800d208 <HAL_TIM_Base_Start_IT+0x94>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a27      	ldr	r2, [pc, #156]	; (800d25c <HAL_TIM_Base_Start_IT+0xe8>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d022      	beq.n	800d208 <HAL_TIM_Base_Start_IT+0x94>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a26      	ldr	r2, [pc, #152]	; (800d260 <HAL_TIM_Base_Start_IT+0xec>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d01d      	beq.n	800d208 <HAL_TIM_Base_Start_IT+0x94>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a24      	ldr	r2, [pc, #144]	; (800d264 <HAL_TIM_Base_Start_IT+0xf0>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d018      	beq.n	800d208 <HAL_TIM_Base_Start_IT+0x94>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a23      	ldr	r2, [pc, #140]	; (800d268 <HAL_TIM_Base_Start_IT+0xf4>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d013      	beq.n	800d208 <HAL_TIM_Base_Start_IT+0x94>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a21      	ldr	r2, [pc, #132]	; (800d26c <HAL_TIM_Base_Start_IT+0xf8>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d00e      	beq.n	800d208 <HAL_TIM_Base_Start_IT+0x94>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a20      	ldr	r2, [pc, #128]	; (800d270 <HAL_TIM_Base_Start_IT+0xfc>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d009      	beq.n	800d208 <HAL_TIM_Base_Start_IT+0x94>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a1e      	ldr	r2, [pc, #120]	; (800d274 <HAL_TIM_Base_Start_IT+0x100>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d004      	beq.n	800d208 <HAL_TIM_Base_Start_IT+0x94>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a1d      	ldr	r2, [pc, #116]	; (800d278 <HAL_TIM_Base_Start_IT+0x104>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d115      	bne.n	800d234 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	689a      	ldr	r2, [r3, #8]
 800d20e:	4b1b      	ldr	r3, [pc, #108]	; (800d27c <HAL_TIM_Base_Start_IT+0x108>)
 800d210:	4013      	ands	r3, r2
 800d212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2b06      	cmp	r3, #6
 800d218:	d015      	beq.n	800d246 <HAL_TIM_Base_Start_IT+0xd2>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d220:	d011      	beq.n	800d246 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f042 0201 	orr.w	r2, r2, #1
 800d230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d232:	e008      	b.n	800d246 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f042 0201 	orr.w	r2, r2, #1
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	e000      	b.n	800d248 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d246:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	40010000 	.word	0x40010000
 800d25c:	40000400 	.word	0x40000400
 800d260:	40000800 	.word	0x40000800
 800d264:	40000c00 	.word	0x40000c00
 800d268:	40010400 	.word	0x40010400
 800d26c:	40001800 	.word	0x40001800
 800d270:	40014000 	.word	0x40014000
 800d274:	4000e000 	.word	0x4000e000
 800d278:	4000e400 	.word	0x4000e400
 800d27c:	00010007 	.word	0x00010007

0800d280 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	e049      	b.n	800d326 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d106      	bne.n	800d2ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 f841 	bl	800d32e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	3304      	adds	r3, #4
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4610      	mov	r0, r2
 800d2c0:	f000 fc6c 	bl	800db9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d324:	2300      	movs	r3, #0
}
 800d326:	4618      	mov	r0, r3
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800d336:	bf00      	nop
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b082      	sub	sp, #8
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d101      	bne.n	800d354 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e049      	b.n	800d3e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d106      	bne.n	800d36e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 f841 	bl	800d3f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2202      	movs	r2, #2
 800d372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	3304      	adds	r3, #4
 800d37e:	4619      	mov	r1, r3
 800d380:	4610      	mov	r0, r2
 800d382:	f000 fc0b 	bl	800db9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2201      	movs	r2, #1
 800d38a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2201      	movs	r2, #1
 800d392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2201      	movs	r2, #1
 800d39a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d3e6:	2300      	movs	r3, #0
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	691b      	ldr	r3, [r3, #16]
 800d412:	f003 0302 	and.w	r3, r3, #2
 800d416:	2b02      	cmp	r3, #2
 800d418:	d122      	bne.n	800d460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	f003 0302 	and.w	r3, r3, #2
 800d424:	2b02      	cmp	r3, #2
 800d426:	d11b      	bne.n	800d460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f06f 0202 	mvn.w	r2, #2
 800d430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2201      	movs	r2, #1
 800d436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	f003 0303 	and.w	r3, r3, #3
 800d442:	2b00      	cmp	r3, #0
 800d444:	d003      	beq.n	800d44e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fb8a 	bl	800db60 <HAL_TIM_IC_CaptureCallback>
 800d44c:	e005      	b.n	800d45a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 fb7c 	bl	800db4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 fb8d 	bl	800db74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	691b      	ldr	r3, [r3, #16]
 800d466:	f003 0304 	and.w	r3, r3, #4
 800d46a:	2b04      	cmp	r3, #4
 800d46c:	d122      	bne.n	800d4b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	f003 0304 	and.w	r3, r3, #4
 800d478:	2b04      	cmp	r3, #4
 800d47a:	d11b      	bne.n	800d4b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f06f 0204 	mvn.w	r2, #4
 800d484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2202      	movs	r2, #2
 800d48a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	699b      	ldr	r3, [r3, #24]
 800d492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 fb60 	bl	800db60 <HAL_TIM_IC_CaptureCallback>
 800d4a0:	e005      	b.n	800d4ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 fb52 	bl	800db4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fb63 	bl	800db74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	f003 0308 	and.w	r3, r3, #8
 800d4be:	2b08      	cmp	r3, #8
 800d4c0:	d122      	bne.n	800d508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	f003 0308 	and.w	r3, r3, #8
 800d4cc:	2b08      	cmp	r3, #8
 800d4ce:	d11b      	bne.n	800d508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f06f 0208 	mvn.w	r2, #8
 800d4d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2204      	movs	r2, #4
 800d4de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	69db      	ldr	r3, [r3, #28]
 800d4e6:	f003 0303 	and.w	r3, r3, #3
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d003      	beq.n	800d4f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 fb36 	bl	800db60 <HAL_TIM_IC_CaptureCallback>
 800d4f4:	e005      	b.n	800d502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fb28 	bl	800db4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 fb39 	bl	800db74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	f003 0310 	and.w	r3, r3, #16
 800d512:	2b10      	cmp	r3, #16
 800d514:	d122      	bne.n	800d55c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	f003 0310 	and.w	r3, r3, #16
 800d520:	2b10      	cmp	r3, #16
 800d522:	d11b      	bne.n	800d55c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f06f 0210 	mvn.w	r2, #16
 800d52c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2208      	movs	r2, #8
 800d532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	69db      	ldr	r3, [r3, #28]
 800d53a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d003      	beq.n	800d54a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fb0c 	bl	800db60 <HAL_TIM_IC_CaptureCallback>
 800d548:	e005      	b.n	800d556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fafe 	bl	800db4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 fb0f 	bl	800db74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b01      	cmp	r3, #1
 800d568:	d10e      	bne.n	800d588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	f003 0301 	and.w	r3, r3, #1
 800d574:	2b01      	cmp	r3, #1
 800d576:	d107      	bne.n	800d588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f06f 0201 	mvn.w	r2, #1
 800d580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 fad8 	bl	800db38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d592:	2b80      	cmp	r3, #128	; 0x80
 800d594:	d10e      	bne.n	800d5b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5a0:	2b80      	cmp	r3, #128	; 0x80
 800d5a2:	d107      	bne.n	800d5b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d5ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f001 f82a 	bl	800e608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	691b      	ldr	r3, [r3, #16]
 800d5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5c2:	d10e      	bne.n	800d5e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ce:	2b80      	cmp	r3, #128	; 0x80
 800d5d0:	d107      	bne.n	800d5e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d5da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f001 f81d 	bl	800e61c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ec:	2b40      	cmp	r3, #64	; 0x40
 800d5ee:	d10e      	bne.n	800d60e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5fa:	2b40      	cmp	r3, #64	; 0x40
 800d5fc:	d107      	bne.n	800d60e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fabd 	bl	800db88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	691b      	ldr	r3, [r3, #16]
 800d614:	f003 0320 	and.w	r3, r3, #32
 800d618:	2b20      	cmp	r3, #32
 800d61a:	d10e      	bne.n	800d63a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	f003 0320 	and.w	r3, r3, #32
 800d626:	2b20      	cmp	r3, #32
 800d628:	d107      	bne.n	800d63a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f06f 0220 	mvn.w	r2, #32
 800d632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 ffdd 	bl	800e5f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d63a:	bf00      	nop
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d656:	2b01      	cmp	r3, #1
 800d658:	d101      	bne.n	800d65e <HAL_TIM_OC_ConfigChannel+0x1a>
 800d65a:	2302      	movs	r3, #2
 800d65c:	e064      	b.n	800d728 <HAL_TIM_OC_ConfigChannel+0xe4>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2b14      	cmp	r3, #20
 800d66a:	d857      	bhi.n	800d71c <HAL_TIM_OC_ConfigChannel+0xd8>
 800d66c:	a201      	add	r2, pc, #4	; (adr r2, 800d674 <HAL_TIM_OC_ConfigChannel+0x30>)
 800d66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d672:	bf00      	nop
 800d674:	0800d6c9 	.word	0x0800d6c9
 800d678:	0800d71d 	.word	0x0800d71d
 800d67c:	0800d71d 	.word	0x0800d71d
 800d680:	0800d71d 	.word	0x0800d71d
 800d684:	0800d6d7 	.word	0x0800d6d7
 800d688:	0800d71d 	.word	0x0800d71d
 800d68c:	0800d71d 	.word	0x0800d71d
 800d690:	0800d71d 	.word	0x0800d71d
 800d694:	0800d6e5 	.word	0x0800d6e5
 800d698:	0800d71d 	.word	0x0800d71d
 800d69c:	0800d71d 	.word	0x0800d71d
 800d6a0:	0800d71d 	.word	0x0800d71d
 800d6a4:	0800d6f3 	.word	0x0800d6f3
 800d6a8:	0800d71d 	.word	0x0800d71d
 800d6ac:	0800d71d 	.word	0x0800d71d
 800d6b0:	0800d71d 	.word	0x0800d71d
 800d6b4:	0800d701 	.word	0x0800d701
 800d6b8:	0800d71d 	.word	0x0800d71d
 800d6bc:	0800d71d 	.word	0x0800d71d
 800d6c0:	0800d71d 	.word	0x0800d71d
 800d6c4:	0800d70f 	.word	0x0800d70f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 fb0a 	bl	800dce8 <TIM_OC1_SetConfig>
      break;
 800d6d4:	e023      	b.n	800d71e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68b9      	ldr	r1, [r7, #8]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f000 fb93 	bl	800de08 <TIM_OC2_SetConfig>
      break;
 800d6e2:	e01c      	b.n	800d71e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	68b9      	ldr	r1, [r7, #8]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f000 fc16 	bl	800df1c <TIM_OC3_SetConfig>
      break;
 800d6f0:	e015      	b.n	800d71e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68b9      	ldr	r1, [r7, #8]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 fc95 	bl	800e028 <TIM_OC4_SetConfig>
      break;
 800d6fe:	e00e      	b.n	800d71e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	68b9      	ldr	r1, [r7, #8]
 800d706:	4618      	mov	r0, r3
 800d708:	f000 fcf6 	bl	800e0f8 <TIM_OC5_SetConfig>
      break;
 800d70c:	e007      	b.n	800d71e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68b9      	ldr	r1, [r7, #8]
 800d714:	4618      	mov	r0, r3
 800d716:	f000 fd51 	bl	800e1bc <TIM_OC6_SetConfig>
      break;
 800d71a:	e000      	b.n	800d71e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800d71c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2200      	movs	r2, #0
 800d722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d742:	2b01      	cmp	r3, #1
 800d744:	d101      	bne.n	800d74a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d746:	2302      	movs	r3, #2
 800d748:	e0fd      	b.n	800d946 <HAL_TIM_PWM_ConfigChannel+0x216>
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2201      	movs	r2, #1
 800d74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2b14      	cmp	r3, #20
 800d756:	f200 80f0 	bhi.w	800d93a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800d75a:	a201      	add	r2, pc, #4	; (adr r2, 800d760 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800d75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d760:	0800d7b5 	.word	0x0800d7b5
 800d764:	0800d93b 	.word	0x0800d93b
 800d768:	0800d93b 	.word	0x0800d93b
 800d76c:	0800d93b 	.word	0x0800d93b
 800d770:	0800d7f5 	.word	0x0800d7f5
 800d774:	0800d93b 	.word	0x0800d93b
 800d778:	0800d93b 	.word	0x0800d93b
 800d77c:	0800d93b 	.word	0x0800d93b
 800d780:	0800d837 	.word	0x0800d837
 800d784:	0800d93b 	.word	0x0800d93b
 800d788:	0800d93b 	.word	0x0800d93b
 800d78c:	0800d93b 	.word	0x0800d93b
 800d790:	0800d877 	.word	0x0800d877
 800d794:	0800d93b 	.word	0x0800d93b
 800d798:	0800d93b 	.word	0x0800d93b
 800d79c:	0800d93b 	.word	0x0800d93b
 800d7a0:	0800d8b9 	.word	0x0800d8b9
 800d7a4:	0800d93b 	.word	0x0800d93b
 800d7a8:	0800d93b 	.word	0x0800d93b
 800d7ac:	0800d93b 	.word	0x0800d93b
 800d7b0:	0800d8f9 	.word	0x0800d8f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	68b9      	ldr	r1, [r7, #8]
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f000 fa94 	bl	800dce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	699a      	ldr	r2, [r3, #24]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f042 0208 	orr.w	r2, r2, #8
 800d7ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	699a      	ldr	r2, [r3, #24]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f022 0204 	bic.w	r2, r2, #4
 800d7de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	6999      	ldr	r1, [r3, #24]
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	691a      	ldr	r2, [r3, #16]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	619a      	str	r2, [r3, #24]
      break;
 800d7f2:	e0a3      	b.n	800d93c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68b9      	ldr	r1, [r7, #8]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f000 fb04 	bl	800de08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	699a      	ldr	r2, [r3, #24]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d80e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	699a      	ldr	r2, [r3, #24]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d81e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6999      	ldr	r1, [r3, #24]
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	021a      	lsls	r2, r3, #8
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	430a      	orrs	r2, r1
 800d832:	619a      	str	r2, [r3, #24]
      break;
 800d834:	e082      	b.n	800d93c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	68b9      	ldr	r1, [r7, #8]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f000 fb6d 	bl	800df1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	69da      	ldr	r2, [r3, #28]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f042 0208 	orr.w	r2, r2, #8
 800d850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	69da      	ldr	r2, [r3, #28]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f022 0204 	bic.w	r2, r2, #4
 800d860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	69d9      	ldr	r1, [r3, #28]
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	691a      	ldr	r2, [r3, #16]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	430a      	orrs	r2, r1
 800d872:	61da      	str	r2, [r3, #28]
      break;
 800d874:	e062      	b.n	800d93c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	68b9      	ldr	r1, [r7, #8]
 800d87c:	4618      	mov	r0, r3
 800d87e:	f000 fbd3 	bl	800e028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	69da      	ldr	r2, [r3, #28]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	69da      	ldr	r2, [r3, #28]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	69d9      	ldr	r1, [r3, #28]
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	021a      	lsls	r2, r3, #8
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	430a      	orrs	r2, r1
 800d8b4:	61da      	str	r2, [r3, #28]
      break;
 800d8b6:	e041      	b.n	800d93c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	68b9      	ldr	r1, [r7, #8]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f000 fc1a 	bl	800e0f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f042 0208 	orr.w	r2, r2, #8
 800d8d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f022 0204 	bic.w	r2, r2, #4
 800d8e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	691a      	ldr	r2, [r3, #16]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	430a      	orrs	r2, r1
 800d8f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d8f6:	e021      	b.n	800d93c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	68b9      	ldr	r1, [r7, #8]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f000 fc5c 	bl	800e1bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d912:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d922:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	691b      	ldr	r3, [r3, #16]
 800d92e:	021a      	lsls	r2, r3, #8
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	430a      	orrs	r2, r1
 800d936:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d938:	e000      	b.n	800d93c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800d93a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2200      	movs	r2, #0
 800d940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d944:	2300      	movs	r3, #0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop

0800d950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d960:	2b01      	cmp	r3, #1
 800d962:	d101      	bne.n	800d968 <HAL_TIM_ConfigClockSource+0x18>
 800d964:	2302      	movs	r3, #2
 800d966:	e0db      	b.n	800db20 <HAL_TIM_ConfigClockSource+0x1d0>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2202      	movs	r2, #2
 800d974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	4b69      	ldr	r3, [pc, #420]	; (800db28 <HAL_TIM_ConfigClockSource+0x1d8>)
 800d984:	4013      	ands	r3, r2
 800d986:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d98e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a63      	ldr	r2, [pc, #396]	; (800db2c <HAL_TIM_ConfigClockSource+0x1dc>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	f000 80a9 	beq.w	800daf6 <HAL_TIM_ConfigClockSource+0x1a6>
 800d9a4:	4a61      	ldr	r2, [pc, #388]	; (800db2c <HAL_TIM_ConfigClockSource+0x1dc>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	f200 80ae 	bhi.w	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800d9ac:	4a60      	ldr	r2, [pc, #384]	; (800db30 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	f000 80a1 	beq.w	800daf6 <HAL_TIM_ConfigClockSource+0x1a6>
 800d9b4:	4a5e      	ldr	r2, [pc, #376]	; (800db30 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	f200 80a6 	bhi.w	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800d9bc:	4a5d      	ldr	r2, [pc, #372]	; (800db34 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	f000 8099 	beq.w	800daf6 <HAL_TIM_ConfigClockSource+0x1a6>
 800d9c4:	4a5b      	ldr	r2, [pc, #364]	; (800db34 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	f200 809e 	bhi.w	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800d9cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d9d0:	f000 8091 	beq.w	800daf6 <HAL_TIM_ConfigClockSource+0x1a6>
 800d9d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d9d8:	f200 8096 	bhi.w	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800d9dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9e0:	f000 8089 	beq.w	800daf6 <HAL_TIM_ConfigClockSource+0x1a6>
 800d9e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9e8:	f200 808e 	bhi.w	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800d9ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9f0:	d03e      	beq.n	800da70 <HAL_TIM_ConfigClockSource+0x120>
 800d9f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9f6:	f200 8087 	bhi.w	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800d9fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9fe:	f000 8085 	beq.w	800db0c <HAL_TIM_ConfigClockSource+0x1bc>
 800da02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da06:	d87f      	bhi.n	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800da08:	2b70      	cmp	r3, #112	; 0x70
 800da0a:	d01a      	beq.n	800da42 <HAL_TIM_ConfigClockSource+0xf2>
 800da0c:	2b70      	cmp	r3, #112	; 0x70
 800da0e:	d87b      	bhi.n	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800da10:	2b60      	cmp	r3, #96	; 0x60
 800da12:	d050      	beq.n	800dab6 <HAL_TIM_ConfigClockSource+0x166>
 800da14:	2b60      	cmp	r3, #96	; 0x60
 800da16:	d877      	bhi.n	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800da18:	2b50      	cmp	r3, #80	; 0x50
 800da1a:	d03c      	beq.n	800da96 <HAL_TIM_ConfigClockSource+0x146>
 800da1c:	2b50      	cmp	r3, #80	; 0x50
 800da1e:	d873      	bhi.n	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800da20:	2b40      	cmp	r3, #64	; 0x40
 800da22:	d058      	beq.n	800dad6 <HAL_TIM_ConfigClockSource+0x186>
 800da24:	2b40      	cmp	r3, #64	; 0x40
 800da26:	d86f      	bhi.n	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800da28:	2b30      	cmp	r3, #48	; 0x30
 800da2a:	d064      	beq.n	800daf6 <HAL_TIM_ConfigClockSource+0x1a6>
 800da2c:	2b30      	cmp	r3, #48	; 0x30
 800da2e:	d86b      	bhi.n	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800da30:	2b20      	cmp	r3, #32
 800da32:	d060      	beq.n	800daf6 <HAL_TIM_ConfigClockSource+0x1a6>
 800da34:	2b20      	cmp	r3, #32
 800da36:	d867      	bhi.n	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d05c      	beq.n	800daf6 <HAL_TIM_ConfigClockSource+0x1a6>
 800da3c:	2b10      	cmp	r3, #16
 800da3e:	d05a      	beq.n	800daf6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800da40:	e062      	b.n	800db08 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6818      	ldr	r0, [r3, #0]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	6899      	ldr	r1, [r3, #8]
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	f000 fc95 	bl	800e380 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800da64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	609a      	str	r2, [r3, #8]
      break;
 800da6e:	e04e      	b.n	800db0e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6818      	ldr	r0, [r3, #0]
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	6899      	ldr	r1, [r3, #8]
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	f000 fc7e 	bl	800e380 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	689a      	ldr	r2, [r3, #8]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800da92:	609a      	str	r2, [r3, #8]
      break;
 800da94:	e03b      	b.n	800db0e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6818      	ldr	r0, [r3, #0]
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	6859      	ldr	r1, [r3, #4]
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	461a      	mov	r2, r3
 800daa4:	f000 fbee 	bl	800e284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2150      	movs	r1, #80	; 0x50
 800daae:	4618      	mov	r0, r3
 800dab0:	f000 fc48 	bl	800e344 <TIM_ITRx_SetConfig>
      break;
 800dab4:	e02b      	b.n	800db0e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6818      	ldr	r0, [r3, #0]
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	6859      	ldr	r1, [r3, #4]
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	461a      	mov	r2, r3
 800dac4:	f000 fc0d 	bl	800e2e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2160      	movs	r1, #96	; 0x60
 800dace:	4618      	mov	r0, r3
 800dad0:	f000 fc38 	bl	800e344 <TIM_ITRx_SetConfig>
      break;
 800dad4:	e01b      	b.n	800db0e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6818      	ldr	r0, [r3, #0]
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	6859      	ldr	r1, [r3, #4]
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	461a      	mov	r2, r3
 800dae4:	f000 fbce 	bl	800e284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2140      	movs	r1, #64	; 0x40
 800daee:	4618      	mov	r0, r3
 800daf0:	f000 fc28 	bl	800e344 <TIM_ITRx_SetConfig>
      break;
 800daf4:	e00b      	b.n	800db0e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4619      	mov	r1, r3
 800db00:	4610      	mov	r0, r2
 800db02:	f000 fc1f 	bl	800e344 <TIM_ITRx_SetConfig>
        break;
 800db06:	e002      	b.n	800db0e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800db08:	bf00      	nop
 800db0a:	e000      	b.n	800db0e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800db0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2200      	movs	r2, #0
 800db1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	ffceff88 	.word	0xffceff88
 800db2c:	00100040 	.word	0x00100040
 800db30:	00100030 	.word	0x00100030
 800db34:	00100020 	.word	0x00100020

0800db38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db54:	bf00      	nop
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db7c:	bf00      	nop
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db90:	bf00      	nop
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4a44      	ldr	r2, [pc, #272]	; (800dcc0 <TIM_Base_SetConfig+0x124>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d013      	beq.n	800dbdc <TIM_Base_SetConfig+0x40>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbba:	d00f      	beq.n	800dbdc <TIM_Base_SetConfig+0x40>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	4a41      	ldr	r2, [pc, #260]	; (800dcc4 <TIM_Base_SetConfig+0x128>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d00b      	beq.n	800dbdc <TIM_Base_SetConfig+0x40>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4a40      	ldr	r2, [pc, #256]	; (800dcc8 <TIM_Base_SetConfig+0x12c>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d007      	beq.n	800dbdc <TIM_Base_SetConfig+0x40>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	4a3f      	ldr	r2, [pc, #252]	; (800dccc <TIM_Base_SetConfig+0x130>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d003      	beq.n	800dbdc <TIM_Base_SetConfig+0x40>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4a3e      	ldr	r2, [pc, #248]	; (800dcd0 <TIM_Base_SetConfig+0x134>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d108      	bne.n	800dbee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	4313      	orrs	r3, r2
 800dbec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	4a33      	ldr	r2, [pc, #204]	; (800dcc0 <TIM_Base_SetConfig+0x124>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d027      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbfc:	d023      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4a30      	ldr	r2, [pc, #192]	; (800dcc4 <TIM_Base_SetConfig+0x128>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d01f      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a2f      	ldr	r2, [pc, #188]	; (800dcc8 <TIM_Base_SetConfig+0x12c>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d01b      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4a2e      	ldr	r2, [pc, #184]	; (800dccc <TIM_Base_SetConfig+0x130>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d017      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4a2d      	ldr	r2, [pc, #180]	; (800dcd0 <TIM_Base_SetConfig+0x134>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d013      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a2c      	ldr	r2, [pc, #176]	; (800dcd4 <TIM_Base_SetConfig+0x138>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d00f      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4a2b      	ldr	r2, [pc, #172]	; (800dcd8 <TIM_Base_SetConfig+0x13c>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d00b      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4a2a      	ldr	r2, [pc, #168]	; (800dcdc <TIM_Base_SetConfig+0x140>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d007      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4a29      	ldr	r2, [pc, #164]	; (800dce0 <TIM_Base_SetConfig+0x144>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d003      	beq.n	800dc46 <TIM_Base_SetConfig+0xaa>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	4a28      	ldr	r2, [pc, #160]	; (800dce4 <TIM_Base_SetConfig+0x148>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d108      	bne.n	800dc58 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	68fa      	ldr	r2, [r7, #12]
 800dc54:	4313      	orrs	r3, r2
 800dc56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	695b      	ldr	r3, [r3, #20]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	689a      	ldr	r2, [r3, #8]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a10      	ldr	r2, [pc, #64]	; (800dcc0 <TIM_Base_SetConfig+0x124>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d00f      	beq.n	800dca4 <TIM_Base_SetConfig+0x108>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	4a12      	ldr	r2, [pc, #72]	; (800dcd0 <TIM_Base_SetConfig+0x134>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d00b      	beq.n	800dca4 <TIM_Base_SetConfig+0x108>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4a11      	ldr	r2, [pc, #68]	; (800dcd4 <TIM_Base_SetConfig+0x138>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d007      	beq.n	800dca4 <TIM_Base_SetConfig+0x108>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4a10      	ldr	r2, [pc, #64]	; (800dcd8 <TIM_Base_SetConfig+0x13c>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d003      	beq.n	800dca4 <TIM_Base_SetConfig+0x108>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4a0f      	ldr	r2, [pc, #60]	; (800dcdc <TIM_Base_SetConfig+0x140>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d103      	bne.n	800dcac <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	691a      	ldr	r2, [r3, #16]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	615a      	str	r2, [r3, #20]
}
 800dcb2:	bf00      	nop
 800dcb4:	3714      	adds	r7, #20
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	40010000 	.word	0x40010000
 800dcc4:	40000400 	.word	0x40000400
 800dcc8:	40000800 	.word	0x40000800
 800dccc:	40000c00 	.word	0x40000c00
 800dcd0:	40010400 	.word	0x40010400
 800dcd4:	40014000 	.word	0x40014000
 800dcd8:	40014400 	.word	0x40014400
 800dcdc:	40014800 	.word	0x40014800
 800dce0:	4000e000 	.word	0x4000e000
 800dce4:	4000e400 	.word	0x4000e400

0800dce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b087      	sub	sp, #28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a1b      	ldr	r3, [r3, #32]
 800dcf6:	f023 0201 	bic.w	r2, r3, #1
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a1b      	ldr	r3, [r3, #32]
 800dd02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	699b      	ldr	r3, [r3, #24]
 800dd0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	4b37      	ldr	r3, [pc, #220]	; (800ddf0 <TIM_OC1_SetConfig+0x108>)
 800dd14:	4013      	ands	r3, r2
 800dd16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f023 0303 	bic.w	r3, r3, #3
 800dd1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	f023 0302 	bic.w	r3, r3, #2
 800dd30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	697a      	ldr	r2, [r7, #20]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a2d      	ldr	r2, [pc, #180]	; (800ddf4 <TIM_OC1_SetConfig+0x10c>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d00f      	beq.n	800dd64 <TIM_OC1_SetConfig+0x7c>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a2c      	ldr	r2, [pc, #176]	; (800ddf8 <TIM_OC1_SetConfig+0x110>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d00b      	beq.n	800dd64 <TIM_OC1_SetConfig+0x7c>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a2b      	ldr	r2, [pc, #172]	; (800ddfc <TIM_OC1_SetConfig+0x114>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d007      	beq.n	800dd64 <TIM_OC1_SetConfig+0x7c>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a2a      	ldr	r2, [pc, #168]	; (800de00 <TIM_OC1_SetConfig+0x118>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d003      	beq.n	800dd64 <TIM_OC1_SetConfig+0x7c>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a29      	ldr	r2, [pc, #164]	; (800de04 <TIM_OC1_SetConfig+0x11c>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d10c      	bne.n	800dd7e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	f023 0308 	bic.w	r3, r3, #8
 800dd6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	68db      	ldr	r3, [r3, #12]
 800dd70:	697a      	ldr	r2, [r7, #20]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	f023 0304 	bic.w	r3, r3, #4
 800dd7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4a1c      	ldr	r2, [pc, #112]	; (800ddf4 <TIM_OC1_SetConfig+0x10c>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d00f      	beq.n	800dda6 <TIM_OC1_SetConfig+0xbe>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4a1b      	ldr	r2, [pc, #108]	; (800ddf8 <TIM_OC1_SetConfig+0x110>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d00b      	beq.n	800dda6 <TIM_OC1_SetConfig+0xbe>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a1a      	ldr	r2, [pc, #104]	; (800ddfc <TIM_OC1_SetConfig+0x114>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d007      	beq.n	800dda6 <TIM_OC1_SetConfig+0xbe>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a19      	ldr	r2, [pc, #100]	; (800de00 <TIM_OC1_SetConfig+0x118>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d003      	beq.n	800dda6 <TIM_OC1_SetConfig+0xbe>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a18      	ldr	r2, [pc, #96]	; (800de04 <TIM_OC1_SetConfig+0x11c>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d111      	bne.n	800ddca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	695b      	ldr	r3, [r3, #20]
 800ddba:	693a      	ldr	r2, [r7, #16]
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	699b      	ldr	r3, [r3, #24]
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	693a      	ldr	r2, [r7, #16]
 800ddce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	685a      	ldr	r2, [r3, #4]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	621a      	str	r2, [r3, #32]
}
 800dde4:	bf00      	nop
 800dde6:	371c      	adds	r7, #28
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	fffeff8f 	.word	0xfffeff8f
 800ddf4:	40010000 	.word	0x40010000
 800ddf8:	40010400 	.word	0x40010400
 800ddfc:	40014000 	.word	0x40014000
 800de00:	40014400 	.word	0x40014400
 800de04:	40014800 	.word	0x40014800

0800de08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de08:	b480      	push	{r7}
 800de0a:	b087      	sub	sp, #28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	f023 0210 	bic.w	r2, r3, #16
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6a1b      	ldr	r3, [r3, #32]
 800de22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4b34      	ldr	r3, [pc, #208]	; (800df04 <TIM_OC2_SetConfig+0xfc>)
 800de34:	4013      	ands	r3, r2
 800de36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	021b      	lsls	r3, r3, #8
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	4313      	orrs	r3, r2
 800de4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	f023 0320 	bic.w	r3, r3, #32
 800de52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	011b      	lsls	r3, r3, #4
 800de5a:	697a      	ldr	r2, [r7, #20]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a29      	ldr	r2, [pc, #164]	; (800df08 <TIM_OC2_SetConfig+0x100>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d003      	beq.n	800de70 <TIM_OC2_SetConfig+0x68>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a28      	ldr	r2, [pc, #160]	; (800df0c <TIM_OC2_SetConfig+0x104>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d10d      	bne.n	800de8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	011b      	lsls	r3, r3, #4
 800de7e:	697a      	ldr	r2, [r7, #20]
 800de80:	4313      	orrs	r3, r2
 800de82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4a1e      	ldr	r2, [pc, #120]	; (800df08 <TIM_OC2_SetConfig+0x100>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d00f      	beq.n	800deb4 <TIM_OC2_SetConfig+0xac>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	4a1d      	ldr	r2, [pc, #116]	; (800df0c <TIM_OC2_SetConfig+0x104>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d00b      	beq.n	800deb4 <TIM_OC2_SetConfig+0xac>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4a1c      	ldr	r2, [pc, #112]	; (800df10 <TIM_OC2_SetConfig+0x108>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d007      	beq.n	800deb4 <TIM_OC2_SetConfig+0xac>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4a1b      	ldr	r2, [pc, #108]	; (800df14 <TIM_OC2_SetConfig+0x10c>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d003      	beq.n	800deb4 <TIM_OC2_SetConfig+0xac>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	4a1a      	ldr	r2, [pc, #104]	; (800df18 <TIM_OC2_SetConfig+0x110>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d113      	bne.n	800dedc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800deba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	695b      	ldr	r3, [r3, #20]
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	693a      	ldr	r2, [r7, #16]
 800decc:	4313      	orrs	r3, r2
 800dece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	699b      	ldr	r3, [r3, #24]
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	693a      	ldr	r2, [r7, #16]
 800ded8:	4313      	orrs	r3, r2
 800deda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	685a      	ldr	r2, [r3, #4]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	697a      	ldr	r2, [r7, #20]
 800def4:	621a      	str	r2, [r3, #32]
}
 800def6:	bf00      	nop
 800def8:	371c      	adds	r7, #28
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	feff8fff 	.word	0xfeff8fff
 800df08:	40010000 	.word	0x40010000
 800df0c:	40010400 	.word	0x40010400
 800df10:	40014000 	.word	0x40014000
 800df14:	40014400 	.word	0x40014400
 800df18:	40014800 	.word	0x40014800

0800df1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b087      	sub	sp, #28
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a1b      	ldr	r3, [r3, #32]
 800df2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a1b      	ldr	r3, [r3, #32]
 800df36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	69db      	ldr	r3, [r3, #28]
 800df42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f023 0303 	bic.w	r3, r3, #3
 800df52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68fa      	ldr	r2, [r7, #12]
 800df5a:	4313      	orrs	r3, r2
 800df5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	021b      	lsls	r3, r3, #8
 800df6c:	697a      	ldr	r2, [r7, #20]
 800df6e:	4313      	orrs	r3, r2
 800df70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	4a27      	ldr	r2, [pc, #156]	; (800e014 <TIM_OC3_SetConfig+0xf8>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d003      	beq.n	800df82 <TIM_OC3_SetConfig+0x66>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	4a26      	ldr	r2, [pc, #152]	; (800e018 <TIM_OC3_SetConfig+0xfc>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d10d      	bne.n	800df9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	021b      	lsls	r3, r3, #8
 800df90:	697a      	ldr	r2, [r7, #20]
 800df92:	4313      	orrs	r3, r2
 800df94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	4a1c      	ldr	r2, [pc, #112]	; (800e014 <TIM_OC3_SetConfig+0xf8>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d00f      	beq.n	800dfc6 <TIM_OC3_SetConfig+0xaa>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4a1b      	ldr	r2, [pc, #108]	; (800e018 <TIM_OC3_SetConfig+0xfc>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d00b      	beq.n	800dfc6 <TIM_OC3_SetConfig+0xaa>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4a1a      	ldr	r2, [pc, #104]	; (800e01c <TIM_OC3_SetConfig+0x100>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d007      	beq.n	800dfc6 <TIM_OC3_SetConfig+0xaa>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	4a19      	ldr	r2, [pc, #100]	; (800e020 <TIM_OC3_SetConfig+0x104>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d003      	beq.n	800dfc6 <TIM_OC3_SetConfig+0xaa>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4a18      	ldr	r2, [pc, #96]	; (800e024 <TIM_OC3_SetConfig+0x108>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d113      	bne.n	800dfee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dfcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dfd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	695b      	ldr	r3, [r3, #20]
 800dfda:	011b      	lsls	r3, r3, #4
 800dfdc:	693a      	ldr	r2, [r7, #16]
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	699b      	ldr	r3, [r3, #24]
 800dfe6:	011b      	lsls	r3, r3, #4
 800dfe8:	693a      	ldr	r2, [r7, #16]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	693a      	ldr	r2, [r7, #16]
 800dff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	685a      	ldr	r2, [r3, #4]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	697a      	ldr	r2, [r7, #20]
 800e006:	621a      	str	r2, [r3, #32]
}
 800e008:	bf00      	nop
 800e00a:	371c      	adds	r7, #28
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	40010000 	.word	0x40010000
 800e018:	40010400 	.word	0x40010400
 800e01c:	40014000 	.word	0x40014000
 800e020:	40014400 	.word	0x40014400
 800e024:	40014800 	.word	0x40014800

0800e028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e028:	b480      	push	{r7}
 800e02a:	b087      	sub	sp, #28
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a1b      	ldr	r3, [r3, #32]
 800e036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6a1b      	ldr	r3, [r3, #32]
 800e042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	69db      	ldr	r3, [r3, #28]
 800e04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e05e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	021b      	lsls	r3, r3, #8
 800e066:	68fa      	ldr	r2, [r7, #12]
 800e068:	4313      	orrs	r3, r2
 800e06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	031b      	lsls	r3, r3, #12
 800e07a:	693a      	ldr	r2, [r7, #16]
 800e07c:	4313      	orrs	r3, r2
 800e07e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4a18      	ldr	r2, [pc, #96]	; (800e0e4 <TIM_OC4_SetConfig+0xbc>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d00f      	beq.n	800e0a8 <TIM_OC4_SetConfig+0x80>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4a17      	ldr	r2, [pc, #92]	; (800e0e8 <TIM_OC4_SetConfig+0xc0>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d00b      	beq.n	800e0a8 <TIM_OC4_SetConfig+0x80>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	4a16      	ldr	r2, [pc, #88]	; (800e0ec <TIM_OC4_SetConfig+0xc4>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d007      	beq.n	800e0a8 <TIM_OC4_SetConfig+0x80>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	4a15      	ldr	r2, [pc, #84]	; (800e0f0 <TIM_OC4_SetConfig+0xc8>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d003      	beq.n	800e0a8 <TIM_OC4_SetConfig+0x80>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4a14      	ldr	r2, [pc, #80]	; (800e0f4 <TIM_OC4_SetConfig+0xcc>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d109      	bne.n	800e0bc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e0ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	695b      	ldr	r3, [r3, #20]
 800e0b4:	019b      	lsls	r3, r3, #6
 800e0b6:	697a      	ldr	r2, [r7, #20]
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	697a      	ldr	r2, [r7, #20]
 800e0c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	685a      	ldr	r2, [r3, #4]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	693a      	ldr	r2, [r7, #16]
 800e0d4:	621a      	str	r2, [r3, #32]
}
 800e0d6:	bf00      	nop
 800e0d8:	371c      	adds	r7, #28
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop
 800e0e4:	40010000 	.word	0x40010000
 800e0e8:	40010400 	.word	0x40010400
 800e0ec:	40014000 	.word	0x40014000
 800e0f0:	40014400 	.word	0x40014400
 800e0f4:	40014800 	.word	0x40014800

0800e0f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b087      	sub	sp, #28
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a1b      	ldr	r3, [r3, #32]
 800e106:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	4313      	orrs	r3, r2
 800e130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	689b      	ldr	r3, [r3, #8]
 800e13e:	041b      	lsls	r3, r3, #16
 800e140:	693a      	ldr	r2, [r7, #16]
 800e142:	4313      	orrs	r3, r2
 800e144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4a17      	ldr	r2, [pc, #92]	; (800e1a8 <TIM_OC5_SetConfig+0xb0>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d00f      	beq.n	800e16e <TIM_OC5_SetConfig+0x76>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4a16      	ldr	r2, [pc, #88]	; (800e1ac <TIM_OC5_SetConfig+0xb4>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d00b      	beq.n	800e16e <TIM_OC5_SetConfig+0x76>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4a15      	ldr	r2, [pc, #84]	; (800e1b0 <TIM_OC5_SetConfig+0xb8>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d007      	beq.n	800e16e <TIM_OC5_SetConfig+0x76>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4a14      	ldr	r2, [pc, #80]	; (800e1b4 <TIM_OC5_SetConfig+0xbc>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d003      	beq.n	800e16e <TIM_OC5_SetConfig+0x76>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a13      	ldr	r2, [pc, #76]	; (800e1b8 <TIM_OC5_SetConfig+0xc0>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d109      	bne.n	800e182 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e174:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	695b      	ldr	r3, [r3, #20]
 800e17a:	021b      	lsls	r3, r3, #8
 800e17c:	697a      	ldr	r2, [r7, #20]
 800e17e:	4313      	orrs	r3, r2
 800e180:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	697a      	ldr	r2, [r7, #20]
 800e186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	621a      	str	r2, [r3, #32]
}
 800e19c:	bf00      	nop
 800e19e:	371c      	adds	r7, #28
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	40010000 	.word	0x40010000
 800e1ac:	40010400 	.word	0x40010400
 800e1b0:	40014000 	.word	0x40014000
 800e1b4:	40014400 	.word	0x40014400
 800e1b8:	40014800 	.word	0x40014800

0800e1bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b087      	sub	sp, #28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6a1b      	ldr	r3, [r3, #32]
 800e1ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6a1b      	ldr	r3, [r3, #32]
 800e1d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	021b      	lsls	r3, r3, #8
 800e1f2:	68fa      	ldr	r2, [r7, #12]
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e1fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	051b      	lsls	r3, r3, #20
 800e206:	693a      	ldr	r2, [r7, #16]
 800e208:	4313      	orrs	r3, r2
 800e20a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4a18      	ldr	r2, [pc, #96]	; (800e270 <TIM_OC6_SetConfig+0xb4>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d00f      	beq.n	800e234 <TIM_OC6_SetConfig+0x78>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	4a17      	ldr	r2, [pc, #92]	; (800e274 <TIM_OC6_SetConfig+0xb8>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d00b      	beq.n	800e234 <TIM_OC6_SetConfig+0x78>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	4a16      	ldr	r2, [pc, #88]	; (800e278 <TIM_OC6_SetConfig+0xbc>)
 800e220:	4293      	cmp	r3, r2
 800e222:	d007      	beq.n	800e234 <TIM_OC6_SetConfig+0x78>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	4a15      	ldr	r2, [pc, #84]	; (800e27c <TIM_OC6_SetConfig+0xc0>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d003      	beq.n	800e234 <TIM_OC6_SetConfig+0x78>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4a14      	ldr	r2, [pc, #80]	; (800e280 <TIM_OC6_SetConfig+0xc4>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d109      	bne.n	800e248 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e23a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	695b      	ldr	r3, [r3, #20]
 800e240:	029b      	lsls	r3, r3, #10
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	4313      	orrs	r3, r2
 800e246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	68fa      	ldr	r2, [r7, #12]
 800e252:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	685a      	ldr	r2, [r3, #4]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	621a      	str	r2, [r3, #32]
}
 800e262:	bf00      	nop
 800e264:	371c      	adds	r7, #28
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	40010000 	.word	0x40010000
 800e274:	40010400 	.word	0x40010400
 800e278:	40014000 	.word	0x40014000
 800e27c:	40014400 	.word	0x40014400
 800e280:	40014800 	.word	0x40014800

0800e284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e284:	b480      	push	{r7}
 800e286:	b087      	sub	sp, #28
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6a1b      	ldr	r3, [r3, #32]
 800e294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	f023 0201 	bic.w	r2, r3, #1
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	699b      	ldr	r3, [r3, #24]
 800e2a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e2ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	011b      	lsls	r3, r3, #4
 800e2b4:	693a      	ldr	r2, [r7, #16]
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	f023 030a 	bic.w	r3, r3, #10
 800e2c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e2c2:	697a      	ldr	r2, [r7, #20]
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	693a      	ldr	r2, [r7, #16]
 800e2ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	697a      	ldr	r2, [r7, #20]
 800e2d4:	621a      	str	r2, [r3, #32]
}
 800e2d6:	bf00      	nop
 800e2d8:	371c      	adds	r7, #28
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e2e2:	b480      	push	{r7}
 800e2e4:	b087      	sub	sp, #28
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	60f8      	str	r0, [r7, #12]
 800e2ea:	60b9      	str	r1, [r7, #8]
 800e2ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6a1b      	ldr	r3, [r3, #32]
 800e2f2:	f023 0210 	bic.w	r2, r3, #16
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	699b      	ldr	r3, [r3, #24]
 800e2fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6a1b      	ldr	r3, [r3, #32]
 800e304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e30c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	031b      	lsls	r3, r3, #12
 800e312:	697a      	ldr	r2, [r7, #20]
 800e314:	4313      	orrs	r3, r2
 800e316:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e31e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	011b      	lsls	r3, r3, #4
 800e324:	693a      	ldr	r2, [r7, #16]
 800e326:	4313      	orrs	r3, r2
 800e328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	693a      	ldr	r2, [r7, #16]
 800e334:	621a      	str	r2, [r3, #32]
}
 800e336:	bf00      	nop
 800e338:	371c      	adds	r7, #28
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
	...

0800e344 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e344:	b480      	push	{r7}
 800e346:	b085      	sub	sp, #20
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4b09      	ldr	r3, [pc, #36]	; (800e37c <TIM_ITRx_SetConfig+0x38>)
 800e358:	4013      	ands	r3, r2
 800e35a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e35c:	683a      	ldr	r2, [r7, #0]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	4313      	orrs	r3, r2
 800e362:	f043 0307 	orr.w	r3, r3, #7
 800e366:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	609a      	str	r2, [r3, #8]
}
 800e36e:	bf00      	nop
 800e370:	3714      	adds	r7, #20
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	ffcfff8f 	.word	0xffcfff8f

0800e380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e380:	b480      	push	{r7}
 800e382:	b087      	sub	sp, #28
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
 800e38c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e39a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	021a      	lsls	r2, r3, #8
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	431a      	orrs	r2, r3
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	697a      	ldr	r2, [r7, #20]
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	697a      	ldr	r2, [r7, #20]
 800e3b2:	609a      	str	r2, [r3, #8]
}
 800e3b4:	bf00      	nop
 800e3b6:	371c      	adds	r7, #28
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d101      	bne.n	800e3d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	e077      	b.n	800e4c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4a35      	ldr	r2, [pc, #212]	; (800e4d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d004      	beq.n	800e40c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4a34      	ldr	r2, [pc, #208]	; (800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d108      	bne.n	800e41e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e412:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	4313      	orrs	r3, r2
 800e42e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a25      	ldr	r2, [pc, #148]	; (800e4d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d02c      	beq.n	800e49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e44a:	d027      	beq.n	800e49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a22      	ldr	r2, [pc, #136]	; (800e4dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d022      	beq.n	800e49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a21      	ldr	r2, [pc, #132]	; (800e4e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d01d      	beq.n	800e49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a1f      	ldr	r2, [pc, #124]	; (800e4e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d018      	beq.n	800e49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a1a      	ldr	r2, [pc, #104]	; (800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d013      	beq.n	800e49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a1b      	ldr	r2, [pc, #108]	; (800e4e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d00e      	beq.n	800e49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a1a      	ldr	r2, [pc, #104]	; (800e4ec <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d009      	beq.n	800e49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a18      	ldr	r2, [pc, #96]	; (800e4f0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d004      	beq.n	800e49c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a17      	ldr	r2, [pc, #92]	; (800e4f4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d10c      	bne.n	800e4b6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	689b      	ldr	r3, [r3, #8]
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	68ba      	ldr	r2, [r7, #8]
 800e4b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e4c6:	2300      	movs	r3, #0
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3714      	adds	r7, #20
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr
 800e4d4:	40010000 	.word	0x40010000
 800e4d8:	40010400 	.word	0x40010400
 800e4dc:	40000400 	.word	0x40000400
 800e4e0:	40000800 	.word	0x40000800
 800e4e4:	40000c00 	.word	0x40000c00
 800e4e8:	40001800 	.word	0x40001800
 800e4ec:	40014000 	.word	0x40014000
 800e4f0:	4000e000 	.word	0x4000e000
 800e4f4:	4000e400 	.word	0x4000e400

0800e4f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b085      	sub	sp, #20
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e502:	2300      	movs	r3, #0
 800e504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d101      	bne.n	800e514 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e510:	2302      	movs	r3, #2
 800e512:	e065      	b.n	800e5e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2201      	movs	r2, #1
 800e518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	4313      	orrs	r3, r2
 800e528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	4313      	orrs	r3, r2
 800e536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	4313      	orrs	r3, r2
 800e544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4313      	orrs	r3, r2
 800e552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	691b      	ldr	r3, [r3, #16]
 800e55e:	4313      	orrs	r3, r2
 800e560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	695b      	ldr	r3, [r3, #20]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e57a:	4313      	orrs	r3, r2
 800e57c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	699b      	ldr	r3, [r3, #24]
 800e588:	041b      	lsls	r3, r3, #16
 800e58a:	4313      	orrs	r3, r2
 800e58c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a16      	ldr	r2, [pc, #88]	; (800e5ec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e594:	4293      	cmp	r3, r2
 800e596:	d004      	beq.n	800e5a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a14      	ldr	r2, [pc, #80]	; (800e5f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d115      	bne.n	800e5ce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ac:	051b      	lsls	r3, r3, #20
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	69db      	ldr	r3, [r3, #28]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	6a1b      	ldr	r3, [r3, #32]
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	68fa      	ldr	r2, [r7, #12]
 800e5d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3714      	adds	r7, #20
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr
 800e5ec:	40010000 	.word	0x40010000
 800e5f0:	40010400 	.word	0x40010400

0800e5f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e624:	bf00      	nop
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e630:	b084      	sub	sp, #16
 800e632:	b580      	push	{r7, lr}
 800e634:	b084      	sub	sp, #16
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
 800e63a:	f107 001c 	add.w	r0, r7, #28
 800e63e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e644:	2b01      	cmp	r3, #1
 800e646:	d120      	bne.n	800e68a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e64c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	68da      	ldr	r2, [r3, #12]
 800e658:	4b2a      	ldr	r3, [pc, #168]	; (800e704 <USB_CoreInit+0xd4>)
 800e65a:	4013      	ands	r3, r2
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d105      	bne.n	800e67e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f001 fb14 	bl	800fcac <USB_CoreReset>
 800e684:	4603      	mov	r3, r0
 800e686:	73fb      	strb	r3, [r7, #15]
 800e688:	e01a      	b.n	800e6c0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f001 fb08 	bl	800fcac <USB_CoreReset>
 800e69c:	4603      	mov	r3, r0
 800e69e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d106      	bne.n	800e6b4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	639a      	str	r2, [r3, #56]	; 0x38
 800e6b2:	e005      	b.n	800e6c0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d116      	bne.n	800e6f4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6ca:	b29a      	uxth	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6d4:	4b0c      	ldr	r3, [pc, #48]	; (800e708 <USB_CoreInit+0xd8>)
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	689b      	ldr	r3, [r3, #8]
 800e6e0:	f043 0206 	orr.w	r2, r3, #6
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	f043 0220 	orr.w	r2, r3, #32
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e700:	b004      	add	sp, #16
 800e702:	4770      	bx	lr
 800e704:	ffbdffbf 	.word	0xffbdffbf
 800e708:	03ee0000 	.word	0x03ee0000

0800e70c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b087      	sub	sp, #28
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	4613      	mov	r3, r2
 800e718:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e71a:	79fb      	ldrb	r3, [r7, #7]
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d165      	bne.n	800e7ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	4a41      	ldr	r2, [pc, #260]	; (800e828 <USB_SetTurnaroundTime+0x11c>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d906      	bls.n	800e736 <USB_SetTurnaroundTime+0x2a>
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	4a40      	ldr	r2, [pc, #256]	; (800e82c <USB_SetTurnaroundTime+0x120>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d202      	bcs.n	800e736 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e730:	230f      	movs	r3, #15
 800e732:	617b      	str	r3, [r7, #20]
 800e734:	e062      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	4a3c      	ldr	r2, [pc, #240]	; (800e82c <USB_SetTurnaroundTime+0x120>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d306      	bcc.n	800e74c <USB_SetTurnaroundTime+0x40>
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	4a3b      	ldr	r2, [pc, #236]	; (800e830 <USB_SetTurnaroundTime+0x124>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d202      	bcs.n	800e74c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e746:	230e      	movs	r3, #14
 800e748:	617b      	str	r3, [r7, #20]
 800e74a:	e057      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	4a38      	ldr	r2, [pc, #224]	; (800e830 <USB_SetTurnaroundTime+0x124>)
 800e750:	4293      	cmp	r3, r2
 800e752:	d306      	bcc.n	800e762 <USB_SetTurnaroundTime+0x56>
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	4a37      	ldr	r2, [pc, #220]	; (800e834 <USB_SetTurnaroundTime+0x128>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d202      	bcs.n	800e762 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e75c:	230d      	movs	r3, #13
 800e75e:	617b      	str	r3, [r7, #20]
 800e760:	e04c      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	4a33      	ldr	r2, [pc, #204]	; (800e834 <USB_SetTurnaroundTime+0x128>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d306      	bcc.n	800e778 <USB_SetTurnaroundTime+0x6c>
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	4a32      	ldr	r2, [pc, #200]	; (800e838 <USB_SetTurnaroundTime+0x12c>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d802      	bhi.n	800e778 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e772:	230c      	movs	r3, #12
 800e774:	617b      	str	r3, [r7, #20]
 800e776:	e041      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	4a2f      	ldr	r2, [pc, #188]	; (800e838 <USB_SetTurnaroundTime+0x12c>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d906      	bls.n	800e78e <USB_SetTurnaroundTime+0x82>
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	4a2e      	ldr	r2, [pc, #184]	; (800e83c <USB_SetTurnaroundTime+0x130>)
 800e784:	4293      	cmp	r3, r2
 800e786:	d802      	bhi.n	800e78e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e788:	230b      	movs	r3, #11
 800e78a:	617b      	str	r3, [r7, #20]
 800e78c:	e036      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	4a2a      	ldr	r2, [pc, #168]	; (800e83c <USB_SetTurnaroundTime+0x130>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d906      	bls.n	800e7a4 <USB_SetTurnaroundTime+0x98>
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	4a29      	ldr	r2, [pc, #164]	; (800e840 <USB_SetTurnaroundTime+0x134>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d802      	bhi.n	800e7a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e79e:	230a      	movs	r3, #10
 800e7a0:	617b      	str	r3, [r7, #20]
 800e7a2:	e02b      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	4a26      	ldr	r2, [pc, #152]	; (800e840 <USB_SetTurnaroundTime+0x134>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d906      	bls.n	800e7ba <USB_SetTurnaroundTime+0xae>
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	4a25      	ldr	r2, [pc, #148]	; (800e844 <USB_SetTurnaroundTime+0x138>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d202      	bcs.n	800e7ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e7b4:	2309      	movs	r3, #9
 800e7b6:	617b      	str	r3, [r7, #20]
 800e7b8:	e020      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	4a21      	ldr	r2, [pc, #132]	; (800e844 <USB_SetTurnaroundTime+0x138>)
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d306      	bcc.n	800e7d0 <USB_SetTurnaroundTime+0xc4>
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	4a20      	ldr	r2, [pc, #128]	; (800e848 <USB_SetTurnaroundTime+0x13c>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d802      	bhi.n	800e7d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e7ca:	2308      	movs	r3, #8
 800e7cc:	617b      	str	r3, [r7, #20]
 800e7ce:	e015      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	4a1d      	ldr	r2, [pc, #116]	; (800e848 <USB_SetTurnaroundTime+0x13c>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d906      	bls.n	800e7e6 <USB_SetTurnaroundTime+0xda>
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	4a1c      	ldr	r2, [pc, #112]	; (800e84c <USB_SetTurnaroundTime+0x140>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d202      	bcs.n	800e7e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e7e0:	2307      	movs	r3, #7
 800e7e2:	617b      	str	r3, [r7, #20]
 800e7e4:	e00a      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e7e6:	2306      	movs	r3, #6
 800e7e8:	617b      	str	r3, [r7, #20]
 800e7ea:	e007      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e7ec:	79fb      	ldrb	r3, [r7, #7]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d102      	bne.n	800e7f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e7f2:	2309      	movs	r3, #9
 800e7f4:	617b      	str	r3, [r7, #20]
 800e7f6:	e001      	b.n	800e7fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e7f8:	2309      	movs	r3, #9
 800e7fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	68da      	ldr	r2, [r3, #12]
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	029b      	lsls	r3, r3, #10
 800e810:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e814:	431a      	orrs	r2, r3
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e81a:	2300      	movs	r3, #0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	371c      	adds	r7, #28
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr
 800e828:	00d8acbf 	.word	0x00d8acbf
 800e82c:	00e4e1c0 	.word	0x00e4e1c0
 800e830:	00f42400 	.word	0x00f42400
 800e834:	01067380 	.word	0x01067380
 800e838:	011a499f 	.word	0x011a499f
 800e83c:	01312cff 	.word	0x01312cff
 800e840:	014ca43f 	.word	0x014ca43f
 800e844:	016e3600 	.word	0x016e3600
 800e848:	01a6ab1f 	.word	0x01a6ab1f
 800e84c:	01e84800 	.word	0x01e84800

0800e850 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	f043 0201 	orr.w	r2, r3, #1
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e864:	2300      	movs	r3, #0
}
 800e866:	4618      	mov	r0, r3
 800e868:	370c      	adds	r7, #12
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e872:	b480      	push	{r7}
 800e874:	b083      	sub	sp, #12
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	689b      	ldr	r3, [r3, #8]
 800e87e:	f023 0201 	bic.w	r2, r3, #1
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	460b      	mov	r3, r1
 800e89e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e8ac:	78fb      	ldrb	r3, [r7, #3]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d106      	bne.n	800e8c0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	60da      	str	r2, [r3, #12]
 800e8be:	e00b      	b.n	800e8d8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e8c0:	78fb      	ldrb	r3, [r7, #3]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d106      	bne.n	800e8d4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	68db      	ldr	r3, [r3, #12]
 800e8ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	60da      	str	r2, [r3, #12]
 800e8d2:	e001      	b.n	800e8d8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e003      	b.n	800e8e0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e8d8:	2032      	movs	r0, #50	; 0x32
 800e8da:	f7f4 f94d 	bl	8002b78 <HAL_Delay>

  return HAL_OK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e8e8:	b084      	sub	sp, #16
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b086      	sub	sp, #24
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e8f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e902:	2300      	movs	r3, #0
 800e904:	613b      	str	r3, [r7, #16]
 800e906:	e009      	b.n	800e91c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	3340      	adds	r3, #64	; 0x40
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	2200      	movs	r2, #0
 800e914:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	3301      	adds	r3, #1
 800e91a:	613b      	str	r3, [r7, #16]
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	2b0e      	cmp	r3, #14
 800e920:	d9f2      	bls.n	800e908 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e924:	2b00      	cmp	r3, #0
 800e926:	d11c      	bne.n	800e962 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e936:	f043 0302 	orr.w	r3, r3, #2
 800e93a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e940:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	601a      	str	r2, [r3, #0]
 800e960:	e005      	b.n	800e96e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e966:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e974:	461a      	mov	r2, r3
 800e976:	2300      	movs	r3, #0
 800e978:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e980:	4619      	mov	r1, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e988:	461a      	mov	r2, r3
 800e98a:	680b      	ldr	r3, [r1, #0]
 800e98c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e990:	2b01      	cmp	r3, #1
 800e992:	d10c      	bne.n	800e9ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e996:	2b00      	cmp	r3, #0
 800e998:	d104      	bne.n	800e9a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e99a:	2100      	movs	r1, #0
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f949 	bl	800ec34 <USB_SetDevSpeed>
 800e9a2:	e008      	b.n	800e9b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e9a4:	2101      	movs	r1, #1
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 f944 	bl	800ec34 <USB_SetDevSpeed>
 800e9ac:	e003      	b.n	800e9b6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e9ae:	2103      	movs	r1, #3
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f93f 	bl	800ec34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e9b6:	2110      	movs	r1, #16
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 f8f3 	bl	800eba4 <USB_FlushTxFifo>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d001      	beq.n	800e9c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f000 f911 	bl	800ebf0 <USB_FlushRxFifo>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d001      	beq.n	800e9d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9de:	461a      	mov	r2, r3
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	613b      	str	r3, [r7, #16]
 800ea00:	e043      	b.n	800ea8a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	015a      	lsls	r2, r3, #5
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	4413      	add	r3, r2
 800ea0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea18:	d118      	bne.n	800ea4c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10a      	bne.n	800ea36 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	015a      	lsls	r2, r3, #5
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	4413      	add	r3, r2
 800ea28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea32:	6013      	str	r3, [r2, #0]
 800ea34:	e013      	b.n	800ea5e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	015a      	lsls	r2, r3, #5
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea42:	461a      	mov	r2, r3
 800ea44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ea48:	6013      	str	r3, [r2, #0]
 800ea4a:	e008      	b.n	800ea5e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	015a      	lsls	r2, r3, #5
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	4413      	add	r3, r2
 800ea54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea58:	461a      	mov	r2, r3
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	015a      	lsls	r2, r3, #5
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	4413      	add	r3, r2
 800ea66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	015a      	lsls	r2, r3, #5
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	4413      	add	r3, r2
 800ea78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ea82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	3301      	adds	r3, #1
 800ea88:	613b      	str	r3, [r7, #16]
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	693a      	ldr	r2, [r7, #16]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d3b7      	bcc.n	800ea02 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea92:	2300      	movs	r3, #0
 800ea94:	613b      	str	r3, [r7, #16]
 800ea96:	e043      	b.n	800eb20 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	015a      	lsls	r2, r3, #5
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eaaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eaae:	d118      	bne.n	800eae2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d10a      	bne.n	800eacc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	015a      	lsls	r2, r3, #5
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	4413      	add	r3, r2
 800eabe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eac2:	461a      	mov	r2, r3
 800eac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eac8:	6013      	str	r3, [r2, #0]
 800eaca:	e013      	b.n	800eaf4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	015a      	lsls	r2, r3, #5
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	4413      	add	r3, r2
 800ead4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ead8:	461a      	mov	r2, r3
 800eada:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eade:	6013      	str	r3, [r2, #0]
 800eae0:	e008      	b.n	800eaf4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	015a      	lsls	r2, r3, #5
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	4413      	add	r3, r2
 800eaea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaee:	461a      	mov	r2, r3
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	015a      	lsls	r2, r3, #5
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	4413      	add	r3, r2
 800eafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb00:	461a      	mov	r2, r3
 800eb02:	2300      	movs	r3, #0
 800eb04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	015a      	lsls	r2, r3, #5
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb12:	461a      	mov	r2, r3
 800eb14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eb18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	613b      	str	r3, [r7, #16]
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	693a      	ldr	r2, [r7, #16]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d3b7      	bcc.n	800ea98 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb2e:	691b      	ldr	r3, [r3, #16]
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800eb48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d105      	bne.n	800eb5c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	699b      	ldr	r3, [r3, #24]
 800eb54:	f043 0210 	orr.w	r2, r3, #16
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	699a      	ldr	r2, [r3, #24]
 800eb60:	4b0e      	ldr	r3, [pc, #56]	; (800eb9c <USB_DevInit+0x2b4>)
 800eb62:	4313      	orrs	r3, r2
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800eb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d005      	beq.n	800eb7a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	699b      	ldr	r3, [r3, #24]
 800eb72:	f043 0208 	orr.w	r2, r3, #8
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800eb7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d105      	bne.n	800eb8c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	699a      	ldr	r2, [r3, #24]
 800eb84:	4b06      	ldr	r3, [pc, #24]	; (800eba0 <USB_DevInit+0x2b8>)
 800eb86:	4313      	orrs	r3, r2
 800eb88:	687a      	ldr	r2, [r7, #4]
 800eb8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800eb8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eb98:	b004      	add	sp, #16
 800eb9a:	4770      	bx	lr
 800eb9c:	803c3800 	.word	0x803c3800
 800eba0:	40000004 	.word	0x40000004

0800eba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	019b      	lsls	r3, r3, #6
 800ebb6:	f043 0220 	orr.w	r2, r3, #32
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	60fb      	str	r3, [r7, #12]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	4a09      	ldr	r2, [pc, #36]	; (800ebec <USB_FlushTxFifo+0x48>)
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d901      	bls.n	800ebd0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ebcc:	2303      	movs	r3, #3
 800ebce:	e006      	b.n	800ebde <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	691b      	ldr	r3, [r3, #16]
 800ebd4:	f003 0320 	and.w	r3, r3, #32
 800ebd8:	2b20      	cmp	r3, #32
 800ebda:	d0f0      	beq.n	800ebbe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ebdc:	2300      	movs	r3, #0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3714      	adds	r7, #20
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	00030d40 	.word	0x00030d40

0800ebf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2210      	movs	r2, #16
 800ec00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	3301      	adds	r3, #1
 800ec06:	60fb      	str	r3, [r7, #12]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4a09      	ldr	r2, [pc, #36]	; (800ec30 <USB_FlushRxFifo+0x40>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d901      	bls.n	800ec14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ec10:	2303      	movs	r3, #3
 800ec12:	e006      	b.n	800ec22 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	f003 0310 	and.w	r3, r3, #16
 800ec1c:	2b10      	cmp	r3, #16
 800ec1e:	d0f0      	beq.n	800ec02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ec20:	2300      	movs	r3, #0
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3714      	adds	r7, #20
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	00030d40 	.word	0x00030d40

0800ec34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b085      	sub	sp, #20
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	78fb      	ldrb	r3, [r7, #3]
 800ec4e:	68f9      	ldr	r1, [r7, #12]
 800ec50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec54:	4313      	orrs	r3, r2
 800ec56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3714      	adds	r7, #20
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr

0800ec66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ec66:	b480      	push	{r7}
 800ec68:	b087      	sub	sp, #28
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	f003 0306 	and.w	r3, r3, #6
 800ec7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d102      	bne.n	800ec8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ec86:	2300      	movs	r3, #0
 800ec88:	75fb      	strb	r3, [r7, #23]
 800ec8a:	e00a      	b.n	800eca2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2b02      	cmp	r3, #2
 800ec90:	d002      	beq.n	800ec98 <USB_GetDevSpeed+0x32>
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2b06      	cmp	r3, #6
 800ec96:	d102      	bne.n	800ec9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ec98:	2302      	movs	r3, #2
 800ec9a:	75fb      	strb	r3, [r7, #23]
 800ec9c:	e001      	b.n	800eca2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ec9e:	230f      	movs	r3, #15
 800eca0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800eca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	371c      	adds	r7, #28
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b085      	sub	sp, #20
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	785b      	ldrb	r3, [r3, #1]
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d139      	bne.n	800ed40 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecd2:	69da      	ldr	r2, [r3, #28]
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	f003 030f 	and.w	r3, r3, #15
 800ecdc:	2101      	movs	r1, #1
 800ecde:	fa01 f303 	lsl.w	r3, r1, r3
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	68f9      	ldr	r1, [r7, #12]
 800ece6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ecea:	4313      	orrs	r3, r2
 800ecec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	015a      	lsls	r2, r3, #5
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d153      	bne.n	800edac <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	015a      	lsls	r2, r3, #5
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	4413      	add	r3, r2
 800ed0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	78db      	ldrb	r3, [r3, #3]
 800ed1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	059b      	lsls	r3, r3, #22
 800ed26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed28:	431a      	orrs	r2, r3
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	0159      	lsls	r1, r3, #5
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	440b      	add	r3, r1
 800ed32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed36:	4619      	mov	r1, r3
 800ed38:	4b20      	ldr	r3, [pc, #128]	; (800edbc <USB_ActivateEndpoint+0x10c>)
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	600b      	str	r3, [r1, #0]
 800ed3e:	e035      	b.n	800edac <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed46:	69da      	ldr	r2, [r3, #28]
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	f003 030f 	and.w	r3, r3, #15
 800ed50:	2101      	movs	r1, #1
 800ed52:	fa01 f303 	lsl.w	r3, r1, r3
 800ed56:	041b      	lsls	r3, r3, #16
 800ed58:	68f9      	ldr	r1, [r7, #12]
 800ed5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	015a      	lsls	r2, r3, #5
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	4413      	add	r3, r2
 800ed6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d119      	bne.n	800edac <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	015a      	lsls	r2, r3, #5
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	4413      	add	r3, r2
 800ed80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	78db      	ldrb	r3, [r3, #3]
 800ed92:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed94:	430b      	orrs	r3, r1
 800ed96:	431a      	orrs	r2, r3
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	0159      	lsls	r1, r3, #5
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	440b      	add	r3, r1
 800eda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda4:	4619      	mov	r1, r3
 800eda6:	4b05      	ldr	r3, [pc, #20]	; (800edbc <USB_ActivateEndpoint+0x10c>)
 800eda8:	4313      	orrs	r3, r2
 800edaa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3714      	adds	r7, #20
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	10008000 	.word	0x10008000

0800edc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800edc0:	b480      	push	{r7}
 800edc2:	b085      	sub	sp, #20
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	785b      	ldrb	r3, [r3, #1]
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d161      	bne.n	800eea0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	015a      	lsls	r2, r3, #5
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	4413      	add	r3, r2
 800ede4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800edee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800edf2:	d11f      	bne.n	800ee34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	015a      	lsls	r2, r3, #5
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	4413      	add	r3, r2
 800edfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	68ba      	ldr	r2, [r7, #8]
 800ee04:	0151      	lsls	r1, r2, #5
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	440a      	add	r2, r1
 800ee0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ee12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	015a      	lsls	r2, r3, #5
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	68ba      	ldr	r2, [r7, #8]
 800ee24:	0151      	lsls	r1, r2, #5
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	440a      	add	r2, r1
 800ee2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	f003 030f 	and.w	r3, r3, #15
 800ee44:	2101      	movs	r1, #1
 800ee46:	fa01 f303 	lsl.w	r3, r1, r3
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	43db      	mvns	r3, r3
 800ee4e:	68f9      	ldr	r1, [r7, #12]
 800ee50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee54:	4013      	ands	r3, r2
 800ee56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee5e:	69da      	ldr	r2, [r3, #28]
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	f003 030f 	and.w	r3, r3, #15
 800ee68:	2101      	movs	r1, #1
 800ee6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	43db      	mvns	r3, r3
 800ee72:	68f9      	ldr	r1, [r7, #12]
 800ee74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee78:	4013      	ands	r3, r2
 800ee7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	015a      	lsls	r2, r3, #5
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	4413      	add	r3, r2
 800ee84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	0159      	lsls	r1, r3, #5
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	440b      	add	r3, r1
 800ee92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee96:	4619      	mov	r1, r3
 800ee98:	4b35      	ldr	r3, [pc, #212]	; (800ef70 <USB_DeactivateEndpoint+0x1b0>)
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	600b      	str	r3, [r1, #0]
 800ee9e:	e060      	b.n	800ef62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	015a      	lsls	r2, r3, #5
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	4413      	add	r3, r2
 800eea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eeb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eeb6:	d11f      	bne.n	800eef8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	015a      	lsls	r2, r3, #5
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	4413      	add	r3, r2
 800eec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	68ba      	ldr	r2, [r7, #8]
 800eec8:	0151      	lsls	r1, r2, #5
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	440a      	add	r2, r1
 800eece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eed2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eed6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	015a      	lsls	r2, r3, #5
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	4413      	add	r3, r2
 800eee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	68ba      	ldr	r2, [r7, #8]
 800eee8:	0151      	lsls	r1, r2, #5
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	440a      	add	r2, r1
 800eeee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eef6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eefe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	f003 030f 	and.w	r3, r3, #15
 800ef08:	2101      	movs	r1, #1
 800ef0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ef0e:	041b      	lsls	r3, r3, #16
 800ef10:	43db      	mvns	r3, r3
 800ef12:	68f9      	ldr	r1, [r7, #12]
 800ef14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef18:	4013      	ands	r3, r2
 800ef1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef22:	69da      	ldr	r2, [r3, #28]
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	f003 030f 	and.w	r3, r3, #15
 800ef2c:	2101      	movs	r1, #1
 800ef2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ef32:	041b      	lsls	r3, r3, #16
 800ef34:	43db      	mvns	r3, r3
 800ef36:	68f9      	ldr	r1, [r7, #12]
 800ef38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef3c:	4013      	ands	r3, r2
 800ef3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	015a      	lsls	r2, r3, #5
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	4413      	add	r3, r2
 800ef48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	0159      	lsls	r1, r3, #5
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	440b      	add	r3, r1
 800ef56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	4b05      	ldr	r3, [pc, #20]	; (800ef74 <USB_DeactivateEndpoint+0x1b4>)
 800ef5e:	4013      	ands	r3, r2
 800ef60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ef62:	2300      	movs	r3, #0
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3714      	adds	r7, #20
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr
 800ef70:	ec337800 	.word	0xec337800
 800ef74:	eff37800 	.word	0xeff37800

0800ef78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b08a      	sub	sp, #40	; 0x28
 800ef7c:	af02      	add	r7, sp, #8
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	4613      	mov	r3, r2
 800ef84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	785b      	ldrb	r3, [r3, #1]
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	f040 8163 	bne.w	800f260 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	695b      	ldr	r3, [r3, #20]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d132      	bne.n	800f008 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	015a      	lsls	r2, r3, #5
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	4413      	add	r3, r2
 800efaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efae:	691a      	ldr	r2, [r3, #16]
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	0159      	lsls	r1, r3, #5
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	440b      	add	r3, r1
 800efb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efbc:	4619      	mov	r1, r3
 800efbe:	4ba5      	ldr	r3, [pc, #660]	; (800f254 <USB_EPStartXfer+0x2dc>)
 800efc0:	4013      	ands	r3, r2
 800efc2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	015a      	lsls	r2, r3, #5
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	4413      	add	r3, r2
 800efcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	69ba      	ldr	r2, [r7, #24]
 800efd4:	0151      	lsls	r1, r2, #5
 800efd6:	69fa      	ldr	r2, [r7, #28]
 800efd8:	440a      	add	r2, r1
 800efda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800efe2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	015a      	lsls	r2, r3, #5
 800efe8:	69fb      	ldr	r3, [r7, #28]
 800efea:	4413      	add	r3, r2
 800efec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eff0:	691a      	ldr	r2, [r3, #16]
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	0159      	lsls	r1, r3, #5
 800eff6:	69fb      	ldr	r3, [r7, #28]
 800eff8:	440b      	add	r3, r1
 800effa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800effe:	4619      	mov	r1, r3
 800f000:	4b95      	ldr	r3, [pc, #596]	; (800f258 <USB_EPStartXfer+0x2e0>)
 800f002:	4013      	ands	r3, r2
 800f004:	610b      	str	r3, [r1, #16]
 800f006:	e074      	b.n	800f0f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	015a      	lsls	r2, r3, #5
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	4413      	add	r3, r2
 800f010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f014:	691a      	ldr	r2, [r3, #16]
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	0159      	lsls	r1, r3, #5
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	440b      	add	r3, r1
 800f01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f022:	4619      	mov	r1, r3
 800f024:	4b8c      	ldr	r3, [pc, #560]	; (800f258 <USB_EPStartXfer+0x2e0>)
 800f026:	4013      	ands	r3, r2
 800f028:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	015a      	lsls	r2, r3, #5
 800f02e:	69fb      	ldr	r3, [r7, #28]
 800f030:	4413      	add	r3, r2
 800f032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f036:	691a      	ldr	r2, [r3, #16]
 800f038:	69bb      	ldr	r3, [r7, #24]
 800f03a:	0159      	lsls	r1, r3, #5
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	440b      	add	r3, r1
 800f040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f044:	4619      	mov	r1, r3
 800f046:	4b83      	ldr	r3, [pc, #524]	; (800f254 <USB_EPStartXfer+0x2dc>)
 800f048:	4013      	ands	r3, r2
 800f04a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	015a      	lsls	r2, r3, #5
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	4413      	add	r3, r2
 800f054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f058:	691a      	ldr	r2, [r3, #16]
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	6959      	ldr	r1, [r3, #20]
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	689b      	ldr	r3, [r3, #8]
 800f062:	440b      	add	r3, r1
 800f064:	1e59      	subs	r1, r3, #1
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	fbb1 f3f3 	udiv	r3, r1, r3
 800f06e:	04d9      	lsls	r1, r3, #19
 800f070:	4b7a      	ldr	r3, [pc, #488]	; (800f25c <USB_EPStartXfer+0x2e4>)
 800f072:	400b      	ands	r3, r1
 800f074:	69b9      	ldr	r1, [r7, #24]
 800f076:	0148      	lsls	r0, r1, #5
 800f078:	69f9      	ldr	r1, [r7, #28]
 800f07a:	4401      	add	r1, r0
 800f07c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f080:	4313      	orrs	r3, r2
 800f082:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	015a      	lsls	r2, r3, #5
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	4413      	add	r3, r2
 800f08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f090:	691a      	ldr	r2, [r3, #16]
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	695b      	ldr	r3, [r3, #20]
 800f096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f09a:	69b9      	ldr	r1, [r7, #24]
 800f09c:	0148      	lsls	r0, r1, #5
 800f09e:	69f9      	ldr	r1, [r7, #28]
 800f0a0:	4401      	add	r1, r0
 800f0a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	78db      	ldrb	r3, [r3, #3]
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d11f      	bne.n	800f0f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	015a      	lsls	r2, r3, #5
 800f0b6:	69fb      	ldr	r3, [r7, #28]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0be:	691b      	ldr	r3, [r3, #16]
 800f0c0:	69ba      	ldr	r2, [r7, #24]
 800f0c2:	0151      	lsls	r1, r2, #5
 800f0c4:	69fa      	ldr	r2, [r7, #28]
 800f0c6:	440a      	add	r2, r1
 800f0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f0d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	015a      	lsls	r2, r3, #5
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	4413      	add	r3, r2
 800f0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	69ba      	ldr	r2, [r7, #24]
 800f0e2:	0151      	lsls	r1, r2, #5
 800f0e4:	69fa      	ldr	r2, [r7, #28]
 800f0e6:	440a      	add	r2, r1
 800f0e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f0f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f0f2:	79fb      	ldrb	r3, [r7, #7]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d14b      	bne.n	800f190 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	691b      	ldr	r3, [r3, #16]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d009      	beq.n	800f114 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	015a      	lsls	r2, r3, #5
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	4413      	add	r3, r2
 800f108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f10c:	461a      	mov	r2, r3
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	691b      	ldr	r3, [r3, #16]
 800f112:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	78db      	ldrb	r3, [r3, #3]
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d128      	bne.n	800f16e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d110      	bne.n	800f14e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	015a      	lsls	r2, r3, #5
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	4413      	add	r3, r2
 800f134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	69ba      	ldr	r2, [r7, #24]
 800f13c:	0151      	lsls	r1, r2, #5
 800f13e:	69fa      	ldr	r2, [r7, #28]
 800f140:	440a      	add	r2, r1
 800f142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f14a:	6013      	str	r3, [r2, #0]
 800f14c:	e00f      	b.n	800f16e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	015a      	lsls	r2, r3, #5
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	4413      	add	r3, r2
 800f156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	69ba      	ldr	r2, [r7, #24]
 800f15e:	0151      	lsls	r1, r2, #5
 800f160:	69fa      	ldr	r2, [r7, #28]
 800f162:	440a      	add	r2, r1
 800f164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f16c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	015a      	lsls	r2, r3, #5
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	4413      	add	r3, r2
 800f176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	69ba      	ldr	r2, [r7, #24]
 800f17e:	0151      	lsls	r1, r2, #5
 800f180:	69fa      	ldr	r2, [r7, #28]
 800f182:	440a      	add	r2, r1
 800f184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f188:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f18c:	6013      	str	r3, [r2, #0]
 800f18e:	e133      	b.n	800f3f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	015a      	lsls	r2, r3, #5
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	4413      	add	r3, r2
 800f198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	69ba      	ldr	r2, [r7, #24]
 800f1a0:	0151      	lsls	r1, r2, #5
 800f1a2:	69fa      	ldr	r2, [r7, #28]
 800f1a4:	440a      	add	r2, r1
 800f1a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	78db      	ldrb	r3, [r3, #3]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d015      	beq.n	800f1e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f000 811b 	beq.w	800f3f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	f003 030f 	and.w	r3, r3, #15
 800f1d2:	2101      	movs	r1, #1
 800f1d4:	fa01 f303 	lsl.w	r3, r1, r3
 800f1d8:	69f9      	ldr	r1, [r7, #28]
 800f1da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	634b      	str	r3, [r1, #52]	; 0x34
 800f1e2:	e109      	b.n	800f3f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d110      	bne.n	800f216 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	015a      	lsls	r2, r3, #5
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	69ba      	ldr	r2, [r7, #24]
 800f204:	0151      	lsls	r1, r2, #5
 800f206:	69fa      	ldr	r2, [r7, #28]
 800f208:	440a      	add	r2, r1
 800f20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f20e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f212:	6013      	str	r3, [r2, #0]
 800f214:	e00f      	b.n	800f236 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	015a      	lsls	r2, r3, #5
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	4413      	add	r3, r2
 800f21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	69ba      	ldr	r2, [r7, #24]
 800f226:	0151      	lsls	r1, r2, #5
 800f228:	69fa      	ldr	r2, [r7, #28]
 800f22a:	440a      	add	r2, r1
 800f22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f234:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	68d9      	ldr	r1, [r3, #12]
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	781a      	ldrb	r2, [r3, #0]
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	695b      	ldr	r3, [r3, #20]
 800f242:	b298      	uxth	r0, r3
 800f244:	79fb      	ldrb	r3, [r7, #7]
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	4603      	mov	r3, r0
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f000 fa38 	bl	800f6c0 <USB_WritePacket>
 800f250:	e0d2      	b.n	800f3f8 <USB_EPStartXfer+0x480>
 800f252:	bf00      	nop
 800f254:	e007ffff 	.word	0xe007ffff
 800f258:	fff80000 	.word	0xfff80000
 800f25c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	015a      	lsls	r2, r3, #5
 800f264:	69fb      	ldr	r3, [r7, #28]
 800f266:	4413      	add	r3, r2
 800f268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f26c:	691a      	ldr	r2, [r3, #16]
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	0159      	lsls	r1, r3, #5
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	440b      	add	r3, r1
 800f276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f27a:	4619      	mov	r1, r3
 800f27c:	4b61      	ldr	r3, [pc, #388]	; (800f404 <USB_EPStartXfer+0x48c>)
 800f27e:	4013      	ands	r3, r2
 800f280:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	015a      	lsls	r2, r3, #5
 800f286:	69fb      	ldr	r3, [r7, #28]
 800f288:	4413      	add	r3, r2
 800f28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f28e:	691a      	ldr	r2, [r3, #16]
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	0159      	lsls	r1, r3, #5
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	440b      	add	r3, r1
 800f298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f29c:	4619      	mov	r1, r3
 800f29e:	4b5a      	ldr	r3, [pc, #360]	; (800f408 <USB_EPStartXfer+0x490>)
 800f2a0:	4013      	ands	r3, r2
 800f2a2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	695b      	ldr	r3, [r3, #20]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d123      	bne.n	800f2f4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f2ac:	69bb      	ldr	r3, [r7, #24]
 800f2ae:	015a      	lsls	r2, r3, #5
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	4413      	add	r3, r2
 800f2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2b8:	691a      	ldr	r2, [r3, #16]
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	689b      	ldr	r3, [r3, #8]
 800f2be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f2c2:	69b9      	ldr	r1, [r7, #24]
 800f2c4:	0148      	lsls	r0, r1, #5
 800f2c6:	69f9      	ldr	r1, [r7, #28]
 800f2c8:	4401      	add	r1, r0
 800f2ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	015a      	lsls	r2, r3, #5
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	4413      	add	r3, r2
 800f2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2de:	691b      	ldr	r3, [r3, #16]
 800f2e0:	69ba      	ldr	r2, [r7, #24]
 800f2e2:	0151      	lsls	r1, r2, #5
 800f2e4:	69fa      	ldr	r2, [r7, #28]
 800f2e6:	440a      	add	r2, r1
 800f2e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f2f0:	6113      	str	r3, [r2, #16]
 800f2f2:	e033      	b.n	800f35c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	695a      	ldr	r2, [r3, #20]
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	689b      	ldr	r3, [r3, #8]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	1e5a      	subs	r2, r3, #1
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	689b      	ldr	r3, [r3, #8]
 800f304:	fbb2 f3f3 	udiv	r3, r2, r3
 800f308:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	015a      	lsls	r2, r3, #5
 800f30e:	69fb      	ldr	r3, [r7, #28]
 800f310:	4413      	add	r3, r2
 800f312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f316:	691a      	ldr	r2, [r3, #16]
 800f318:	8afb      	ldrh	r3, [r7, #22]
 800f31a:	04d9      	lsls	r1, r3, #19
 800f31c:	4b3b      	ldr	r3, [pc, #236]	; (800f40c <USB_EPStartXfer+0x494>)
 800f31e:	400b      	ands	r3, r1
 800f320:	69b9      	ldr	r1, [r7, #24]
 800f322:	0148      	lsls	r0, r1, #5
 800f324:	69f9      	ldr	r1, [r7, #28]
 800f326:	4401      	add	r1, r0
 800f328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f32c:	4313      	orrs	r3, r2
 800f32e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	015a      	lsls	r2, r3, #5
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	4413      	add	r3, r2
 800f338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f33c:	691a      	ldr	r2, [r3, #16]
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	689b      	ldr	r3, [r3, #8]
 800f342:	8af9      	ldrh	r1, [r7, #22]
 800f344:	fb01 f303 	mul.w	r3, r1, r3
 800f348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f34c:	69b9      	ldr	r1, [r7, #24]
 800f34e:	0148      	lsls	r0, r1, #5
 800f350:	69f9      	ldr	r1, [r7, #28]
 800f352:	4401      	add	r1, r0
 800f354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f358:	4313      	orrs	r3, r2
 800f35a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f35c:	79fb      	ldrb	r3, [r7, #7]
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d10d      	bne.n	800f37e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d009      	beq.n	800f37e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	68d9      	ldr	r1, [r3, #12]
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	015a      	lsls	r2, r3, #5
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	4413      	add	r3, r2
 800f376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f37a:	460a      	mov	r2, r1
 800f37c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	78db      	ldrb	r3, [r3, #3]
 800f382:	2b01      	cmp	r3, #1
 800f384:	d128      	bne.n	800f3d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f392:	2b00      	cmp	r3, #0
 800f394:	d110      	bne.n	800f3b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	015a      	lsls	r2, r3, #5
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	4413      	add	r3, r2
 800f39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	69ba      	ldr	r2, [r7, #24]
 800f3a6:	0151      	lsls	r1, r2, #5
 800f3a8:	69fa      	ldr	r2, [r7, #28]
 800f3aa:	440a      	add	r2, r1
 800f3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3b4:	6013      	str	r3, [r2, #0]
 800f3b6:	e00f      	b.n	800f3d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	015a      	lsls	r2, r3, #5
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	4413      	add	r3, r2
 800f3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	69ba      	ldr	r2, [r7, #24]
 800f3c8:	0151      	lsls	r1, r2, #5
 800f3ca:	69fa      	ldr	r2, [r7, #28]
 800f3cc:	440a      	add	r2, r1
 800f3ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	015a      	lsls	r2, r3, #5
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	4413      	add	r3, r2
 800f3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	69ba      	ldr	r2, [r7, #24]
 800f3e8:	0151      	lsls	r1, r2, #5
 800f3ea:	69fa      	ldr	r2, [r7, #28]
 800f3ec:	440a      	add	r2, r1
 800f3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f3f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f3f8:	2300      	movs	r3, #0
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3720      	adds	r7, #32
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	fff80000 	.word	0xfff80000
 800f408:	e007ffff 	.word	0xe007ffff
 800f40c:	1ff80000 	.word	0x1ff80000

0800f410 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f410:	b480      	push	{r7}
 800f412:	b087      	sub	sp, #28
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	4613      	mov	r3, r2
 800f41c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	785b      	ldrb	r3, [r3, #1]
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	f040 80cd 	bne.w	800f5cc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	695b      	ldr	r3, [r3, #20]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d132      	bne.n	800f4a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	015a      	lsls	r2, r3, #5
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	4413      	add	r3, r2
 800f442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f446:	691a      	ldr	r2, [r3, #16]
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	0159      	lsls	r1, r3, #5
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	440b      	add	r3, r1
 800f450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f454:	4619      	mov	r1, r3
 800f456:	4b98      	ldr	r3, [pc, #608]	; (800f6b8 <USB_EP0StartXfer+0x2a8>)
 800f458:	4013      	ands	r3, r2
 800f45a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	015a      	lsls	r2, r3, #5
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	4413      	add	r3, r2
 800f464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f468:	691b      	ldr	r3, [r3, #16]
 800f46a:	693a      	ldr	r2, [r7, #16]
 800f46c:	0151      	lsls	r1, r2, #5
 800f46e:	697a      	ldr	r2, [r7, #20]
 800f470:	440a      	add	r2, r1
 800f472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f47a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	015a      	lsls	r2, r3, #5
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	4413      	add	r3, r2
 800f484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f488:	691a      	ldr	r2, [r3, #16]
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	0159      	lsls	r1, r3, #5
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	440b      	add	r3, r1
 800f492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f496:	4619      	mov	r1, r3
 800f498:	4b88      	ldr	r3, [pc, #544]	; (800f6bc <USB_EP0StartXfer+0x2ac>)
 800f49a:	4013      	ands	r3, r2
 800f49c:	610b      	str	r3, [r1, #16]
 800f49e:	e04e      	b.n	800f53e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	015a      	lsls	r2, r3, #5
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ac:	691a      	ldr	r2, [r3, #16]
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	0159      	lsls	r1, r3, #5
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	440b      	add	r3, r1
 800f4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	4b7f      	ldr	r3, [pc, #508]	; (800f6bc <USB_EP0StartXfer+0x2ac>)
 800f4be:	4013      	ands	r3, r2
 800f4c0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	015a      	lsls	r2, r3, #5
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ce:	691a      	ldr	r2, [r3, #16]
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	0159      	lsls	r1, r3, #5
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	440b      	add	r3, r1
 800f4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4dc:	4619      	mov	r1, r3
 800f4de:	4b76      	ldr	r3, [pc, #472]	; (800f6b8 <USB_EP0StartXfer+0x2a8>)
 800f4e0:	4013      	ands	r3, r2
 800f4e2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	695a      	ldr	r2, [r3, #20]
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	689b      	ldr	r3, [r3, #8]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d903      	bls.n	800f4f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	689a      	ldr	r2, [r3, #8]
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	015a      	lsls	r2, r3, #5
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	4413      	add	r3, r2
 800f500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f504:	691b      	ldr	r3, [r3, #16]
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	0151      	lsls	r1, r2, #5
 800f50a:	697a      	ldr	r2, [r7, #20]
 800f50c:	440a      	add	r2, r1
 800f50e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	015a      	lsls	r2, r3, #5
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	4413      	add	r3, r2
 800f520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f524:	691a      	ldr	r2, [r3, #16]
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f52e:	6939      	ldr	r1, [r7, #16]
 800f530:	0148      	lsls	r0, r1, #5
 800f532:	6979      	ldr	r1, [r7, #20]
 800f534:	4401      	add	r1, r0
 800f536:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f53a:	4313      	orrs	r3, r2
 800f53c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f53e:	79fb      	ldrb	r3, [r7, #7]
 800f540:	2b01      	cmp	r3, #1
 800f542:	d11e      	bne.n	800f582 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	691b      	ldr	r3, [r3, #16]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d009      	beq.n	800f560 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	015a      	lsls	r2, r3, #5
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	4413      	add	r3, r2
 800f554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f558:	461a      	mov	r2, r3
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	015a      	lsls	r2, r3, #5
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	4413      	add	r3, r2
 800f568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	693a      	ldr	r2, [r7, #16]
 800f570:	0151      	lsls	r1, r2, #5
 800f572:	697a      	ldr	r2, [r7, #20]
 800f574:	440a      	add	r2, r1
 800f576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f57a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f57e:	6013      	str	r3, [r2, #0]
 800f580:	e092      	b.n	800f6a8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	015a      	lsls	r2, r3, #5
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	4413      	add	r3, r2
 800f58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	693a      	ldr	r2, [r7, #16]
 800f592:	0151      	lsls	r1, r2, #5
 800f594:	697a      	ldr	r2, [r7, #20]
 800f596:	440a      	add	r2, r1
 800f598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f59c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f5a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	695b      	ldr	r3, [r3, #20]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d07e      	beq.n	800f6a8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	f003 030f 	and.w	r3, r3, #15
 800f5ba:	2101      	movs	r1, #1
 800f5bc:	fa01 f303 	lsl.w	r3, r1, r3
 800f5c0:	6979      	ldr	r1, [r7, #20]
 800f5c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	634b      	str	r3, [r1, #52]	; 0x34
 800f5ca:	e06d      	b.n	800f6a8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	015a      	lsls	r2, r3, #5
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	4413      	add	r3, r2
 800f5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5d8:	691a      	ldr	r2, [r3, #16]
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	0159      	lsls	r1, r3, #5
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	440b      	add	r3, r1
 800f5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	4b34      	ldr	r3, [pc, #208]	; (800f6bc <USB_EP0StartXfer+0x2ac>)
 800f5ea:	4013      	ands	r3, r2
 800f5ec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	015a      	lsls	r2, r3, #5
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5fa:	691a      	ldr	r2, [r3, #16]
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	0159      	lsls	r1, r3, #5
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	440b      	add	r3, r1
 800f604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f608:	4619      	mov	r1, r3
 800f60a:	4b2b      	ldr	r3, [pc, #172]	; (800f6b8 <USB_EP0StartXfer+0x2a8>)
 800f60c:	4013      	ands	r3, r2
 800f60e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	695b      	ldr	r3, [r3, #20]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d003      	beq.n	800f620 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	689a      	ldr	r2, [r3, #8]
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	015a      	lsls	r2, r3, #5
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	4413      	add	r3, r2
 800f628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f62c:	691b      	ldr	r3, [r3, #16]
 800f62e:	693a      	ldr	r2, [r7, #16]
 800f630:	0151      	lsls	r1, r2, #5
 800f632:	697a      	ldr	r2, [r7, #20]
 800f634:	440a      	add	r2, r1
 800f636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f63a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f63e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	015a      	lsls	r2, r3, #5
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	4413      	add	r3, r2
 800f648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f64c:	691a      	ldr	r2, [r3, #16]
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f656:	6939      	ldr	r1, [r7, #16]
 800f658:	0148      	lsls	r0, r1, #5
 800f65a:	6979      	ldr	r1, [r7, #20]
 800f65c:	4401      	add	r1, r0
 800f65e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f662:	4313      	orrs	r3, r2
 800f664:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f666:	79fb      	ldrb	r3, [r7, #7]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d10d      	bne.n	800f688 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d009      	beq.n	800f688 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	68d9      	ldr	r1, [r3, #12]
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	015a      	lsls	r2, r3, #5
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	4413      	add	r3, r2
 800f680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f684:	460a      	mov	r2, r1
 800f686:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	015a      	lsls	r2, r3, #5
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	4413      	add	r3, r2
 800f690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	693a      	ldr	r2, [r7, #16]
 800f698:	0151      	lsls	r1, r2, #5
 800f69a:	697a      	ldr	r2, [r7, #20]
 800f69c:	440a      	add	r2, r1
 800f69e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	371c      	adds	r7, #28
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr
 800f6b6:	bf00      	nop
 800f6b8:	e007ffff 	.word	0xe007ffff
 800f6bc:	fff80000 	.word	0xfff80000

0800f6c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b089      	sub	sp, #36	; 0x24
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	4611      	mov	r1, r2
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	71fb      	strb	r3, [r7, #7]
 800f6d2:	4613      	mov	r3, r2
 800f6d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f6de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d123      	bne.n	800f72e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f6e6:	88bb      	ldrh	r3, [r7, #4]
 800f6e8:	3303      	adds	r3, #3
 800f6ea:	089b      	lsrs	r3, r3, #2
 800f6ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	61bb      	str	r3, [r7, #24]
 800f6f2:	e018      	b.n	800f726 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f6f4:	79fb      	ldrb	r3, [r7, #7]
 800f6f6:	031a      	lsls	r2, r3, #12
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f700:	461a      	mov	r2, r3
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	3301      	adds	r3, #1
 800f70c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	3301      	adds	r3, #1
 800f712:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	3301      	adds	r3, #1
 800f718:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	3301      	adds	r3, #1
 800f71e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	3301      	adds	r3, #1
 800f724:	61bb      	str	r3, [r7, #24]
 800f726:	69ba      	ldr	r2, [r7, #24]
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d3e2      	bcc.n	800f6f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f72e:	2300      	movs	r3, #0
}
 800f730:	4618      	mov	r0, r3
 800f732:	3724      	adds	r7, #36	; 0x24
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr

0800f73c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b08b      	sub	sp, #44	; 0x2c
 800f740:	af00      	add	r7, sp, #0
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	60b9      	str	r1, [r7, #8]
 800f746:	4613      	mov	r3, r2
 800f748:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f752:	88fb      	ldrh	r3, [r7, #6]
 800f754:	089b      	lsrs	r3, r3, #2
 800f756:	b29b      	uxth	r3, r3
 800f758:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f75a:	88fb      	ldrh	r3, [r7, #6]
 800f75c:	f003 0303 	and.w	r3, r3, #3
 800f760:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f762:	2300      	movs	r3, #0
 800f764:	623b      	str	r3, [r7, #32]
 800f766:	e014      	b.n	800f792 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f768:	69bb      	ldr	r3, [r7, #24]
 800f76a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f772:	601a      	str	r2, [r3, #0]
    pDest++;
 800f774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f776:	3301      	adds	r3, #1
 800f778:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77c:	3301      	adds	r3, #1
 800f77e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f782:	3301      	adds	r3, #1
 800f784:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f788:	3301      	adds	r3, #1
 800f78a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f78c:	6a3b      	ldr	r3, [r7, #32]
 800f78e:	3301      	adds	r3, #1
 800f790:	623b      	str	r3, [r7, #32]
 800f792:	6a3a      	ldr	r2, [r7, #32]
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	429a      	cmp	r2, r3
 800f798:	d3e6      	bcc.n	800f768 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f79a:	8bfb      	ldrh	r3, [r7, #30]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d01e      	beq.n	800f7de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f7a4:	69bb      	ldr	r3, [r7, #24]
 800f7a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	f107 0310 	add.w	r3, r7, #16
 800f7b0:	6812      	ldr	r2, [r2, #0]
 800f7b2:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f7b4:	693a      	ldr	r2, [r7, #16]
 800f7b6:	6a3b      	ldr	r3, [r7, #32]
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	00db      	lsls	r3, r3, #3
 800f7bc:	fa22 f303 	lsr.w	r3, r2, r3
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	701a      	strb	r2, [r3, #0]
      i++;
 800f7c6:	6a3b      	ldr	r3, [r7, #32]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	623b      	str	r3, [r7, #32]
      pDest++;
 800f7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ce:	3301      	adds	r3, #1
 800f7d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f7d2:	8bfb      	ldrh	r3, [r7, #30]
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f7d8:	8bfb      	ldrh	r3, [r7, #30]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d1ea      	bne.n	800f7b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	372c      	adds	r7, #44	; 0x2c
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b085      	sub	sp, #20
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	785b      	ldrb	r3, [r3, #1]
 800f804:	2b01      	cmp	r3, #1
 800f806:	d12c      	bne.n	800f862 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	015a      	lsls	r2, r3, #5
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	4413      	add	r3, r2
 800f810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	db12      	blt.n	800f840 <USB_EPSetStall+0x54>
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00f      	beq.n	800f840 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	015a      	lsls	r2, r3, #5
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	4413      	add	r3, r2
 800f828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	68ba      	ldr	r2, [r7, #8]
 800f830:	0151      	lsls	r1, r2, #5
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	440a      	add	r2, r1
 800f836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f83a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f83e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	015a      	lsls	r2, r3, #5
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	4413      	add	r3, r2
 800f848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	0151      	lsls	r1, r2, #5
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	440a      	add	r2, r1
 800f856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f85a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f85e:	6013      	str	r3, [r2, #0]
 800f860:	e02b      	b.n	800f8ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	015a      	lsls	r2, r3, #5
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	4413      	add	r3, r2
 800f86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	db12      	blt.n	800f89a <USB_EPSetStall+0xae>
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00f      	beq.n	800f89a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	015a      	lsls	r2, r3, #5
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	4413      	add	r3, r2
 800f882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	68ba      	ldr	r2, [r7, #8]
 800f88a:	0151      	lsls	r1, r2, #5
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	440a      	add	r2, r1
 800f890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f894:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f898:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	015a      	lsls	r2, r3, #5
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	0151      	lsls	r1, r2, #5
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	440a      	add	r2, r1
 800f8b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f8b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8ba:	2300      	movs	r3, #0
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3714      	adds	r7, #20
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr

0800f8c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	785b      	ldrb	r3, [r3, #1]
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d128      	bne.n	800f936 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	015a      	lsls	r2, r3, #5
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	68ba      	ldr	r2, [r7, #8]
 800f8f4:	0151      	lsls	r1, r2, #5
 800f8f6:	68fa      	ldr	r2, [r7, #12]
 800f8f8:	440a      	add	r2, r1
 800f8fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f902:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	78db      	ldrb	r3, [r3, #3]
 800f908:	2b03      	cmp	r3, #3
 800f90a:	d003      	beq.n	800f914 <USB_EPClearStall+0x4c>
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	78db      	ldrb	r3, [r3, #3]
 800f910:	2b02      	cmp	r3, #2
 800f912:	d138      	bne.n	800f986 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	015a      	lsls	r2, r3, #5
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	4413      	add	r3, r2
 800f91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	0151      	lsls	r1, r2, #5
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	440a      	add	r2, r1
 800f92a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f92e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f932:	6013      	str	r3, [r2, #0]
 800f934:	e027      	b.n	800f986 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	015a      	lsls	r2, r3, #5
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	4413      	add	r3, r2
 800f93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	0151      	lsls	r1, r2, #5
 800f948:	68fa      	ldr	r2, [r7, #12]
 800f94a:	440a      	add	r2, r1
 800f94c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f954:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	78db      	ldrb	r3, [r3, #3]
 800f95a:	2b03      	cmp	r3, #3
 800f95c:	d003      	beq.n	800f966 <USB_EPClearStall+0x9e>
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	78db      	ldrb	r3, [r3, #3]
 800f962:	2b02      	cmp	r3, #2
 800f964:	d10f      	bne.n	800f986 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	015a      	lsls	r2, r3, #5
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	4413      	add	r3, r2
 800f96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	68ba      	ldr	r2, [r7, #8]
 800f976:	0151      	lsls	r1, r2, #5
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	440a      	add	r2, r1
 800f97c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f984:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f986:	2300      	movs	r3, #0
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3714      	adds	r7, #20
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f994:	b480      	push	{r7}
 800f996:	b085      	sub	sp, #20
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	460b      	mov	r3, r1
 800f99e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f9b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	78fb      	ldrb	r3, [r7, #3]
 800f9c2:	011b      	lsls	r3, r3, #4
 800f9c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f9c8:	68f9      	ldr	r1, [r7, #12]
 800f9ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f9d2:	2300      	movs	r3, #0
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3714      	adds	r7, #20
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b085      	sub	sp, #20
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f9fa:	f023 0303 	bic.w	r3, r3, #3
 800f9fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa0e:	f023 0302 	bic.w	r3, r3, #2
 800fa12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa14:	2300      	movs	r3, #0
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3714      	adds	r7, #20
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr

0800fa22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fa22:	b480      	push	{r7}
 800fa24:	b085      	sub	sp, #20
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	68fa      	ldr	r2, [r7, #12]
 800fa38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa3c:	f023 0303 	bic.w	r3, r3, #3
 800fa40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa50:	f043 0302 	orr.w	r3, r3, #2
 800fa54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa56:	2300      	movs	r3, #0
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3714      	adds	r7, #20
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	695b      	ldr	r3, [r3, #20]
 800fa70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	699b      	ldr	r3, [r3, #24]
 800fa76:	68fa      	ldr	r2, [r7, #12]
 800fa78:	4013      	ands	r3, r2
 800fa7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3714      	adds	r7, #20
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa8a:	b480      	push	{r7}
 800fa8c:	b085      	sub	sp, #20
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa9c:	699b      	ldr	r3, [r3, #24]
 800fa9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faa6:	69db      	ldr	r3, [r3, #28]
 800faa8:	68ba      	ldr	r2, [r7, #8]
 800faaa:	4013      	ands	r3, r2
 800faac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	0c1b      	lsrs	r3, r3, #16
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3714      	adds	r7, #20
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr

0800fabe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fabe:	b480      	push	{r7}
 800fac0:	b085      	sub	sp, #20
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fad0:	699b      	ldr	r3, [r3, #24]
 800fad2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fada:	69db      	ldr	r3, [r3, #28]
 800fadc:	68ba      	ldr	r2, [r7, #8]
 800fade:	4013      	ands	r3, r2
 800fae0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	b29b      	uxth	r3, r3
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3714      	adds	r7, #20
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr

0800faf2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800faf2:	b480      	push	{r7}
 800faf4:	b085      	sub	sp, #20
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
 800fafa:	460b      	mov	r3, r1
 800fafc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fb02:	78fb      	ldrb	r3, [r7, #3]
 800fb04:	015a      	lsls	r2, r3, #5
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	4413      	add	r3, r2
 800fb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb0e:	689b      	ldr	r3, [r3, #8]
 800fb10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb18:	695b      	ldr	r3, [r3, #20]
 800fb1a:	68ba      	ldr	r2, [r7, #8]
 800fb1c:	4013      	ands	r3, r2
 800fb1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fb20:	68bb      	ldr	r3, [r7, #8]
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3714      	adds	r7, #20
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr

0800fb2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb2e:	b480      	push	{r7}
 800fb30:	b087      	sub	sp, #28
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
 800fb36:	460b      	mov	r3, r1
 800fb38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fb52:	78fb      	ldrb	r3, [r7, #3]
 800fb54:	f003 030f 	and.w	r3, r3, #15
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	fa22 f303 	lsr.w	r3, r2, r3
 800fb5e:	01db      	lsls	r3, r3, #7
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	693a      	ldr	r2, [r7, #16]
 800fb64:	4313      	orrs	r3, r2
 800fb66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fb68:	78fb      	ldrb	r3, [r7, #3]
 800fb6a:	015a      	lsls	r2, r3, #5
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	4413      	add	r3, r2
 800fb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	693a      	ldr	r2, [r7, #16]
 800fb78:	4013      	ands	r3, r2
 800fb7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fb7c:	68bb      	ldr	r3, [r7, #8]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	371c      	adds	r7, #28
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b083      	sub	sp, #12
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	f003 0301 	and.w	r3, r3, #1
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	370c      	adds	r7, #12
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr
	...

0800fba8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b085      	sub	sp, #20
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	4b09      	ldr	r3, [pc, #36]	; (800fbec <USB_ActivateSetup+0x44>)
 800fbc6:	4013      	ands	r3, r2
 800fbc8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fbde:	2300      	movs	r3, #0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3714      	adds	r7, #20
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr
 800fbec:	fffff800 	.word	0xfffff800

0800fbf0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b087      	sub	sp, #28
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	607a      	str	r2, [r7, #4]
 800fbfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	333c      	adds	r3, #60	; 0x3c
 800fc06:	3304      	adds	r3, #4
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	4a26      	ldr	r2, [pc, #152]	; (800fca8 <USB_EP0_OutStart+0xb8>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d90a      	bls.n	800fc2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc24:	d101      	bne.n	800fc2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fc26:	2300      	movs	r3, #0
 800fc28:	e037      	b.n	800fc9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc30:	461a      	mov	r2, r3
 800fc32:	2300      	movs	r3, #0
 800fc34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc3c:	691b      	ldr	r3, [r3, #16]
 800fc3e:	697a      	ldr	r2, [r7, #20]
 800fc40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc50:	691b      	ldr	r3, [r3, #16]
 800fc52:	697a      	ldr	r2, [r7, #20]
 800fc54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc58:	f043 0318 	orr.w	r3, r3, #24
 800fc5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc64:	691b      	ldr	r3, [r3, #16]
 800fc66:	697a      	ldr	r2, [r7, #20]
 800fc68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fc70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fc72:	7afb      	ldrb	r3, [r7, #11]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d10f      	bne.n	800fc98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc7e:	461a      	mov	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	697a      	ldr	r2, [r7, #20]
 800fc8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fc96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fc98:	2300      	movs	r3, #0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	371c      	adds	r7, #28
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr
 800fca6:	bf00      	nop
 800fca8:	4f54300a 	.word	0x4f54300a

0800fcac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	60fb      	str	r3, [r7, #12]
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	4a13      	ldr	r2, [pc, #76]	; (800fd10 <USB_CoreReset+0x64>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d901      	bls.n	800fcca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fcc6:	2303      	movs	r3, #3
 800fcc8:	e01b      	b.n	800fd02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	691b      	ldr	r3, [r3, #16]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	daf2      	bge.n	800fcb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	691b      	ldr	r3, [r3, #16]
 800fcda:	f043 0201 	orr.w	r2, r3, #1
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	3301      	adds	r3, #1
 800fce6:	60fb      	str	r3, [r7, #12]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	4a09      	ldr	r2, [pc, #36]	; (800fd10 <USB_CoreReset+0x64>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d901      	bls.n	800fcf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fcf0:	2303      	movs	r3, #3
 800fcf2:	e006      	b.n	800fd02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	691b      	ldr	r3, [r3, #16]
 800fcf8:	f003 0301 	and.w	r3, r3, #1
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d0f0      	beq.n	800fce2 <USB_CoreReset+0x36>

  return HAL_OK;
 800fd00:	2300      	movs	r3, #0
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3714      	adds	r7, #20
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	00030d40 	.word	0x00030d40

0800fd14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fd20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fd24:	f002 f91a 	bl	8011f5c <USBD_static_malloc>
 800fd28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d105      	bne.n	800fd3c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fd38:	2302      	movs	r3, #2
 800fd3a:	e066      	b.n	800fe0a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	7c1b      	ldrb	r3, [r3, #16]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d119      	bne.n	800fd80 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fd4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd50:	2202      	movs	r2, #2
 800fd52:	2181      	movs	r1, #129	; 0x81
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f001 ffde 	bl	8011d16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fd60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd64:	2202      	movs	r2, #2
 800fd66:	2101      	movs	r1, #1
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f001 ffd4 	bl	8011d16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2201      	movs	r2, #1
 800fd72:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2210      	movs	r2, #16
 800fd7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800fd7e:	e016      	b.n	800fdae <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fd80:	2340      	movs	r3, #64	; 0x40
 800fd82:	2202      	movs	r2, #2
 800fd84:	2181      	movs	r1, #129	; 0x81
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f001 ffc5 	bl	8011d16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2201      	movs	r2, #1
 800fd90:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fd92:	2340      	movs	r3, #64	; 0x40
 800fd94:	2202      	movs	r2, #2
 800fd96:	2101      	movs	r1, #1
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f001 ffbc 	bl	8011d16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2201      	movs	r2, #1
 800fda2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2210      	movs	r2, #16
 800fdaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fdae:	2308      	movs	r3, #8
 800fdb0:	2203      	movs	r2, #3
 800fdb2:	2182      	movs	r1, #130	; 0x82
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f001 ffae 	bl	8011d16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	7c1b      	ldrb	r3, [r3, #16]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d109      	bne.n	800fdf8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fdea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fdee:	2101      	movs	r1, #1
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f002 f87f 	bl	8011ef4 <USBD_LL_PrepareReceive>
 800fdf6:	e007      	b.n	800fe08 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fdfe:	2340      	movs	r3, #64	; 0x40
 800fe00:	2101      	movs	r1, #1
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f002 f876 	bl	8011ef4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3710      	adds	r7, #16
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b082      	sub	sp, #8
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fe1e:	2181      	movs	r1, #129	; 0x81
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f001 ff9e 	bl	8011d62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fe2c:	2101      	movs	r1, #1
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f001 ff97 	bl	8011d62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800fe3c:	2182      	movs	r1, #130	; 0x82
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f001 ff8f 	bl	8011d62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2200      	movs	r2, #0
 800fe48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00e      	beq.n	800fe7c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f002 f882 	bl	8011f78 <USBD_static_free>
    pdev->pClassData = NULL;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fe7c:	2300      	movs	r3, #0
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3708      	adds	r7, #8
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
	...

0800fe88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b086      	sub	sp, #24
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fea2:	2300      	movs	r3, #0
 800fea4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d101      	bne.n	800feb0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800feac:	2303      	movs	r3, #3
 800feae:	e0af      	b.n	8010010 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d03f      	beq.n	800ff3c <USBD_CDC_Setup+0xb4>
 800febc:	2b20      	cmp	r3, #32
 800febe:	f040 809f 	bne.w	8010000 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	88db      	ldrh	r3, [r3, #6]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d02e      	beq.n	800ff28 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	b25b      	sxtb	r3, r3
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	da16      	bge.n	800ff02 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800feda:	689b      	ldr	r3, [r3, #8]
 800fedc:	683a      	ldr	r2, [r7, #0]
 800fede:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800fee0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fee2:	683a      	ldr	r2, [r7, #0]
 800fee4:	88d2      	ldrh	r2, [r2, #6]
 800fee6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	88db      	ldrh	r3, [r3, #6]
 800feec:	2b07      	cmp	r3, #7
 800feee:	bf28      	it	cs
 800fef0:	2307      	movcs	r3, #7
 800fef2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	89fa      	ldrh	r2, [r7, #14]
 800fef8:	4619      	mov	r1, r3
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f001 fb03 	bl	8011506 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ff00:	e085      	b.n	801000e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	785a      	ldrb	r2, [r3, #1]
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	88db      	ldrh	r3, [r3, #6]
 800ff10:	b2da      	uxtb	r2, r3
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ff18:	6939      	ldr	r1, [r7, #16]
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	88db      	ldrh	r3, [r3, #6]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f001 fb1c 	bl	801155e <USBD_CtlPrepareRx>
      break;
 800ff26:	e072      	b.n	801000e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff2e:	689b      	ldr	r3, [r3, #8]
 800ff30:	683a      	ldr	r2, [r7, #0]
 800ff32:	7850      	ldrb	r0, [r2, #1]
 800ff34:	2200      	movs	r2, #0
 800ff36:	6839      	ldr	r1, [r7, #0]
 800ff38:	4798      	blx	r3
      break;
 800ff3a:	e068      	b.n	801000e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	785b      	ldrb	r3, [r3, #1]
 800ff40:	2b0b      	cmp	r3, #11
 800ff42:	d852      	bhi.n	800ffea <USBD_CDC_Setup+0x162>
 800ff44:	a201      	add	r2, pc, #4	; (adr r2, 800ff4c <USBD_CDC_Setup+0xc4>)
 800ff46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff4a:	bf00      	nop
 800ff4c:	0800ff7d 	.word	0x0800ff7d
 800ff50:	0800fff9 	.word	0x0800fff9
 800ff54:	0800ffeb 	.word	0x0800ffeb
 800ff58:	0800ffeb 	.word	0x0800ffeb
 800ff5c:	0800ffeb 	.word	0x0800ffeb
 800ff60:	0800ffeb 	.word	0x0800ffeb
 800ff64:	0800ffeb 	.word	0x0800ffeb
 800ff68:	0800ffeb 	.word	0x0800ffeb
 800ff6c:	0800ffeb 	.word	0x0800ffeb
 800ff70:	0800ffeb 	.word	0x0800ffeb
 800ff74:	0800ffa7 	.word	0x0800ffa7
 800ff78:	0800ffd1 	.word	0x0800ffd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	2b03      	cmp	r3, #3
 800ff86:	d107      	bne.n	800ff98 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ff88:	f107 030a 	add.w	r3, r7, #10
 800ff8c:	2202      	movs	r2, #2
 800ff8e:	4619      	mov	r1, r3
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f001 fab8 	bl	8011506 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ff96:	e032      	b.n	800fffe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ff98:	6839      	ldr	r1, [r7, #0]
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f001 fa42 	bl	8011424 <USBD_CtlError>
            ret = USBD_FAIL;
 800ffa0:	2303      	movs	r3, #3
 800ffa2:	75fb      	strb	r3, [r7, #23]
          break;
 800ffa4:	e02b      	b.n	800fffe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	2b03      	cmp	r3, #3
 800ffb0:	d107      	bne.n	800ffc2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ffb2:	f107 030d 	add.w	r3, r7, #13
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	4619      	mov	r1, r3
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f001 faa3 	bl	8011506 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ffc0:	e01d      	b.n	800fffe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ffc2:	6839      	ldr	r1, [r7, #0]
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f001 fa2d 	bl	8011424 <USBD_CtlError>
            ret = USBD_FAIL;
 800ffca:	2303      	movs	r3, #3
 800ffcc:	75fb      	strb	r3, [r7, #23]
          break;
 800ffce:	e016      	b.n	800fffe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	2b03      	cmp	r3, #3
 800ffda:	d00f      	beq.n	800fffc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ffdc:	6839      	ldr	r1, [r7, #0]
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f001 fa20 	bl	8011424 <USBD_CtlError>
            ret = USBD_FAIL;
 800ffe4:	2303      	movs	r3, #3
 800ffe6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ffe8:	e008      	b.n	800fffc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ffea:	6839      	ldr	r1, [r7, #0]
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f001 fa19 	bl	8011424 <USBD_CtlError>
          ret = USBD_FAIL;
 800fff2:	2303      	movs	r3, #3
 800fff4:	75fb      	strb	r3, [r7, #23]
          break;
 800fff6:	e002      	b.n	800fffe <USBD_CDC_Setup+0x176>
          break;
 800fff8:	bf00      	nop
 800fffa:	e008      	b.n	801000e <USBD_CDC_Setup+0x186>
          break;
 800fffc:	bf00      	nop
      }
      break;
 800fffe:	e006      	b.n	801000e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010000:	6839      	ldr	r1, [r7, #0]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f001 fa0e 	bl	8011424 <USBD_CtlError>
      ret = USBD_FAIL;
 8010008:	2303      	movs	r3, #3
 801000a:	75fb      	strb	r3, [r7, #23]
      break;
 801000c:	bf00      	nop
  }

  return (uint8_t)ret;
 801000e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010010:	4618      	mov	r0, r3
 8010012:	3718      	adds	r7, #24
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	460b      	mov	r3, r1
 8010022:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801002a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010032:	2b00      	cmp	r3, #0
 8010034:	d101      	bne.n	801003a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010036:	2303      	movs	r3, #3
 8010038:	e04f      	b.n	80100da <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010040:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010042:	78fa      	ldrb	r2, [r7, #3]
 8010044:	6879      	ldr	r1, [r7, #4]
 8010046:	4613      	mov	r3, r2
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	4413      	add	r3, r2
 801004c:	009b      	lsls	r3, r3, #2
 801004e:	440b      	add	r3, r1
 8010050:	3318      	adds	r3, #24
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d029      	beq.n	80100ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010058:	78fa      	ldrb	r2, [r7, #3]
 801005a:	6879      	ldr	r1, [r7, #4]
 801005c:	4613      	mov	r3, r2
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	4413      	add	r3, r2
 8010062:	009b      	lsls	r3, r3, #2
 8010064:	440b      	add	r3, r1
 8010066:	3318      	adds	r3, #24
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	78f9      	ldrb	r1, [r7, #3]
 801006c:	68f8      	ldr	r0, [r7, #12]
 801006e:	460b      	mov	r3, r1
 8010070:	00db      	lsls	r3, r3, #3
 8010072:	1a5b      	subs	r3, r3, r1
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	4403      	add	r3, r0
 8010078:	3344      	adds	r3, #68	; 0x44
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010080:	fb03 f301 	mul.w	r3, r3, r1
 8010084:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010086:	2b00      	cmp	r3, #0
 8010088:	d110      	bne.n	80100ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801008a:	78fa      	ldrb	r2, [r7, #3]
 801008c:	6879      	ldr	r1, [r7, #4]
 801008e:	4613      	mov	r3, r2
 8010090:	009b      	lsls	r3, r3, #2
 8010092:	4413      	add	r3, r2
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	440b      	add	r3, r1
 8010098:	3318      	adds	r3, #24
 801009a:	2200      	movs	r2, #0
 801009c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801009e:	78f9      	ldrb	r1, [r7, #3]
 80100a0:	2300      	movs	r3, #0
 80100a2:	2200      	movs	r2, #0
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f001 ff04 	bl	8011eb2 <USBD_LL_Transmit>
 80100aa:	e015      	b.n	80100d8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	2200      	movs	r2, #0
 80100b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80100ba:	691b      	ldr	r3, [r3, #16]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d00b      	beq.n	80100d8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	68ba      	ldr	r2, [r7, #8]
 80100ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80100ce:	68ba      	ldr	r2, [r7, #8]
 80100d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80100d4:	78fa      	ldrb	r2, [r7, #3]
 80100d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80100d8:	2300      	movs	r3, #0
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b084      	sub	sp, #16
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
 80100ea:	460b      	mov	r3, r1
 80100ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d101      	bne.n	8010104 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010100:	2303      	movs	r3, #3
 8010102:	e015      	b.n	8010130 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010104:	78fb      	ldrb	r3, [r7, #3]
 8010106:	4619      	mov	r1, r3
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f001 ff14 	bl	8011f36 <USBD_LL_GetRxDataSize>
 801010e:	4602      	mov	r2, r0
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010124:	68fa      	ldr	r2, [r7, #12]
 8010126:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801012a:	4611      	mov	r1, r2
 801012c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	3710      	adds	r7, #16
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b084      	sub	sp, #16
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010146:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d101      	bne.n	8010152 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801014e:	2303      	movs	r3, #3
 8010150:	e01b      	b.n	801018a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d015      	beq.n	8010188 <USBD_CDC_EP0_RxReady+0x50>
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010162:	2bff      	cmp	r3, #255	; 0xff
 8010164:	d010      	beq.n	8010188 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801016c:	689b      	ldr	r3, [r3, #8]
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010174:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801017c:	b292      	uxth	r2, r2
 801017e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	22ff      	movs	r2, #255	; 0xff
 8010184:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
	...

08010194 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2243      	movs	r2, #67	; 0x43
 80101a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80101a2:	4b03      	ldr	r3, [pc, #12]	; (80101b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr
 80101b0:	240000a0 	.word	0x240000a0

080101b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b083      	sub	sp, #12
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2243      	movs	r2, #67	; 0x43
 80101c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80101c2:	4b03      	ldr	r3, [pc, #12]	; (80101d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	370c      	adds	r7, #12
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr
 80101d0:	2400005c 	.word	0x2400005c

080101d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2243      	movs	r2, #67	; 0x43
 80101e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80101e2:	4b03      	ldr	r3, [pc, #12]	; (80101f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr
 80101f0:	240000e4 	.word	0x240000e4

080101f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	220a      	movs	r2, #10
 8010200:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010202:	4b03      	ldr	r3, [pc, #12]	; (8010210 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010204:	4618      	mov	r0, r3
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr
 8010210:	24000018 	.word	0x24000018

08010214 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d101      	bne.n	8010228 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010224:	2303      	movs	r3, #3
 8010226:	e004      	b.n	8010232 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	683a      	ldr	r2, [r7, #0]
 801022c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010230:	2300      	movs	r3, #0
}
 8010232:	4618      	mov	r0, r3
 8010234:	370c      	adds	r7, #12
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr

0801023e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801023e:	b480      	push	{r7}
 8010240:	b087      	sub	sp, #28
 8010242:	af00      	add	r7, sp, #0
 8010244:	60f8      	str	r0, [r7, #12]
 8010246:	60b9      	str	r1, [r7, #8]
 8010248:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010250:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d101      	bne.n	801025c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010258:	2303      	movs	r3, #3
 801025a:	e008      	b.n	801026e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	371c      	adds	r7, #28
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr

0801027a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801027a:	b480      	push	{r7}
 801027c:	b085      	sub	sp, #20
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
 8010282:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801028a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d101      	bne.n	8010296 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010292:	2303      	movs	r3, #3
 8010294:	e004      	b.n	80102a0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	683a      	ldr	r2, [r7, #0]
 801029a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801029e:	2300      	movs	r3, #0
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3714      	adds	r7, #20
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr

080102ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d101      	bne.n	80102ca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80102c6:	2303      	movs	r3, #3
 80102c8:	e016      	b.n	80102f8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	7c1b      	ldrb	r3, [r3, #16]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d109      	bne.n	80102e6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80102d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102dc:	2101      	movs	r1, #1
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f001 fe08 	bl	8011ef4 <USBD_LL_PrepareReceive>
 80102e4:	e007      	b.n	80102f6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80102ec:	2340      	movs	r3, #64	; 0x40
 80102ee:	2101      	movs	r1, #1
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f001 fdff 	bl	8011ef4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80102f6:	2300      	movs	r3, #0
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3710      	adds	r7, #16
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b086      	sub	sp, #24
 8010304:	af00      	add	r7, sp, #0
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	4613      	mov	r3, r2
 801030c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d10a      	bne.n	801032a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8010314:	4817      	ldr	r0, [pc, #92]	; (8010374 <USBD_Init+0x74>)
 8010316:	f001 fea5 	bl	8012064 <iprintf>
 801031a:	4817      	ldr	r0, [pc, #92]	; (8010378 <USBD_Init+0x78>)
 801031c:	f001 fea2 	bl	8012064 <iprintf>
 8010320:	200a      	movs	r0, #10
 8010322:	f001 feb7 	bl	8012094 <putchar>
#endif
    return USBD_FAIL;
 8010326:	2303      	movs	r3, #3
 8010328:	e01f      	b.n	801036a <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2200      	movs	r2, #0
 801032e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2200      	movs	r2, #0
 8010336:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2200      	movs	r2, #0
 801033e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d003      	beq.n	8010350 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2201      	movs	r2, #1
 8010354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	79fa      	ldrb	r2, [r7, #7]
 801035c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801035e:	68f8      	ldr	r0, [r7, #12]
 8010360:	f001 fc68 	bl	8011c34 <USBD_LL_Init>
 8010364:	4603      	mov	r3, r0
 8010366:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010368:	7dfb      	ldrb	r3, [r7, #23]
}
 801036a:	4618      	mov	r0, r3
 801036c:	3718      	adds	r7, #24
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	08013050 	.word	0x08013050
 8010378:	08013058 	.word	0x08013058

0801037c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010386:	2300      	movs	r3, #0
 8010388:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d10a      	bne.n	80103a6 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8010390:	4812      	ldr	r0, [pc, #72]	; (80103dc <USBD_RegisterClass+0x60>)
 8010392:	f001 fe67 	bl	8012064 <iprintf>
 8010396:	4812      	ldr	r0, [pc, #72]	; (80103e0 <USBD_RegisterClass+0x64>)
 8010398:	f001 fe64 	bl	8012064 <iprintf>
 801039c:	200a      	movs	r0, #10
 801039e:	f001 fe79 	bl	8012094 <putchar>
#endif
    return USBD_FAIL;
 80103a2:	2303      	movs	r3, #3
 80103a4:	e016      	b.n	80103d4 <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d00b      	beq.n	80103d2 <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c2:	f107 020e 	add.w	r2, r7, #14
 80103c6:	4610      	mov	r0, r2
 80103c8:	4798      	blx	r3
 80103ca:	4602      	mov	r2, r0
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80103d2:	2300      	movs	r3, #0
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3710      	adds	r7, #16
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	08013050 	.word	0x08013050
 80103e0:	08013070 	.word	0x08013070

080103e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f001 fc77 	bl	8011ce0 <USBD_LL_Start>
 80103f2:	4603      	mov	r3, r0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010404:	2300      	movs	r3, #0
}
 8010406:	4618      	mov	r0, r3
 8010408:	370c      	adds	r7, #12
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr

08010412 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010412:	b580      	push	{r7, lr}
 8010414:	b084      	sub	sp, #16
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
 801041a:	460b      	mov	r3, r1
 801041c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801041e:	2303      	movs	r3, #3
 8010420:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010428:	2b00      	cmp	r3, #0
 801042a:	d009      	beq.n	8010440 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	78fa      	ldrb	r2, [r7, #3]
 8010436:	4611      	mov	r1, r2
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	4798      	blx	r3
 801043c:	4603      	mov	r3, r0
 801043e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010440:	7bfb      	ldrb	r3, [r7, #15]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b082      	sub	sp, #8
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
 8010452:	460b      	mov	r3, r1
 8010454:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801045c:	2b00      	cmp	r3, #0
 801045e:	d007      	beq.n	8010470 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	78fa      	ldrb	r2, [r7, #3]
 801046a:	4611      	mov	r1, r2
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	4798      	blx	r3
  }

  return USBD_OK;
 8010470:	2300      	movs	r3, #0
}
 8010472:	4618      	mov	r0, r3
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801047a:	b580      	push	{r7, lr}
 801047c:	b084      	sub	sp, #16
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
 8010482:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801048a:	6839      	ldr	r1, [r7, #0]
 801048c:	4618      	mov	r0, r3
 801048e:	f000 ff8f 	bl	80113b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2201      	movs	r2, #1
 8010496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80104a0:	461a      	mov	r2, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80104ae:	f003 031f 	and.w	r3, r3, #31
 80104b2:	2b02      	cmp	r3, #2
 80104b4:	d01a      	beq.n	80104ec <USBD_LL_SetupStage+0x72>
 80104b6:	2b02      	cmp	r3, #2
 80104b8:	d822      	bhi.n	8010500 <USBD_LL_SetupStage+0x86>
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d002      	beq.n	80104c4 <USBD_LL_SetupStage+0x4a>
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d00a      	beq.n	80104d8 <USBD_LL_SetupStage+0x5e>
 80104c2:	e01d      	b.n	8010500 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80104ca:	4619      	mov	r1, r3
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f000 fa61 	bl	8010994 <USBD_StdDevReq>
 80104d2:	4603      	mov	r3, r0
 80104d4:	73fb      	strb	r3, [r7, #15]
      break;
 80104d6:	e020      	b.n	801051a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80104de:	4619      	mov	r1, r3
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 fac5 	bl	8010a70 <USBD_StdItfReq>
 80104e6:	4603      	mov	r3, r0
 80104e8:	73fb      	strb	r3, [r7, #15]
      break;
 80104ea:	e016      	b.n	801051a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80104f2:	4619      	mov	r1, r3
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 fb04 	bl	8010b02 <USBD_StdEPReq>
 80104fa:	4603      	mov	r3, r0
 80104fc:	73fb      	strb	r3, [r7, #15]
      break;
 80104fe:	e00c      	b.n	801051a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010506:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801050a:	b2db      	uxtb	r3, r3
 801050c:	4619      	mov	r1, r3
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f001 fc46 	bl	8011da0 <USBD_LL_StallEP>
 8010514:	4603      	mov	r3, r0
 8010516:	73fb      	strb	r3, [r7, #15]
      break;
 8010518:	bf00      	nop
  }

  return ret;
 801051a:	7bfb      	ldrb	r3, [r7, #15]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3710      	adds	r7, #16
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b086      	sub	sp, #24
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	460b      	mov	r3, r1
 801052e:	607a      	str	r2, [r7, #4]
 8010530:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010532:	7afb      	ldrb	r3, [r7, #11]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d138      	bne.n	80105aa <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801053e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010546:	2b03      	cmp	r3, #3
 8010548:	d14a      	bne.n	80105e0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	689a      	ldr	r2, [r3, #8]
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	429a      	cmp	r2, r3
 8010554:	d913      	bls.n	801057e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	689a      	ldr	r2, [r3, #8]
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	1ad2      	subs	r2, r2, r3
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	68da      	ldr	r2, [r3, #12]
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	689b      	ldr	r3, [r3, #8]
 801056c:	4293      	cmp	r3, r2
 801056e:	bf28      	it	cs
 8010570:	4613      	movcs	r3, r2
 8010572:	461a      	mov	r2, r3
 8010574:	6879      	ldr	r1, [r7, #4]
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f001 f80e 	bl	8011598 <USBD_CtlContinueRx>
 801057c:	e030      	b.n	80105e0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010584:	b2db      	uxtb	r3, r3
 8010586:	2b03      	cmp	r3, #3
 8010588:	d10b      	bne.n	80105a2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d005      	beq.n	80105a2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801059c:	691b      	ldr	r3, [r3, #16]
 801059e:	68f8      	ldr	r0, [r7, #12]
 80105a0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80105a2:	68f8      	ldr	r0, [r7, #12]
 80105a4:	f001 f809 	bl	80115ba <USBD_CtlSendStatus>
 80105a8:	e01a      	b.n	80105e0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	2b03      	cmp	r3, #3
 80105b4:	d114      	bne.n	80105e0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105bc:	699b      	ldr	r3, [r3, #24]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d00e      	beq.n	80105e0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105c8:	699b      	ldr	r3, [r3, #24]
 80105ca:	7afa      	ldrb	r2, [r7, #11]
 80105cc:	4611      	mov	r1, r2
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	4798      	blx	r3
 80105d2:	4603      	mov	r3, r0
 80105d4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80105d6:	7dfb      	ldrb	r3, [r7, #23]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d001      	beq.n	80105e0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80105dc:	7dfb      	ldrb	r3, [r7, #23]
 80105de:	e000      	b.n	80105e2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80105e0:	2300      	movs	r3, #0
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3718      	adds	r7, #24
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80105ea:	b580      	push	{r7, lr}
 80105ec:	b086      	sub	sp, #24
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	60f8      	str	r0, [r7, #12]
 80105f2:	460b      	mov	r3, r1
 80105f4:	607a      	str	r2, [r7, #4]
 80105f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80105f8:	7afb      	ldrb	r3, [r7, #11]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d16b      	bne.n	80106d6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	3314      	adds	r3, #20
 8010602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801060a:	2b02      	cmp	r3, #2
 801060c:	d156      	bne.n	80106bc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	689a      	ldr	r2, [r3, #8]
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	429a      	cmp	r2, r3
 8010618:	d914      	bls.n	8010644 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	689a      	ldr	r2, [r3, #8]
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	1ad2      	subs	r2, r2, r3
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	689b      	ldr	r3, [r3, #8]
 801062c:	461a      	mov	r2, r3
 801062e:	6879      	ldr	r1, [r7, #4]
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f000 ff83 	bl	801153c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010636:	2300      	movs	r3, #0
 8010638:	2200      	movs	r2, #0
 801063a:	2100      	movs	r1, #0
 801063c:	68f8      	ldr	r0, [r7, #12]
 801063e:	f001 fc59 	bl	8011ef4 <USBD_LL_PrepareReceive>
 8010642:	e03b      	b.n	80106bc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	68da      	ldr	r2, [r3, #12]
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	429a      	cmp	r2, r3
 801064e:	d11c      	bne.n	801068a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	685a      	ldr	r2, [r3, #4]
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010658:	429a      	cmp	r2, r3
 801065a:	d316      	bcc.n	801068a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	685a      	ldr	r2, [r3, #4]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010666:	429a      	cmp	r2, r3
 8010668:	d20f      	bcs.n	801068a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801066a:	2200      	movs	r2, #0
 801066c:	2100      	movs	r1, #0
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f000 ff64 	bl	801153c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	2200      	movs	r2, #0
 8010678:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801067c:	2300      	movs	r3, #0
 801067e:	2200      	movs	r2, #0
 8010680:	2100      	movs	r1, #0
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f001 fc36 	bl	8011ef4 <USBD_LL_PrepareReceive>
 8010688:	e018      	b.n	80106bc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010690:	b2db      	uxtb	r3, r3
 8010692:	2b03      	cmp	r3, #3
 8010694:	d10b      	bne.n	80106ae <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801069c:	68db      	ldr	r3, [r3, #12]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d005      	beq.n	80106ae <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	68f8      	ldr	r0, [r7, #12]
 80106ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80106ae:	2180      	movs	r1, #128	; 0x80
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f001 fb75 	bl	8011da0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80106b6:	68f8      	ldr	r0, [r7, #12]
 80106b8:	f000 ff92 	bl	80115e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d122      	bne.n	801070c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f7ff fe98 	bl	80103fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2200      	movs	r2, #0
 80106d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80106d4:	e01a      	b.n	801070c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106dc:	b2db      	uxtb	r3, r3
 80106de:	2b03      	cmp	r3, #3
 80106e0:	d114      	bne.n	801070c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106e8:	695b      	ldr	r3, [r3, #20]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d00e      	beq.n	801070c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	7afa      	ldrb	r2, [r7, #11]
 80106f8:	4611      	mov	r1, r2
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	4798      	blx	r3
 80106fe:	4603      	mov	r3, r0
 8010700:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010702:	7dfb      	ldrb	r3, [r7, #23]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d001      	beq.n	801070c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010708:	7dfb      	ldrb	r3, [r7, #23]
 801070a:	e000      	b.n	801070e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801070c:	2300      	movs	r3, #0
}
 801070e:	4618      	mov	r0, r3
 8010710:	3718      	adds	r7, #24
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}

08010716 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010716:	b580      	push	{r7, lr}
 8010718:	b082      	sub	sp, #8
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2201      	movs	r2, #1
 8010722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010746:	2303      	movs	r3, #3
 8010748:	e02f      	b.n	80107aa <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00f      	beq.n	8010774 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d009      	beq.n	8010774 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	6852      	ldr	r2, [r2, #4]
 801076c:	b2d2      	uxtb	r2, r2
 801076e:	4611      	mov	r1, r2
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010774:	2340      	movs	r3, #64	; 0x40
 8010776:	2200      	movs	r2, #0
 8010778:	2100      	movs	r1, #0
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f001 facb 	bl	8011d16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2201      	movs	r2, #1
 8010784:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2240      	movs	r2, #64	; 0x40
 801078c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010790:	2340      	movs	r3, #64	; 0x40
 8010792:	2200      	movs	r2, #0
 8010794:	2180      	movs	r1, #128	; 0x80
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f001 fabd 	bl	8011d16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2201      	movs	r2, #1
 80107a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2240      	movs	r2, #64	; 0x40
 80107a6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}

080107b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80107b2:	b480      	push	{r7}
 80107b4:	b083      	sub	sp, #12
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]
 80107ba:	460b      	mov	r3, r1
 80107bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	78fa      	ldrb	r2, [r7, #3]
 80107c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80107c4:	2300      	movs	r3, #0
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	370c      	adds	r7, #12
 80107ca:	46bd      	mov	sp, r7
 80107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d0:	4770      	bx	lr

080107d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80107d2:	b480      	push	{r7}
 80107d4:	b083      	sub	sp, #12
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107e0:	b2da      	uxtb	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2204      	movs	r2, #4
 80107ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80107f0:	2300      	movs	r3, #0
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	370c      	adds	r7, #12
 80107f6:	46bd      	mov	sp, r7
 80107f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fc:	4770      	bx	lr

080107fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80107fe:	b480      	push	{r7}
 8010800:	b083      	sub	sp, #12
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801080c:	b2db      	uxtb	r3, r3
 801080e:	2b04      	cmp	r3, #4
 8010810:	d106      	bne.n	8010820 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010818:	b2da      	uxtb	r2, r3
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	370c      	adds	r7, #12
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr

0801082e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801082e:	b580      	push	{r7, lr}
 8010830:	b082      	sub	sp, #8
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801083c:	2b00      	cmp	r3, #0
 801083e:	d101      	bne.n	8010844 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010840:	2303      	movs	r3, #3
 8010842:	e012      	b.n	801086a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801084a:	b2db      	uxtb	r3, r3
 801084c:	2b03      	cmp	r3, #3
 801084e:	d10b      	bne.n	8010868 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010856:	69db      	ldr	r3, [r3, #28]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d005      	beq.n	8010868 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010862:	69db      	ldr	r3, [r3, #28]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010868:	2300      	movs	r3, #0
}
 801086a:	4618      	mov	r0, r3
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}

08010872 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b082      	sub	sp, #8
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
 801087a:	460b      	mov	r3, r1
 801087c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010884:	2b00      	cmp	r3, #0
 8010886:	d101      	bne.n	801088c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010888:	2303      	movs	r3, #3
 801088a:	e014      	b.n	80108b6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010892:	b2db      	uxtb	r3, r3
 8010894:	2b03      	cmp	r3, #3
 8010896:	d10d      	bne.n	80108b4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801089e:	6a1b      	ldr	r3, [r3, #32]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d007      	beq.n	80108b4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108aa:	6a1b      	ldr	r3, [r3, #32]
 80108ac:	78fa      	ldrb	r2, [r7, #3]
 80108ae:	4611      	mov	r1, r2
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80108b4:	2300      	movs	r3, #0
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}

080108be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80108be:	b580      	push	{r7, lr}
 80108c0:	b082      	sub	sp, #8
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
 80108c6:	460b      	mov	r3, r1
 80108c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d101      	bne.n	80108d8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80108d4:	2303      	movs	r3, #3
 80108d6:	e014      	b.n	8010902 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	2b03      	cmp	r3, #3
 80108e2:	d10d      	bne.n	8010900 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d007      	beq.n	8010900 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f8:	78fa      	ldrb	r2, [r7, #3]
 80108fa:	4611      	mov	r1, r2
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801090a:	b480      	push	{r7}
 801090c:	b083      	sub	sp, #12
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010912:	2300      	movs	r3, #0
}
 8010914:	4618      	mov	r0, r3
 8010916:	370c      	adds	r7, #12
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2201      	movs	r2, #1
 801092c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010936:	2b00      	cmp	r3, #0
 8010938:	d009      	beq.n	801094e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	6852      	ldr	r2, [r2, #4]
 8010946:	b2d2      	uxtb	r2, r2
 8010948:	4611      	mov	r1, r2
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	4798      	blx	r3
  }

  return USBD_OK;
 801094e:	2300      	movs	r3, #0
}
 8010950:	4618      	mov	r0, r3
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010958:	b480      	push	{r7}
 801095a:	b087      	sub	sp, #28
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	3301      	adds	r3, #1
 801096e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010976:	8a3b      	ldrh	r3, [r7, #16]
 8010978:	021b      	lsls	r3, r3, #8
 801097a:	b21a      	sxth	r2, r3
 801097c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010980:	4313      	orrs	r3, r2
 8010982:	b21b      	sxth	r3, r3
 8010984:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010986:	89fb      	ldrh	r3, [r7, #14]
}
 8010988:	4618      	mov	r0, r3
 801098a:	371c      	adds	r7, #28
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801099e:	2300      	movs	r3, #0
 80109a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80109aa:	2b40      	cmp	r3, #64	; 0x40
 80109ac:	d005      	beq.n	80109ba <USBD_StdDevReq+0x26>
 80109ae:	2b40      	cmp	r3, #64	; 0x40
 80109b0:	d853      	bhi.n	8010a5a <USBD_StdDevReq+0xc6>
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00b      	beq.n	80109ce <USBD_StdDevReq+0x3a>
 80109b6:	2b20      	cmp	r3, #32
 80109b8:	d14f      	bne.n	8010a5a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109c0:	689b      	ldr	r3, [r3, #8]
 80109c2:	6839      	ldr	r1, [r7, #0]
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	4798      	blx	r3
 80109c8:	4603      	mov	r3, r0
 80109ca:	73fb      	strb	r3, [r7, #15]
      break;
 80109cc:	e04a      	b.n	8010a64 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	785b      	ldrb	r3, [r3, #1]
 80109d2:	2b09      	cmp	r3, #9
 80109d4:	d83b      	bhi.n	8010a4e <USBD_StdDevReq+0xba>
 80109d6:	a201      	add	r2, pc, #4	; (adr r2, 80109dc <USBD_StdDevReq+0x48>)
 80109d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109dc:	08010a31 	.word	0x08010a31
 80109e0:	08010a45 	.word	0x08010a45
 80109e4:	08010a4f 	.word	0x08010a4f
 80109e8:	08010a3b 	.word	0x08010a3b
 80109ec:	08010a4f 	.word	0x08010a4f
 80109f0:	08010a0f 	.word	0x08010a0f
 80109f4:	08010a05 	.word	0x08010a05
 80109f8:	08010a4f 	.word	0x08010a4f
 80109fc:	08010a27 	.word	0x08010a27
 8010a00:	08010a19 	.word	0x08010a19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010a04:	6839      	ldr	r1, [r7, #0]
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 f9de 	bl	8010dc8 <USBD_GetDescriptor>
          break;
 8010a0c:	e024      	b.n	8010a58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010a0e:	6839      	ldr	r1, [r7, #0]
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 fb43 	bl	801109c <USBD_SetAddress>
          break;
 8010a16:	e01f      	b.n	8010a58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010a18:	6839      	ldr	r1, [r7, #0]
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 fb82 	bl	8011124 <USBD_SetConfig>
 8010a20:	4603      	mov	r3, r0
 8010a22:	73fb      	strb	r3, [r7, #15]
          break;
 8010a24:	e018      	b.n	8010a58 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010a26:	6839      	ldr	r1, [r7, #0]
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f000 fc21 	bl	8011270 <USBD_GetConfig>
          break;
 8010a2e:	e013      	b.n	8010a58 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010a30:	6839      	ldr	r1, [r7, #0]
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f000 fc52 	bl	80112dc <USBD_GetStatus>
          break;
 8010a38:	e00e      	b.n	8010a58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010a3a:	6839      	ldr	r1, [r7, #0]
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f000 fc81 	bl	8011344 <USBD_SetFeature>
          break;
 8010a42:	e009      	b.n	8010a58 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010a44:	6839      	ldr	r1, [r7, #0]
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 fc90 	bl	801136c <USBD_ClrFeature>
          break;
 8010a4c:	e004      	b.n	8010a58 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010a4e:	6839      	ldr	r1, [r7, #0]
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f000 fce7 	bl	8011424 <USBD_CtlError>
          break;
 8010a56:	bf00      	nop
      }
      break;
 8010a58:	e004      	b.n	8010a64 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010a5a:	6839      	ldr	r1, [r7, #0]
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f000 fce1 	bl	8011424 <USBD_CtlError>
      break;
 8010a62:	bf00      	nop
  }

  return ret;
 8010a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop

08010a70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b084      	sub	sp, #16
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a86:	2b40      	cmp	r3, #64	; 0x40
 8010a88:	d005      	beq.n	8010a96 <USBD_StdItfReq+0x26>
 8010a8a:	2b40      	cmp	r3, #64	; 0x40
 8010a8c:	d82f      	bhi.n	8010aee <USBD_StdItfReq+0x7e>
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d001      	beq.n	8010a96 <USBD_StdItfReq+0x26>
 8010a92:	2b20      	cmp	r3, #32
 8010a94:	d12b      	bne.n	8010aee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a9c:	b2db      	uxtb	r3, r3
 8010a9e:	3b01      	subs	r3, #1
 8010aa0:	2b02      	cmp	r3, #2
 8010aa2:	d81d      	bhi.n	8010ae0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	889b      	ldrh	r3, [r3, #4]
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d813      	bhi.n	8010ad6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ab4:	689b      	ldr	r3, [r3, #8]
 8010ab6:	6839      	ldr	r1, [r7, #0]
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	4798      	blx	r3
 8010abc:	4603      	mov	r3, r0
 8010abe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	88db      	ldrh	r3, [r3, #6]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d110      	bne.n	8010aea <USBD_StdItfReq+0x7a>
 8010ac8:	7bfb      	ldrb	r3, [r7, #15]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d10d      	bne.n	8010aea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 fd73 	bl	80115ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010ad4:	e009      	b.n	8010aea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010ad6:	6839      	ldr	r1, [r7, #0]
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f000 fca3 	bl	8011424 <USBD_CtlError>
          break;
 8010ade:	e004      	b.n	8010aea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010ae0:	6839      	ldr	r1, [r7, #0]
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 fc9e 	bl	8011424 <USBD_CtlError>
          break;
 8010ae8:	e000      	b.n	8010aec <USBD_StdItfReq+0x7c>
          break;
 8010aea:	bf00      	nop
      }
      break;
 8010aec:	e004      	b.n	8010af8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010aee:	6839      	ldr	r1, [r7, #0]
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 fc97 	bl	8011424 <USBD_CtlError>
      break;
 8010af6:	bf00      	nop
  }

  return ret;
 8010af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3710      	adds	r7, #16
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b084      	sub	sp, #16
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	889b      	ldrh	r3, [r3, #4]
 8010b14:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b1e:	2b40      	cmp	r3, #64	; 0x40
 8010b20:	d007      	beq.n	8010b32 <USBD_StdEPReq+0x30>
 8010b22:	2b40      	cmp	r3, #64	; 0x40
 8010b24:	f200 8145 	bhi.w	8010db2 <USBD_StdEPReq+0x2b0>
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d00c      	beq.n	8010b46 <USBD_StdEPReq+0x44>
 8010b2c:	2b20      	cmp	r3, #32
 8010b2e:	f040 8140 	bne.w	8010db2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b38:	689b      	ldr	r3, [r3, #8]
 8010b3a:	6839      	ldr	r1, [r7, #0]
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	4798      	blx	r3
 8010b40:	4603      	mov	r3, r0
 8010b42:	73fb      	strb	r3, [r7, #15]
      break;
 8010b44:	e13a      	b.n	8010dbc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	785b      	ldrb	r3, [r3, #1]
 8010b4a:	2b03      	cmp	r3, #3
 8010b4c:	d007      	beq.n	8010b5e <USBD_StdEPReq+0x5c>
 8010b4e:	2b03      	cmp	r3, #3
 8010b50:	f300 8129 	bgt.w	8010da6 <USBD_StdEPReq+0x2a4>
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d07f      	beq.n	8010c58 <USBD_StdEPReq+0x156>
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d03c      	beq.n	8010bd6 <USBD_StdEPReq+0xd4>
 8010b5c:	e123      	b.n	8010da6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b64:	b2db      	uxtb	r3, r3
 8010b66:	2b02      	cmp	r3, #2
 8010b68:	d002      	beq.n	8010b70 <USBD_StdEPReq+0x6e>
 8010b6a:	2b03      	cmp	r3, #3
 8010b6c:	d016      	beq.n	8010b9c <USBD_StdEPReq+0x9a>
 8010b6e:	e02c      	b.n	8010bca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b70:	7bbb      	ldrb	r3, [r7, #14]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d00d      	beq.n	8010b92 <USBD_StdEPReq+0x90>
 8010b76:	7bbb      	ldrb	r3, [r7, #14]
 8010b78:	2b80      	cmp	r3, #128	; 0x80
 8010b7a:	d00a      	beq.n	8010b92 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010b7c:	7bbb      	ldrb	r3, [r7, #14]
 8010b7e:	4619      	mov	r1, r3
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f001 f90d 	bl	8011da0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b86:	2180      	movs	r1, #128	; 0x80
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f001 f909 	bl	8011da0 <USBD_LL_StallEP>
 8010b8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010b90:	e020      	b.n	8010bd4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010b92:	6839      	ldr	r1, [r7, #0]
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 fc45 	bl	8011424 <USBD_CtlError>
              break;
 8010b9a:	e01b      	b.n	8010bd4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	885b      	ldrh	r3, [r3, #2]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d10e      	bne.n	8010bc2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010ba4:	7bbb      	ldrb	r3, [r7, #14]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d00b      	beq.n	8010bc2 <USBD_StdEPReq+0xc0>
 8010baa:	7bbb      	ldrb	r3, [r7, #14]
 8010bac:	2b80      	cmp	r3, #128	; 0x80
 8010bae:	d008      	beq.n	8010bc2 <USBD_StdEPReq+0xc0>
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	88db      	ldrh	r3, [r3, #6]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d104      	bne.n	8010bc2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010bb8:	7bbb      	ldrb	r3, [r7, #14]
 8010bba:	4619      	mov	r1, r3
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f001 f8ef 	bl	8011da0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 fcf9 	bl	80115ba <USBD_CtlSendStatus>

              break;
 8010bc8:	e004      	b.n	8010bd4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010bca:	6839      	ldr	r1, [r7, #0]
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 fc29 	bl	8011424 <USBD_CtlError>
              break;
 8010bd2:	bf00      	nop
          }
          break;
 8010bd4:	e0ec      	b.n	8010db0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	2b02      	cmp	r3, #2
 8010be0:	d002      	beq.n	8010be8 <USBD_StdEPReq+0xe6>
 8010be2:	2b03      	cmp	r3, #3
 8010be4:	d016      	beq.n	8010c14 <USBD_StdEPReq+0x112>
 8010be6:	e030      	b.n	8010c4a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010be8:	7bbb      	ldrb	r3, [r7, #14]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00d      	beq.n	8010c0a <USBD_StdEPReq+0x108>
 8010bee:	7bbb      	ldrb	r3, [r7, #14]
 8010bf0:	2b80      	cmp	r3, #128	; 0x80
 8010bf2:	d00a      	beq.n	8010c0a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010bf4:	7bbb      	ldrb	r3, [r7, #14]
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f001 f8d1 	bl	8011da0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bfe:	2180      	movs	r1, #128	; 0x80
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f001 f8cd 	bl	8011da0 <USBD_LL_StallEP>
 8010c06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010c08:	e025      	b.n	8010c56 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010c0a:	6839      	ldr	r1, [r7, #0]
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f000 fc09 	bl	8011424 <USBD_CtlError>
              break;
 8010c12:	e020      	b.n	8010c56 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	885b      	ldrh	r3, [r3, #2]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d11b      	bne.n	8010c54 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010c1c:	7bbb      	ldrb	r3, [r7, #14]
 8010c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d004      	beq.n	8010c30 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010c26:	7bbb      	ldrb	r3, [r7, #14]
 8010c28:	4619      	mov	r1, r3
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f001 f8d7 	bl	8011dde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f000 fcc2 	bl	80115ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c3c:	689b      	ldr	r3, [r3, #8]
 8010c3e:	6839      	ldr	r1, [r7, #0]
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	4798      	blx	r3
 8010c44:	4603      	mov	r3, r0
 8010c46:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010c48:	e004      	b.n	8010c54 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010c4a:	6839      	ldr	r1, [r7, #0]
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 fbe9 	bl	8011424 <USBD_CtlError>
              break;
 8010c52:	e000      	b.n	8010c56 <USBD_StdEPReq+0x154>
              break;
 8010c54:	bf00      	nop
          }
          break;
 8010c56:	e0ab      	b.n	8010db0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	2b02      	cmp	r3, #2
 8010c62:	d002      	beq.n	8010c6a <USBD_StdEPReq+0x168>
 8010c64:	2b03      	cmp	r3, #3
 8010c66:	d032      	beq.n	8010cce <USBD_StdEPReq+0x1cc>
 8010c68:	e097      	b.n	8010d9a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c6a:	7bbb      	ldrb	r3, [r7, #14]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d007      	beq.n	8010c80 <USBD_StdEPReq+0x17e>
 8010c70:	7bbb      	ldrb	r3, [r7, #14]
 8010c72:	2b80      	cmp	r3, #128	; 0x80
 8010c74:	d004      	beq.n	8010c80 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010c76:	6839      	ldr	r1, [r7, #0]
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f000 fbd3 	bl	8011424 <USBD_CtlError>
                break;
 8010c7e:	e091      	b.n	8010da4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	da0b      	bge.n	8010ca0 <USBD_StdEPReq+0x19e>
 8010c88:	7bbb      	ldrb	r3, [r7, #14]
 8010c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c8e:	4613      	mov	r3, r2
 8010c90:	009b      	lsls	r3, r3, #2
 8010c92:	4413      	add	r3, r2
 8010c94:	009b      	lsls	r3, r3, #2
 8010c96:	3310      	adds	r3, #16
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	4413      	add	r3, r2
 8010c9c:	3304      	adds	r3, #4
 8010c9e:	e00b      	b.n	8010cb8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010ca0:	7bbb      	ldrb	r3, [r7, #14]
 8010ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	4413      	add	r3, r2
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	4413      	add	r3, r2
 8010cb6:	3304      	adds	r3, #4
 8010cb8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f000 fc1d 	bl	8011506 <USBD_CtlSendData>
              break;
 8010ccc:	e06a      	b.n	8010da4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010cce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	da11      	bge.n	8010cfa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010cd6:	7bbb      	ldrb	r3, [r7, #14]
 8010cd8:	f003 020f 	and.w	r2, r3, #15
 8010cdc:	6879      	ldr	r1, [r7, #4]
 8010cde:	4613      	mov	r3, r2
 8010ce0:	009b      	lsls	r3, r3, #2
 8010ce2:	4413      	add	r3, r2
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	440b      	add	r3, r1
 8010ce8:	3324      	adds	r3, #36	; 0x24
 8010cea:	881b      	ldrh	r3, [r3, #0]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d117      	bne.n	8010d20 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010cf0:	6839      	ldr	r1, [r7, #0]
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f000 fb96 	bl	8011424 <USBD_CtlError>
                  break;
 8010cf8:	e054      	b.n	8010da4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010cfa:	7bbb      	ldrb	r3, [r7, #14]
 8010cfc:	f003 020f 	and.w	r2, r3, #15
 8010d00:	6879      	ldr	r1, [r7, #4]
 8010d02:	4613      	mov	r3, r2
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	4413      	add	r3, r2
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	440b      	add	r3, r1
 8010d0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010d10:	881b      	ldrh	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d104      	bne.n	8010d20 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010d16:	6839      	ldr	r1, [r7, #0]
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 fb83 	bl	8011424 <USBD_CtlError>
                  break;
 8010d1e:	e041      	b.n	8010da4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	da0b      	bge.n	8010d40 <USBD_StdEPReq+0x23e>
 8010d28:	7bbb      	ldrb	r3, [r7, #14]
 8010d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d2e:	4613      	mov	r3, r2
 8010d30:	009b      	lsls	r3, r3, #2
 8010d32:	4413      	add	r3, r2
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	3310      	adds	r3, #16
 8010d38:	687a      	ldr	r2, [r7, #4]
 8010d3a:	4413      	add	r3, r2
 8010d3c:	3304      	adds	r3, #4
 8010d3e:	e00b      	b.n	8010d58 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010d40:	7bbb      	ldrb	r3, [r7, #14]
 8010d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d46:	4613      	mov	r3, r2
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	4413      	add	r3, r2
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	4413      	add	r3, r2
 8010d56:	3304      	adds	r3, #4
 8010d58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010d5a:	7bbb      	ldrb	r3, [r7, #14]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d002      	beq.n	8010d66 <USBD_StdEPReq+0x264>
 8010d60:	7bbb      	ldrb	r3, [r7, #14]
 8010d62:	2b80      	cmp	r3, #128	; 0x80
 8010d64:	d103      	bne.n	8010d6e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	601a      	str	r2, [r3, #0]
 8010d6c:	e00e      	b.n	8010d8c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010d6e:	7bbb      	ldrb	r3, [r7, #14]
 8010d70:	4619      	mov	r1, r3
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f001 f852 	bl	8011e1c <USBD_LL_IsStallEP>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d003      	beq.n	8010d86 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	2201      	movs	r2, #1
 8010d82:	601a      	str	r2, [r3, #0]
 8010d84:	e002      	b.n	8010d8c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	2202      	movs	r2, #2
 8010d90:	4619      	mov	r1, r3
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f000 fbb7 	bl	8011506 <USBD_CtlSendData>
              break;
 8010d98:	e004      	b.n	8010da4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010d9a:	6839      	ldr	r1, [r7, #0]
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 fb41 	bl	8011424 <USBD_CtlError>
              break;
 8010da2:	bf00      	nop
          }
          break;
 8010da4:	e004      	b.n	8010db0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010da6:	6839      	ldr	r1, [r7, #0]
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 fb3b 	bl	8011424 <USBD_CtlError>
          break;
 8010dae:	bf00      	nop
      }
      break;
 8010db0:	e004      	b.n	8010dbc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010db2:	6839      	ldr	r1, [r7, #0]
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 fb35 	bl	8011424 <USBD_CtlError>
      break;
 8010dba:	bf00      	nop
  }

  return ret;
 8010dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3710      	adds	r7, #16
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
	...

08010dc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	885b      	ldrh	r3, [r3, #2]
 8010de2:	0a1b      	lsrs	r3, r3, #8
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	3b01      	subs	r3, #1
 8010de8:	2b06      	cmp	r3, #6
 8010dea:	f200 8128 	bhi.w	801103e <USBD_GetDescriptor+0x276>
 8010dee:	a201      	add	r2, pc, #4	; (adr r2, 8010df4 <USBD_GetDescriptor+0x2c>)
 8010df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df4:	08010e11 	.word	0x08010e11
 8010df8:	08010e29 	.word	0x08010e29
 8010dfc:	08010e69 	.word	0x08010e69
 8010e00:	0801103f 	.word	0x0801103f
 8010e04:	0801103f 	.word	0x0801103f
 8010e08:	08010fdf 	.word	0x08010fdf
 8010e0c:	0801100b 	.word	0x0801100b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	7c12      	ldrb	r2, [r2, #16]
 8010e1c:	f107 0108 	add.w	r1, r7, #8
 8010e20:	4610      	mov	r0, r2
 8010e22:	4798      	blx	r3
 8010e24:	60f8      	str	r0, [r7, #12]
      break;
 8010e26:	e112      	b.n	801104e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	7c1b      	ldrb	r3, [r3, #16]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d10d      	bne.n	8010e4c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e38:	f107 0208 	add.w	r2, r7, #8
 8010e3c:	4610      	mov	r0, r2
 8010e3e:	4798      	blx	r3
 8010e40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	3301      	adds	r3, #1
 8010e46:	2202      	movs	r2, #2
 8010e48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010e4a:	e100      	b.n	801104e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e54:	f107 0208 	add.w	r2, r7, #8
 8010e58:	4610      	mov	r0, r2
 8010e5a:	4798      	blx	r3
 8010e5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	3301      	adds	r3, #1
 8010e62:	2202      	movs	r2, #2
 8010e64:	701a      	strb	r2, [r3, #0]
      break;
 8010e66:	e0f2      	b.n	801104e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	885b      	ldrh	r3, [r3, #2]
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	2b05      	cmp	r3, #5
 8010e70:	f200 80ac 	bhi.w	8010fcc <USBD_GetDescriptor+0x204>
 8010e74:	a201      	add	r2, pc, #4	; (adr r2, 8010e7c <USBD_GetDescriptor+0xb4>)
 8010e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e7a:	bf00      	nop
 8010e7c:	08010e95 	.word	0x08010e95
 8010e80:	08010ec9 	.word	0x08010ec9
 8010e84:	08010efd 	.word	0x08010efd
 8010e88:	08010f31 	.word	0x08010f31
 8010e8c:	08010f65 	.word	0x08010f65
 8010e90:	08010f99 	.word	0x08010f99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d00b      	beq.n	8010eb8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	7c12      	ldrb	r2, [r2, #16]
 8010eac:	f107 0108 	add.w	r1, r7, #8
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	4798      	blx	r3
 8010eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010eb6:	e091      	b.n	8010fdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010eb8:	6839      	ldr	r1, [r7, #0]
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f000 fab2 	bl	8011424 <USBD_CtlError>
            err++;
 8010ec0:	7afb      	ldrb	r3, [r7, #11]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8010ec6:	e089      	b.n	8010fdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ece:	689b      	ldr	r3, [r3, #8]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d00b      	beq.n	8010eec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010eda:	689b      	ldr	r3, [r3, #8]
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	7c12      	ldrb	r2, [r2, #16]
 8010ee0:	f107 0108 	add.w	r1, r7, #8
 8010ee4:	4610      	mov	r0, r2
 8010ee6:	4798      	blx	r3
 8010ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010eea:	e077      	b.n	8010fdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010eec:	6839      	ldr	r1, [r7, #0]
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f000 fa98 	bl	8011424 <USBD_CtlError>
            err++;
 8010ef4:	7afb      	ldrb	r3, [r7, #11]
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8010efa:	e06f      	b.n	8010fdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d00b      	beq.n	8010f20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	7c12      	ldrb	r2, [r2, #16]
 8010f14:	f107 0108 	add.w	r1, r7, #8
 8010f18:	4610      	mov	r0, r2
 8010f1a:	4798      	blx	r3
 8010f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f1e:	e05d      	b.n	8010fdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010f20:	6839      	ldr	r1, [r7, #0]
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f000 fa7e 	bl	8011424 <USBD_CtlError>
            err++;
 8010f28:	7afb      	ldrb	r3, [r7, #11]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8010f2e:	e055      	b.n	8010fdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f36:	691b      	ldr	r3, [r3, #16]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d00b      	beq.n	8010f54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f42:	691b      	ldr	r3, [r3, #16]
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	7c12      	ldrb	r2, [r2, #16]
 8010f48:	f107 0108 	add.w	r1, r7, #8
 8010f4c:	4610      	mov	r0, r2
 8010f4e:	4798      	blx	r3
 8010f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f52:	e043      	b.n	8010fdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010f54:	6839      	ldr	r1, [r7, #0]
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fa64 	bl	8011424 <USBD_CtlError>
            err++;
 8010f5c:	7afb      	ldrb	r3, [r7, #11]
 8010f5e:	3301      	adds	r3, #1
 8010f60:	72fb      	strb	r3, [r7, #11]
          break;
 8010f62:	e03b      	b.n	8010fdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f6a:	695b      	ldr	r3, [r3, #20]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d00b      	beq.n	8010f88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f76:	695b      	ldr	r3, [r3, #20]
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	7c12      	ldrb	r2, [r2, #16]
 8010f7c:	f107 0108 	add.w	r1, r7, #8
 8010f80:	4610      	mov	r0, r2
 8010f82:	4798      	blx	r3
 8010f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f86:	e029      	b.n	8010fdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010f88:	6839      	ldr	r1, [r7, #0]
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 fa4a 	bl	8011424 <USBD_CtlError>
            err++;
 8010f90:	7afb      	ldrb	r3, [r7, #11]
 8010f92:	3301      	adds	r3, #1
 8010f94:	72fb      	strb	r3, [r7, #11]
          break;
 8010f96:	e021      	b.n	8010fdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f9e:	699b      	ldr	r3, [r3, #24]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d00b      	beq.n	8010fbc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010faa:	699b      	ldr	r3, [r3, #24]
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	7c12      	ldrb	r2, [r2, #16]
 8010fb0:	f107 0108 	add.w	r1, r7, #8
 8010fb4:	4610      	mov	r0, r2
 8010fb6:	4798      	blx	r3
 8010fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010fba:	e00f      	b.n	8010fdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010fbc:	6839      	ldr	r1, [r7, #0]
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 fa30 	bl	8011424 <USBD_CtlError>
            err++;
 8010fc4:	7afb      	ldrb	r3, [r7, #11]
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8010fca:	e007      	b.n	8010fdc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010fcc:	6839      	ldr	r1, [r7, #0]
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 fa28 	bl	8011424 <USBD_CtlError>
          err++;
 8010fd4:	7afb      	ldrb	r3, [r7, #11]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010fda:	bf00      	nop
      }
      break;
 8010fdc:	e037      	b.n	801104e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	7c1b      	ldrb	r3, [r3, #16]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d109      	bne.n	8010ffa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fee:	f107 0208 	add.w	r2, r7, #8
 8010ff2:	4610      	mov	r0, r2
 8010ff4:	4798      	blx	r3
 8010ff6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ff8:	e029      	b.n	801104e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010ffa:	6839      	ldr	r1, [r7, #0]
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 fa11 	bl	8011424 <USBD_CtlError>
        err++;
 8011002:	7afb      	ldrb	r3, [r7, #11]
 8011004:	3301      	adds	r3, #1
 8011006:	72fb      	strb	r3, [r7, #11]
      break;
 8011008:	e021      	b.n	801104e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	7c1b      	ldrb	r3, [r3, #16]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d10d      	bne.n	801102e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801101a:	f107 0208 	add.w	r2, r7, #8
 801101e:	4610      	mov	r0, r2
 8011020:	4798      	blx	r3
 8011022:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	3301      	adds	r3, #1
 8011028:	2207      	movs	r2, #7
 801102a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801102c:	e00f      	b.n	801104e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801102e:	6839      	ldr	r1, [r7, #0]
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f000 f9f7 	bl	8011424 <USBD_CtlError>
        err++;
 8011036:	7afb      	ldrb	r3, [r7, #11]
 8011038:	3301      	adds	r3, #1
 801103a:	72fb      	strb	r3, [r7, #11]
      break;
 801103c:	e007      	b.n	801104e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801103e:	6839      	ldr	r1, [r7, #0]
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 f9ef 	bl	8011424 <USBD_CtlError>
      err++;
 8011046:	7afb      	ldrb	r3, [r7, #11]
 8011048:	3301      	adds	r3, #1
 801104a:	72fb      	strb	r3, [r7, #11]
      break;
 801104c:	bf00      	nop
  }

  if (err != 0U)
 801104e:	7afb      	ldrb	r3, [r7, #11]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d11e      	bne.n	8011092 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	88db      	ldrh	r3, [r3, #6]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d016      	beq.n	801108a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801105c:	893b      	ldrh	r3, [r7, #8]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d00e      	beq.n	8011080 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	88da      	ldrh	r2, [r3, #6]
 8011066:	893b      	ldrh	r3, [r7, #8]
 8011068:	4293      	cmp	r3, r2
 801106a:	bf28      	it	cs
 801106c:	4613      	movcs	r3, r2
 801106e:	b29b      	uxth	r3, r3
 8011070:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011072:	893b      	ldrh	r3, [r7, #8]
 8011074:	461a      	mov	r2, r3
 8011076:	68f9      	ldr	r1, [r7, #12]
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 fa44 	bl	8011506 <USBD_CtlSendData>
 801107e:	e009      	b.n	8011094 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011080:	6839      	ldr	r1, [r7, #0]
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 f9ce 	bl	8011424 <USBD_CtlError>
 8011088:	e004      	b.n	8011094 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 fa95 	bl	80115ba <USBD_CtlSendStatus>
 8011090:	e000      	b.n	8011094 <USBD_GetDescriptor+0x2cc>
    return;
 8011092:	bf00      	nop
  }
}
 8011094:	3710      	adds	r7, #16
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop

0801109c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	889b      	ldrh	r3, [r3, #4]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d131      	bne.n	8011112 <USBD_SetAddress+0x76>
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	88db      	ldrh	r3, [r3, #6]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d12d      	bne.n	8011112 <USBD_SetAddress+0x76>
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	885b      	ldrh	r3, [r3, #2]
 80110ba:	2b7f      	cmp	r3, #127	; 0x7f
 80110bc:	d829      	bhi.n	8011112 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	885b      	ldrh	r3, [r3, #2]
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	2b03      	cmp	r3, #3
 80110d4:	d104      	bne.n	80110e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80110d6:	6839      	ldr	r1, [r7, #0]
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f9a3 	bl	8011424 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110de:	e01d      	b.n	801111c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	7bfa      	ldrb	r2, [r7, #15]
 80110e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80110e8:	7bfb      	ldrb	r3, [r7, #15]
 80110ea:	4619      	mov	r1, r3
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 fec1 	bl	8011e74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f000 fa61 	bl	80115ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80110f8:	7bfb      	ldrb	r3, [r7, #15]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d004      	beq.n	8011108 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2202      	movs	r2, #2
 8011102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011106:	e009      	b.n	801111c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2201      	movs	r2, #1
 801110c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011110:	e004      	b.n	801111c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011112:	6839      	ldr	r1, [r7, #0]
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 f985 	bl	8011424 <USBD_CtlError>
  }
}
 801111a:	bf00      	nop
 801111c:	bf00      	nop
 801111e:	3710      	adds	r7, #16
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801112e:	2300      	movs	r3, #0
 8011130:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	885b      	ldrh	r3, [r3, #2]
 8011136:	b2da      	uxtb	r2, r3
 8011138:	4b4c      	ldr	r3, [pc, #304]	; (801126c <USBD_SetConfig+0x148>)
 801113a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801113c:	4b4b      	ldr	r3, [pc, #300]	; (801126c <USBD_SetConfig+0x148>)
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	2b01      	cmp	r3, #1
 8011142:	d905      	bls.n	8011150 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011144:	6839      	ldr	r1, [r7, #0]
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f000 f96c 	bl	8011424 <USBD_CtlError>
    return USBD_FAIL;
 801114c:	2303      	movs	r3, #3
 801114e:	e088      	b.n	8011262 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011156:	b2db      	uxtb	r3, r3
 8011158:	2b02      	cmp	r3, #2
 801115a:	d002      	beq.n	8011162 <USBD_SetConfig+0x3e>
 801115c:	2b03      	cmp	r3, #3
 801115e:	d025      	beq.n	80111ac <USBD_SetConfig+0x88>
 8011160:	e071      	b.n	8011246 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011162:	4b42      	ldr	r3, [pc, #264]	; (801126c <USBD_SetConfig+0x148>)
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d01c      	beq.n	80111a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801116a:	4b40      	ldr	r3, [pc, #256]	; (801126c <USBD_SetConfig+0x148>)
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	461a      	mov	r2, r3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011174:	4b3d      	ldr	r3, [pc, #244]	; (801126c <USBD_SetConfig+0x148>)
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	4619      	mov	r1, r3
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7ff f949 	bl	8010412 <USBD_SetClassConfig>
 8011180:	4603      	mov	r3, r0
 8011182:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011184:	7bfb      	ldrb	r3, [r7, #15]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d004      	beq.n	8011194 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801118a:	6839      	ldr	r1, [r7, #0]
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 f949 	bl	8011424 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011192:	e065      	b.n	8011260 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f000 fa10 	bl	80115ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2203      	movs	r2, #3
 801119e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80111a2:	e05d      	b.n	8011260 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f000 fa08 	bl	80115ba <USBD_CtlSendStatus>
      break;
 80111aa:	e059      	b.n	8011260 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80111ac:	4b2f      	ldr	r3, [pc, #188]	; (801126c <USBD_SetConfig+0x148>)
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d112      	bne.n	80111da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2202      	movs	r2, #2
 80111b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80111bc:	4b2b      	ldr	r3, [pc, #172]	; (801126c <USBD_SetConfig+0x148>)
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	461a      	mov	r2, r3
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80111c6:	4b29      	ldr	r3, [pc, #164]	; (801126c <USBD_SetConfig+0x148>)
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	4619      	mov	r1, r3
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f7ff f93c 	bl	801044a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f000 f9f1 	bl	80115ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80111d8:	e042      	b.n	8011260 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80111da:	4b24      	ldr	r3, [pc, #144]	; (801126c <USBD_SetConfig+0x148>)
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	461a      	mov	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d02a      	beq.n	801123e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	4619      	mov	r1, r3
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f7ff f92a 	bl	801044a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80111f6:	4b1d      	ldr	r3, [pc, #116]	; (801126c <USBD_SetConfig+0x148>)
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	461a      	mov	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011200:	4b1a      	ldr	r3, [pc, #104]	; (801126c <USBD_SetConfig+0x148>)
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	4619      	mov	r1, r3
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f7ff f903 	bl	8010412 <USBD_SetClassConfig>
 801120c:	4603      	mov	r3, r0
 801120e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011210:	7bfb      	ldrb	r3, [r7, #15]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d00f      	beq.n	8011236 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011216:	6839      	ldr	r1, [r7, #0]
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f000 f903 	bl	8011424 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	b2db      	uxtb	r3, r3
 8011224:	4619      	mov	r1, r3
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f7ff f90f 	bl	801044a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2202      	movs	r2, #2
 8011230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011234:	e014      	b.n	8011260 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f000 f9bf 	bl	80115ba <USBD_CtlSendStatus>
      break;
 801123c:	e010      	b.n	8011260 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 f9bb 	bl	80115ba <USBD_CtlSendStatus>
      break;
 8011244:	e00c      	b.n	8011260 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 f8eb 	bl	8011424 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801124e:	4b07      	ldr	r3, [pc, #28]	; (801126c <USBD_SetConfig+0x148>)
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	4619      	mov	r1, r3
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff f8f8 	bl	801044a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801125a:	2303      	movs	r3, #3
 801125c:	73fb      	strb	r3, [r7, #15]
      break;
 801125e:	bf00      	nop
  }

  return ret;
 8011260:	7bfb      	ldrb	r3, [r7, #15]
}
 8011262:	4618      	mov	r0, r3
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	24000270 	.word	0x24000270

08011270 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	88db      	ldrh	r3, [r3, #6]
 801127e:	2b01      	cmp	r3, #1
 8011280:	d004      	beq.n	801128c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011282:	6839      	ldr	r1, [r7, #0]
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f000 f8cd 	bl	8011424 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801128a:	e023      	b.n	80112d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011292:	b2db      	uxtb	r3, r3
 8011294:	2b02      	cmp	r3, #2
 8011296:	dc02      	bgt.n	801129e <USBD_GetConfig+0x2e>
 8011298:	2b00      	cmp	r3, #0
 801129a:	dc03      	bgt.n	80112a4 <USBD_GetConfig+0x34>
 801129c:	e015      	b.n	80112ca <USBD_GetConfig+0x5a>
 801129e:	2b03      	cmp	r3, #3
 80112a0:	d00b      	beq.n	80112ba <USBD_GetConfig+0x4a>
 80112a2:	e012      	b.n	80112ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2200      	movs	r2, #0
 80112a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	3308      	adds	r3, #8
 80112ae:	2201      	movs	r2, #1
 80112b0:	4619      	mov	r1, r3
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 f927 	bl	8011506 <USBD_CtlSendData>
        break;
 80112b8:	e00c      	b.n	80112d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	3304      	adds	r3, #4
 80112be:	2201      	movs	r2, #1
 80112c0:	4619      	mov	r1, r3
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 f91f 	bl	8011506 <USBD_CtlSendData>
        break;
 80112c8:	e004      	b.n	80112d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80112ca:	6839      	ldr	r1, [r7, #0]
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f000 f8a9 	bl	8011424 <USBD_CtlError>
        break;
 80112d2:	bf00      	nop
}
 80112d4:	bf00      	nop
 80112d6:	3708      	adds	r7, #8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}

080112dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112ec:	b2db      	uxtb	r3, r3
 80112ee:	3b01      	subs	r3, #1
 80112f0:	2b02      	cmp	r3, #2
 80112f2:	d81e      	bhi.n	8011332 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	88db      	ldrh	r3, [r3, #6]
 80112f8:	2b02      	cmp	r3, #2
 80112fa:	d004      	beq.n	8011306 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80112fc:	6839      	ldr	r1, [r7, #0]
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f000 f890 	bl	8011424 <USBD_CtlError>
        break;
 8011304:	e01a      	b.n	801133c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2201      	movs	r2, #1
 801130a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011312:	2b00      	cmp	r3, #0
 8011314:	d005      	beq.n	8011322 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	f043 0202 	orr.w	r2, r3, #2
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	330c      	adds	r3, #12
 8011326:	2202      	movs	r2, #2
 8011328:	4619      	mov	r1, r3
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 f8eb 	bl	8011506 <USBD_CtlSendData>
      break;
 8011330:	e004      	b.n	801133c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011332:	6839      	ldr	r1, [r7, #0]
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f000 f875 	bl	8011424 <USBD_CtlError>
      break;
 801133a:	bf00      	nop
  }
}
 801133c:	bf00      	nop
 801133e:	3708      	adds	r7, #8
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	885b      	ldrh	r3, [r3, #2]
 8011352:	2b01      	cmp	r3, #1
 8011354:	d106      	bne.n	8011364 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2201      	movs	r2, #1
 801135a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f000 f92b 	bl	80115ba <USBD_CtlSendStatus>
  }
}
 8011364:	bf00      	nop
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801137c:	b2db      	uxtb	r3, r3
 801137e:	3b01      	subs	r3, #1
 8011380:	2b02      	cmp	r3, #2
 8011382:	d80b      	bhi.n	801139c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	885b      	ldrh	r3, [r3, #2]
 8011388:	2b01      	cmp	r3, #1
 801138a:	d10c      	bne.n	80113a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f000 f910 	bl	80115ba <USBD_CtlSendStatus>
      }
      break;
 801139a:	e004      	b.n	80113a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801139c:	6839      	ldr	r1, [r7, #0]
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f000 f840 	bl	8011424 <USBD_CtlError>
      break;
 80113a4:	e000      	b.n	80113a8 <USBD_ClrFeature+0x3c>
      break;
 80113a6:	bf00      	nop
  }
}
 80113a8:	bf00      	nop
 80113aa:	3708      	adds	r7, #8
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	781a      	ldrb	r2, [r3, #0]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	3301      	adds	r3, #1
 80113ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	781a      	ldrb	r2, [r3, #0]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	3301      	adds	r3, #1
 80113d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80113da:	68f8      	ldr	r0, [r7, #12]
 80113dc:	f7ff fabc 	bl	8010958 <SWAPBYTE>
 80113e0:	4603      	mov	r3, r0
 80113e2:	461a      	mov	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	3301      	adds	r3, #1
 80113ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	3301      	adds	r3, #1
 80113f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80113f4:	68f8      	ldr	r0, [r7, #12]
 80113f6:	f7ff faaf 	bl	8010958 <SWAPBYTE>
 80113fa:	4603      	mov	r3, r0
 80113fc:	461a      	mov	r2, r3
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	3301      	adds	r3, #1
 8011406:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	3301      	adds	r3, #1
 801140c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801140e:	68f8      	ldr	r0, [r7, #12]
 8011410:	f7ff faa2 	bl	8010958 <SWAPBYTE>
 8011414:	4603      	mov	r3, r0
 8011416:	461a      	mov	r2, r3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	80da      	strh	r2, [r3, #6]
}
 801141c:	bf00      	nop
 801141e:	3710      	adds	r7, #16
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b082      	sub	sp, #8
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801142e:	2180      	movs	r1, #128	; 0x80
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f000 fcb5 	bl	8011da0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011436:	2100      	movs	r1, #0
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 fcb1 	bl	8011da0 <USBD_LL_StallEP>
}
 801143e:	bf00      	nop
 8011440:	3708      	adds	r7, #8
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011446:	b580      	push	{r7, lr}
 8011448:	b086      	sub	sp, #24
 801144a:	af00      	add	r7, sp, #0
 801144c:	60f8      	str	r0, [r7, #12]
 801144e:	60b9      	str	r1, [r7, #8]
 8011450:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011452:	2300      	movs	r3, #0
 8011454:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d036      	beq.n	80114ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011460:	6938      	ldr	r0, [r7, #16]
 8011462:	f000 f836 	bl	80114d2 <USBD_GetLen>
 8011466:	4603      	mov	r3, r0
 8011468:	3301      	adds	r3, #1
 801146a:	b29b      	uxth	r3, r3
 801146c:	005b      	lsls	r3, r3, #1
 801146e:	b29a      	uxth	r2, r3
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011474:	7dfb      	ldrb	r3, [r7, #23]
 8011476:	68ba      	ldr	r2, [r7, #8]
 8011478:	4413      	add	r3, r2
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	7812      	ldrb	r2, [r2, #0]
 801147e:	701a      	strb	r2, [r3, #0]
  idx++;
 8011480:	7dfb      	ldrb	r3, [r7, #23]
 8011482:	3301      	adds	r3, #1
 8011484:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011486:	7dfb      	ldrb	r3, [r7, #23]
 8011488:	68ba      	ldr	r2, [r7, #8]
 801148a:	4413      	add	r3, r2
 801148c:	2203      	movs	r2, #3
 801148e:	701a      	strb	r2, [r3, #0]
  idx++;
 8011490:	7dfb      	ldrb	r3, [r7, #23]
 8011492:	3301      	adds	r3, #1
 8011494:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011496:	e013      	b.n	80114c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011498:	7dfb      	ldrb	r3, [r7, #23]
 801149a:	68ba      	ldr	r2, [r7, #8]
 801149c:	4413      	add	r3, r2
 801149e:	693a      	ldr	r2, [r7, #16]
 80114a0:	7812      	ldrb	r2, [r2, #0]
 80114a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	3301      	adds	r3, #1
 80114a8:	613b      	str	r3, [r7, #16]
    idx++;
 80114aa:	7dfb      	ldrb	r3, [r7, #23]
 80114ac:	3301      	adds	r3, #1
 80114ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80114b0:	7dfb      	ldrb	r3, [r7, #23]
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	4413      	add	r3, r2
 80114b6:	2200      	movs	r2, #0
 80114b8:	701a      	strb	r2, [r3, #0]
    idx++;
 80114ba:	7dfb      	ldrb	r3, [r7, #23]
 80114bc:	3301      	adds	r3, #1
 80114be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d1e7      	bne.n	8011498 <USBD_GetString+0x52>
 80114c8:	e000      	b.n	80114cc <USBD_GetString+0x86>
    return;
 80114ca:	bf00      	nop
  }
}
 80114cc:	3718      	adds	r7, #24
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}

080114d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80114d2:	b480      	push	{r7}
 80114d4:	b085      	sub	sp, #20
 80114d6:	af00      	add	r7, sp, #0
 80114d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80114da:	2300      	movs	r3, #0
 80114dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80114e2:	e005      	b.n	80114f0 <USBD_GetLen+0x1e>
  {
    len++;
 80114e4:	7bfb      	ldrb	r3, [r7, #15]
 80114e6:	3301      	adds	r3, #1
 80114e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	3301      	adds	r3, #1
 80114ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d1f5      	bne.n	80114e4 <USBD_GetLen+0x12>
  }

  return len;
 80114f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3714      	adds	r7, #20
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr

08011506 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011506:	b580      	push	{r7, lr}
 8011508:	b084      	sub	sp, #16
 801150a:	af00      	add	r7, sp, #0
 801150c:	60f8      	str	r0, [r7, #12]
 801150e:	60b9      	str	r1, [r7, #8]
 8011510:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2202      	movs	r2, #2
 8011516:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	68ba      	ldr	r2, [r7, #8]
 801152a:	2100      	movs	r1, #0
 801152c:	68f8      	ldr	r0, [r7, #12]
 801152e:	f000 fcc0 	bl	8011eb2 <USBD_LL_Transmit>

  return USBD_OK;
 8011532:	2300      	movs	r3, #0
}
 8011534:	4618      	mov	r0, r3
 8011536:	3710      	adds	r7, #16
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b084      	sub	sp, #16
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	68ba      	ldr	r2, [r7, #8]
 801154c:	2100      	movs	r1, #0
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f000 fcaf 	bl	8011eb2 <USBD_LL_Transmit>

  return USBD_OK;
 8011554:	2300      	movs	r3, #0
}
 8011556:	4618      	mov	r0, r3
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}

0801155e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801155e:	b580      	push	{r7, lr}
 8011560:	b084      	sub	sp, #16
 8011562:	af00      	add	r7, sp, #0
 8011564:	60f8      	str	r0, [r7, #12]
 8011566:	60b9      	str	r1, [r7, #8]
 8011568:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2203      	movs	r2, #3
 801156e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	687a      	ldr	r2, [r7, #4]
 801157e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	68ba      	ldr	r2, [r7, #8]
 8011586:	2100      	movs	r1, #0
 8011588:	68f8      	ldr	r0, [r7, #12]
 801158a:	f000 fcb3 	bl	8011ef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801158e:	2300      	movs	r3, #0
}
 8011590:	4618      	mov	r0, r3
 8011592:	3710      	adds	r7, #16
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}

08011598 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b084      	sub	sp, #16
 801159c:	af00      	add	r7, sp, #0
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	60b9      	str	r1, [r7, #8]
 80115a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	68ba      	ldr	r2, [r7, #8]
 80115a8:	2100      	movs	r1, #0
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	f000 fca2 	bl	8011ef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80115b0:	2300      	movs	r3, #0
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}

080115ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80115ba:	b580      	push	{r7, lr}
 80115bc:	b082      	sub	sp, #8
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2204      	movs	r2, #4
 80115c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80115ca:	2300      	movs	r3, #0
 80115cc:	2200      	movs	r2, #0
 80115ce:	2100      	movs	r1, #0
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f000 fc6e 	bl	8011eb2 <USBD_LL_Transmit>

  return USBD_OK;
 80115d6:	2300      	movs	r3, #0
}
 80115d8:	4618      	mov	r0, r3
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2205      	movs	r2, #5
 80115ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80115f0:	2300      	movs	r3, #0
 80115f2:	2200      	movs	r2, #0
 80115f4:	2100      	movs	r1, #0
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f000 fc7c 	bl	8011ef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80115fc:	2300      	movs	r3, #0
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3708      	adds	r7, #8
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
	...

08011608 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801160c:	2201      	movs	r2, #1
 801160e:	4913      	ldr	r1, [pc, #76]	; (801165c <MX_USB_DEVICE_Init+0x54>)
 8011610:	4813      	ldr	r0, [pc, #76]	; (8011660 <MX_USB_DEVICE_Init+0x58>)
 8011612:	f7fe fe75 	bl	8010300 <USBD_Init>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d001      	beq.n	8011620 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801161c:	f7f0 f974 	bl	8001908 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8011620:	4910      	ldr	r1, [pc, #64]	; (8011664 <MX_USB_DEVICE_Init+0x5c>)
 8011622:	480f      	ldr	r0, [pc, #60]	; (8011660 <MX_USB_DEVICE_Init+0x58>)
 8011624:	f7fe feaa 	bl	801037c <USBD_RegisterClass>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d001      	beq.n	8011632 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801162e:	f7f0 f96b 	bl	8001908 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8011632:	490d      	ldr	r1, [pc, #52]	; (8011668 <MX_USB_DEVICE_Init+0x60>)
 8011634:	480a      	ldr	r0, [pc, #40]	; (8011660 <MX_USB_DEVICE_Init+0x58>)
 8011636:	f7fe fded 	bl	8010214 <USBD_CDC_RegisterInterface>
 801163a:	4603      	mov	r3, r0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d001      	beq.n	8011644 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011640:	f7f0 f962 	bl	8001908 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8011644:	4806      	ldr	r0, [pc, #24]	; (8011660 <MX_USB_DEVICE_Init+0x58>)
 8011646:	f7fe fecd 	bl	80103e4 <USBD_Start>
 801164a:	4603      	mov	r3, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	d001      	beq.n	8011654 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011650:	f7f0 f95a 	bl	8001908 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011654:	f7f8 f850 	bl	80096f8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011658:	bf00      	nop
 801165a:	bd80      	pop	{r7, pc}
 801165c:	2400013c 	.word	0x2400013c
 8011660:	24000dd8 	.word	0x24000dd8
 8011664:	24000024 	.word	0x24000024
 8011668:	24000128 	.word	0x24000128

0801166c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8011670:	2200      	movs	r2, #0
 8011672:	4905      	ldr	r1, [pc, #20]	; (8011688 <CDC_Init_HS+0x1c>)
 8011674:	4805      	ldr	r0, [pc, #20]	; (801168c <CDC_Init_HS+0x20>)
 8011676:	f7fe fde2 	bl	801023e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801167a:	4905      	ldr	r1, [pc, #20]	; (8011690 <CDC_Init_HS+0x24>)
 801167c:	4803      	ldr	r0, [pc, #12]	; (801168c <CDC_Init_HS+0x20>)
 801167e:	f7fe fdfc 	bl	801027a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011682:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8011684:	4618      	mov	r0, r3
 8011686:	bd80      	pop	{r7, pc}
 8011688:	240018a8 	.word	0x240018a8
 801168c:	24000dd8 	.word	0x24000dd8
 8011690:	240010a8 	.word	0x240010a8

08011694 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8011694:	b480      	push	{r7}
 8011696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8011698:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801169a:	4618      	mov	r0, r3
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr

080116a4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80116a4:	b480      	push	{r7}
 80116a6:	b083      	sub	sp, #12
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	4603      	mov	r3, r0
 80116ac:	6039      	str	r1, [r7, #0]
 80116ae:	71fb      	strb	r3, [r7, #7]
 80116b0:	4613      	mov	r3, r2
 80116b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80116b4:	79fb      	ldrb	r3, [r7, #7]
 80116b6:	2b23      	cmp	r3, #35	; 0x23
 80116b8:	d84a      	bhi.n	8011750 <CDC_Control_HS+0xac>
 80116ba:	a201      	add	r2, pc, #4	; (adr r2, 80116c0 <CDC_Control_HS+0x1c>)
 80116bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116c0:	08011751 	.word	0x08011751
 80116c4:	08011751 	.word	0x08011751
 80116c8:	08011751 	.word	0x08011751
 80116cc:	08011751 	.word	0x08011751
 80116d0:	08011751 	.word	0x08011751
 80116d4:	08011751 	.word	0x08011751
 80116d8:	08011751 	.word	0x08011751
 80116dc:	08011751 	.word	0x08011751
 80116e0:	08011751 	.word	0x08011751
 80116e4:	08011751 	.word	0x08011751
 80116e8:	08011751 	.word	0x08011751
 80116ec:	08011751 	.word	0x08011751
 80116f0:	08011751 	.word	0x08011751
 80116f4:	08011751 	.word	0x08011751
 80116f8:	08011751 	.word	0x08011751
 80116fc:	08011751 	.word	0x08011751
 8011700:	08011751 	.word	0x08011751
 8011704:	08011751 	.word	0x08011751
 8011708:	08011751 	.word	0x08011751
 801170c:	08011751 	.word	0x08011751
 8011710:	08011751 	.word	0x08011751
 8011714:	08011751 	.word	0x08011751
 8011718:	08011751 	.word	0x08011751
 801171c:	08011751 	.word	0x08011751
 8011720:	08011751 	.word	0x08011751
 8011724:	08011751 	.word	0x08011751
 8011728:	08011751 	.word	0x08011751
 801172c:	08011751 	.word	0x08011751
 8011730:	08011751 	.word	0x08011751
 8011734:	08011751 	.word	0x08011751
 8011738:	08011751 	.word	0x08011751
 801173c:	08011751 	.word	0x08011751
 8011740:	08011751 	.word	0x08011751
 8011744:	08011751 	.word	0x08011751
 8011748:	08011751 	.word	0x08011751
 801174c:	08011751 	.word	0x08011751
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011750:	bf00      	nop
  }

  return (USBD_OK);
 8011752:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8011754:	4618      	mov	r0, r3
 8011756:	370c      	adds	r7, #12
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801176a:	6879      	ldr	r1, [r7, #4]
 801176c:	4805      	ldr	r0, [pc, #20]	; (8011784 <CDC_Receive_HS+0x24>)
 801176e:	f7fe fd84 	bl	801027a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8011772:	4804      	ldr	r0, [pc, #16]	; (8011784 <CDC_Receive_HS+0x24>)
 8011774:	f7fe fd9a 	bl	80102ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011778:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801177a:	4618      	mov	r0, r3
 801177c:	3708      	adds	r7, #8
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	24000dd8 	.word	0x24000dd8

08011788 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011788:	b480      	push	{r7}
 801178a:	b087      	sub	sp, #28
 801178c:	af00      	add	r7, sp, #0
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	4613      	mov	r3, r2
 8011794:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011796:	2300      	movs	r3, #0
 8011798:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801179a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	371c      	adds	r7, #28
 80117a2:	46bd      	mov	sp, r7
 80117a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a8:	4770      	bx	lr
	...

080117ac <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	4603      	mov	r3, r0
 80117b4:	6039      	str	r1, [r7, #0]
 80117b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	2212      	movs	r2, #18
 80117bc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80117be:	4b03      	ldr	r3, [pc, #12]	; (80117cc <USBD_HS_DeviceDescriptor+0x20>)
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr
 80117cc:	24000158 	.word	0x24000158

080117d0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b083      	sub	sp, #12
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	4603      	mov	r3, r0
 80117d8:	6039      	str	r1, [r7, #0]
 80117da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	2204      	movs	r2, #4
 80117e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80117e2:	4b03      	ldr	r3, [pc, #12]	; (80117f0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	370c      	adds	r7, #12
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr
 80117f0:	2400016c 	.word	0x2400016c

080117f4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	4603      	mov	r3, r0
 80117fc:	6039      	str	r1, [r7, #0]
 80117fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011800:	79fb      	ldrb	r3, [r7, #7]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d105      	bne.n	8011812 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8011806:	683a      	ldr	r2, [r7, #0]
 8011808:	4907      	ldr	r1, [pc, #28]	; (8011828 <USBD_HS_ProductStrDescriptor+0x34>)
 801180a:	4808      	ldr	r0, [pc, #32]	; (801182c <USBD_HS_ProductStrDescriptor+0x38>)
 801180c:	f7ff fe1b 	bl	8011446 <USBD_GetString>
 8011810:	e004      	b.n	801181c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8011812:	683a      	ldr	r2, [r7, #0]
 8011814:	4904      	ldr	r1, [pc, #16]	; (8011828 <USBD_HS_ProductStrDescriptor+0x34>)
 8011816:	4805      	ldr	r0, [pc, #20]	; (801182c <USBD_HS_ProductStrDescriptor+0x38>)
 8011818:	f7ff fe15 	bl	8011446 <USBD_GetString>
  }
  return USBD_StrDesc;
 801181c:	4b02      	ldr	r3, [pc, #8]	; (8011828 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801181e:	4618      	mov	r0, r3
 8011820:	3708      	adds	r7, #8
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	240020a8 	.word	0x240020a8
 801182c:	08013088 	.word	0x08013088

08011830 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	4603      	mov	r3, r0
 8011838:	6039      	str	r1, [r7, #0]
 801183a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801183c:	683a      	ldr	r2, [r7, #0]
 801183e:	4904      	ldr	r1, [pc, #16]	; (8011850 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8011840:	4804      	ldr	r0, [pc, #16]	; (8011854 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8011842:	f7ff fe00 	bl	8011446 <USBD_GetString>
  return USBD_StrDesc;
 8011846:	4b02      	ldr	r3, [pc, #8]	; (8011850 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8011848:	4618      	mov	r0, r3
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	240020a8 	.word	0x240020a8
 8011854:	080130a0 	.word	0x080130a0

08011858 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	4603      	mov	r3, r0
 8011860:	6039      	str	r1, [r7, #0]
 8011862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	221a      	movs	r2, #26
 8011868:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801186a:	f000 f843 	bl	80118f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801186e:	4b02      	ldr	r3, [pc, #8]	; (8011878 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8011870:	4618      	mov	r0, r3
 8011872:	3708      	adds	r7, #8
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	24000170 	.word	0x24000170

0801187c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	4603      	mov	r3, r0
 8011884:	6039      	str	r1, [r7, #0]
 8011886:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011888:	79fb      	ldrb	r3, [r7, #7]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d105      	bne.n	801189a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801188e:	683a      	ldr	r2, [r7, #0]
 8011890:	4907      	ldr	r1, [pc, #28]	; (80118b0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8011892:	4808      	ldr	r0, [pc, #32]	; (80118b4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8011894:	f7ff fdd7 	bl	8011446 <USBD_GetString>
 8011898:	e004      	b.n	80118a4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	4904      	ldr	r1, [pc, #16]	; (80118b0 <USBD_HS_ConfigStrDescriptor+0x34>)
 801189e:	4805      	ldr	r0, [pc, #20]	; (80118b4 <USBD_HS_ConfigStrDescriptor+0x38>)
 80118a0:	f7ff fdd1 	bl	8011446 <USBD_GetString>
  }
  return USBD_StrDesc;
 80118a4:	4b02      	ldr	r3, [pc, #8]	; (80118b0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	240020a8 	.word	0x240020a8
 80118b4:	080130b4 	.word	0x080130b4

080118b8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	4603      	mov	r3, r0
 80118c0:	6039      	str	r1, [r7, #0]
 80118c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80118c4:	79fb      	ldrb	r3, [r7, #7]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d105      	bne.n	80118d6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80118ca:	683a      	ldr	r2, [r7, #0]
 80118cc:	4907      	ldr	r1, [pc, #28]	; (80118ec <USBD_HS_InterfaceStrDescriptor+0x34>)
 80118ce:	4808      	ldr	r0, [pc, #32]	; (80118f0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80118d0:	f7ff fdb9 	bl	8011446 <USBD_GetString>
 80118d4:	e004      	b.n	80118e0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80118d6:	683a      	ldr	r2, [r7, #0]
 80118d8:	4904      	ldr	r1, [pc, #16]	; (80118ec <USBD_HS_InterfaceStrDescriptor+0x34>)
 80118da:	4805      	ldr	r0, [pc, #20]	; (80118f0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80118dc:	f7ff fdb3 	bl	8011446 <USBD_GetString>
  }
  return USBD_StrDesc;
 80118e0:	4b02      	ldr	r3, [pc, #8]	; (80118ec <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3708      	adds	r7, #8
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}
 80118ea:	bf00      	nop
 80118ec:	240020a8 	.word	0x240020a8
 80118f0:	080130c0 	.word	0x080130c0

080118f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80118fa:	4b0f      	ldr	r3, [pc, #60]	; (8011938 <Get_SerialNum+0x44>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011900:	4b0e      	ldr	r3, [pc, #56]	; (801193c <Get_SerialNum+0x48>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011906:	4b0e      	ldr	r3, [pc, #56]	; (8011940 <Get_SerialNum+0x4c>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801190c:	68fa      	ldr	r2, [r7, #12]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4413      	add	r3, r2
 8011912:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d009      	beq.n	801192e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801191a:	2208      	movs	r2, #8
 801191c:	4909      	ldr	r1, [pc, #36]	; (8011944 <Get_SerialNum+0x50>)
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	f000 f814 	bl	801194c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011924:	2204      	movs	r2, #4
 8011926:	4908      	ldr	r1, [pc, #32]	; (8011948 <Get_SerialNum+0x54>)
 8011928:	68b8      	ldr	r0, [r7, #8]
 801192a:	f000 f80f 	bl	801194c <IntToUnicode>
  }
}
 801192e:	bf00      	nop
 8011930:	3710      	adds	r7, #16
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	1ff1e800 	.word	0x1ff1e800
 801193c:	1ff1e804 	.word	0x1ff1e804
 8011940:	1ff1e808 	.word	0x1ff1e808
 8011944:	24000172 	.word	0x24000172
 8011948:	24000182 	.word	0x24000182

0801194c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801194c:	b480      	push	{r7}
 801194e:	b087      	sub	sp, #28
 8011950:	af00      	add	r7, sp, #0
 8011952:	60f8      	str	r0, [r7, #12]
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	4613      	mov	r3, r2
 8011958:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801195a:	2300      	movs	r3, #0
 801195c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801195e:	2300      	movs	r3, #0
 8011960:	75fb      	strb	r3, [r7, #23]
 8011962:	e027      	b.n	80119b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	0f1b      	lsrs	r3, r3, #28
 8011968:	2b09      	cmp	r3, #9
 801196a:	d80b      	bhi.n	8011984 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	0f1b      	lsrs	r3, r3, #28
 8011970:	b2da      	uxtb	r2, r3
 8011972:	7dfb      	ldrb	r3, [r7, #23]
 8011974:	005b      	lsls	r3, r3, #1
 8011976:	4619      	mov	r1, r3
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	440b      	add	r3, r1
 801197c:	3230      	adds	r2, #48	; 0x30
 801197e:	b2d2      	uxtb	r2, r2
 8011980:	701a      	strb	r2, [r3, #0]
 8011982:	e00a      	b.n	801199a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	0f1b      	lsrs	r3, r3, #28
 8011988:	b2da      	uxtb	r2, r3
 801198a:	7dfb      	ldrb	r3, [r7, #23]
 801198c:	005b      	lsls	r3, r3, #1
 801198e:	4619      	mov	r1, r3
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	440b      	add	r3, r1
 8011994:	3237      	adds	r2, #55	; 0x37
 8011996:	b2d2      	uxtb	r2, r2
 8011998:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	011b      	lsls	r3, r3, #4
 801199e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80119a0:	7dfb      	ldrb	r3, [r7, #23]
 80119a2:	005b      	lsls	r3, r3, #1
 80119a4:	3301      	adds	r3, #1
 80119a6:	68ba      	ldr	r2, [r7, #8]
 80119a8:	4413      	add	r3, r2
 80119aa:	2200      	movs	r2, #0
 80119ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80119ae:	7dfb      	ldrb	r3, [r7, #23]
 80119b0:	3301      	adds	r3, #1
 80119b2:	75fb      	strb	r3, [r7, #23]
 80119b4:	7dfa      	ldrb	r2, [r7, #23]
 80119b6:	79fb      	ldrb	r3, [r7, #7]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d3d3      	bcc.n	8011964 <IntToUnicode+0x18>
  }
}
 80119bc:	bf00      	nop
 80119be:	bf00      	nop
 80119c0:	371c      	adds	r7, #28
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr
	...

080119cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b0b0      	sub	sp, #192	; 0xc0
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80119d4:	f107 030c 	add.w	r3, r7, #12
 80119d8:	22b4      	movs	r2, #180	; 0xb4
 80119da:	2100      	movs	r1, #0
 80119dc:	4618      	mov	r0, r3
 80119de:	f000 fb39 	bl	8012054 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	4a18      	ldr	r2, [pc, #96]	; (8011a48 <HAL_PCD_MspInit+0x7c>)
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d129      	bne.n	8011a40 <HAL_PCD_MspInit+0x74>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80119ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80119f0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80119f2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80119f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80119fa:	f107 030c 	add.w	r3, r7, #12
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7f8 fd7a 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8011a04:	4603      	mov	r3, r0
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d001      	beq.n	8011a0e <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 8011a0a:	f7ef ff7d 	bl	8001908 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011a0e:	f7f7 fe73 	bl	80096f8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8011a12:	4b0e      	ldr	r3, [pc, #56]	; (8011a4c <HAL_PCD_MspInit+0x80>)
 8011a14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011a18:	4a0c      	ldr	r2, [pc, #48]	; (8011a4c <HAL_PCD_MspInit+0x80>)
 8011a1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011a1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011a22:	4b0a      	ldr	r3, [pc, #40]	; (8011a4c <HAL_PCD_MspInit+0x80>)
 8011a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011a2c:	60bb      	str	r3, [r7, #8]
 8011a2e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8011a30:	2200      	movs	r2, #0
 8011a32:	2100      	movs	r1, #0
 8011a34:	204d      	movs	r0, #77	; 0x4d
 8011a36:	f7f3 faac 	bl	8004f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8011a3a:	204d      	movs	r0, #77	; 0x4d
 8011a3c:	f7f3 fac3 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8011a40:	bf00      	nop
 8011a42:	37c0      	adds	r7, #192	; 0xc0
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	40040000 	.word	0x40040000
 8011a4c:	58024400 	.word	0x58024400

08011a50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011a64:	4619      	mov	r1, r3
 8011a66:	4610      	mov	r0, r2
 8011a68:	f7fe fd07 	bl	801047a <USBD_LL_SetupStage>
}
 8011a6c:	bf00      	nop
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011a86:	78fa      	ldrb	r2, [r7, #3]
 8011a88:	6879      	ldr	r1, [r7, #4]
 8011a8a:	4613      	mov	r3, r2
 8011a8c:	00db      	lsls	r3, r3, #3
 8011a8e:	1a9b      	subs	r3, r3, r2
 8011a90:	009b      	lsls	r3, r3, #2
 8011a92:	440b      	add	r3, r1
 8011a94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011a98:	681a      	ldr	r2, [r3, #0]
 8011a9a:	78fb      	ldrb	r3, [r7, #3]
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	f7fe fd41 	bl	8010524 <USBD_LL_DataOutStage>
}
 8011aa2:	bf00      	nop
 8011aa4:	3708      	adds	r7, #8
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b082      	sub	sp, #8
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011abc:	78fa      	ldrb	r2, [r7, #3]
 8011abe:	6879      	ldr	r1, [r7, #4]
 8011ac0:	4613      	mov	r3, r2
 8011ac2:	00db      	lsls	r3, r3, #3
 8011ac4:	1a9b      	subs	r3, r3, r2
 8011ac6:	009b      	lsls	r3, r3, #2
 8011ac8:	440b      	add	r3, r1
 8011aca:	3348      	adds	r3, #72	; 0x48
 8011acc:	681a      	ldr	r2, [r3, #0]
 8011ace:	78fb      	ldrb	r3, [r7, #3]
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	f7fe fd8a 	bl	80105ea <USBD_LL_DataInStage>
}
 8011ad6:	bf00      	nop
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ade:	b580      	push	{r7, lr}
 8011ae0:	b082      	sub	sp, #8
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fe fe9e 	bl	801082e <USBD_LL_SOF>
}
 8011af2:	bf00      	nop
 8011af4:	3708      	adds	r7, #8
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}

08011afa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011afa:	b580      	push	{r7, lr}
 8011afc:	b084      	sub	sp, #16
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011b02:	2301      	movs	r3, #1
 8011b04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d102      	bne.n	8011b14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	73fb      	strb	r3, [r7, #15]
 8011b12:	e008      	b.n	8011b26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	2b02      	cmp	r3, #2
 8011b1a:	d102      	bne.n	8011b22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	73fb      	strb	r3, [r7, #15]
 8011b20:	e001      	b.n	8011b26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011b22:	f7ef fef1 	bl	8001908 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011b2c:	7bfa      	ldrb	r2, [r7, #15]
 8011b2e:	4611      	mov	r1, r2
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fe fe3e 	bl	80107b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7fe fdea 	bl	8010716 <USBD_LL_Reset>
}
 8011b42:	bf00      	nop
 8011b44:	3710      	adds	r7, #16
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
	...

08011b4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7fe fe39 	bl	80107d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	6812      	ldr	r2, [r2, #0]
 8011b6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011b72:	f043 0301 	orr.w	r3, r3, #1
 8011b76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6a1b      	ldr	r3, [r3, #32]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d005      	beq.n	8011b8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011b80:	4b04      	ldr	r3, [pc, #16]	; (8011b94 <HAL_PCD_SuspendCallback+0x48>)
 8011b82:	691b      	ldr	r3, [r3, #16]
 8011b84:	4a03      	ldr	r2, [pc, #12]	; (8011b94 <HAL_PCD_SuspendCallback+0x48>)
 8011b86:	f043 0306 	orr.w	r3, r3, #6
 8011b8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011b8c:	bf00      	nop
 8011b8e:	3708      	adds	r7, #8
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	e000ed00 	.word	0xe000ed00

08011b98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7fe fe29 	bl	80107fe <USBD_LL_Resume>
}
 8011bac:	bf00      	nop
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011bc6:	78fa      	ldrb	r2, [r7, #3]
 8011bc8:	4611      	mov	r1, r2
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fe fe77 	bl	80108be <USBD_LL_IsoOUTIncomplete>
}
 8011bd0:	bf00      	nop
 8011bd2:	3708      	adds	r7, #8
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	460b      	mov	r3, r1
 8011be2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011bea:	78fa      	ldrb	r2, [r7, #3]
 8011bec:	4611      	mov	r1, r2
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fe fe3f 	bl	8010872 <USBD_LL_IsoINIncomplete>
}
 8011bf4:	bf00      	nop
 8011bf6:	3708      	adds	r7, #8
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}

08011bfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fe fe7d 	bl	801090a <USBD_LL_DevConnected>
}
 8011c10:	bf00      	nop
 8011c12:	3708      	adds	r7, #8
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b082      	sub	sp, #8
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7fe fe7a 	bl	8010920 <USBD_LL_DevDisconnected>
}
 8011c2c:	bf00      	nop
 8011c2e:	3708      	adds	r7, #8
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	2b01      	cmp	r3, #1
 8011c42:	d143      	bne.n	8011ccc <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8011c44:	4a24      	ldr	r2, [pc, #144]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	4a22      	ldr	r2, [pc, #136]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011c54:	4b20      	ldr	r3, [pc, #128]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c56:	4a21      	ldr	r2, [pc, #132]	; (8011cdc <USBD_LL_Init+0xa8>)
 8011c58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8011c5a:	4b1f      	ldr	r3, [pc, #124]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c5c:	2209      	movs	r2, #9
 8011c5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8011c60:	4b1d      	ldr	r3, [pc, #116]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c62:	2202      	movs	r2, #2
 8011c64:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8011c66:	4b1c      	ldr	r3, [pc, #112]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c68:	2200      	movs	r2, #0
 8011c6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8011c6c:	4b1a      	ldr	r3, [pc, #104]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c6e:	2202      	movs	r2, #2
 8011c70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011c72:	4b19      	ldr	r3, [pc, #100]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c74:	2200      	movs	r2, #0
 8011c76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8011c78:	4b17      	ldr	r3, [pc, #92]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8011c7e:	4b16      	ldr	r3, [pc, #88]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c80:	2200      	movs	r2, #0
 8011c82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 8011c84:	4b14      	ldr	r3, [pc, #80]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c86:	2201      	movs	r2, #1
 8011c88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011c8a:	4b13      	ldr	r3, [pc, #76]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8011c90:	4b11      	ldr	r3, [pc, #68]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c92:	2200      	movs	r2, #0
 8011c94:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8011c96:	4b10      	ldr	r3, [pc, #64]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c98:	2200      	movs	r2, #0
 8011c9a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8011c9c:	480e      	ldr	r0, [pc, #56]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011c9e:	f7f6 fb16 	bl	80082ce <HAL_PCD_Init>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d001      	beq.n	8011cac <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 8011ca8:	f7ef fe2e 	bl	8001908 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8011cac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011cb0:	4809      	ldr	r0, [pc, #36]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011cb2:	f7f7 fca6 	bl	8009602 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8011cb6:	2280      	movs	r2, #128	; 0x80
 8011cb8:	2100      	movs	r1, #0
 8011cba:	4807      	ldr	r0, [pc, #28]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011cbc:	f7f7 fc5a 	bl	8009574 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8011cc0:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8011cc4:	2101      	movs	r1, #1
 8011cc6:	4804      	ldr	r0, [pc, #16]	; (8011cd8 <USBD_LL_Init+0xa4>)
 8011cc8:	f7f7 fc54 	bl	8009574 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011ccc:	2300      	movs	r3, #0
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3708      	adds	r7, #8
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	240022a8 	.word	0x240022a8
 8011cdc:	40040000 	.word	0x40040000

08011ce0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cec:	2300      	movs	r3, #0
 8011cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7f6 fc0d 	bl	8008516 <HAL_PCD_Start>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d00:	7bfb      	ldrb	r3, [r7, #15]
 8011d02:	4618      	mov	r0, r3
 8011d04:	f000 f942 	bl	8011f8c <USBD_Get_USB_Status>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3710      	adds	r7, #16
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}

08011d16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011d16:	b580      	push	{r7, lr}
 8011d18:	b084      	sub	sp, #16
 8011d1a:	af00      	add	r7, sp, #0
 8011d1c:	6078      	str	r0, [r7, #4]
 8011d1e:	4608      	mov	r0, r1
 8011d20:	4611      	mov	r1, r2
 8011d22:	461a      	mov	r2, r3
 8011d24:	4603      	mov	r3, r0
 8011d26:	70fb      	strb	r3, [r7, #3]
 8011d28:	460b      	mov	r3, r1
 8011d2a:	70bb      	strb	r3, [r7, #2]
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d30:	2300      	movs	r3, #0
 8011d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d34:	2300      	movs	r3, #0
 8011d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011d3e:	78bb      	ldrb	r3, [r7, #2]
 8011d40:	883a      	ldrh	r2, [r7, #0]
 8011d42:	78f9      	ldrb	r1, [r7, #3]
 8011d44:	f7f7 f81e 	bl	8008d84 <HAL_PCD_EP_Open>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d4c:	7bfb      	ldrb	r3, [r7, #15]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f000 f91c 	bl	8011f8c <USBD_Get_USB_Status>
 8011d54:	4603      	mov	r3, r0
 8011d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b084      	sub	sp, #16
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d72:	2300      	movs	r3, #0
 8011d74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d7c:	78fa      	ldrb	r2, [r7, #3]
 8011d7e:	4611      	mov	r1, r2
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7f7 f867 	bl	8008e54 <HAL_PCD_EP_Close>
 8011d86:	4603      	mov	r3, r0
 8011d88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d8a:	7bfb      	ldrb	r3, [r7, #15]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f000 f8fd 	bl	8011f8c <USBD_Get_USB_Status>
 8011d92:	4603      	mov	r3, r0
 8011d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3710      	adds	r7, #16
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b084      	sub	sp, #16
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	460b      	mov	r3, r1
 8011daa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dac:	2300      	movs	r3, #0
 8011dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011db0:	2300      	movs	r3, #0
 8011db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011dba:	78fa      	ldrb	r2, [r7, #3]
 8011dbc:	4611      	mov	r1, r2
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7f7 f93f 	bl	8009042 <HAL_PCD_EP_SetStall>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dc8:	7bfb      	ldrb	r3, [r7, #15]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f000 f8de 	bl	8011f8c <USBD_Get_USB_Status>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3710      	adds	r7, #16
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}

08011dde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011dde:	b580      	push	{r7, lr}
 8011de0:	b084      	sub	sp, #16
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
 8011de6:	460b      	mov	r3, r1
 8011de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dea:	2300      	movs	r3, #0
 8011dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dee:	2300      	movs	r3, #0
 8011df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011df8:	78fa      	ldrb	r2, [r7, #3]
 8011dfa:	4611      	mov	r1, r2
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7f7 f984 	bl	800910a <HAL_PCD_EP_ClrStall>
 8011e02:	4603      	mov	r3, r0
 8011e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e06:	7bfb      	ldrb	r3, [r7, #15]
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f000 f8bf 	bl	8011f8c <USBD_Get_USB_Status>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e14:	4618      	mov	r0, r3
 8011e16:	3710      	adds	r7, #16
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b085      	sub	sp, #20
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	460b      	mov	r3, r1
 8011e26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011e2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	da0b      	bge.n	8011e50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011e38:	78fb      	ldrb	r3, [r7, #3]
 8011e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e3e:	68f9      	ldr	r1, [r7, #12]
 8011e40:	4613      	mov	r3, r2
 8011e42:	00db      	lsls	r3, r3, #3
 8011e44:	1a9b      	subs	r3, r3, r2
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	440b      	add	r3, r1
 8011e4a:	333e      	adds	r3, #62	; 0x3e
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	e00b      	b.n	8011e68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011e50:	78fb      	ldrb	r3, [r7, #3]
 8011e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e56:	68f9      	ldr	r1, [r7, #12]
 8011e58:	4613      	mov	r3, r2
 8011e5a:	00db      	lsls	r3, r3, #3
 8011e5c:	1a9b      	subs	r3, r3, r2
 8011e5e:	009b      	lsls	r3, r3, #2
 8011e60:	440b      	add	r3, r1
 8011e62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011e66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3714      	adds	r7, #20
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr

08011e74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	460b      	mov	r3, r1
 8011e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e80:	2300      	movs	r3, #0
 8011e82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e84:	2300      	movs	r3, #0
 8011e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011e8e:	78fa      	ldrb	r2, [r7, #3]
 8011e90:	4611      	mov	r1, r2
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7f6 ff51 	bl	8008d3a <HAL_PCD_SetAddress>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e9c:	7bfb      	ldrb	r3, [r7, #15]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f000 f874 	bl	8011f8c <USBD_Get_USB_Status>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	3710      	adds	r7, #16
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}

08011eb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	b086      	sub	sp, #24
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	60f8      	str	r0, [r7, #12]
 8011eba:	607a      	str	r2, [r7, #4]
 8011ebc:	603b      	str	r3, [r7, #0]
 8011ebe:	460b      	mov	r3, r1
 8011ec0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ed0:	7af9      	ldrb	r1, [r7, #11]
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	687a      	ldr	r2, [r7, #4]
 8011ed6:	f7f7 f86a 	bl	8008fae <HAL_PCD_EP_Transmit>
 8011eda:	4603      	mov	r3, r0
 8011edc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ede:	7dfb      	ldrb	r3, [r7, #23]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f000 f853 	bl	8011f8c <USBD_Get_USB_Status>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011eea:	7dbb      	ldrb	r3, [r7, #22]
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3718      	adds	r7, #24
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b086      	sub	sp, #24
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	60f8      	str	r0, [r7, #12]
 8011efc:	607a      	str	r2, [r7, #4]
 8011efe:	603b      	str	r3, [r7, #0]
 8011f00:	460b      	mov	r3, r1
 8011f02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f04:	2300      	movs	r3, #0
 8011f06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011f12:	7af9      	ldrb	r1, [r7, #11]
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	687a      	ldr	r2, [r7, #4]
 8011f18:	f7f6 ffe6 	bl	8008ee8 <HAL_PCD_EP_Receive>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f20:	7dfb      	ldrb	r3, [r7, #23]
 8011f22:	4618      	mov	r0, r3
 8011f24:	f000 f832 	bl	8011f8c <USBD_Get_USB_Status>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011f2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3718      	adds	r7, #24
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}

08011f36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f36:	b580      	push	{r7, lr}
 8011f38:	b082      	sub	sp, #8
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	6078      	str	r0, [r7, #4]
 8011f3e:	460b      	mov	r3, r1
 8011f40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011f48:	78fa      	ldrb	r2, [r7, #3]
 8011f4a:	4611      	mov	r1, r2
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7f7 f816 	bl	8008f7e <HAL_PCD_EP_GetRxCount>
 8011f52:	4603      	mov	r3, r0
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3708      	adds	r7, #8
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}

08011f5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b083      	sub	sp, #12
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011f64:	4b03      	ldr	r3, [pc, #12]	; (8011f74 <USBD_static_malloc+0x18>)
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	370c      	adds	r7, #12
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop
 8011f74:	24000274 	.word	0x24000274

08011f78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]

}
 8011f80:	bf00      	nop
 8011f82:	370c      	adds	r7, #12
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr

08011f8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b085      	sub	sp, #20
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	4603      	mov	r3, r0
 8011f94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f96:	2300      	movs	r3, #0
 8011f98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011f9a:	79fb      	ldrb	r3, [r7, #7]
 8011f9c:	2b03      	cmp	r3, #3
 8011f9e:	d817      	bhi.n	8011fd0 <USBD_Get_USB_Status+0x44>
 8011fa0:	a201      	add	r2, pc, #4	; (adr r2, 8011fa8 <USBD_Get_USB_Status+0x1c>)
 8011fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fa6:	bf00      	nop
 8011fa8:	08011fb9 	.word	0x08011fb9
 8011fac:	08011fbf 	.word	0x08011fbf
 8011fb0:	08011fc5 	.word	0x08011fc5
 8011fb4:	08011fcb 	.word	0x08011fcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011fb8:	2300      	movs	r3, #0
 8011fba:	73fb      	strb	r3, [r7, #15]
    break;
 8011fbc:	e00b      	b.n	8011fd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011fbe:	2303      	movs	r3, #3
 8011fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8011fc2:	e008      	b.n	8011fd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8011fc8:	e005      	b.n	8011fd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011fca:	2303      	movs	r3, #3
 8011fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8011fce:	e002      	b.n	8011fd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011fd0:	2303      	movs	r3, #3
 8011fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8011fd4:	bf00      	nop
  }
  return usb_status;
 8011fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3714      	adds	r7, #20
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr

08011fe4 <__errno>:
 8011fe4:	4b01      	ldr	r3, [pc, #4]	; (8011fec <__errno+0x8>)
 8011fe6:	6818      	ldr	r0, [r3, #0]
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop
 8011fec:	2400018c 	.word	0x2400018c

08011ff0 <__libc_init_array>:
 8011ff0:	b570      	push	{r4, r5, r6, lr}
 8011ff2:	4d0d      	ldr	r5, [pc, #52]	; (8012028 <__libc_init_array+0x38>)
 8011ff4:	4c0d      	ldr	r4, [pc, #52]	; (801202c <__libc_init_array+0x3c>)
 8011ff6:	1b64      	subs	r4, r4, r5
 8011ff8:	10a4      	asrs	r4, r4, #2
 8011ffa:	2600      	movs	r6, #0
 8011ffc:	42a6      	cmp	r6, r4
 8011ffe:	d109      	bne.n	8012014 <__libc_init_array+0x24>
 8012000:	4d0b      	ldr	r5, [pc, #44]	; (8012030 <__libc_init_array+0x40>)
 8012002:	4c0c      	ldr	r4, [pc, #48]	; (8012034 <__libc_init_array+0x44>)
 8012004:	f000 ffe2 	bl	8012fcc <_init>
 8012008:	1b64      	subs	r4, r4, r5
 801200a:	10a4      	asrs	r4, r4, #2
 801200c:	2600      	movs	r6, #0
 801200e:	42a6      	cmp	r6, r4
 8012010:	d105      	bne.n	801201e <__libc_init_array+0x2e>
 8012012:	bd70      	pop	{r4, r5, r6, pc}
 8012014:	f855 3b04 	ldr.w	r3, [r5], #4
 8012018:	4798      	blx	r3
 801201a:	3601      	adds	r6, #1
 801201c:	e7ee      	b.n	8011ffc <__libc_init_array+0xc>
 801201e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012022:	4798      	blx	r3
 8012024:	3601      	adds	r6, #1
 8012026:	e7f2      	b.n	801200e <__libc_init_array+0x1e>
 8012028:	08013180 	.word	0x08013180
 801202c:	08013180 	.word	0x08013180
 8012030:	08013180 	.word	0x08013180
 8012034:	08013184 	.word	0x08013184

08012038 <memcpy>:
 8012038:	440a      	add	r2, r1
 801203a:	4291      	cmp	r1, r2
 801203c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012040:	d100      	bne.n	8012044 <memcpy+0xc>
 8012042:	4770      	bx	lr
 8012044:	b510      	push	{r4, lr}
 8012046:	f811 4b01 	ldrb.w	r4, [r1], #1
 801204a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801204e:	4291      	cmp	r1, r2
 8012050:	d1f9      	bne.n	8012046 <memcpy+0xe>
 8012052:	bd10      	pop	{r4, pc}

08012054 <memset>:
 8012054:	4402      	add	r2, r0
 8012056:	4603      	mov	r3, r0
 8012058:	4293      	cmp	r3, r2
 801205a:	d100      	bne.n	801205e <memset+0xa>
 801205c:	4770      	bx	lr
 801205e:	f803 1b01 	strb.w	r1, [r3], #1
 8012062:	e7f9      	b.n	8012058 <memset+0x4>

08012064 <iprintf>:
 8012064:	b40f      	push	{r0, r1, r2, r3}
 8012066:	4b0a      	ldr	r3, [pc, #40]	; (8012090 <iprintf+0x2c>)
 8012068:	b513      	push	{r0, r1, r4, lr}
 801206a:	681c      	ldr	r4, [r3, #0]
 801206c:	b124      	cbz	r4, 8012078 <iprintf+0x14>
 801206e:	69a3      	ldr	r3, [r4, #24]
 8012070:	b913      	cbnz	r3, 8012078 <iprintf+0x14>
 8012072:	4620      	mov	r0, r4
 8012074:	f000 f87c 	bl	8012170 <__sinit>
 8012078:	ab05      	add	r3, sp, #20
 801207a:	9a04      	ldr	r2, [sp, #16]
 801207c:	68a1      	ldr	r1, [r4, #8]
 801207e:	9301      	str	r3, [sp, #4]
 8012080:	4620      	mov	r0, r4
 8012082:	f000 f999 	bl	80123b8 <_vfiprintf_r>
 8012086:	b002      	add	sp, #8
 8012088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801208c:	b004      	add	sp, #16
 801208e:	4770      	bx	lr
 8012090:	2400018c 	.word	0x2400018c

08012094 <putchar>:
 8012094:	4b09      	ldr	r3, [pc, #36]	; (80120bc <putchar+0x28>)
 8012096:	b513      	push	{r0, r1, r4, lr}
 8012098:	681c      	ldr	r4, [r3, #0]
 801209a:	4601      	mov	r1, r0
 801209c:	b134      	cbz	r4, 80120ac <putchar+0x18>
 801209e:	69a3      	ldr	r3, [r4, #24]
 80120a0:	b923      	cbnz	r3, 80120ac <putchar+0x18>
 80120a2:	9001      	str	r0, [sp, #4]
 80120a4:	4620      	mov	r0, r4
 80120a6:	f000 f863 	bl	8012170 <__sinit>
 80120aa:	9901      	ldr	r1, [sp, #4]
 80120ac:	68a2      	ldr	r2, [r4, #8]
 80120ae:	4620      	mov	r0, r4
 80120b0:	b002      	add	sp, #8
 80120b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120b6:	f000 bc43 	b.w	8012940 <_putc_r>
 80120ba:	bf00      	nop
 80120bc:	2400018c 	.word	0x2400018c

080120c0 <std>:
 80120c0:	2300      	movs	r3, #0
 80120c2:	b510      	push	{r4, lr}
 80120c4:	4604      	mov	r4, r0
 80120c6:	e9c0 3300 	strd	r3, r3, [r0]
 80120ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80120ce:	6083      	str	r3, [r0, #8]
 80120d0:	8181      	strh	r1, [r0, #12]
 80120d2:	6643      	str	r3, [r0, #100]	; 0x64
 80120d4:	81c2      	strh	r2, [r0, #14]
 80120d6:	6183      	str	r3, [r0, #24]
 80120d8:	4619      	mov	r1, r3
 80120da:	2208      	movs	r2, #8
 80120dc:	305c      	adds	r0, #92	; 0x5c
 80120de:	f7ff ffb9 	bl	8012054 <memset>
 80120e2:	4b05      	ldr	r3, [pc, #20]	; (80120f8 <std+0x38>)
 80120e4:	6263      	str	r3, [r4, #36]	; 0x24
 80120e6:	4b05      	ldr	r3, [pc, #20]	; (80120fc <std+0x3c>)
 80120e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80120ea:	4b05      	ldr	r3, [pc, #20]	; (8012100 <std+0x40>)
 80120ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80120ee:	4b05      	ldr	r3, [pc, #20]	; (8012104 <std+0x44>)
 80120f0:	6224      	str	r4, [r4, #32]
 80120f2:	6323      	str	r3, [r4, #48]	; 0x30
 80120f4:	bd10      	pop	{r4, pc}
 80120f6:	bf00      	nop
 80120f8:	080129f1 	.word	0x080129f1
 80120fc:	08012a13 	.word	0x08012a13
 8012100:	08012a4b 	.word	0x08012a4b
 8012104:	08012a6f 	.word	0x08012a6f

08012108 <_cleanup_r>:
 8012108:	4901      	ldr	r1, [pc, #4]	; (8012110 <_cleanup_r+0x8>)
 801210a:	f000 b8af 	b.w	801226c <_fwalk_reent>
 801210e:	bf00      	nop
 8012110:	08012d49 	.word	0x08012d49

08012114 <__sfmoreglue>:
 8012114:	b570      	push	{r4, r5, r6, lr}
 8012116:	1e4a      	subs	r2, r1, #1
 8012118:	2568      	movs	r5, #104	; 0x68
 801211a:	4355      	muls	r5, r2
 801211c:	460e      	mov	r6, r1
 801211e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012122:	f000 f8c5 	bl	80122b0 <_malloc_r>
 8012126:	4604      	mov	r4, r0
 8012128:	b140      	cbz	r0, 801213c <__sfmoreglue+0x28>
 801212a:	2100      	movs	r1, #0
 801212c:	e9c0 1600 	strd	r1, r6, [r0]
 8012130:	300c      	adds	r0, #12
 8012132:	60a0      	str	r0, [r4, #8]
 8012134:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012138:	f7ff ff8c 	bl	8012054 <memset>
 801213c:	4620      	mov	r0, r4
 801213e:	bd70      	pop	{r4, r5, r6, pc}

08012140 <__sfp_lock_acquire>:
 8012140:	4801      	ldr	r0, [pc, #4]	; (8012148 <__sfp_lock_acquire+0x8>)
 8012142:	f000 b8b3 	b.w	80122ac <__retarget_lock_acquire_recursive>
 8012146:	bf00      	nop
 8012148:	240026b8 	.word	0x240026b8

0801214c <__sfp_lock_release>:
 801214c:	4801      	ldr	r0, [pc, #4]	; (8012154 <__sfp_lock_release+0x8>)
 801214e:	f000 b8ae 	b.w	80122ae <__retarget_lock_release_recursive>
 8012152:	bf00      	nop
 8012154:	240026b8 	.word	0x240026b8

08012158 <__sinit_lock_acquire>:
 8012158:	4801      	ldr	r0, [pc, #4]	; (8012160 <__sinit_lock_acquire+0x8>)
 801215a:	f000 b8a7 	b.w	80122ac <__retarget_lock_acquire_recursive>
 801215e:	bf00      	nop
 8012160:	240026b3 	.word	0x240026b3

08012164 <__sinit_lock_release>:
 8012164:	4801      	ldr	r0, [pc, #4]	; (801216c <__sinit_lock_release+0x8>)
 8012166:	f000 b8a2 	b.w	80122ae <__retarget_lock_release_recursive>
 801216a:	bf00      	nop
 801216c:	240026b3 	.word	0x240026b3

08012170 <__sinit>:
 8012170:	b510      	push	{r4, lr}
 8012172:	4604      	mov	r4, r0
 8012174:	f7ff fff0 	bl	8012158 <__sinit_lock_acquire>
 8012178:	69a3      	ldr	r3, [r4, #24]
 801217a:	b11b      	cbz	r3, 8012184 <__sinit+0x14>
 801217c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012180:	f7ff bff0 	b.w	8012164 <__sinit_lock_release>
 8012184:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012188:	6523      	str	r3, [r4, #80]	; 0x50
 801218a:	4b13      	ldr	r3, [pc, #76]	; (80121d8 <__sinit+0x68>)
 801218c:	4a13      	ldr	r2, [pc, #76]	; (80121dc <__sinit+0x6c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	62a2      	str	r2, [r4, #40]	; 0x28
 8012192:	42a3      	cmp	r3, r4
 8012194:	bf04      	itt	eq
 8012196:	2301      	moveq	r3, #1
 8012198:	61a3      	streq	r3, [r4, #24]
 801219a:	4620      	mov	r0, r4
 801219c:	f000 f820 	bl	80121e0 <__sfp>
 80121a0:	6060      	str	r0, [r4, #4]
 80121a2:	4620      	mov	r0, r4
 80121a4:	f000 f81c 	bl	80121e0 <__sfp>
 80121a8:	60a0      	str	r0, [r4, #8]
 80121aa:	4620      	mov	r0, r4
 80121ac:	f000 f818 	bl	80121e0 <__sfp>
 80121b0:	2200      	movs	r2, #0
 80121b2:	60e0      	str	r0, [r4, #12]
 80121b4:	2104      	movs	r1, #4
 80121b6:	6860      	ldr	r0, [r4, #4]
 80121b8:	f7ff ff82 	bl	80120c0 <std>
 80121bc:	68a0      	ldr	r0, [r4, #8]
 80121be:	2201      	movs	r2, #1
 80121c0:	2109      	movs	r1, #9
 80121c2:	f7ff ff7d 	bl	80120c0 <std>
 80121c6:	68e0      	ldr	r0, [r4, #12]
 80121c8:	2202      	movs	r2, #2
 80121ca:	2112      	movs	r1, #18
 80121cc:	f7ff ff78 	bl	80120c0 <std>
 80121d0:	2301      	movs	r3, #1
 80121d2:	61a3      	str	r3, [r4, #24]
 80121d4:	e7d2      	b.n	801217c <__sinit+0xc>
 80121d6:	bf00      	nop
 80121d8:	080130e8 	.word	0x080130e8
 80121dc:	08012109 	.word	0x08012109

080121e0 <__sfp>:
 80121e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121e2:	4607      	mov	r7, r0
 80121e4:	f7ff ffac 	bl	8012140 <__sfp_lock_acquire>
 80121e8:	4b1e      	ldr	r3, [pc, #120]	; (8012264 <__sfp+0x84>)
 80121ea:	681e      	ldr	r6, [r3, #0]
 80121ec:	69b3      	ldr	r3, [r6, #24]
 80121ee:	b913      	cbnz	r3, 80121f6 <__sfp+0x16>
 80121f0:	4630      	mov	r0, r6
 80121f2:	f7ff ffbd 	bl	8012170 <__sinit>
 80121f6:	3648      	adds	r6, #72	; 0x48
 80121f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80121fc:	3b01      	subs	r3, #1
 80121fe:	d503      	bpl.n	8012208 <__sfp+0x28>
 8012200:	6833      	ldr	r3, [r6, #0]
 8012202:	b30b      	cbz	r3, 8012248 <__sfp+0x68>
 8012204:	6836      	ldr	r6, [r6, #0]
 8012206:	e7f7      	b.n	80121f8 <__sfp+0x18>
 8012208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801220c:	b9d5      	cbnz	r5, 8012244 <__sfp+0x64>
 801220e:	4b16      	ldr	r3, [pc, #88]	; (8012268 <__sfp+0x88>)
 8012210:	60e3      	str	r3, [r4, #12]
 8012212:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012216:	6665      	str	r5, [r4, #100]	; 0x64
 8012218:	f000 f847 	bl	80122aa <__retarget_lock_init_recursive>
 801221c:	f7ff ff96 	bl	801214c <__sfp_lock_release>
 8012220:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012224:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012228:	6025      	str	r5, [r4, #0]
 801222a:	61a5      	str	r5, [r4, #24]
 801222c:	2208      	movs	r2, #8
 801222e:	4629      	mov	r1, r5
 8012230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012234:	f7ff ff0e 	bl	8012054 <memset>
 8012238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801223c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012240:	4620      	mov	r0, r4
 8012242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012244:	3468      	adds	r4, #104	; 0x68
 8012246:	e7d9      	b.n	80121fc <__sfp+0x1c>
 8012248:	2104      	movs	r1, #4
 801224a:	4638      	mov	r0, r7
 801224c:	f7ff ff62 	bl	8012114 <__sfmoreglue>
 8012250:	4604      	mov	r4, r0
 8012252:	6030      	str	r0, [r6, #0]
 8012254:	2800      	cmp	r0, #0
 8012256:	d1d5      	bne.n	8012204 <__sfp+0x24>
 8012258:	f7ff ff78 	bl	801214c <__sfp_lock_release>
 801225c:	230c      	movs	r3, #12
 801225e:	603b      	str	r3, [r7, #0]
 8012260:	e7ee      	b.n	8012240 <__sfp+0x60>
 8012262:	bf00      	nop
 8012264:	080130e8 	.word	0x080130e8
 8012268:	ffff0001 	.word	0xffff0001

0801226c <_fwalk_reent>:
 801226c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012270:	4606      	mov	r6, r0
 8012272:	4688      	mov	r8, r1
 8012274:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012278:	2700      	movs	r7, #0
 801227a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801227e:	f1b9 0901 	subs.w	r9, r9, #1
 8012282:	d505      	bpl.n	8012290 <_fwalk_reent+0x24>
 8012284:	6824      	ldr	r4, [r4, #0]
 8012286:	2c00      	cmp	r4, #0
 8012288:	d1f7      	bne.n	801227a <_fwalk_reent+0xe>
 801228a:	4638      	mov	r0, r7
 801228c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012290:	89ab      	ldrh	r3, [r5, #12]
 8012292:	2b01      	cmp	r3, #1
 8012294:	d907      	bls.n	80122a6 <_fwalk_reent+0x3a>
 8012296:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801229a:	3301      	adds	r3, #1
 801229c:	d003      	beq.n	80122a6 <_fwalk_reent+0x3a>
 801229e:	4629      	mov	r1, r5
 80122a0:	4630      	mov	r0, r6
 80122a2:	47c0      	blx	r8
 80122a4:	4307      	orrs	r7, r0
 80122a6:	3568      	adds	r5, #104	; 0x68
 80122a8:	e7e9      	b.n	801227e <_fwalk_reent+0x12>

080122aa <__retarget_lock_init_recursive>:
 80122aa:	4770      	bx	lr

080122ac <__retarget_lock_acquire_recursive>:
 80122ac:	4770      	bx	lr

080122ae <__retarget_lock_release_recursive>:
 80122ae:	4770      	bx	lr

080122b0 <_malloc_r>:
 80122b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122b2:	1ccd      	adds	r5, r1, #3
 80122b4:	f025 0503 	bic.w	r5, r5, #3
 80122b8:	3508      	adds	r5, #8
 80122ba:	2d0c      	cmp	r5, #12
 80122bc:	bf38      	it	cc
 80122be:	250c      	movcc	r5, #12
 80122c0:	2d00      	cmp	r5, #0
 80122c2:	4606      	mov	r6, r0
 80122c4:	db01      	blt.n	80122ca <_malloc_r+0x1a>
 80122c6:	42a9      	cmp	r1, r5
 80122c8:	d903      	bls.n	80122d2 <_malloc_r+0x22>
 80122ca:	230c      	movs	r3, #12
 80122cc:	6033      	str	r3, [r6, #0]
 80122ce:	2000      	movs	r0, #0
 80122d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122d2:	f000 fdeb 	bl	8012eac <__malloc_lock>
 80122d6:	4921      	ldr	r1, [pc, #132]	; (801235c <_malloc_r+0xac>)
 80122d8:	680a      	ldr	r2, [r1, #0]
 80122da:	4614      	mov	r4, r2
 80122dc:	b99c      	cbnz	r4, 8012306 <_malloc_r+0x56>
 80122de:	4f20      	ldr	r7, [pc, #128]	; (8012360 <_malloc_r+0xb0>)
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	b923      	cbnz	r3, 80122ee <_malloc_r+0x3e>
 80122e4:	4621      	mov	r1, r4
 80122e6:	4630      	mov	r0, r6
 80122e8:	f000 fb72 	bl	80129d0 <_sbrk_r>
 80122ec:	6038      	str	r0, [r7, #0]
 80122ee:	4629      	mov	r1, r5
 80122f0:	4630      	mov	r0, r6
 80122f2:	f000 fb6d 	bl	80129d0 <_sbrk_r>
 80122f6:	1c43      	adds	r3, r0, #1
 80122f8:	d123      	bne.n	8012342 <_malloc_r+0x92>
 80122fa:	230c      	movs	r3, #12
 80122fc:	6033      	str	r3, [r6, #0]
 80122fe:	4630      	mov	r0, r6
 8012300:	f000 fdda 	bl	8012eb8 <__malloc_unlock>
 8012304:	e7e3      	b.n	80122ce <_malloc_r+0x1e>
 8012306:	6823      	ldr	r3, [r4, #0]
 8012308:	1b5b      	subs	r3, r3, r5
 801230a:	d417      	bmi.n	801233c <_malloc_r+0x8c>
 801230c:	2b0b      	cmp	r3, #11
 801230e:	d903      	bls.n	8012318 <_malloc_r+0x68>
 8012310:	6023      	str	r3, [r4, #0]
 8012312:	441c      	add	r4, r3
 8012314:	6025      	str	r5, [r4, #0]
 8012316:	e004      	b.n	8012322 <_malloc_r+0x72>
 8012318:	6863      	ldr	r3, [r4, #4]
 801231a:	42a2      	cmp	r2, r4
 801231c:	bf0c      	ite	eq
 801231e:	600b      	streq	r3, [r1, #0]
 8012320:	6053      	strne	r3, [r2, #4]
 8012322:	4630      	mov	r0, r6
 8012324:	f000 fdc8 	bl	8012eb8 <__malloc_unlock>
 8012328:	f104 000b 	add.w	r0, r4, #11
 801232c:	1d23      	adds	r3, r4, #4
 801232e:	f020 0007 	bic.w	r0, r0, #7
 8012332:	1ac2      	subs	r2, r0, r3
 8012334:	d0cc      	beq.n	80122d0 <_malloc_r+0x20>
 8012336:	1a1b      	subs	r3, r3, r0
 8012338:	50a3      	str	r3, [r4, r2]
 801233a:	e7c9      	b.n	80122d0 <_malloc_r+0x20>
 801233c:	4622      	mov	r2, r4
 801233e:	6864      	ldr	r4, [r4, #4]
 8012340:	e7cc      	b.n	80122dc <_malloc_r+0x2c>
 8012342:	1cc4      	adds	r4, r0, #3
 8012344:	f024 0403 	bic.w	r4, r4, #3
 8012348:	42a0      	cmp	r0, r4
 801234a:	d0e3      	beq.n	8012314 <_malloc_r+0x64>
 801234c:	1a21      	subs	r1, r4, r0
 801234e:	4630      	mov	r0, r6
 8012350:	f000 fb3e 	bl	80129d0 <_sbrk_r>
 8012354:	3001      	adds	r0, #1
 8012356:	d1dd      	bne.n	8012314 <_malloc_r+0x64>
 8012358:	e7cf      	b.n	80122fa <_malloc_r+0x4a>
 801235a:	bf00      	nop
 801235c:	24000494 	.word	0x24000494
 8012360:	24000498 	.word	0x24000498

08012364 <__sfputc_r>:
 8012364:	6893      	ldr	r3, [r2, #8]
 8012366:	3b01      	subs	r3, #1
 8012368:	2b00      	cmp	r3, #0
 801236a:	b410      	push	{r4}
 801236c:	6093      	str	r3, [r2, #8]
 801236e:	da08      	bge.n	8012382 <__sfputc_r+0x1e>
 8012370:	6994      	ldr	r4, [r2, #24]
 8012372:	42a3      	cmp	r3, r4
 8012374:	db01      	blt.n	801237a <__sfputc_r+0x16>
 8012376:	290a      	cmp	r1, #10
 8012378:	d103      	bne.n	8012382 <__sfputc_r+0x1e>
 801237a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801237e:	f000 bb7b 	b.w	8012a78 <__swbuf_r>
 8012382:	6813      	ldr	r3, [r2, #0]
 8012384:	1c58      	adds	r0, r3, #1
 8012386:	6010      	str	r0, [r2, #0]
 8012388:	7019      	strb	r1, [r3, #0]
 801238a:	4608      	mov	r0, r1
 801238c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012390:	4770      	bx	lr

08012392 <__sfputs_r>:
 8012392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012394:	4606      	mov	r6, r0
 8012396:	460f      	mov	r7, r1
 8012398:	4614      	mov	r4, r2
 801239a:	18d5      	adds	r5, r2, r3
 801239c:	42ac      	cmp	r4, r5
 801239e:	d101      	bne.n	80123a4 <__sfputs_r+0x12>
 80123a0:	2000      	movs	r0, #0
 80123a2:	e007      	b.n	80123b4 <__sfputs_r+0x22>
 80123a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123a8:	463a      	mov	r2, r7
 80123aa:	4630      	mov	r0, r6
 80123ac:	f7ff ffda 	bl	8012364 <__sfputc_r>
 80123b0:	1c43      	adds	r3, r0, #1
 80123b2:	d1f3      	bne.n	801239c <__sfputs_r+0xa>
 80123b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080123b8 <_vfiprintf_r>:
 80123b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123bc:	460d      	mov	r5, r1
 80123be:	b09d      	sub	sp, #116	; 0x74
 80123c0:	4614      	mov	r4, r2
 80123c2:	4698      	mov	r8, r3
 80123c4:	4606      	mov	r6, r0
 80123c6:	b118      	cbz	r0, 80123d0 <_vfiprintf_r+0x18>
 80123c8:	6983      	ldr	r3, [r0, #24]
 80123ca:	b90b      	cbnz	r3, 80123d0 <_vfiprintf_r+0x18>
 80123cc:	f7ff fed0 	bl	8012170 <__sinit>
 80123d0:	4b89      	ldr	r3, [pc, #548]	; (80125f8 <_vfiprintf_r+0x240>)
 80123d2:	429d      	cmp	r5, r3
 80123d4:	d11b      	bne.n	801240e <_vfiprintf_r+0x56>
 80123d6:	6875      	ldr	r5, [r6, #4]
 80123d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123da:	07d9      	lsls	r1, r3, #31
 80123dc:	d405      	bmi.n	80123ea <_vfiprintf_r+0x32>
 80123de:	89ab      	ldrh	r3, [r5, #12]
 80123e0:	059a      	lsls	r2, r3, #22
 80123e2:	d402      	bmi.n	80123ea <_vfiprintf_r+0x32>
 80123e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123e6:	f7ff ff61 	bl	80122ac <__retarget_lock_acquire_recursive>
 80123ea:	89ab      	ldrh	r3, [r5, #12]
 80123ec:	071b      	lsls	r3, r3, #28
 80123ee:	d501      	bpl.n	80123f4 <_vfiprintf_r+0x3c>
 80123f0:	692b      	ldr	r3, [r5, #16]
 80123f2:	b9eb      	cbnz	r3, 8012430 <_vfiprintf_r+0x78>
 80123f4:	4629      	mov	r1, r5
 80123f6:	4630      	mov	r0, r6
 80123f8:	f000 fba2 	bl	8012b40 <__swsetup_r>
 80123fc:	b1c0      	cbz	r0, 8012430 <_vfiprintf_r+0x78>
 80123fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012400:	07dc      	lsls	r4, r3, #31
 8012402:	d50e      	bpl.n	8012422 <_vfiprintf_r+0x6a>
 8012404:	f04f 30ff 	mov.w	r0, #4294967295
 8012408:	b01d      	add	sp, #116	; 0x74
 801240a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801240e:	4b7b      	ldr	r3, [pc, #492]	; (80125fc <_vfiprintf_r+0x244>)
 8012410:	429d      	cmp	r5, r3
 8012412:	d101      	bne.n	8012418 <_vfiprintf_r+0x60>
 8012414:	68b5      	ldr	r5, [r6, #8]
 8012416:	e7df      	b.n	80123d8 <_vfiprintf_r+0x20>
 8012418:	4b79      	ldr	r3, [pc, #484]	; (8012600 <_vfiprintf_r+0x248>)
 801241a:	429d      	cmp	r5, r3
 801241c:	bf08      	it	eq
 801241e:	68f5      	ldreq	r5, [r6, #12]
 8012420:	e7da      	b.n	80123d8 <_vfiprintf_r+0x20>
 8012422:	89ab      	ldrh	r3, [r5, #12]
 8012424:	0598      	lsls	r0, r3, #22
 8012426:	d4ed      	bmi.n	8012404 <_vfiprintf_r+0x4c>
 8012428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801242a:	f7ff ff40 	bl	80122ae <__retarget_lock_release_recursive>
 801242e:	e7e9      	b.n	8012404 <_vfiprintf_r+0x4c>
 8012430:	2300      	movs	r3, #0
 8012432:	9309      	str	r3, [sp, #36]	; 0x24
 8012434:	2320      	movs	r3, #32
 8012436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801243a:	f8cd 800c 	str.w	r8, [sp, #12]
 801243e:	2330      	movs	r3, #48	; 0x30
 8012440:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012604 <_vfiprintf_r+0x24c>
 8012444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012448:	f04f 0901 	mov.w	r9, #1
 801244c:	4623      	mov	r3, r4
 801244e:	469a      	mov	sl, r3
 8012450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012454:	b10a      	cbz	r2, 801245a <_vfiprintf_r+0xa2>
 8012456:	2a25      	cmp	r2, #37	; 0x25
 8012458:	d1f9      	bne.n	801244e <_vfiprintf_r+0x96>
 801245a:	ebba 0b04 	subs.w	fp, sl, r4
 801245e:	d00b      	beq.n	8012478 <_vfiprintf_r+0xc0>
 8012460:	465b      	mov	r3, fp
 8012462:	4622      	mov	r2, r4
 8012464:	4629      	mov	r1, r5
 8012466:	4630      	mov	r0, r6
 8012468:	f7ff ff93 	bl	8012392 <__sfputs_r>
 801246c:	3001      	adds	r0, #1
 801246e:	f000 80aa 	beq.w	80125c6 <_vfiprintf_r+0x20e>
 8012472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012474:	445a      	add	r2, fp
 8012476:	9209      	str	r2, [sp, #36]	; 0x24
 8012478:	f89a 3000 	ldrb.w	r3, [sl]
 801247c:	2b00      	cmp	r3, #0
 801247e:	f000 80a2 	beq.w	80125c6 <_vfiprintf_r+0x20e>
 8012482:	2300      	movs	r3, #0
 8012484:	f04f 32ff 	mov.w	r2, #4294967295
 8012488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801248c:	f10a 0a01 	add.w	sl, sl, #1
 8012490:	9304      	str	r3, [sp, #16]
 8012492:	9307      	str	r3, [sp, #28]
 8012494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012498:	931a      	str	r3, [sp, #104]	; 0x68
 801249a:	4654      	mov	r4, sl
 801249c:	2205      	movs	r2, #5
 801249e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124a2:	4858      	ldr	r0, [pc, #352]	; (8012604 <_vfiprintf_r+0x24c>)
 80124a4:	f7ed ff3c 	bl	8000320 <memchr>
 80124a8:	9a04      	ldr	r2, [sp, #16]
 80124aa:	b9d8      	cbnz	r0, 80124e4 <_vfiprintf_r+0x12c>
 80124ac:	06d1      	lsls	r1, r2, #27
 80124ae:	bf44      	itt	mi
 80124b0:	2320      	movmi	r3, #32
 80124b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124b6:	0713      	lsls	r3, r2, #28
 80124b8:	bf44      	itt	mi
 80124ba:	232b      	movmi	r3, #43	; 0x2b
 80124bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124c0:	f89a 3000 	ldrb.w	r3, [sl]
 80124c4:	2b2a      	cmp	r3, #42	; 0x2a
 80124c6:	d015      	beq.n	80124f4 <_vfiprintf_r+0x13c>
 80124c8:	9a07      	ldr	r2, [sp, #28]
 80124ca:	4654      	mov	r4, sl
 80124cc:	2000      	movs	r0, #0
 80124ce:	f04f 0c0a 	mov.w	ip, #10
 80124d2:	4621      	mov	r1, r4
 80124d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124d8:	3b30      	subs	r3, #48	; 0x30
 80124da:	2b09      	cmp	r3, #9
 80124dc:	d94e      	bls.n	801257c <_vfiprintf_r+0x1c4>
 80124de:	b1b0      	cbz	r0, 801250e <_vfiprintf_r+0x156>
 80124e0:	9207      	str	r2, [sp, #28]
 80124e2:	e014      	b.n	801250e <_vfiprintf_r+0x156>
 80124e4:	eba0 0308 	sub.w	r3, r0, r8
 80124e8:	fa09 f303 	lsl.w	r3, r9, r3
 80124ec:	4313      	orrs	r3, r2
 80124ee:	9304      	str	r3, [sp, #16]
 80124f0:	46a2      	mov	sl, r4
 80124f2:	e7d2      	b.n	801249a <_vfiprintf_r+0xe2>
 80124f4:	9b03      	ldr	r3, [sp, #12]
 80124f6:	1d19      	adds	r1, r3, #4
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	9103      	str	r1, [sp, #12]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	bfbb      	ittet	lt
 8012500:	425b      	neglt	r3, r3
 8012502:	f042 0202 	orrlt.w	r2, r2, #2
 8012506:	9307      	strge	r3, [sp, #28]
 8012508:	9307      	strlt	r3, [sp, #28]
 801250a:	bfb8      	it	lt
 801250c:	9204      	strlt	r2, [sp, #16]
 801250e:	7823      	ldrb	r3, [r4, #0]
 8012510:	2b2e      	cmp	r3, #46	; 0x2e
 8012512:	d10c      	bne.n	801252e <_vfiprintf_r+0x176>
 8012514:	7863      	ldrb	r3, [r4, #1]
 8012516:	2b2a      	cmp	r3, #42	; 0x2a
 8012518:	d135      	bne.n	8012586 <_vfiprintf_r+0x1ce>
 801251a:	9b03      	ldr	r3, [sp, #12]
 801251c:	1d1a      	adds	r2, r3, #4
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	9203      	str	r2, [sp, #12]
 8012522:	2b00      	cmp	r3, #0
 8012524:	bfb8      	it	lt
 8012526:	f04f 33ff 	movlt.w	r3, #4294967295
 801252a:	3402      	adds	r4, #2
 801252c:	9305      	str	r3, [sp, #20]
 801252e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012614 <_vfiprintf_r+0x25c>
 8012532:	7821      	ldrb	r1, [r4, #0]
 8012534:	2203      	movs	r2, #3
 8012536:	4650      	mov	r0, sl
 8012538:	f7ed fef2 	bl	8000320 <memchr>
 801253c:	b140      	cbz	r0, 8012550 <_vfiprintf_r+0x198>
 801253e:	2340      	movs	r3, #64	; 0x40
 8012540:	eba0 000a 	sub.w	r0, r0, sl
 8012544:	fa03 f000 	lsl.w	r0, r3, r0
 8012548:	9b04      	ldr	r3, [sp, #16]
 801254a:	4303      	orrs	r3, r0
 801254c:	3401      	adds	r4, #1
 801254e:	9304      	str	r3, [sp, #16]
 8012550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012554:	482c      	ldr	r0, [pc, #176]	; (8012608 <_vfiprintf_r+0x250>)
 8012556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801255a:	2206      	movs	r2, #6
 801255c:	f7ed fee0 	bl	8000320 <memchr>
 8012560:	2800      	cmp	r0, #0
 8012562:	d03f      	beq.n	80125e4 <_vfiprintf_r+0x22c>
 8012564:	4b29      	ldr	r3, [pc, #164]	; (801260c <_vfiprintf_r+0x254>)
 8012566:	bb1b      	cbnz	r3, 80125b0 <_vfiprintf_r+0x1f8>
 8012568:	9b03      	ldr	r3, [sp, #12]
 801256a:	3307      	adds	r3, #7
 801256c:	f023 0307 	bic.w	r3, r3, #7
 8012570:	3308      	adds	r3, #8
 8012572:	9303      	str	r3, [sp, #12]
 8012574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012576:	443b      	add	r3, r7
 8012578:	9309      	str	r3, [sp, #36]	; 0x24
 801257a:	e767      	b.n	801244c <_vfiprintf_r+0x94>
 801257c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012580:	460c      	mov	r4, r1
 8012582:	2001      	movs	r0, #1
 8012584:	e7a5      	b.n	80124d2 <_vfiprintf_r+0x11a>
 8012586:	2300      	movs	r3, #0
 8012588:	3401      	adds	r4, #1
 801258a:	9305      	str	r3, [sp, #20]
 801258c:	4619      	mov	r1, r3
 801258e:	f04f 0c0a 	mov.w	ip, #10
 8012592:	4620      	mov	r0, r4
 8012594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012598:	3a30      	subs	r2, #48	; 0x30
 801259a:	2a09      	cmp	r2, #9
 801259c:	d903      	bls.n	80125a6 <_vfiprintf_r+0x1ee>
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d0c5      	beq.n	801252e <_vfiprintf_r+0x176>
 80125a2:	9105      	str	r1, [sp, #20]
 80125a4:	e7c3      	b.n	801252e <_vfiprintf_r+0x176>
 80125a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80125aa:	4604      	mov	r4, r0
 80125ac:	2301      	movs	r3, #1
 80125ae:	e7f0      	b.n	8012592 <_vfiprintf_r+0x1da>
 80125b0:	ab03      	add	r3, sp, #12
 80125b2:	9300      	str	r3, [sp, #0]
 80125b4:	462a      	mov	r2, r5
 80125b6:	4b16      	ldr	r3, [pc, #88]	; (8012610 <_vfiprintf_r+0x258>)
 80125b8:	a904      	add	r1, sp, #16
 80125ba:	4630      	mov	r0, r6
 80125bc:	f3af 8000 	nop.w
 80125c0:	4607      	mov	r7, r0
 80125c2:	1c78      	adds	r0, r7, #1
 80125c4:	d1d6      	bne.n	8012574 <_vfiprintf_r+0x1bc>
 80125c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125c8:	07d9      	lsls	r1, r3, #31
 80125ca:	d405      	bmi.n	80125d8 <_vfiprintf_r+0x220>
 80125cc:	89ab      	ldrh	r3, [r5, #12]
 80125ce:	059a      	lsls	r2, r3, #22
 80125d0:	d402      	bmi.n	80125d8 <_vfiprintf_r+0x220>
 80125d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125d4:	f7ff fe6b 	bl	80122ae <__retarget_lock_release_recursive>
 80125d8:	89ab      	ldrh	r3, [r5, #12]
 80125da:	065b      	lsls	r3, r3, #25
 80125dc:	f53f af12 	bmi.w	8012404 <_vfiprintf_r+0x4c>
 80125e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125e2:	e711      	b.n	8012408 <_vfiprintf_r+0x50>
 80125e4:	ab03      	add	r3, sp, #12
 80125e6:	9300      	str	r3, [sp, #0]
 80125e8:	462a      	mov	r2, r5
 80125ea:	4b09      	ldr	r3, [pc, #36]	; (8012610 <_vfiprintf_r+0x258>)
 80125ec:	a904      	add	r1, sp, #16
 80125ee:	4630      	mov	r0, r6
 80125f0:	f000 f880 	bl	80126f4 <_printf_i>
 80125f4:	e7e4      	b.n	80125c0 <_vfiprintf_r+0x208>
 80125f6:	bf00      	nop
 80125f8:	0801310c 	.word	0x0801310c
 80125fc:	0801312c 	.word	0x0801312c
 8012600:	080130ec 	.word	0x080130ec
 8012604:	0801314c 	.word	0x0801314c
 8012608:	08013156 	.word	0x08013156
 801260c:	00000000 	.word	0x00000000
 8012610:	08012393 	.word	0x08012393
 8012614:	08013152 	.word	0x08013152

08012618 <_printf_common>:
 8012618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801261c:	4616      	mov	r6, r2
 801261e:	4699      	mov	r9, r3
 8012620:	688a      	ldr	r2, [r1, #8]
 8012622:	690b      	ldr	r3, [r1, #16]
 8012624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012628:	4293      	cmp	r3, r2
 801262a:	bfb8      	it	lt
 801262c:	4613      	movlt	r3, r2
 801262e:	6033      	str	r3, [r6, #0]
 8012630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012634:	4607      	mov	r7, r0
 8012636:	460c      	mov	r4, r1
 8012638:	b10a      	cbz	r2, 801263e <_printf_common+0x26>
 801263a:	3301      	adds	r3, #1
 801263c:	6033      	str	r3, [r6, #0]
 801263e:	6823      	ldr	r3, [r4, #0]
 8012640:	0699      	lsls	r1, r3, #26
 8012642:	bf42      	ittt	mi
 8012644:	6833      	ldrmi	r3, [r6, #0]
 8012646:	3302      	addmi	r3, #2
 8012648:	6033      	strmi	r3, [r6, #0]
 801264a:	6825      	ldr	r5, [r4, #0]
 801264c:	f015 0506 	ands.w	r5, r5, #6
 8012650:	d106      	bne.n	8012660 <_printf_common+0x48>
 8012652:	f104 0a19 	add.w	sl, r4, #25
 8012656:	68e3      	ldr	r3, [r4, #12]
 8012658:	6832      	ldr	r2, [r6, #0]
 801265a:	1a9b      	subs	r3, r3, r2
 801265c:	42ab      	cmp	r3, r5
 801265e:	dc26      	bgt.n	80126ae <_printf_common+0x96>
 8012660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012664:	1e13      	subs	r3, r2, #0
 8012666:	6822      	ldr	r2, [r4, #0]
 8012668:	bf18      	it	ne
 801266a:	2301      	movne	r3, #1
 801266c:	0692      	lsls	r2, r2, #26
 801266e:	d42b      	bmi.n	80126c8 <_printf_common+0xb0>
 8012670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012674:	4649      	mov	r1, r9
 8012676:	4638      	mov	r0, r7
 8012678:	47c0      	blx	r8
 801267a:	3001      	adds	r0, #1
 801267c:	d01e      	beq.n	80126bc <_printf_common+0xa4>
 801267e:	6823      	ldr	r3, [r4, #0]
 8012680:	68e5      	ldr	r5, [r4, #12]
 8012682:	6832      	ldr	r2, [r6, #0]
 8012684:	f003 0306 	and.w	r3, r3, #6
 8012688:	2b04      	cmp	r3, #4
 801268a:	bf08      	it	eq
 801268c:	1aad      	subeq	r5, r5, r2
 801268e:	68a3      	ldr	r3, [r4, #8]
 8012690:	6922      	ldr	r2, [r4, #16]
 8012692:	bf0c      	ite	eq
 8012694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012698:	2500      	movne	r5, #0
 801269a:	4293      	cmp	r3, r2
 801269c:	bfc4      	itt	gt
 801269e:	1a9b      	subgt	r3, r3, r2
 80126a0:	18ed      	addgt	r5, r5, r3
 80126a2:	2600      	movs	r6, #0
 80126a4:	341a      	adds	r4, #26
 80126a6:	42b5      	cmp	r5, r6
 80126a8:	d11a      	bne.n	80126e0 <_printf_common+0xc8>
 80126aa:	2000      	movs	r0, #0
 80126ac:	e008      	b.n	80126c0 <_printf_common+0xa8>
 80126ae:	2301      	movs	r3, #1
 80126b0:	4652      	mov	r2, sl
 80126b2:	4649      	mov	r1, r9
 80126b4:	4638      	mov	r0, r7
 80126b6:	47c0      	blx	r8
 80126b8:	3001      	adds	r0, #1
 80126ba:	d103      	bne.n	80126c4 <_printf_common+0xac>
 80126bc:	f04f 30ff 	mov.w	r0, #4294967295
 80126c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126c4:	3501      	adds	r5, #1
 80126c6:	e7c6      	b.n	8012656 <_printf_common+0x3e>
 80126c8:	18e1      	adds	r1, r4, r3
 80126ca:	1c5a      	adds	r2, r3, #1
 80126cc:	2030      	movs	r0, #48	; 0x30
 80126ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80126d2:	4422      	add	r2, r4
 80126d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80126d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80126dc:	3302      	adds	r3, #2
 80126de:	e7c7      	b.n	8012670 <_printf_common+0x58>
 80126e0:	2301      	movs	r3, #1
 80126e2:	4622      	mov	r2, r4
 80126e4:	4649      	mov	r1, r9
 80126e6:	4638      	mov	r0, r7
 80126e8:	47c0      	blx	r8
 80126ea:	3001      	adds	r0, #1
 80126ec:	d0e6      	beq.n	80126bc <_printf_common+0xa4>
 80126ee:	3601      	adds	r6, #1
 80126f0:	e7d9      	b.n	80126a6 <_printf_common+0x8e>
	...

080126f4 <_printf_i>:
 80126f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80126f8:	460c      	mov	r4, r1
 80126fa:	4691      	mov	r9, r2
 80126fc:	7e27      	ldrb	r7, [r4, #24]
 80126fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012700:	2f78      	cmp	r7, #120	; 0x78
 8012702:	4680      	mov	r8, r0
 8012704:	469a      	mov	sl, r3
 8012706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801270a:	d807      	bhi.n	801271c <_printf_i+0x28>
 801270c:	2f62      	cmp	r7, #98	; 0x62
 801270e:	d80a      	bhi.n	8012726 <_printf_i+0x32>
 8012710:	2f00      	cmp	r7, #0
 8012712:	f000 80d8 	beq.w	80128c6 <_printf_i+0x1d2>
 8012716:	2f58      	cmp	r7, #88	; 0x58
 8012718:	f000 80a3 	beq.w	8012862 <_printf_i+0x16e>
 801271c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012724:	e03a      	b.n	801279c <_printf_i+0xa8>
 8012726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801272a:	2b15      	cmp	r3, #21
 801272c:	d8f6      	bhi.n	801271c <_printf_i+0x28>
 801272e:	a001      	add	r0, pc, #4	; (adr r0, 8012734 <_printf_i+0x40>)
 8012730:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012734:	0801278d 	.word	0x0801278d
 8012738:	080127a1 	.word	0x080127a1
 801273c:	0801271d 	.word	0x0801271d
 8012740:	0801271d 	.word	0x0801271d
 8012744:	0801271d 	.word	0x0801271d
 8012748:	0801271d 	.word	0x0801271d
 801274c:	080127a1 	.word	0x080127a1
 8012750:	0801271d 	.word	0x0801271d
 8012754:	0801271d 	.word	0x0801271d
 8012758:	0801271d 	.word	0x0801271d
 801275c:	0801271d 	.word	0x0801271d
 8012760:	080128ad 	.word	0x080128ad
 8012764:	080127d1 	.word	0x080127d1
 8012768:	0801288f 	.word	0x0801288f
 801276c:	0801271d 	.word	0x0801271d
 8012770:	0801271d 	.word	0x0801271d
 8012774:	080128cf 	.word	0x080128cf
 8012778:	0801271d 	.word	0x0801271d
 801277c:	080127d1 	.word	0x080127d1
 8012780:	0801271d 	.word	0x0801271d
 8012784:	0801271d 	.word	0x0801271d
 8012788:	08012897 	.word	0x08012897
 801278c:	680b      	ldr	r3, [r1, #0]
 801278e:	1d1a      	adds	r2, r3, #4
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	600a      	str	r2, [r1, #0]
 8012794:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801279c:	2301      	movs	r3, #1
 801279e:	e0a3      	b.n	80128e8 <_printf_i+0x1f4>
 80127a0:	6825      	ldr	r5, [r4, #0]
 80127a2:	6808      	ldr	r0, [r1, #0]
 80127a4:	062e      	lsls	r6, r5, #24
 80127a6:	f100 0304 	add.w	r3, r0, #4
 80127aa:	d50a      	bpl.n	80127c2 <_printf_i+0xce>
 80127ac:	6805      	ldr	r5, [r0, #0]
 80127ae:	600b      	str	r3, [r1, #0]
 80127b0:	2d00      	cmp	r5, #0
 80127b2:	da03      	bge.n	80127bc <_printf_i+0xc8>
 80127b4:	232d      	movs	r3, #45	; 0x2d
 80127b6:	426d      	negs	r5, r5
 80127b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127bc:	485e      	ldr	r0, [pc, #376]	; (8012938 <_printf_i+0x244>)
 80127be:	230a      	movs	r3, #10
 80127c0:	e019      	b.n	80127f6 <_printf_i+0x102>
 80127c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80127c6:	6805      	ldr	r5, [r0, #0]
 80127c8:	600b      	str	r3, [r1, #0]
 80127ca:	bf18      	it	ne
 80127cc:	b22d      	sxthne	r5, r5
 80127ce:	e7ef      	b.n	80127b0 <_printf_i+0xbc>
 80127d0:	680b      	ldr	r3, [r1, #0]
 80127d2:	6825      	ldr	r5, [r4, #0]
 80127d4:	1d18      	adds	r0, r3, #4
 80127d6:	6008      	str	r0, [r1, #0]
 80127d8:	0628      	lsls	r0, r5, #24
 80127da:	d501      	bpl.n	80127e0 <_printf_i+0xec>
 80127dc:	681d      	ldr	r5, [r3, #0]
 80127de:	e002      	b.n	80127e6 <_printf_i+0xf2>
 80127e0:	0669      	lsls	r1, r5, #25
 80127e2:	d5fb      	bpl.n	80127dc <_printf_i+0xe8>
 80127e4:	881d      	ldrh	r5, [r3, #0]
 80127e6:	4854      	ldr	r0, [pc, #336]	; (8012938 <_printf_i+0x244>)
 80127e8:	2f6f      	cmp	r7, #111	; 0x6f
 80127ea:	bf0c      	ite	eq
 80127ec:	2308      	moveq	r3, #8
 80127ee:	230a      	movne	r3, #10
 80127f0:	2100      	movs	r1, #0
 80127f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80127f6:	6866      	ldr	r6, [r4, #4]
 80127f8:	60a6      	str	r6, [r4, #8]
 80127fa:	2e00      	cmp	r6, #0
 80127fc:	bfa2      	ittt	ge
 80127fe:	6821      	ldrge	r1, [r4, #0]
 8012800:	f021 0104 	bicge.w	r1, r1, #4
 8012804:	6021      	strge	r1, [r4, #0]
 8012806:	b90d      	cbnz	r5, 801280c <_printf_i+0x118>
 8012808:	2e00      	cmp	r6, #0
 801280a:	d04d      	beq.n	80128a8 <_printf_i+0x1b4>
 801280c:	4616      	mov	r6, r2
 801280e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012812:	fb03 5711 	mls	r7, r3, r1, r5
 8012816:	5dc7      	ldrb	r7, [r0, r7]
 8012818:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801281c:	462f      	mov	r7, r5
 801281e:	42bb      	cmp	r3, r7
 8012820:	460d      	mov	r5, r1
 8012822:	d9f4      	bls.n	801280e <_printf_i+0x11a>
 8012824:	2b08      	cmp	r3, #8
 8012826:	d10b      	bne.n	8012840 <_printf_i+0x14c>
 8012828:	6823      	ldr	r3, [r4, #0]
 801282a:	07df      	lsls	r7, r3, #31
 801282c:	d508      	bpl.n	8012840 <_printf_i+0x14c>
 801282e:	6923      	ldr	r3, [r4, #16]
 8012830:	6861      	ldr	r1, [r4, #4]
 8012832:	4299      	cmp	r1, r3
 8012834:	bfde      	ittt	le
 8012836:	2330      	movle	r3, #48	; 0x30
 8012838:	f806 3c01 	strble.w	r3, [r6, #-1]
 801283c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012840:	1b92      	subs	r2, r2, r6
 8012842:	6122      	str	r2, [r4, #16]
 8012844:	f8cd a000 	str.w	sl, [sp]
 8012848:	464b      	mov	r3, r9
 801284a:	aa03      	add	r2, sp, #12
 801284c:	4621      	mov	r1, r4
 801284e:	4640      	mov	r0, r8
 8012850:	f7ff fee2 	bl	8012618 <_printf_common>
 8012854:	3001      	adds	r0, #1
 8012856:	d14c      	bne.n	80128f2 <_printf_i+0x1fe>
 8012858:	f04f 30ff 	mov.w	r0, #4294967295
 801285c:	b004      	add	sp, #16
 801285e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012862:	4835      	ldr	r0, [pc, #212]	; (8012938 <_printf_i+0x244>)
 8012864:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012868:	6823      	ldr	r3, [r4, #0]
 801286a:	680e      	ldr	r6, [r1, #0]
 801286c:	061f      	lsls	r7, r3, #24
 801286e:	f856 5b04 	ldr.w	r5, [r6], #4
 8012872:	600e      	str	r6, [r1, #0]
 8012874:	d514      	bpl.n	80128a0 <_printf_i+0x1ac>
 8012876:	07d9      	lsls	r1, r3, #31
 8012878:	bf44      	itt	mi
 801287a:	f043 0320 	orrmi.w	r3, r3, #32
 801287e:	6023      	strmi	r3, [r4, #0]
 8012880:	b91d      	cbnz	r5, 801288a <_printf_i+0x196>
 8012882:	6823      	ldr	r3, [r4, #0]
 8012884:	f023 0320 	bic.w	r3, r3, #32
 8012888:	6023      	str	r3, [r4, #0]
 801288a:	2310      	movs	r3, #16
 801288c:	e7b0      	b.n	80127f0 <_printf_i+0xfc>
 801288e:	6823      	ldr	r3, [r4, #0]
 8012890:	f043 0320 	orr.w	r3, r3, #32
 8012894:	6023      	str	r3, [r4, #0]
 8012896:	2378      	movs	r3, #120	; 0x78
 8012898:	4828      	ldr	r0, [pc, #160]	; (801293c <_printf_i+0x248>)
 801289a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801289e:	e7e3      	b.n	8012868 <_printf_i+0x174>
 80128a0:	065e      	lsls	r6, r3, #25
 80128a2:	bf48      	it	mi
 80128a4:	b2ad      	uxthmi	r5, r5
 80128a6:	e7e6      	b.n	8012876 <_printf_i+0x182>
 80128a8:	4616      	mov	r6, r2
 80128aa:	e7bb      	b.n	8012824 <_printf_i+0x130>
 80128ac:	680b      	ldr	r3, [r1, #0]
 80128ae:	6826      	ldr	r6, [r4, #0]
 80128b0:	6960      	ldr	r0, [r4, #20]
 80128b2:	1d1d      	adds	r5, r3, #4
 80128b4:	600d      	str	r5, [r1, #0]
 80128b6:	0635      	lsls	r5, r6, #24
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	d501      	bpl.n	80128c0 <_printf_i+0x1cc>
 80128bc:	6018      	str	r0, [r3, #0]
 80128be:	e002      	b.n	80128c6 <_printf_i+0x1d2>
 80128c0:	0671      	lsls	r1, r6, #25
 80128c2:	d5fb      	bpl.n	80128bc <_printf_i+0x1c8>
 80128c4:	8018      	strh	r0, [r3, #0]
 80128c6:	2300      	movs	r3, #0
 80128c8:	6123      	str	r3, [r4, #16]
 80128ca:	4616      	mov	r6, r2
 80128cc:	e7ba      	b.n	8012844 <_printf_i+0x150>
 80128ce:	680b      	ldr	r3, [r1, #0]
 80128d0:	1d1a      	adds	r2, r3, #4
 80128d2:	600a      	str	r2, [r1, #0]
 80128d4:	681e      	ldr	r6, [r3, #0]
 80128d6:	6862      	ldr	r2, [r4, #4]
 80128d8:	2100      	movs	r1, #0
 80128da:	4630      	mov	r0, r6
 80128dc:	f7ed fd20 	bl	8000320 <memchr>
 80128e0:	b108      	cbz	r0, 80128e6 <_printf_i+0x1f2>
 80128e2:	1b80      	subs	r0, r0, r6
 80128e4:	6060      	str	r0, [r4, #4]
 80128e6:	6863      	ldr	r3, [r4, #4]
 80128e8:	6123      	str	r3, [r4, #16]
 80128ea:	2300      	movs	r3, #0
 80128ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128f0:	e7a8      	b.n	8012844 <_printf_i+0x150>
 80128f2:	6923      	ldr	r3, [r4, #16]
 80128f4:	4632      	mov	r2, r6
 80128f6:	4649      	mov	r1, r9
 80128f8:	4640      	mov	r0, r8
 80128fa:	47d0      	blx	sl
 80128fc:	3001      	adds	r0, #1
 80128fe:	d0ab      	beq.n	8012858 <_printf_i+0x164>
 8012900:	6823      	ldr	r3, [r4, #0]
 8012902:	079b      	lsls	r3, r3, #30
 8012904:	d413      	bmi.n	801292e <_printf_i+0x23a>
 8012906:	68e0      	ldr	r0, [r4, #12]
 8012908:	9b03      	ldr	r3, [sp, #12]
 801290a:	4298      	cmp	r0, r3
 801290c:	bfb8      	it	lt
 801290e:	4618      	movlt	r0, r3
 8012910:	e7a4      	b.n	801285c <_printf_i+0x168>
 8012912:	2301      	movs	r3, #1
 8012914:	4632      	mov	r2, r6
 8012916:	4649      	mov	r1, r9
 8012918:	4640      	mov	r0, r8
 801291a:	47d0      	blx	sl
 801291c:	3001      	adds	r0, #1
 801291e:	d09b      	beq.n	8012858 <_printf_i+0x164>
 8012920:	3501      	adds	r5, #1
 8012922:	68e3      	ldr	r3, [r4, #12]
 8012924:	9903      	ldr	r1, [sp, #12]
 8012926:	1a5b      	subs	r3, r3, r1
 8012928:	42ab      	cmp	r3, r5
 801292a:	dcf2      	bgt.n	8012912 <_printf_i+0x21e>
 801292c:	e7eb      	b.n	8012906 <_printf_i+0x212>
 801292e:	2500      	movs	r5, #0
 8012930:	f104 0619 	add.w	r6, r4, #25
 8012934:	e7f5      	b.n	8012922 <_printf_i+0x22e>
 8012936:	bf00      	nop
 8012938:	0801315d 	.word	0x0801315d
 801293c:	0801316e 	.word	0x0801316e

08012940 <_putc_r>:
 8012940:	b570      	push	{r4, r5, r6, lr}
 8012942:	460d      	mov	r5, r1
 8012944:	4614      	mov	r4, r2
 8012946:	4606      	mov	r6, r0
 8012948:	b118      	cbz	r0, 8012952 <_putc_r+0x12>
 801294a:	6983      	ldr	r3, [r0, #24]
 801294c:	b90b      	cbnz	r3, 8012952 <_putc_r+0x12>
 801294e:	f7ff fc0f 	bl	8012170 <__sinit>
 8012952:	4b1c      	ldr	r3, [pc, #112]	; (80129c4 <_putc_r+0x84>)
 8012954:	429c      	cmp	r4, r3
 8012956:	d124      	bne.n	80129a2 <_putc_r+0x62>
 8012958:	6874      	ldr	r4, [r6, #4]
 801295a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801295c:	07d8      	lsls	r0, r3, #31
 801295e:	d405      	bmi.n	801296c <_putc_r+0x2c>
 8012960:	89a3      	ldrh	r3, [r4, #12]
 8012962:	0599      	lsls	r1, r3, #22
 8012964:	d402      	bmi.n	801296c <_putc_r+0x2c>
 8012966:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012968:	f7ff fca0 	bl	80122ac <__retarget_lock_acquire_recursive>
 801296c:	68a3      	ldr	r3, [r4, #8]
 801296e:	3b01      	subs	r3, #1
 8012970:	2b00      	cmp	r3, #0
 8012972:	60a3      	str	r3, [r4, #8]
 8012974:	da05      	bge.n	8012982 <_putc_r+0x42>
 8012976:	69a2      	ldr	r2, [r4, #24]
 8012978:	4293      	cmp	r3, r2
 801297a:	db1c      	blt.n	80129b6 <_putc_r+0x76>
 801297c:	b2eb      	uxtb	r3, r5
 801297e:	2b0a      	cmp	r3, #10
 8012980:	d019      	beq.n	80129b6 <_putc_r+0x76>
 8012982:	6823      	ldr	r3, [r4, #0]
 8012984:	1c5a      	adds	r2, r3, #1
 8012986:	6022      	str	r2, [r4, #0]
 8012988:	701d      	strb	r5, [r3, #0]
 801298a:	b2ed      	uxtb	r5, r5
 801298c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801298e:	07da      	lsls	r2, r3, #31
 8012990:	d405      	bmi.n	801299e <_putc_r+0x5e>
 8012992:	89a3      	ldrh	r3, [r4, #12]
 8012994:	059b      	lsls	r3, r3, #22
 8012996:	d402      	bmi.n	801299e <_putc_r+0x5e>
 8012998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801299a:	f7ff fc88 	bl	80122ae <__retarget_lock_release_recursive>
 801299e:	4628      	mov	r0, r5
 80129a0:	bd70      	pop	{r4, r5, r6, pc}
 80129a2:	4b09      	ldr	r3, [pc, #36]	; (80129c8 <_putc_r+0x88>)
 80129a4:	429c      	cmp	r4, r3
 80129a6:	d101      	bne.n	80129ac <_putc_r+0x6c>
 80129a8:	68b4      	ldr	r4, [r6, #8]
 80129aa:	e7d6      	b.n	801295a <_putc_r+0x1a>
 80129ac:	4b07      	ldr	r3, [pc, #28]	; (80129cc <_putc_r+0x8c>)
 80129ae:	429c      	cmp	r4, r3
 80129b0:	bf08      	it	eq
 80129b2:	68f4      	ldreq	r4, [r6, #12]
 80129b4:	e7d1      	b.n	801295a <_putc_r+0x1a>
 80129b6:	4629      	mov	r1, r5
 80129b8:	4622      	mov	r2, r4
 80129ba:	4630      	mov	r0, r6
 80129bc:	f000 f85c 	bl	8012a78 <__swbuf_r>
 80129c0:	4605      	mov	r5, r0
 80129c2:	e7e3      	b.n	801298c <_putc_r+0x4c>
 80129c4:	0801310c 	.word	0x0801310c
 80129c8:	0801312c 	.word	0x0801312c
 80129cc:	080130ec 	.word	0x080130ec

080129d0 <_sbrk_r>:
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	4d06      	ldr	r5, [pc, #24]	; (80129ec <_sbrk_r+0x1c>)
 80129d4:	2300      	movs	r3, #0
 80129d6:	4604      	mov	r4, r0
 80129d8:	4608      	mov	r0, r1
 80129da:	602b      	str	r3, [r5, #0]
 80129dc:	f7ef ff5e 	bl	800289c <_sbrk>
 80129e0:	1c43      	adds	r3, r0, #1
 80129e2:	d102      	bne.n	80129ea <_sbrk_r+0x1a>
 80129e4:	682b      	ldr	r3, [r5, #0]
 80129e6:	b103      	cbz	r3, 80129ea <_sbrk_r+0x1a>
 80129e8:	6023      	str	r3, [r4, #0]
 80129ea:	bd38      	pop	{r3, r4, r5, pc}
 80129ec:	240026bc 	.word	0x240026bc

080129f0 <__sread>:
 80129f0:	b510      	push	{r4, lr}
 80129f2:	460c      	mov	r4, r1
 80129f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129f8:	f000 fab4 	bl	8012f64 <_read_r>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	bfab      	itete	ge
 8012a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a02:	89a3      	ldrhlt	r3, [r4, #12]
 8012a04:	181b      	addge	r3, r3, r0
 8012a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a0a:	bfac      	ite	ge
 8012a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a0e:	81a3      	strhlt	r3, [r4, #12]
 8012a10:	bd10      	pop	{r4, pc}

08012a12 <__swrite>:
 8012a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a16:	461f      	mov	r7, r3
 8012a18:	898b      	ldrh	r3, [r1, #12]
 8012a1a:	05db      	lsls	r3, r3, #23
 8012a1c:	4605      	mov	r5, r0
 8012a1e:	460c      	mov	r4, r1
 8012a20:	4616      	mov	r6, r2
 8012a22:	d505      	bpl.n	8012a30 <__swrite+0x1e>
 8012a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a28:	2302      	movs	r3, #2
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f000 f9c8 	bl	8012dc0 <_lseek_r>
 8012a30:	89a3      	ldrh	r3, [r4, #12]
 8012a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a3a:	81a3      	strh	r3, [r4, #12]
 8012a3c:	4632      	mov	r2, r6
 8012a3e:	463b      	mov	r3, r7
 8012a40:	4628      	mov	r0, r5
 8012a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a46:	f000 b869 	b.w	8012b1c <_write_r>

08012a4a <__sseek>:
 8012a4a:	b510      	push	{r4, lr}
 8012a4c:	460c      	mov	r4, r1
 8012a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a52:	f000 f9b5 	bl	8012dc0 <_lseek_r>
 8012a56:	1c43      	adds	r3, r0, #1
 8012a58:	89a3      	ldrh	r3, [r4, #12]
 8012a5a:	bf15      	itete	ne
 8012a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a66:	81a3      	strheq	r3, [r4, #12]
 8012a68:	bf18      	it	ne
 8012a6a:	81a3      	strhne	r3, [r4, #12]
 8012a6c:	bd10      	pop	{r4, pc}

08012a6e <__sclose>:
 8012a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a72:	f000 b8d3 	b.w	8012c1c <_close_r>
	...

08012a78 <__swbuf_r>:
 8012a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a7a:	460e      	mov	r6, r1
 8012a7c:	4614      	mov	r4, r2
 8012a7e:	4605      	mov	r5, r0
 8012a80:	b118      	cbz	r0, 8012a8a <__swbuf_r+0x12>
 8012a82:	6983      	ldr	r3, [r0, #24]
 8012a84:	b90b      	cbnz	r3, 8012a8a <__swbuf_r+0x12>
 8012a86:	f7ff fb73 	bl	8012170 <__sinit>
 8012a8a:	4b21      	ldr	r3, [pc, #132]	; (8012b10 <__swbuf_r+0x98>)
 8012a8c:	429c      	cmp	r4, r3
 8012a8e:	d12b      	bne.n	8012ae8 <__swbuf_r+0x70>
 8012a90:	686c      	ldr	r4, [r5, #4]
 8012a92:	69a3      	ldr	r3, [r4, #24]
 8012a94:	60a3      	str	r3, [r4, #8]
 8012a96:	89a3      	ldrh	r3, [r4, #12]
 8012a98:	071a      	lsls	r2, r3, #28
 8012a9a:	d52f      	bpl.n	8012afc <__swbuf_r+0x84>
 8012a9c:	6923      	ldr	r3, [r4, #16]
 8012a9e:	b36b      	cbz	r3, 8012afc <__swbuf_r+0x84>
 8012aa0:	6923      	ldr	r3, [r4, #16]
 8012aa2:	6820      	ldr	r0, [r4, #0]
 8012aa4:	1ac0      	subs	r0, r0, r3
 8012aa6:	6963      	ldr	r3, [r4, #20]
 8012aa8:	b2f6      	uxtb	r6, r6
 8012aaa:	4283      	cmp	r3, r0
 8012aac:	4637      	mov	r7, r6
 8012aae:	dc04      	bgt.n	8012aba <__swbuf_r+0x42>
 8012ab0:	4621      	mov	r1, r4
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	f000 f948 	bl	8012d48 <_fflush_r>
 8012ab8:	bb30      	cbnz	r0, 8012b08 <__swbuf_r+0x90>
 8012aba:	68a3      	ldr	r3, [r4, #8]
 8012abc:	3b01      	subs	r3, #1
 8012abe:	60a3      	str	r3, [r4, #8]
 8012ac0:	6823      	ldr	r3, [r4, #0]
 8012ac2:	1c5a      	adds	r2, r3, #1
 8012ac4:	6022      	str	r2, [r4, #0]
 8012ac6:	701e      	strb	r6, [r3, #0]
 8012ac8:	6963      	ldr	r3, [r4, #20]
 8012aca:	3001      	adds	r0, #1
 8012acc:	4283      	cmp	r3, r0
 8012ace:	d004      	beq.n	8012ada <__swbuf_r+0x62>
 8012ad0:	89a3      	ldrh	r3, [r4, #12]
 8012ad2:	07db      	lsls	r3, r3, #31
 8012ad4:	d506      	bpl.n	8012ae4 <__swbuf_r+0x6c>
 8012ad6:	2e0a      	cmp	r6, #10
 8012ad8:	d104      	bne.n	8012ae4 <__swbuf_r+0x6c>
 8012ada:	4621      	mov	r1, r4
 8012adc:	4628      	mov	r0, r5
 8012ade:	f000 f933 	bl	8012d48 <_fflush_r>
 8012ae2:	b988      	cbnz	r0, 8012b08 <__swbuf_r+0x90>
 8012ae4:	4638      	mov	r0, r7
 8012ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ae8:	4b0a      	ldr	r3, [pc, #40]	; (8012b14 <__swbuf_r+0x9c>)
 8012aea:	429c      	cmp	r4, r3
 8012aec:	d101      	bne.n	8012af2 <__swbuf_r+0x7a>
 8012aee:	68ac      	ldr	r4, [r5, #8]
 8012af0:	e7cf      	b.n	8012a92 <__swbuf_r+0x1a>
 8012af2:	4b09      	ldr	r3, [pc, #36]	; (8012b18 <__swbuf_r+0xa0>)
 8012af4:	429c      	cmp	r4, r3
 8012af6:	bf08      	it	eq
 8012af8:	68ec      	ldreq	r4, [r5, #12]
 8012afa:	e7ca      	b.n	8012a92 <__swbuf_r+0x1a>
 8012afc:	4621      	mov	r1, r4
 8012afe:	4628      	mov	r0, r5
 8012b00:	f000 f81e 	bl	8012b40 <__swsetup_r>
 8012b04:	2800      	cmp	r0, #0
 8012b06:	d0cb      	beq.n	8012aa0 <__swbuf_r+0x28>
 8012b08:	f04f 37ff 	mov.w	r7, #4294967295
 8012b0c:	e7ea      	b.n	8012ae4 <__swbuf_r+0x6c>
 8012b0e:	bf00      	nop
 8012b10:	0801310c 	.word	0x0801310c
 8012b14:	0801312c 	.word	0x0801312c
 8012b18:	080130ec 	.word	0x080130ec

08012b1c <_write_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4d07      	ldr	r5, [pc, #28]	; (8012b3c <_write_r+0x20>)
 8012b20:	4604      	mov	r4, r0
 8012b22:	4608      	mov	r0, r1
 8012b24:	4611      	mov	r1, r2
 8012b26:	2200      	movs	r2, #0
 8012b28:	602a      	str	r2, [r5, #0]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	f7ef fe65 	bl	80027fa <_write>
 8012b30:	1c43      	adds	r3, r0, #1
 8012b32:	d102      	bne.n	8012b3a <_write_r+0x1e>
 8012b34:	682b      	ldr	r3, [r5, #0]
 8012b36:	b103      	cbz	r3, 8012b3a <_write_r+0x1e>
 8012b38:	6023      	str	r3, [r4, #0]
 8012b3a:	bd38      	pop	{r3, r4, r5, pc}
 8012b3c:	240026bc 	.word	0x240026bc

08012b40 <__swsetup_r>:
 8012b40:	4b32      	ldr	r3, [pc, #200]	; (8012c0c <__swsetup_r+0xcc>)
 8012b42:	b570      	push	{r4, r5, r6, lr}
 8012b44:	681d      	ldr	r5, [r3, #0]
 8012b46:	4606      	mov	r6, r0
 8012b48:	460c      	mov	r4, r1
 8012b4a:	b125      	cbz	r5, 8012b56 <__swsetup_r+0x16>
 8012b4c:	69ab      	ldr	r3, [r5, #24]
 8012b4e:	b913      	cbnz	r3, 8012b56 <__swsetup_r+0x16>
 8012b50:	4628      	mov	r0, r5
 8012b52:	f7ff fb0d 	bl	8012170 <__sinit>
 8012b56:	4b2e      	ldr	r3, [pc, #184]	; (8012c10 <__swsetup_r+0xd0>)
 8012b58:	429c      	cmp	r4, r3
 8012b5a:	d10f      	bne.n	8012b7c <__swsetup_r+0x3c>
 8012b5c:	686c      	ldr	r4, [r5, #4]
 8012b5e:	89a3      	ldrh	r3, [r4, #12]
 8012b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b64:	0719      	lsls	r1, r3, #28
 8012b66:	d42c      	bmi.n	8012bc2 <__swsetup_r+0x82>
 8012b68:	06dd      	lsls	r5, r3, #27
 8012b6a:	d411      	bmi.n	8012b90 <__swsetup_r+0x50>
 8012b6c:	2309      	movs	r3, #9
 8012b6e:	6033      	str	r3, [r6, #0]
 8012b70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b74:	81a3      	strh	r3, [r4, #12]
 8012b76:	f04f 30ff 	mov.w	r0, #4294967295
 8012b7a:	e03e      	b.n	8012bfa <__swsetup_r+0xba>
 8012b7c:	4b25      	ldr	r3, [pc, #148]	; (8012c14 <__swsetup_r+0xd4>)
 8012b7e:	429c      	cmp	r4, r3
 8012b80:	d101      	bne.n	8012b86 <__swsetup_r+0x46>
 8012b82:	68ac      	ldr	r4, [r5, #8]
 8012b84:	e7eb      	b.n	8012b5e <__swsetup_r+0x1e>
 8012b86:	4b24      	ldr	r3, [pc, #144]	; (8012c18 <__swsetup_r+0xd8>)
 8012b88:	429c      	cmp	r4, r3
 8012b8a:	bf08      	it	eq
 8012b8c:	68ec      	ldreq	r4, [r5, #12]
 8012b8e:	e7e6      	b.n	8012b5e <__swsetup_r+0x1e>
 8012b90:	0758      	lsls	r0, r3, #29
 8012b92:	d512      	bpl.n	8012bba <__swsetup_r+0x7a>
 8012b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b96:	b141      	cbz	r1, 8012baa <__swsetup_r+0x6a>
 8012b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b9c:	4299      	cmp	r1, r3
 8012b9e:	d002      	beq.n	8012ba6 <__swsetup_r+0x66>
 8012ba0:	4630      	mov	r0, r6
 8012ba2:	f000 f98f 	bl	8012ec4 <_free_r>
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8012baa:	89a3      	ldrh	r3, [r4, #12]
 8012bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012bb0:	81a3      	strh	r3, [r4, #12]
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	6063      	str	r3, [r4, #4]
 8012bb6:	6923      	ldr	r3, [r4, #16]
 8012bb8:	6023      	str	r3, [r4, #0]
 8012bba:	89a3      	ldrh	r3, [r4, #12]
 8012bbc:	f043 0308 	orr.w	r3, r3, #8
 8012bc0:	81a3      	strh	r3, [r4, #12]
 8012bc2:	6923      	ldr	r3, [r4, #16]
 8012bc4:	b94b      	cbnz	r3, 8012bda <__swsetup_r+0x9a>
 8012bc6:	89a3      	ldrh	r3, [r4, #12]
 8012bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bd0:	d003      	beq.n	8012bda <__swsetup_r+0x9a>
 8012bd2:	4621      	mov	r1, r4
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f000 f929 	bl	8012e2c <__smakebuf_r>
 8012bda:	89a0      	ldrh	r0, [r4, #12]
 8012bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012be0:	f010 0301 	ands.w	r3, r0, #1
 8012be4:	d00a      	beq.n	8012bfc <__swsetup_r+0xbc>
 8012be6:	2300      	movs	r3, #0
 8012be8:	60a3      	str	r3, [r4, #8]
 8012bea:	6963      	ldr	r3, [r4, #20]
 8012bec:	425b      	negs	r3, r3
 8012bee:	61a3      	str	r3, [r4, #24]
 8012bf0:	6923      	ldr	r3, [r4, #16]
 8012bf2:	b943      	cbnz	r3, 8012c06 <__swsetup_r+0xc6>
 8012bf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012bf8:	d1ba      	bne.n	8012b70 <__swsetup_r+0x30>
 8012bfa:	bd70      	pop	{r4, r5, r6, pc}
 8012bfc:	0781      	lsls	r1, r0, #30
 8012bfe:	bf58      	it	pl
 8012c00:	6963      	ldrpl	r3, [r4, #20]
 8012c02:	60a3      	str	r3, [r4, #8]
 8012c04:	e7f4      	b.n	8012bf0 <__swsetup_r+0xb0>
 8012c06:	2000      	movs	r0, #0
 8012c08:	e7f7      	b.n	8012bfa <__swsetup_r+0xba>
 8012c0a:	bf00      	nop
 8012c0c:	2400018c 	.word	0x2400018c
 8012c10:	0801310c 	.word	0x0801310c
 8012c14:	0801312c 	.word	0x0801312c
 8012c18:	080130ec 	.word	0x080130ec

08012c1c <_close_r>:
 8012c1c:	b538      	push	{r3, r4, r5, lr}
 8012c1e:	4d06      	ldr	r5, [pc, #24]	; (8012c38 <_close_r+0x1c>)
 8012c20:	2300      	movs	r3, #0
 8012c22:	4604      	mov	r4, r0
 8012c24:	4608      	mov	r0, r1
 8012c26:	602b      	str	r3, [r5, #0]
 8012c28:	f7ef fe03 	bl	8002832 <_close>
 8012c2c:	1c43      	adds	r3, r0, #1
 8012c2e:	d102      	bne.n	8012c36 <_close_r+0x1a>
 8012c30:	682b      	ldr	r3, [r5, #0]
 8012c32:	b103      	cbz	r3, 8012c36 <_close_r+0x1a>
 8012c34:	6023      	str	r3, [r4, #0]
 8012c36:	bd38      	pop	{r3, r4, r5, pc}
 8012c38:	240026bc 	.word	0x240026bc

08012c3c <__sflush_r>:
 8012c3c:	898a      	ldrh	r2, [r1, #12]
 8012c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c42:	4605      	mov	r5, r0
 8012c44:	0710      	lsls	r0, r2, #28
 8012c46:	460c      	mov	r4, r1
 8012c48:	d458      	bmi.n	8012cfc <__sflush_r+0xc0>
 8012c4a:	684b      	ldr	r3, [r1, #4]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	dc05      	bgt.n	8012c5c <__sflush_r+0x20>
 8012c50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	dc02      	bgt.n	8012c5c <__sflush_r+0x20>
 8012c56:	2000      	movs	r0, #0
 8012c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c5e:	2e00      	cmp	r6, #0
 8012c60:	d0f9      	beq.n	8012c56 <__sflush_r+0x1a>
 8012c62:	2300      	movs	r3, #0
 8012c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012c68:	682f      	ldr	r7, [r5, #0]
 8012c6a:	602b      	str	r3, [r5, #0]
 8012c6c:	d032      	beq.n	8012cd4 <__sflush_r+0x98>
 8012c6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c70:	89a3      	ldrh	r3, [r4, #12]
 8012c72:	075a      	lsls	r2, r3, #29
 8012c74:	d505      	bpl.n	8012c82 <__sflush_r+0x46>
 8012c76:	6863      	ldr	r3, [r4, #4]
 8012c78:	1ac0      	subs	r0, r0, r3
 8012c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c7c:	b10b      	cbz	r3, 8012c82 <__sflush_r+0x46>
 8012c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c80:	1ac0      	subs	r0, r0, r3
 8012c82:	2300      	movs	r3, #0
 8012c84:	4602      	mov	r2, r0
 8012c86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c88:	6a21      	ldr	r1, [r4, #32]
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	47b0      	blx	r6
 8012c8e:	1c43      	adds	r3, r0, #1
 8012c90:	89a3      	ldrh	r3, [r4, #12]
 8012c92:	d106      	bne.n	8012ca2 <__sflush_r+0x66>
 8012c94:	6829      	ldr	r1, [r5, #0]
 8012c96:	291d      	cmp	r1, #29
 8012c98:	d82c      	bhi.n	8012cf4 <__sflush_r+0xb8>
 8012c9a:	4a2a      	ldr	r2, [pc, #168]	; (8012d44 <__sflush_r+0x108>)
 8012c9c:	40ca      	lsrs	r2, r1
 8012c9e:	07d6      	lsls	r6, r2, #31
 8012ca0:	d528      	bpl.n	8012cf4 <__sflush_r+0xb8>
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	6062      	str	r2, [r4, #4]
 8012ca6:	04d9      	lsls	r1, r3, #19
 8012ca8:	6922      	ldr	r2, [r4, #16]
 8012caa:	6022      	str	r2, [r4, #0]
 8012cac:	d504      	bpl.n	8012cb8 <__sflush_r+0x7c>
 8012cae:	1c42      	adds	r2, r0, #1
 8012cb0:	d101      	bne.n	8012cb6 <__sflush_r+0x7a>
 8012cb2:	682b      	ldr	r3, [r5, #0]
 8012cb4:	b903      	cbnz	r3, 8012cb8 <__sflush_r+0x7c>
 8012cb6:	6560      	str	r0, [r4, #84]	; 0x54
 8012cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cba:	602f      	str	r7, [r5, #0]
 8012cbc:	2900      	cmp	r1, #0
 8012cbe:	d0ca      	beq.n	8012c56 <__sflush_r+0x1a>
 8012cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012cc4:	4299      	cmp	r1, r3
 8012cc6:	d002      	beq.n	8012cce <__sflush_r+0x92>
 8012cc8:	4628      	mov	r0, r5
 8012cca:	f000 f8fb 	bl	8012ec4 <_free_r>
 8012cce:	2000      	movs	r0, #0
 8012cd0:	6360      	str	r0, [r4, #52]	; 0x34
 8012cd2:	e7c1      	b.n	8012c58 <__sflush_r+0x1c>
 8012cd4:	6a21      	ldr	r1, [r4, #32]
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	4628      	mov	r0, r5
 8012cda:	47b0      	blx	r6
 8012cdc:	1c41      	adds	r1, r0, #1
 8012cde:	d1c7      	bne.n	8012c70 <__sflush_r+0x34>
 8012ce0:	682b      	ldr	r3, [r5, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d0c4      	beq.n	8012c70 <__sflush_r+0x34>
 8012ce6:	2b1d      	cmp	r3, #29
 8012ce8:	d001      	beq.n	8012cee <__sflush_r+0xb2>
 8012cea:	2b16      	cmp	r3, #22
 8012cec:	d101      	bne.n	8012cf2 <__sflush_r+0xb6>
 8012cee:	602f      	str	r7, [r5, #0]
 8012cf0:	e7b1      	b.n	8012c56 <__sflush_r+0x1a>
 8012cf2:	89a3      	ldrh	r3, [r4, #12]
 8012cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cf8:	81a3      	strh	r3, [r4, #12]
 8012cfa:	e7ad      	b.n	8012c58 <__sflush_r+0x1c>
 8012cfc:	690f      	ldr	r7, [r1, #16]
 8012cfe:	2f00      	cmp	r7, #0
 8012d00:	d0a9      	beq.n	8012c56 <__sflush_r+0x1a>
 8012d02:	0793      	lsls	r3, r2, #30
 8012d04:	680e      	ldr	r6, [r1, #0]
 8012d06:	bf08      	it	eq
 8012d08:	694b      	ldreq	r3, [r1, #20]
 8012d0a:	600f      	str	r7, [r1, #0]
 8012d0c:	bf18      	it	ne
 8012d0e:	2300      	movne	r3, #0
 8012d10:	eba6 0807 	sub.w	r8, r6, r7
 8012d14:	608b      	str	r3, [r1, #8]
 8012d16:	f1b8 0f00 	cmp.w	r8, #0
 8012d1a:	dd9c      	ble.n	8012c56 <__sflush_r+0x1a>
 8012d1c:	6a21      	ldr	r1, [r4, #32]
 8012d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d20:	4643      	mov	r3, r8
 8012d22:	463a      	mov	r2, r7
 8012d24:	4628      	mov	r0, r5
 8012d26:	47b0      	blx	r6
 8012d28:	2800      	cmp	r0, #0
 8012d2a:	dc06      	bgt.n	8012d3a <__sflush_r+0xfe>
 8012d2c:	89a3      	ldrh	r3, [r4, #12]
 8012d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d32:	81a3      	strh	r3, [r4, #12]
 8012d34:	f04f 30ff 	mov.w	r0, #4294967295
 8012d38:	e78e      	b.n	8012c58 <__sflush_r+0x1c>
 8012d3a:	4407      	add	r7, r0
 8012d3c:	eba8 0800 	sub.w	r8, r8, r0
 8012d40:	e7e9      	b.n	8012d16 <__sflush_r+0xda>
 8012d42:	bf00      	nop
 8012d44:	20400001 	.word	0x20400001

08012d48 <_fflush_r>:
 8012d48:	b538      	push	{r3, r4, r5, lr}
 8012d4a:	690b      	ldr	r3, [r1, #16]
 8012d4c:	4605      	mov	r5, r0
 8012d4e:	460c      	mov	r4, r1
 8012d50:	b913      	cbnz	r3, 8012d58 <_fflush_r+0x10>
 8012d52:	2500      	movs	r5, #0
 8012d54:	4628      	mov	r0, r5
 8012d56:	bd38      	pop	{r3, r4, r5, pc}
 8012d58:	b118      	cbz	r0, 8012d62 <_fflush_r+0x1a>
 8012d5a:	6983      	ldr	r3, [r0, #24]
 8012d5c:	b90b      	cbnz	r3, 8012d62 <_fflush_r+0x1a>
 8012d5e:	f7ff fa07 	bl	8012170 <__sinit>
 8012d62:	4b14      	ldr	r3, [pc, #80]	; (8012db4 <_fflush_r+0x6c>)
 8012d64:	429c      	cmp	r4, r3
 8012d66:	d11b      	bne.n	8012da0 <_fflush_r+0x58>
 8012d68:	686c      	ldr	r4, [r5, #4]
 8012d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d0ef      	beq.n	8012d52 <_fflush_r+0xa>
 8012d72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d74:	07d0      	lsls	r0, r2, #31
 8012d76:	d404      	bmi.n	8012d82 <_fflush_r+0x3a>
 8012d78:	0599      	lsls	r1, r3, #22
 8012d7a:	d402      	bmi.n	8012d82 <_fflush_r+0x3a>
 8012d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d7e:	f7ff fa95 	bl	80122ac <__retarget_lock_acquire_recursive>
 8012d82:	4628      	mov	r0, r5
 8012d84:	4621      	mov	r1, r4
 8012d86:	f7ff ff59 	bl	8012c3c <__sflush_r>
 8012d8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d8c:	07da      	lsls	r2, r3, #31
 8012d8e:	4605      	mov	r5, r0
 8012d90:	d4e0      	bmi.n	8012d54 <_fflush_r+0xc>
 8012d92:	89a3      	ldrh	r3, [r4, #12]
 8012d94:	059b      	lsls	r3, r3, #22
 8012d96:	d4dd      	bmi.n	8012d54 <_fflush_r+0xc>
 8012d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d9a:	f7ff fa88 	bl	80122ae <__retarget_lock_release_recursive>
 8012d9e:	e7d9      	b.n	8012d54 <_fflush_r+0xc>
 8012da0:	4b05      	ldr	r3, [pc, #20]	; (8012db8 <_fflush_r+0x70>)
 8012da2:	429c      	cmp	r4, r3
 8012da4:	d101      	bne.n	8012daa <_fflush_r+0x62>
 8012da6:	68ac      	ldr	r4, [r5, #8]
 8012da8:	e7df      	b.n	8012d6a <_fflush_r+0x22>
 8012daa:	4b04      	ldr	r3, [pc, #16]	; (8012dbc <_fflush_r+0x74>)
 8012dac:	429c      	cmp	r4, r3
 8012dae:	bf08      	it	eq
 8012db0:	68ec      	ldreq	r4, [r5, #12]
 8012db2:	e7da      	b.n	8012d6a <_fflush_r+0x22>
 8012db4:	0801310c 	.word	0x0801310c
 8012db8:	0801312c 	.word	0x0801312c
 8012dbc:	080130ec 	.word	0x080130ec

08012dc0 <_lseek_r>:
 8012dc0:	b538      	push	{r3, r4, r5, lr}
 8012dc2:	4d07      	ldr	r5, [pc, #28]	; (8012de0 <_lseek_r+0x20>)
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	4608      	mov	r0, r1
 8012dc8:	4611      	mov	r1, r2
 8012dca:	2200      	movs	r2, #0
 8012dcc:	602a      	str	r2, [r5, #0]
 8012dce:	461a      	mov	r2, r3
 8012dd0:	f7ef fd56 	bl	8002880 <_lseek>
 8012dd4:	1c43      	adds	r3, r0, #1
 8012dd6:	d102      	bne.n	8012dde <_lseek_r+0x1e>
 8012dd8:	682b      	ldr	r3, [r5, #0]
 8012dda:	b103      	cbz	r3, 8012dde <_lseek_r+0x1e>
 8012ddc:	6023      	str	r3, [r4, #0]
 8012dde:	bd38      	pop	{r3, r4, r5, pc}
 8012de0:	240026bc 	.word	0x240026bc

08012de4 <__swhatbuf_r>:
 8012de4:	b570      	push	{r4, r5, r6, lr}
 8012de6:	460e      	mov	r6, r1
 8012de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dec:	2900      	cmp	r1, #0
 8012dee:	b096      	sub	sp, #88	; 0x58
 8012df0:	4614      	mov	r4, r2
 8012df2:	461d      	mov	r5, r3
 8012df4:	da07      	bge.n	8012e06 <__swhatbuf_r+0x22>
 8012df6:	2300      	movs	r3, #0
 8012df8:	602b      	str	r3, [r5, #0]
 8012dfa:	89b3      	ldrh	r3, [r6, #12]
 8012dfc:	061a      	lsls	r2, r3, #24
 8012dfe:	d410      	bmi.n	8012e22 <__swhatbuf_r+0x3e>
 8012e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e04:	e00e      	b.n	8012e24 <__swhatbuf_r+0x40>
 8012e06:	466a      	mov	r2, sp
 8012e08:	f000 f8be 	bl	8012f88 <_fstat_r>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	dbf2      	blt.n	8012df6 <__swhatbuf_r+0x12>
 8012e10:	9a01      	ldr	r2, [sp, #4]
 8012e12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012e16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012e1a:	425a      	negs	r2, r3
 8012e1c:	415a      	adcs	r2, r3
 8012e1e:	602a      	str	r2, [r5, #0]
 8012e20:	e7ee      	b.n	8012e00 <__swhatbuf_r+0x1c>
 8012e22:	2340      	movs	r3, #64	; 0x40
 8012e24:	2000      	movs	r0, #0
 8012e26:	6023      	str	r3, [r4, #0]
 8012e28:	b016      	add	sp, #88	; 0x58
 8012e2a:	bd70      	pop	{r4, r5, r6, pc}

08012e2c <__smakebuf_r>:
 8012e2c:	898b      	ldrh	r3, [r1, #12]
 8012e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e30:	079d      	lsls	r5, r3, #30
 8012e32:	4606      	mov	r6, r0
 8012e34:	460c      	mov	r4, r1
 8012e36:	d507      	bpl.n	8012e48 <__smakebuf_r+0x1c>
 8012e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e3c:	6023      	str	r3, [r4, #0]
 8012e3e:	6123      	str	r3, [r4, #16]
 8012e40:	2301      	movs	r3, #1
 8012e42:	6163      	str	r3, [r4, #20]
 8012e44:	b002      	add	sp, #8
 8012e46:	bd70      	pop	{r4, r5, r6, pc}
 8012e48:	ab01      	add	r3, sp, #4
 8012e4a:	466a      	mov	r2, sp
 8012e4c:	f7ff ffca 	bl	8012de4 <__swhatbuf_r>
 8012e50:	9900      	ldr	r1, [sp, #0]
 8012e52:	4605      	mov	r5, r0
 8012e54:	4630      	mov	r0, r6
 8012e56:	f7ff fa2b 	bl	80122b0 <_malloc_r>
 8012e5a:	b948      	cbnz	r0, 8012e70 <__smakebuf_r+0x44>
 8012e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e60:	059a      	lsls	r2, r3, #22
 8012e62:	d4ef      	bmi.n	8012e44 <__smakebuf_r+0x18>
 8012e64:	f023 0303 	bic.w	r3, r3, #3
 8012e68:	f043 0302 	orr.w	r3, r3, #2
 8012e6c:	81a3      	strh	r3, [r4, #12]
 8012e6e:	e7e3      	b.n	8012e38 <__smakebuf_r+0xc>
 8012e70:	4b0d      	ldr	r3, [pc, #52]	; (8012ea8 <__smakebuf_r+0x7c>)
 8012e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e74:	89a3      	ldrh	r3, [r4, #12]
 8012e76:	6020      	str	r0, [r4, #0]
 8012e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e7c:	81a3      	strh	r3, [r4, #12]
 8012e7e:	9b00      	ldr	r3, [sp, #0]
 8012e80:	6163      	str	r3, [r4, #20]
 8012e82:	9b01      	ldr	r3, [sp, #4]
 8012e84:	6120      	str	r0, [r4, #16]
 8012e86:	b15b      	cbz	r3, 8012ea0 <__smakebuf_r+0x74>
 8012e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e8c:	4630      	mov	r0, r6
 8012e8e:	f000 f88d 	bl	8012fac <_isatty_r>
 8012e92:	b128      	cbz	r0, 8012ea0 <__smakebuf_r+0x74>
 8012e94:	89a3      	ldrh	r3, [r4, #12]
 8012e96:	f023 0303 	bic.w	r3, r3, #3
 8012e9a:	f043 0301 	orr.w	r3, r3, #1
 8012e9e:	81a3      	strh	r3, [r4, #12]
 8012ea0:	89a0      	ldrh	r0, [r4, #12]
 8012ea2:	4305      	orrs	r5, r0
 8012ea4:	81a5      	strh	r5, [r4, #12]
 8012ea6:	e7cd      	b.n	8012e44 <__smakebuf_r+0x18>
 8012ea8:	08012109 	.word	0x08012109

08012eac <__malloc_lock>:
 8012eac:	4801      	ldr	r0, [pc, #4]	; (8012eb4 <__malloc_lock+0x8>)
 8012eae:	f7ff b9fd 	b.w	80122ac <__retarget_lock_acquire_recursive>
 8012eb2:	bf00      	nop
 8012eb4:	240026b4 	.word	0x240026b4

08012eb8 <__malloc_unlock>:
 8012eb8:	4801      	ldr	r0, [pc, #4]	; (8012ec0 <__malloc_unlock+0x8>)
 8012eba:	f7ff b9f8 	b.w	80122ae <__retarget_lock_release_recursive>
 8012ebe:	bf00      	nop
 8012ec0:	240026b4 	.word	0x240026b4

08012ec4 <_free_r>:
 8012ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ec6:	2900      	cmp	r1, #0
 8012ec8:	d048      	beq.n	8012f5c <_free_r+0x98>
 8012eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ece:	9001      	str	r0, [sp, #4]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8012ed6:	bfb8      	it	lt
 8012ed8:	18e4      	addlt	r4, r4, r3
 8012eda:	f7ff ffe7 	bl	8012eac <__malloc_lock>
 8012ede:	4a20      	ldr	r2, [pc, #128]	; (8012f60 <_free_r+0x9c>)
 8012ee0:	9801      	ldr	r0, [sp, #4]
 8012ee2:	6813      	ldr	r3, [r2, #0]
 8012ee4:	4615      	mov	r5, r2
 8012ee6:	b933      	cbnz	r3, 8012ef6 <_free_r+0x32>
 8012ee8:	6063      	str	r3, [r4, #4]
 8012eea:	6014      	str	r4, [r2, #0]
 8012eec:	b003      	add	sp, #12
 8012eee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ef2:	f7ff bfe1 	b.w	8012eb8 <__malloc_unlock>
 8012ef6:	42a3      	cmp	r3, r4
 8012ef8:	d90b      	bls.n	8012f12 <_free_r+0x4e>
 8012efa:	6821      	ldr	r1, [r4, #0]
 8012efc:	1862      	adds	r2, r4, r1
 8012efe:	4293      	cmp	r3, r2
 8012f00:	bf04      	itt	eq
 8012f02:	681a      	ldreq	r2, [r3, #0]
 8012f04:	685b      	ldreq	r3, [r3, #4]
 8012f06:	6063      	str	r3, [r4, #4]
 8012f08:	bf04      	itt	eq
 8012f0a:	1852      	addeq	r2, r2, r1
 8012f0c:	6022      	streq	r2, [r4, #0]
 8012f0e:	602c      	str	r4, [r5, #0]
 8012f10:	e7ec      	b.n	8012eec <_free_r+0x28>
 8012f12:	461a      	mov	r2, r3
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	b10b      	cbz	r3, 8012f1c <_free_r+0x58>
 8012f18:	42a3      	cmp	r3, r4
 8012f1a:	d9fa      	bls.n	8012f12 <_free_r+0x4e>
 8012f1c:	6811      	ldr	r1, [r2, #0]
 8012f1e:	1855      	adds	r5, r2, r1
 8012f20:	42a5      	cmp	r5, r4
 8012f22:	d10b      	bne.n	8012f3c <_free_r+0x78>
 8012f24:	6824      	ldr	r4, [r4, #0]
 8012f26:	4421      	add	r1, r4
 8012f28:	1854      	adds	r4, r2, r1
 8012f2a:	42a3      	cmp	r3, r4
 8012f2c:	6011      	str	r1, [r2, #0]
 8012f2e:	d1dd      	bne.n	8012eec <_free_r+0x28>
 8012f30:	681c      	ldr	r4, [r3, #0]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	6053      	str	r3, [r2, #4]
 8012f36:	4421      	add	r1, r4
 8012f38:	6011      	str	r1, [r2, #0]
 8012f3a:	e7d7      	b.n	8012eec <_free_r+0x28>
 8012f3c:	d902      	bls.n	8012f44 <_free_r+0x80>
 8012f3e:	230c      	movs	r3, #12
 8012f40:	6003      	str	r3, [r0, #0]
 8012f42:	e7d3      	b.n	8012eec <_free_r+0x28>
 8012f44:	6825      	ldr	r5, [r4, #0]
 8012f46:	1961      	adds	r1, r4, r5
 8012f48:	428b      	cmp	r3, r1
 8012f4a:	bf04      	itt	eq
 8012f4c:	6819      	ldreq	r1, [r3, #0]
 8012f4e:	685b      	ldreq	r3, [r3, #4]
 8012f50:	6063      	str	r3, [r4, #4]
 8012f52:	bf04      	itt	eq
 8012f54:	1949      	addeq	r1, r1, r5
 8012f56:	6021      	streq	r1, [r4, #0]
 8012f58:	6054      	str	r4, [r2, #4]
 8012f5a:	e7c7      	b.n	8012eec <_free_r+0x28>
 8012f5c:	b003      	add	sp, #12
 8012f5e:	bd30      	pop	{r4, r5, pc}
 8012f60:	24000494 	.word	0x24000494

08012f64 <_read_r>:
 8012f64:	b538      	push	{r3, r4, r5, lr}
 8012f66:	4d07      	ldr	r5, [pc, #28]	; (8012f84 <_read_r+0x20>)
 8012f68:	4604      	mov	r4, r0
 8012f6a:	4608      	mov	r0, r1
 8012f6c:	4611      	mov	r1, r2
 8012f6e:	2200      	movs	r2, #0
 8012f70:	602a      	str	r2, [r5, #0]
 8012f72:	461a      	mov	r2, r3
 8012f74:	f7ef fc24 	bl	80027c0 <_read>
 8012f78:	1c43      	adds	r3, r0, #1
 8012f7a:	d102      	bne.n	8012f82 <_read_r+0x1e>
 8012f7c:	682b      	ldr	r3, [r5, #0]
 8012f7e:	b103      	cbz	r3, 8012f82 <_read_r+0x1e>
 8012f80:	6023      	str	r3, [r4, #0]
 8012f82:	bd38      	pop	{r3, r4, r5, pc}
 8012f84:	240026bc 	.word	0x240026bc

08012f88 <_fstat_r>:
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	4d07      	ldr	r5, [pc, #28]	; (8012fa8 <_fstat_r+0x20>)
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	4604      	mov	r4, r0
 8012f90:	4608      	mov	r0, r1
 8012f92:	4611      	mov	r1, r2
 8012f94:	602b      	str	r3, [r5, #0]
 8012f96:	f7ef fc58 	bl	800284a <_fstat>
 8012f9a:	1c43      	adds	r3, r0, #1
 8012f9c:	d102      	bne.n	8012fa4 <_fstat_r+0x1c>
 8012f9e:	682b      	ldr	r3, [r5, #0]
 8012fa0:	b103      	cbz	r3, 8012fa4 <_fstat_r+0x1c>
 8012fa2:	6023      	str	r3, [r4, #0]
 8012fa4:	bd38      	pop	{r3, r4, r5, pc}
 8012fa6:	bf00      	nop
 8012fa8:	240026bc 	.word	0x240026bc

08012fac <_isatty_r>:
 8012fac:	b538      	push	{r3, r4, r5, lr}
 8012fae:	4d06      	ldr	r5, [pc, #24]	; (8012fc8 <_isatty_r+0x1c>)
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	4608      	mov	r0, r1
 8012fb6:	602b      	str	r3, [r5, #0]
 8012fb8:	f7ef fc57 	bl	800286a <_isatty>
 8012fbc:	1c43      	adds	r3, r0, #1
 8012fbe:	d102      	bne.n	8012fc6 <_isatty_r+0x1a>
 8012fc0:	682b      	ldr	r3, [r5, #0]
 8012fc2:	b103      	cbz	r3, 8012fc6 <_isatty_r+0x1a>
 8012fc4:	6023      	str	r3, [r4, #0]
 8012fc6:	bd38      	pop	{r3, r4, r5, pc}
 8012fc8:	240026bc 	.word	0x240026bc

08012fcc <_init>:
 8012fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fce:	bf00      	nop
 8012fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fd2:	bc08      	pop	{r3}
 8012fd4:	469e      	mov	lr, r3
 8012fd6:	4770      	bx	lr

08012fd8 <_fini>:
 8012fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fda:	bf00      	nop
 8012fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fde:	bc08      	pop	{r3}
 8012fe0:	469e      	mov	lr, r3
 8012fe2:	4770      	bx	lr
